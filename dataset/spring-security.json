[
    {
        "id": 1,
        "code": "\tprotected String getInternalMethod() {\n\t\treturn this.internalMethod;\n\t}",
        "summary_tokens": [
            "optionally",
            "specifies",
            "a",
            "method",
            "of",
            "the",
            "domain",
            "object",
            "that",
            "will",
            "be",
            "used",
            "to",
            "obtain",
            "a",
            "contained",
            "domain",
            "object"
        ]
    },
    {
        "id": 2,
        "code": "\tpublic boolean hasPermission(Authentication authentication, Object domainObject, Object permission) {\n\t\tif (domainObject == null) {\n\t\t\treturn false;\n\t\t}\n\t\tObjectIdentity objectIdentity = this.objectIdentityRetrievalStrategy.getObjectIdentity(domainObject);\n\t\treturn checkPermission(authentication, objectIdentity, permission);\n\t}",
        "summary_tokens": [
            "determines",
            "whether",
            "the",
            "user",
            "has",
            "the",
            "given",
            "permission",
            "s",
            "on",
            "the",
            "domain",
            "object",
            "using",
            "the",
            "acl",
            "configuration"
        ]
    },
    {
        "id": 3,
        "code": "\tpublic boolean supports(Class<?> clazz) {\n\t\treturn true;\n\t}",
        "summary_tokens": [
            "this",
            "implementation",
            "supports",
            "any",
            "type",
            "of",
            "class",
            "because",
            "it",
            "does",
            "not",
            "query",
            "the",
            "presented",
            "secure",
            "object"
        ]
    },
    {
        "id": 4,
        "code": "\tprotected Sid createCurrentUser(Authentication authentication) {\n\t\treturn new PrincipalSid(authentication);\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "principal",
            "like",
            "sid",
            "from",
            "the",
            "authentication",
            "information"
        ]
    },
    {
        "id": 5,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n\t\tAssert.notNull(securityContextHolderStrategy, \"securityContextHolderStrategy cannot be null\");\n\t\tthis.securityContextHolderStrategy = securityContextHolderStrategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 6,
        "code": "\tpublic static String printBinary(int mask, char code) {\n\t\tAssert.doesNotContain(Character.toString(code), Character.toString(Permission.RESERVED_ON),\n\t\t\t\t() -> Permission.RESERVED_ON + \" is a reserved character code\");\n\t\tAssert.doesNotContain(Character.toString(code), Character.toString(Permission.RESERVED_OFF),\n\t\t\t\t() -> Permission.RESERVED_OFF + \" is a reserved character code\");\n\t\treturn printBinary(mask, Permission.RESERVED_ON, Permission.RESERVED_OFF).replace(Permission.RESERVED_ON, code);\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "representation",
            "of",
            "the",
            "active",
            "bits",
            "in",
            "the",
            "presented",
            "mask",
            "with",
            "each",
            "active",
            "bit",
            "being",
            "denoted",
            "by",
            "the",
            "passed",
            "character"
        ]
    },
    {
        "id": 7,
        "code": "\tpublic boolean isGranted(List<Permission> permission, List<Sid> sids, boolean administrativeMode)\n\t\t\tthrows NotFoundException, UnloadedSidException {\n\t\tAssert.notEmpty(permission, \"Permissions required\");\n\t\tAssert.notEmpty(sids, \"SIDs required\");\n\t\tif (!this.isSidLoaded(sids)) {\n\t\t\tthrow new UnloadedSidException(\"ACL was not loaded for one or more SID\");\n\t\t}\n\t\treturn this.permissionGrantingStrategy.isGranted(this, permission, sids, administrativeMode);\n\t}",
        "summary_tokens": [
            "delegates",
            "to",
            "the",
            "permission",
            "granting",
            "strategy"
        ]
    },
    {
        "id": 8,
        "code": "\tprotected void registerPublicPermissions(Class<? extends Permission> clazz) {\n\t\tAssert.notNull(clazz, \"Class required\");\n\t\tField[] fields = clazz.getFields();\n\t\tfor (Field field : fields) {\n\t\t\ttry {\n\t\t\t\tObject fieldValue = field.get(null);\n\t\t\t\tif (Permission.class.isAssignableFrom(fieldValue.getClass())) {\n\t\t\t\t\t\n\t\t\t\t\tPermission perm = (Permission) fieldValue;\n\t\t\t\t\tString permissionName = field.getName();\n\t\t\t\t\tregisterPermission(perm, permissionName);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t}\n\t\t}\n\t}",
        "summary_tokens": [
            "registers",
            "the",
            "public",
            "static",
            "fields",
            "of",
            "type",
            "permission",
            "for",
            "a",
            "give",
            "class"
        ]
    },
    {
        "id": 9,
        "code": "\tprotected boolean isGranted(AccessControlEntry ace, Permission p) {\n\t\treturn ace.getPermission().getMask() == p.getMask();\n\t}",
        "summary_tokens": [
            "compares",
            "an",
            "ace",
            "permission",
            "to",
            "the",
            "given",
            "permission"
        ]
    },
    {
        "id": 10,
        "code": "\tpublic boolean equals(Object obj) {\n\t\tif (obj == null || !(obj instanceof ObjectIdentityImpl)) {\n\t\t\treturn false;\n\t\t}\n\t\tObjectIdentityImpl other = (ObjectIdentityImpl) obj;\n\t\tif (this.identifier instanceof Number && other.identifier instanceof Number) {\n\t\t\t\n\t\t\tif (((Number) this.identifier).longValue() != ((Number) other.identifier).longValue()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t\n\t\t\tif (!this.identifier.equals(other.identifier)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn this.type.equals(other.type);\n\t}",
        "summary_tokens": [
            "important",
            "so",
            "caching",
            "operates",
            "properly"
        ]
    },
    {
        "id": 11,
        "code": "\tpublic int hashCode() {\n\t\tint result = this.type.hashCode();\n\t\tresult = 31 * result + this.identifier.hashCode();\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "important",
            "so",
            "caching",
            "operates",
            "properly"
        ]
    },
    {
        "id": 12,
        "code": "\tSerializable identifierFrom(Serializable identifier, ResultSet resultSet) throws SQLException {\n\t\tif (isString(identifier) && hasValidClassIdType(resultSet)\n\t\t\t\t&& canConvertFromStringTo(classIdTypeFrom(resultSet))) {\n\t\t\treturn convertFromStringTo((String) identifier, classIdTypeFrom(resultSet));\n\t\t}\n\t\t\n\t\treturn convertToLong(identifier);\n\t}",
        "summary_tokens": [
            "converts",
            "the",
            "raw",
            "type",
            "from",
            "the",
            "database",
            "into",
            "the",
            "right",
            "java",
            "type"
        ]
    },
    {
        "id": 13,
        "code": "\tprivate Long convertToLong(Serializable identifier) {\n\t\tif (this.conversionService.canConvert(identifier.getClass(), Long.class)) {\n\t\t\treturn this.conversionService.convert(identifier, Long.class);\n\t\t}\n\t\treturn Long.valueOf(identifier.toString());\n\t}",
        "summary_tokens": [
            "converts",
            "to",
            "a",
            "long",
            "attempting",
            "to",
            "use",
            "the",
            "conversion",
            "service",
            "if",
            "available"
        ]
    },
    {
        "id": 14,
        "code": "\tprivate void lookupPrimaryKeys(final Map<Serializable, Acl> acls, final Set<Long> findNow, final List<Sid> sids) {\n\t\tAssert.notNull(acls, \"ACLs are required\");\n\t\tAssert.notEmpty(findNow, \"Items to find now required\");\n\t\tString sql = computeRepeatingSql(this.lookupPrimaryKeysWhereClause, findNow.size());\n\t\tSet<Long> parentsToLookup = this.jdbcTemplate.query(sql, (ps) -> setKeys(ps, findNow),\n\t\t\t\tnew ProcessResultSet(acls, sids));\n\t\t\n\t\t\n\t\tif (parentsToLookup.size() > 0) {\n\t\t\tlookupPrimaryKeys(acls, parentsToLookup, sids);\n\t\t}\n\t}",
        "summary_tokens": [
            "locates",
            "the",
            "primary",
            "key",
            "ids",
            "specified",
            "in",
            "find",
            "now",
            "adding",
            "acl",
            "impl",
            "instances",
            "with",
            "stub",
            "acl",
            "parents",
            "to",
            "the",
            "acls",
            "map"
        ]
    },
    {
        "id": 15,
        "code": "\tprivate Map<ObjectIdentity, Acl> lookupObjectIdentities(final Collection<ObjectIdentity> objectIdentities,\n\t\t\tList<Sid> sids) {\n\t\tAssert.notEmpty(objectIdentities, \"Must provide identities to lookup\");\n\n\t\t\n\t\tMap<Serializable, Acl> acls = new HashMap<>();\n\n\t\t\n\t\t\n\t\tString sql = computeRepeatingSql(this.lookupObjectIdentitiesWhereClause, objectIdentities.size());\n\n\t\tSet<Long> parentsToLookup = this.jdbcTemplate.query(sql,\n\t\t\t\t(ps) -> setupLookupObjectIdentitiesStatement(ps, objectIdentities), new ProcessResultSet(acls, sids));\n\n\t\t\n\t\t\n\t\tif (parentsToLookup.size() > 0) {\n\t\t\tlookupPrimaryKeys(acls, parentsToLookup, sids);\n\t\t}\n\n\t\t\n\t\tMap<ObjectIdentity, Acl> resultMap = new HashMap<>();\n\t\tfor (Acl inputAcl : acls.values()) {\n\t\t\tAssert.isInstanceOf(AclImpl.class, inputAcl, \"Map should have contained an AclImpl\");\n\t\t\tAssert.isInstanceOf(Long.class, ((AclImpl) inputAcl).getId(), \"Acl.getId() must be Long\");\n\t\t\tAcl result = convert(acls, (Long) ((AclImpl) inputAcl).getId());\n\t\t\tresultMap.put(result.getObjectIdentity(), result);\n\t\t}\n\n\t\treturn resultMap;\n\t}",
        "summary_tokens": [
            "looks",
            "up",
            "a",
            "batch",
            "of",
            "code",
            "object",
            "identity",
            "code",
            "s",
            "directly",
            "from",
            "the",
            "database"
        ]
    },
    {
        "id": 16,
        "code": "\tprivate AclImpl convert(Map<Serializable, Acl> inputMap, Long currentIdentity) {\n\t\tAssert.notEmpty(inputMap, \"InputMap required\");\n\t\tAssert.notNull(currentIdentity, \"CurrentIdentity required\");\n\n\t\t\n\t\tAcl uncastAcl = inputMap.get(currentIdentity);\n\t\tAssert.isInstanceOf(AclImpl.class, uncastAcl, \"The inputMap contained a non-AclImpl\");\n\n\t\tAclImpl inputAcl = (AclImpl) uncastAcl;\n\n\t\tAcl parent = inputAcl.getParentAcl();\n\n\t\tif ((parent != null) && parent instanceof StubAclParent) {\n\t\t\t\n\t\t\tStubAclParent stubAclParent = (StubAclParent) parent;\n\t\t\tparent = convert(inputMap, stubAclParent.getId());\n\t\t}\n\n\t\t\n\t\tAclImpl result = new AclImpl(inputAcl.getObjectIdentity(), inputAcl.getId(), this.aclAuthorizationStrategy,\n\t\t\t\tthis.grantingStrategy, parent, null, inputAcl.isEntriesInheriting(), inputAcl.getOwner());\n\n\t\t\n\n\t\t\n\t\tList<AccessControlEntryImpl> aces = readAces(inputAcl);\n\n\t\t\n\t\tList<AccessControlEntryImpl> acesNew = new ArrayList<>();\n\n\t\t\n\t\t\n\t\t\n\t\tfor (AccessControlEntryImpl ace : aces) {\n\t\t\tsetAclOnAce(ace, result);\n\t\t\tacesNew.add(ace);\n\t\t}\n\n\t\t\n\t\t\n\t\tsetAces(result, acesNew);\n\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "the",
            "final",
            "phase",
            "of",
            "converting",
            "the",
            "code",
            "map",
            "code",
            "of",
            "code",
            "acl",
            "impl",
            "code",
            "instances",
            "which",
            "contain",
            "code",
            "stub",
            "acl",
            "parent",
            "code",
            "s",
            "into",
            "proper",
            "valid",
            "code",
            "acl",
            "impl",
            "code",
            "s",
            "with",
            "correct",
            "acl",
            "parents"
        ]
    },
    {
        "id": 17,
        "code": "\tprotected Sid createSid(boolean isPrincipal, String sid) {\n\t\tif (isPrincipal) {\n\t\t\treturn new PrincipalSid(sid);\n\t\t}\n\t\treturn new GrantedAuthoritySid(sid);\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "particular",
            "implementation",
            "of",
            "sid",
            "depending",
            "on",
            "the",
            "arguments"
        ]
    },
    {
        "id": 18,
        "code": "\tpublic final void setPermissionFactory(PermissionFactory permissionFactory) {\n\t\tthis.permissionFactory = permissionFactory;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "permission",
            "factory",
            "instance",
            "which",
            "will",
            "be",
            "used",
            "to",
            "convert",
            "loaded",
            "permission",
            "data",
            "values",
            "to",
            "permission",
            "s"
        ]
    },
    {
        "id": 19,
        "code": "\tpublic final void setSelectClause(String selectClause) {\n\t\tthis.selectClause = selectClause;\n\t}",
        "summary_tokens": [
            "the",
            "sql",
            "for",
            "the",
            "select",
            "clause"
        ]
    },
    {
        "id": 20,
        "code": "\tpublic final void setLookupPrimaryKeysWhereClause(String lookupPrimaryKeysWhereClause) {\n\t\tthis.lookupPrimaryKeysWhereClause = lookupPrimaryKeysWhereClause;\n\t}",
        "summary_tokens": [
            "the",
            "sql",
            "for",
            "the",
            "where",
            "clause",
            "used",
            "in",
            "the",
            "tt",
            "lookup",
            "primary",
            "key",
            "tt",
            "method"
        ]
    },
    {
        "id": 21,
        "code": "\tpublic final void setLookupObjectIdentitiesWhereClause(String lookupObjectIdentitiesWhereClause) {\n\t\tthis.lookupObjectIdentitiesWhereClause = lookupObjectIdentitiesWhereClause;\n\t}",
        "summary_tokens": [
            "the",
            "sql",
            "for",
            "the",
            "where",
            "clause",
            "used",
            "in",
            "the",
            "tt",
            "lookup",
            "object",
            "identities",
            "tt",
            "method"
        ]
    },
    {
        "id": 22,
        "code": "\tpublic final void setOrderByClause(String orderByClause) {\n\t\tthis.orderByClause = orderByClause;\n\t}",
        "summary_tokens": [
            "the",
            "sql",
            "for",
            "the",
            "order",
            "by",
            "clause",
            "used",
            "in",
            "both",
            "queries"
        ]
    },
    {
        "id": 23,
        "code": "\tpublic void setFindChildrenQuery(String findChildrenSql) {\n\t\tthis.findChildrenSql = findChildrenSql;\n\t}",
        "summary_tokens": [
            "allows",
            "customization",
            "of",
            "the",
            "sql",
            "query",
            "used",
            "to",
            "find",
            "child",
            "object",
            "identities"
        ]
    },
    {
        "id": 24,
        "code": "\tprotected void createEntries(final MutableAcl acl) {\n\t\tif (acl.getEntries().isEmpty()) {\n\t\t\treturn;\n\t\t}\n\t\tthis.jdbcOperations.batchUpdate(this.insertEntry, new BatchPreparedStatementSetter() {\n\n\t\t\t@Override\n\t\t\tpublic int getBatchSize() {\n\t\t\t\treturn acl.getEntries().size();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void setValues(PreparedStatement stmt, int i) throws SQLException {\n\t\t\t\tAccessControlEntry entry_ = acl.getEntries().get(i);\n\t\t\t\tAssert.isTrue(entry_ instanceof AccessControlEntryImpl, \"Unknown ACE class\");\n\t\t\t\tAccessControlEntryImpl entry = (AccessControlEntryImpl) entry_;\n\n\t\t\t\tstmt.setLong(1, (Long) acl.getId());\n\t\t\t\tstmt.setInt(2, i);\n\t\t\t\tstmt.setLong(3, createOrRetrieveSidPrimaryKey(entry.getSid(), true));\n\t\t\t\tstmt.setInt(4, entry.getPermission().getMask());\n\t\t\t\tstmt.setBoolean(5, entry.isGranting());\n\t\t\t\tstmt.setBoolean(6, entry.isAuditSuccess());\n\t\t\t\tstmt.setBoolean(7, entry.isAuditFailure());\n\t\t\t}\n\n\t\t});\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "new",
            "row",
            "in",
            "acl",
            "entry",
            "for",
            "every",
            "ace",
            "defined",
            "in",
            "the",
            "passed",
            "mutable",
            "acl",
            "object"
        ]
    },
    {
        "id": 25,
        "code": "\tprotected void createObjectIdentity(ObjectIdentity object, Sid owner) {\n\t\tLong sidId = createOrRetrieveSidPrimaryKey(owner, true);\n\t\tLong classId = createOrRetrieveClassPrimaryKey(object.getType(), true, object.getIdentifier().getClass());\n\t\tthis.jdbcOperations.update(this.insertObjectIdentity, classId, object.getIdentifier().toString(), sidId,\n\t\t\t\tBoolean.TRUE);\n\t}",
        "summary_tokens": [
            "creates",
            "an",
            "entry",
            "in",
            "the",
            "acl",
            "object",
            "identity",
            "table",
            "for",
            "the",
            "passed",
            "object",
            "identity"
        ]
    },
    {
        "id": 26,
        "code": "\tprotected Long createOrRetrieveClassPrimaryKey(String type, boolean allowCreate, Class idType) {\n\t\tList<Long> classIds = this.jdbcOperations.queryForList(this.selectClassPrimaryKey, new Object[] { type },\n\t\t\t\tLong.class);\n\n\t\tif (!classIds.isEmpty()) {\n\t\t\treturn classIds.get(0);\n\t\t}\n\n\t\tif (allowCreate) {\n\t\t\tif (!isAclClassIdSupported()) {\n\t\t\t\tthis.jdbcOperations.update(this.insertClass, type);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.jdbcOperations.update(this.insertClass, type, idType.getCanonicalName());\n\t\t\t}\n\t\t\tAssert.isTrue(TransactionSynchronizationManager.isSynchronizationActive(), \"Transaction must be running\");\n\t\t\treturn this.jdbcOperations.queryForObject(this.classIdentityQuery, Long.class);\n\t\t}\n\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "retrieves",
            "the",
            "primary",
            "key",
            "from",
            "acl",
            "class",
            "creating",
            "a",
            "new",
            "row",
            "if",
            "needed",
            "and",
            "the",
            "allow",
            "create",
            "property",
            "is",
            "true"
        ]
    },
    {
        "id": 27,
        "code": "\tprotected Long createOrRetrieveSidPrimaryKey(String sidName, boolean sidIsPrincipal, boolean allowCreate) {\n\t\tList<Long> sidIds = this.jdbcOperations.queryForList(this.selectSidPrimaryKey,\n\t\t\t\tnew Object[] { sidIsPrincipal, sidName }, Long.class);\n\t\tif (!sidIds.isEmpty()) {\n\t\t\treturn sidIds.get(0);\n\t\t}\n\t\tif (allowCreate) {\n\t\t\tthis.jdbcOperations.update(this.insertSid, sidIsPrincipal, sidName);\n\t\t\tAssert.isTrue(TransactionSynchronizationManager.isSynchronizationActive(), \"Transaction must be running\");\n\t\t\treturn this.jdbcOperations.queryForObject(this.sidIdentityQuery, Long.class);\n\t\t}\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "retrieves",
            "the",
            "primary",
            "key",
            "from",
            "acl",
            "sid",
            "creating",
            "a",
            "new",
            "row",
            "if",
            "needed",
            "and",
            "the",
            "allow",
            "create",
            "property",
            "is",
            "true"
        ]
    },
    {
        "id": 28,
        "code": "\tprotected void deleteEntries(Long oidPrimaryKey) {\n\t\tthis.jdbcOperations.update(this.deleteEntryByObjectIdentityForeignKey, oidPrimaryKey);\n\t}",
        "summary_tokens": [
            "deletes",
            "all",
            "aces",
            "defined",
            "in",
            "the",
            "acl",
            "entry",
            "table",
            "belonging",
            "to",
            "the",
            "presented",
            "object",
            "identity",
            "primary",
            "key"
        ]
    },
    {
        "id": 29,
        "code": "\tprotected void deleteObjectIdentity(Long oidPrimaryKey) {\n\t\t\n\t\tthis.jdbcOperations.update(this.deleteObjectIdentityByPrimaryKey, oidPrimaryKey);\n\t}",
        "summary_tokens": [
            "deletes",
            "a",
            "single",
            "row",
            "from",
            "acl",
            "object",
            "identity",
            "that",
            "is",
            "associated",
            "with",
            "the",
            "presented",
            "object",
            "identity",
            "primary",
            "key"
        ]
    },
    {
        "id": 30,
        "code": "\tprotected Long retrieveObjectIdentityPrimaryKey(ObjectIdentity oid) {\n\t\ttry {\n\t\t\treturn this.jdbcOperations.queryForObject(this.selectObjectIdentityPrimaryKey, Long.class, oid.getType(),\n\t\t\t\t\toid.getIdentifier().toString());\n\t\t}\n\t\tcatch (DataAccessException notFound) {\n\t\t\treturn null;\n\t\t}\n\t}",
        "summary_tokens": [
            "retrieves",
            "the",
            "primary",
            "key",
            "from",
            "the",
            "acl",
            "object",
            "identity",
            "table",
            "for",
            "the",
            "passed",
            "object",
            "identity"
        ]
    },
    {
        "id": 31,
        "code": "\tpublic MutableAcl updateAcl(MutableAcl acl) throws NotFoundException {\n\t\tAssert.notNull(acl.getId(), \"Object Identity doesn't provide an identifier\");\n\n\t\t\n\t\tdeleteEntries(retrieveObjectIdentityPrimaryKey(acl.getObjectIdentity()));\n\n\t\t\n\t\tcreateEntries(acl);\n\n\t\t\n\t\tupdateObjectIdentity(acl);\n\n\t\t\n\t\tclearCacheIncludingChildren(acl.getObjectIdentity());\n\n\t\t\n\t\t\n\t\treturn (MutableAcl) super.readAclById(acl.getObjectIdentity());\n\t}",
        "summary_tokens": [
            "this",
            "implementation",
            "will",
            "simply",
            "delete",
            "all",
            "aces",
            "in",
            "the",
            "database",
            "and",
            "recreate",
            "them",
            "on",
            "each",
            "invocation",
            "of",
            "this",
            "method"
        ]
    },
    {
        "id": 32,
        "code": "\tprotected void updateObjectIdentity(MutableAcl acl) {\n\t\tLong parentId = null;\n\t\tif (acl.getParentAcl() != null) {\n\t\t\tAssert.isInstanceOf(ObjectIdentityImpl.class, acl.getParentAcl().getObjectIdentity(),\n\t\t\t\t\t\"Implementation only supports ObjectIdentityImpl\");\n\t\t\tObjectIdentityImpl oii = (ObjectIdentityImpl) acl.getParentAcl().getObjectIdentity();\n\t\t\tparentId = retrieveObjectIdentityPrimaryKey(oii);\n\t\t}\n\t\tAssert.notNull(acl.getOwner(), \"Owner is required in this implementation\");\n\t\tLong ownerSid = createOrRetrieveSidPrimaryKey(acl.getOwner(), true);\n\t\tint count = this.jdbcOperations.update(this.updateObjectIdentity, parentId, ownerSid, acl.isEntriesInheriting(),\n\t\t\t\tacl.getId());\n\t\tif (count != 1) {\n\t\t\tthrow new NotFoundException(\"Unable to locate ACL to update\");\n\t\t}\n\t}",
        "summary_tokens": [
            "updates",
            "an",
            "existing",
            "acl",
            "object",
            "identity",
            "row",
            "with",
            "new",
            "information",
            "presented",
            "in",
            "the",
            "passed",
            "mutable",
            "acl",
            "object"
        ]
    },
    {
        "id": 33,
        "code": "\tpublic void setClassIdentityQuery(String classIdentityQuery) {\n\t\tAssert.hasText(classIdentityQuery, \"New classIdentityQuery query is required\");\n\t\tthis.classIdentityQuery = classIdentityQuery;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "query",
            "that",
            "will",
            "be",
            "used",
            "to",
            "retrieve",
            "the",
            "identity",
            "of",
            "a",
            "newly",
            "created",
            "row",
            "in",
            "the",
            "tt",
            "acl",
            "class",
            "tt",
            "table"
        ]
    },
    {
        "id": 34,
        "code": "\tpublic void setSidIdentityQuery(String sidIdentityQuery) {\n\t\tAssert.hasText(sidIdentityQuery, \"New sidIdentityQuery query is required\");\n\t\tthis.sidIdentityQuery = sidIdentityQuery;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "query",
            "that",
            "will",
            "be",
            "used",
            "to",
            "retrieve",
            "the",
            "identity",
            "of",
            "a",
            "newly",
            "created",
            "row",
            "in",
            "the",
            "tt",
            "acl",
            "sid",
            "tt",
            "table"
        ]
    },
    {
        "id": 35,
        "code": "\tpublic void setForeignKeysInDatabase(boolean foreignKeysInDatabase) {\n\t\tthis.foreignKeysInDatabase = foreignKeysInDatabase;\n\t}",
        "summary_tokens": [
            "foreign",
            "keys",
            "in",
            "database",
            "if",
            "false",
            "this",
            "class",
            "will",
            "perform",
            "additional",
            "fk",
            "constrain",
            "checking",
            "which",
            "may",
            "cause",
            "deadlocks",
            "the",
            "default",
            "is",
            "true",
            "so",
            "deadlocks",
            "are",
            "avoided",
            "but",
            "the",
            "database",
            "is",
            "expected",
            "to",
            "enforce",
            "fks"
        ]
    },
    {
        "id": 36,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n\t\tAssert.notNull(securityContextHolderStrategy, \"securityContextHolderStrategy cannot be null\");\n\t\tthis.securityContextHolderStrategy = securityContextHolderStrategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 37,
        "code": "\tpublic void testReadAllObjectIdentitiesWhenLastElementIsAlreadyCached() {\n\t\tString query = \"INSERT INTO acl_object_identity(ID,OBJECT_ID_CLASS,OBJECT_ID_IDENTITY,PARENT_OBJECT,OWNER_SID,ENTRIES_INHERITING) VALUES (6,2,105,null,1,1);\"\n\t\t\t\t+ \"INSERT INTO acl_object_identity(ID,OBJECT_ID_CLASS,OBJECT_ID_IDENTITY,PARENT_OBJECT,OWNER_SID,ENTRIES_INHERITING) VALUES (7,2,106,6,1,1);\"\n\t\t\t\t+ \"INSERT INTO acl_object_identity(ID,OBJECT_ID_CLASS,OBJECT_ID_IDENTITY,PARENT_OBJECT,OWNER_SID,ENTRIES_INHERITING) VALUES (8,2,107,6,1,1);\"\n\t\t\t\t+ \"INSERT INTO acl_object_identity(ID,OBJECT_ID_CLASS,OBJECT_ID_IDENTITY,PARENT_OBJECT,OWNER_SID,ENTRIES_INHERITING) VALUES (9,2,108,7,1,1);\"\n\t\t\t\t+ \"INSERT INTO acl_entry(ID,ACL_OBJECT_IDENTITY,ACE_ORDER,SID,MASK,GRANTING,AUDIT_SUCCESS,AUDIT_FAILURE) VALUES (7,6,0,1,1,1,0,0)\";\n\t\tgetJdbcTemplate().execute(query);\n\t\tObjectIdentity grandParentOid = new ObjectIdentityImpl(TARGET_CLASS, 104L);\n\t\tObjectIdentity parent1Oid = new ObjectIdentityImpl(TARGET_CLASS, 105L);\n\t\tObjectIdentity parent2Oid = new ObjectIdentityImpl(TARGET_CLASS, 106);\n\t\tObjectIdentity childOid = new ObjectIdentityImpl(TARGET_CLASS, 107);\n\t\t\n\t\t\n\t\t\n\t\tList<Permission> checkPermission = Arrays.asList(BasePermission.READ);\n\t\tList<Sid> sids = Arrays.asList(BEN_SID);\n\t\tList<ObjectIdentity> childOids = Arrays.asList(childOid);\n\t\tthis.strategy.setBatchSize(6);\n\t\tMap<ObjectIdentity, Acl> foundAcls = this.strategy.readAclsById(childOids, sids);\n\t\tAcl foundChildAcl = foundAcls.get(childOid);\n\t\tassertThat(foundChildAcl).isNotNull();\n\t\tassertThat(foundChildAcl.isGranted(checkPermission, sids, false)).isTrue();\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\tList<ObjectIdentity> allOids = Arrays.asList(grandParentOid, parent1Oid, parent2Oid, childOid);\n\t\tfoundAcls = this.strategy.readAclsById(allOids, sids);\n\t\tAcl foundParent2Acl = foundAcls.get(parent2Oid);\n\t\tassertThat(foundParent2Acl).isNotNull();\n\t\tassertThat(foundParent2Acl.isGranted(checkPermission, sids, false)).isTrue();\n\t}",
        "summary_tokens": [
            "test",
            "created",
            "from",
            "sec",
            "0"
        ]
    },
    {
        "id": 38,
        "code": "\tpublic void deleteAclAlsoDeletesChildren() {\n\t\tSecurityContextHolder.getContext().setAuthentication(this.auth);\n\t\tthis.jdbcMutableAclService.createAcl(getTopParentOid());\n\t\tMutableAcl middleParent = this.jdbcMutableAclService.createAcl(getMiddleParentOid());\n\t\tMutableAcl child = this.jdbcMutableAclService.createAcl(getChildOid());\n\t\tchild.setParent(middleParent);\n\t\tthis.jdbcMutableAclService.updateAcl(middleParent);\n\t\tthis.jdbcMutableAclService.updateAcl(child);\n\t\t\n\t\tAcl childAcl = this.jdbcMutableAclService.readAclById(getChildOid());\n\t\tassertThat(childAcl.getParentAcl().getObjectIdentity()).isEqualTo(getMiddleParentOid());\n\t\t\n\t\tthis.jdbcMutableAclService.deleteAcl(getMiddleParentOid(), true);\n\t\tassertThatExceptionOfType(NotFoundException.class)\n\t\t\t\t.isThrownBy(() -> this.jdbcMutableAclService.readAclById(getMiddleParentOid()));\n\t\tassertThatExceptionOfType(NotFoundException.class)\n\t\t\t\t.isThrownBy(() -> this.jdbcMutableAclService.readAclById(getChildOid()));\n\t\tAcl acl = this.jdbcMutableAclService.readAclById(getTopParentOid());\n\t\tassertThat(acl).isNotNull();\n\t\tassertThat(getTopParentOid()).isEqualTo(acl.getObjectIdentity());\n\t}",
        "summary_tokens": [
            "test",
            "method",
            "that",
            "demonstrates",
            "eviction",
            "failure",
            "from",
            "cache",
            "sec",
            "0"
        ]
    },
    {
        "id": 39,
        "code": "\tpublic boolean isMilestoneDueToday(RepositoryRef repositoryRef, String milestoneTitle) {\n\t\tString url = this.baseUrl + \"/repos/\" + repositoryRef.getOwner() + \"/\" + repositoryRef.getName()\n\t\t\t\t+ \"/milestones?per_page=100\";\n\t\tRequest request = new Request.Builder().get().url(url).build();\n\t\ttry {\n\t\t\tResponse response = this.client.newCall(request).execute();\n\t\t\tif (!response.isSuccessful()) {\n\t\t\t\tthrow new RuntimeException(\"Could not find milestone with title \" + milestoneTitle + \" for repository \"\n\t\t\t\t\t\t+ repositoryRef + \". Response \" + response);\n\t\t\t}\n\t\t\tList<Milestone> milestones = this.gson.fromJson(response.body().charStream(),\n\t\t\t\t\tnew TypeToken<List<Milestone>>() {\n\t\t\t\t\t}.getType());\n\t\t\tfor (Milestone milestone : milestones) {\n\t\t\t\tif (milestoneTitle.equals(milestone.getTitle())) {\n\t\t\t\t\tLocalDate today = LocalDate.now();\n\t\t\t\t\treturn milestone.getDueOn() != null && today.compareTo(milestone.getDueOn().toLocalDate()) >= 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (milestones.size() <= 100) {\n\t\t\t\tthrow new RuntimeException(\"Could not find open milestone with title \" + milestoneTitle\n\t\t\t\t\t\t+ \" for repository \" + repositoryRef + \" Got \" + milestones);\n\t\t\t}\n\t\t\tthrow new RuntimeException(\n\t\t\t\t\t\"It is possible there are too many open milestones open (only 100 are supported). Could not find open milestone with title \"\n\t\t\t\t\t\t\t+ milestoneTitle + \" for repository \" + repositoryRef + \" Got \" + milestones);\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new RuntimeException(\n\t\t\t\t\t\"Could not find open milestone with title \" + milestoneTitle + \" for repository \" + repositoryRef,\n\t\t\t\t\te);\n\t\t}\n\t}",
        "summary_tokens": [
            "check",
            "if",
            "the",
            "given",
            "milestone",
            "is",
            "due",
            "today",
            "or",
            "past",
            "due"
        ]
    },
    {
        "id": 40,
        "code": "\tpublic String getNextReleaseMilestone(RepositoryRef repositoryRef, String currentVersion) {\n\t\tPattern snapshotPattern = Pattern.compile(\"^([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+)-SNAPSHOT$\");\n\t\tMatcher snapshotVersion = snapshotPattern.matcher(currentVersion);\n\n\t\tif (snapshotVersion.find()) {\n\t\t\tString patchSegment = snapshotVersion.group(3);\n\t\t\tString currentVersionNoIdentifier = currentVersion.replace(\"-SNAPSHOT\", \"\");\n\t\t\tif (patchSegment.equals(\"0\")) {\n\t\t\t\tString nextPreRelease = getNextPreRelease(repositoryRef, currentVersionNoIdentifier);\n\t\t\t\treturn nextPreRelease != null ? nextPreRelease : currentVersionNoIdentifier;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn currentVersionNoIdentifier;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\"Cannot calculate next release version because the current project version does not conform to the expected format\");\n\t\t}\n\t}",
        "summary_tokens": [
            "calculate",
            "the",
            "next",
            "release",
            "version",
            "based",
            "on",
            "the",
            "current",
            "version"
        ]
    },
    {
        "id": 41,
        "code": "\tprivate String getNextPreRelease(RepositoryRef repositoryRef, String currentVersionNoIdentifier) {\n\t\tString url = this.baseUrl + \"/repos/\" + repositoryRef.getOwner() + \"/\" + repositoryRef.getName()\n\t\t\t\t+ \"/milestones?per_page=100\";\n\t\tRequest request = new Request.Builder().get().url(url).build();\n\t\ttry {\n\t\t\tResponse response = this.client.newCall(request).execute();\n\t\t\tif (!response.isSuccessful()) {\n\t\t\t\tthrow new RuntimeException(\n\t\t\t\t\t\t\"Could not get milestones for repository \" + repositoryRef + \". Response \" + response);\n\t\t\t}\n\t\t\tList<Milestone> milestones = this.gson.fromJson(response.body().charStream(),\n\t\t\t\t\tnew TypeToken<List<Milestone>>() {\n\t\t\t\t\t}.getType());\n\t\t\tOptional<String> nextPreRelease = milestones.stream().map(Milestone::getTitle)\n\t\t\t\t\t.filter(m -> m.startsWith(currentVersionNoIdentifier + \"-\"))\n\t\t\t\t\t.min((m1, m2) -> {\n\t\t\t\t\t\tPattern preReleasePattern = Pattern.compile(\"^.*-([A-Z]+)([0-9]+)$\");\n\t\t\t\t\t\tMatcher matcher1 = preReleasePattern.matcher(m1);\n\t\t\t\t\t\tMatcher matcher2 = preReleasePattern.matcher(m2);\n\t\t\t\t\t\tmatcher1.find();\n\t\t\t\t\t\tmatcher2.find();\n\t\t\t\t\t\tif (!matcher1.group(1).equals(matcher2.group(1))) {\n\t\t\t\t\t\t\treturn m1.compareTo(m2);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\treturn Integer.valueOf(matcher1.group(2)).compareTo(Integer.valueOf(matcher2.group(2)));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\treturn nextPreRelease.orElse(null);\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new RuntimeException(\"Could not find open milestones with for repository \" + repositoryRef, e);\n\t\t}\n\t}",
        "summary_tokens": [
            "calculate",
            "the",
            "next",
            "pre",
            "release",
            "version",
            "milestone",
            "or",
            "release",
            "candidate",
            "based",
            "on",
            "the",
            "current",
            "version"
        ]
    },
    {
        "id": 42,
        "code": "\tpublic Map<String, LocalDate> getTrainDates() {\n\t\tMap<String, LocalDate> releaseDates = new LinkedHashMap<>();\n\t\tswitch (this.releaseTrainSpec.getTrain()) {\n\t\t\tcase ONE:\n\t\t\t\taddTrainDate(releaseDates, \"M1\", Month.JANUARY);\n\t\t\t\taddTrainDate(releaseDates, \"M2\", Month.FEBRUARY);\n\t\t\t\taddTrainDate(releaseDates, \"M3\", Month.MARCH);\n\t\t\t\taddTrainDate(releaseDates, \"RC1\", Month.APRIL);\n\t\t\t\taddTrainDate(releaseDates, null, Month.MAY);\n\t\t\t\tbreak;\n\t\t\tcase TWO:\n\t\t\t\taddTrainDate(releaseDates, \"M1\", Month.JULY);\n\t\t\t\taddTrainDate(releaseDates, \"M2\", Month.AUGUST);\n\t\t\t\taddTrainDate(releaseDates, \"M3\", Month.SEPTEMBER);\n\t\t\t\taddTrainDate(releaseDates, \"RC1\", Month.OCTOBER);\n\t\t\t\taddTrainDate(releaseDates, null, Month.NOVEMBER);\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn releaseDates;\n\t}",
        "summary_tokens": [
            "calculate",
            "release",
            "train",
            "dates",
            "based",
            "on",
            "the",
            "release",
            "train",
            "specification"
        ]
    },
    {
        "id": 43,
        "code": "\tpublic boolean isTrainDate(String version, LocalDate expectedDate) {\n\t\treturn expectedDate.isEqual(getTrainDates().get(version));\n\t}",
        "summary_tokens": [
            "determine",
            "if",
            "a",
            "given",
            "date",
            "matches",
            "the",
            "due",
            "date",
            "of",
            "given",
            "version"
        ]
    },
    {
        "id": 44,
        "code": "\tpublic LocalDate getNextReleaseDate(LocalDate startDate) {\n\t\tLocalDate trainDate;\n\t\tLocalDate currentDate = startDate;\n\t\tdo {\n\t\t\ttrainDate = calculateReleaseDate(\n\t\t\t\t\tYear.of(currentDate.getYear()),\n\t\t\t\t\tcurrentDate.getMonth(),\n\t\t\t\t\tthis.releaseTrainSpec.getDayOfWeek().getDayOfWeek(),\n\t\t\t\t\tthis.releaseTrainSpec.getWeekOfMonth().getDayOffset()\n\t\t\t);\n\t\t\tcurrentDate = currentDate.plusMonths(1);\n\t\t} while (!trainDate.isAfter(startDate) || trainDate.getMonthValue() % 2 != 0);\n\n\t\treturn trainDate;\n\t}",
        "summary_tokens": [
            "calculate",
            "the",
            "next",
            "release",
            "date",
            "following",
            "the",
            "given",
            "date"
        ]
    },
    {
        "id": 45,
        "code": "\tpublic void dispatchWorkflow(RepositoryRef repository, String workflowId, WorkflowDispatch workflowDispatch) {\n\t\tString url = this.baseUrl + \"/repos/\" + repository.getOwner() + \"/\" + repository.getName() + \"/actions/workflows/\" + workflowId + \"/dispatches\";\n\t\tString json = this.gson.toJson(workflowDispatch);\n\t\tRequestBody body = RequestBody.create(MediaType.parse(\"application/json\"), json);\n\t\tRequest request = new Request.Builder().url(url).post(body).build();\n\t\ttry {\n\t\t\tResponse response = this.client.newCall(request).execute();\n\t\t\tif (!response.isSuccessful()) {\n\t\t\t\tthrow new RuntimeException(String.format(\"Could not create workflow dispatch %s for repository %s/%s. Got response %s\",\n\t\t\t\t\t\tworkflowId, repository.getOwner(), repository.getName(), response));\n\t\t\t}\n\t\t} catch (IOException ex) {\n\t\t\tthrow new RuntimeException(String.format(\"Could not create workflow dispatch %s for repository %s/%s\",\n\t\t\t\t\tworkflowId, repository.getOwner(), repository.getName()), ex);\n\t\t}\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "workflow",
            "dispatch",
            "event"
        ]
    },
    {
        "id": 46,
        "code": "\tpublic void publishRelease(RepositoryRef repository, Release release) {\n\t\tString url = this.baseUrl + \"/repos/\" + repository.getOwner() + \"/\" + repository.getName() + \"/releases\";\n\t\tString json = this.gson.toJson(release);\n\t\tRequestBody body = RequestBody.create(MediaType.parse(\"application/json\"), json);\n\t\tRequest request = new Request.Builder().url(url).post(body).build();\n\t\ttry {\n\t\t\tResponse response = this.httpClient.newCall(request).execute();\n\t\t\tif (!response.isSuccessful()) {\n\t\t\t\tthrow new RuntimeException(String.format(\"Could not create release %s for repository %s/%s. Got response %s\",\n\t\t\t\t\t\trelease.getName(), repository.getOwner(), repository.getName(), response));\n\t\t\t}\n\t\t} catch (IOException ex) {\n\t\t\tthrow new RuntimeException(String.format(\"Could not create release %s for repository %s/%s\",\n\t\t\t\t\trelease.getName(), repository.getOwner(), repository.getName()), ex);\n\t\t}\n\t}",
        "summary_tokens": [
            "publish",
            "a",
            "release",
            "with",
            "no",
            "binary",
            "attachments"
        ]
    },
    {
        "id": 47,
        "code": "\tstatic <T> Customizer<T> withDefaults() {\n\t\treturn (t) -> {\n\t\t};\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "customizer",
            "that",
            "does",
            "not",
            "alter",
            "the",
            "input",
            "argument"
        ]
    },
    {
        "id": 48,
        "code": "\tprivate boolean namespaceMatchesVersion(Element element) {\n\t\treturn matchesVersionInternal(element)\n\t\t\t\t&& matchesVersionInternal(element.getOwnerDocument().getDocumentElement());\n\t}",
        "summary_tokens": [
            "check",
            "that",
            "the",
            "schema",
            "location",
            "declared",
            "in",
            "the",
            "source",
            "file",
            "being",
            "parsed",
            "matches",
            "the",
            "spring",
            "security",
            "version"
        ]
    },
    {
        "id": 49,
        "code": "\tpublic O getOrBuild() {\n\t\tif (!isUnbuilt()) {\n\t\t\treturn getObject();\n\t\t}\n\t\ttry {\n\t\t\treturn build();\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tthis.logger.debug(\"Failed to perform build. Returning null\", ex);\n\t\t\treturn null;\n\t\t}\n\t}",
        "summary_tokens": [
            "similar",
            "to",
            "build",
            "and",
            "get",
            "object",
            "but",
            "checks",
            "the",
            "state",
            "to",
            "determine",
            "if",
            "build",
            "needs",
            "to",
            "be",
            "called",
            "first"
        ]
    },
    {
        "id": 50,
        "code": "\tpublic <C extends SecurityConfigurer<O, B>> C apply(C configurer) throws Exception {\n\t\tadd(configurer);\n\t\treturn configurer;\n\t}",
        "summary_tokens": [
            "applies",
            "a",
            "security",
            "configurer",
            "to",
            "this",
            "security",
            "builder",
            "overriding",
            "any",
            "security",
            "configurer",
            "of",
            "the",
            "exact",
            "same",
            "class"
        ]
    },
    {
        "id": 51,
        "code": "\tpublic <C> void setSharedObject(Class<C> sharedType, C object) {\n\t\tthis.sharedObjects.put(sharedType, object);\n\t}",
        "summary_tokens": [
            "sets",
            "an",
            "object",
            "that",
            "is",
            "shared",
            "by",
            "multiple",
            "security",
            "configurer"
        ]
    },
    {
        "id": 52,
        "code": "\tpublic <C> C getSharedObject(Class<C> sharedType) {\n\t\treturn (C) this.sharedObjects.get(sharedType);\n\t}",
        "summary_tokens": [
            "gets",
            "a",
            "shared",
            "object"
        ]
    },
    {
        "id": 53,
        "code": "\tpublic Map<Class<?>, Object> getSharedObjects() {\n\t\treturn Collections.unmodifiableMap(this.sharedObjects);\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "shared",
            "objects",
            "the",
            "shared",
            "objects"
        ]
    },
    {
        "id": 54,
        "code": "\tprivate <C extends SecurityConfigurer<O, B>> void add(C configurer) {\n\t\tAssert.notNull(configurer, \"configurer cannot be null\");\n\t\tClass<? extends SecurityConfigurer<O, B>> clazz = (Class<? extends SecurityConfigurer<O, B>>) configurer\n\t\t\t\t.getClass();\n\t\tsynchronized (this.configurers) {\n\t\t\tif (this.buildState.isConfigured()) {\n\t\t\t\tthrow new IllegalStateException(\"Cannot apply \" + configurer + \" to already built object\");\n\t\t\t}\n\t\t\tList<SecurityConfigurer<O, B>> configs = null;\n\t\t\tif (this.allowConfigurersOfSameType) {\n\t\t\t\tconfigs = this.configurers.get(clazz);\n\t\t\t}\n\t\t\tconfigs = (configs != null) ? configs : new ArrayList<>(1);\n\t\t\tconfigs.add(configurer);\n\t\t\tthis.configurers.put(clazz, configs);\n\t\t\tif (this.buildState.isInitializing()) {\n\t\t\t\tthis.configurersAddedInInitializing.add(configurer);\n\t\t\t}\n\t\t}\n\t}",
        "summary_tokens": [
            "adds",
            "security",
            "configurer",
            "ensuring",
            "that",
            "it",
            "is",
            "allowed",
            "and",
            "invoking",
            "security",
            "configurer",
            "init",
            "security",
            "builder",
            "immediately",
            "if",
            "necessary"
        ]
    },
    {
        "id": 55,
        "code": "\tpublic <C extends SecurityConfigurer<O, B>> List<C> getConfigurers(Class<C> clazz) {\n\t\tList<C> configs = (List<C>) this.configurers.get(clazz);\n\t\tif (configs == null) {\n\t\t\treturn new ArrayList<>();\n\t\t}\n\t\treturn new ArrayList<>(configs);\n\t}",
        "summary_tokens": [
            "gets",
            "all",
            "the",
            "security",
            "configurer",
            "instances",
            "by",
            "its",
            "class",
            "name",
            "or",
            "an",
            "empty",
            "list",
            "if",
            "not",
            "found"
        ]
    },
    {
        "id": 56,
        "code": "\tpublic <C extends SecurityConfigurer<O, B>> List<C> removeConfigurers(Class<C> clazz) {\n\t\tList<C> configs = (List<C>) this.configurers.remove(clazz);\n\t\tif (configs == null) {\n\t\t\treturn new ArrayList<>();\n\t\t}\n\t\treturn new ArrayList<>(configs);\n\t}",
        "summary_tokens": [
            "removes",
            "all",
            "the",
            "security",
            "configurer",
            "instances",
            "by",
            "its",
            "class",
            "name",
            "or",
            "an",
            "empty",
            "list",
            "if",
            "not",
            "found"
        ]
    },
    {
        "id": 57,
        "code": "\tpublic <C extends SecurityConfigurer<O, B>> C getConfigurer(Class<C> clazz) {\n\t\tList<SecurityConfigurer<O, B>> configs = this.configurers.get(clazz);\n\t\tif (configs == null) {\n\t\t\treturn null;\n\t\t}\n\t\tAssert.state(configs.size() == 1,\n\t\t\t\t() -> \"Only one configurer expected for type \" + clazz + \", but got \" + configs);\n\t\treturn (C) configs.get(0);\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "security",
            "configurer",
            "by",
            "its",
            "class",
            "name",
            "or",
            "code",
            "null",
            "code",
            "if",
            "not",
            "found"
        ]
    },
    {
        "id": 58,
        "code": "\tpublic <C extends SecurityConfigurer<O, B>> C removeConfigurer(Class<C> clazz) {\n\t\tList<SecurityConfigurer<O, B>> configs = this.configurers.remove(clazz);\n\t\tif (configs == null) {\n\t\t\treturn null;\n\t\t}\n\t\tAssert.state(configs.size() == 1,\n\t\t\t\t() -> \"Only one configurer expected for type \" + clazz + \", but got \" + configs);\n\t\treturn (C) configs.get(0);\n\t}",
        "summary_tokens": [
            "removes",
            "and",
            "returns",
            "the",
            "security",
            "configurer",
            "by",
            "its",
            "class",
            "name",
            "or",
            "code",
            "null",
            "code",
            "if",
            "not",
            "found"
        ]
    },
    {
        "id": 59,
        "code": "\tpublic B objectPostProcessor(ObjectPostProcessor<Object> objectPostProcessor) {\n\t\tAssert.notNull(objectPostProcessor, \"objectPostProcessor cannot be null\");\n\t\tthis.objectPostProcessor = objectPostProcessor;\n\t\treturn (B) this;\n\t}",
        "summary_tokens": [
            "specifies",
            "the",
            "object",
            "post",
            "processor",
            "to",
            "use"
        ]
    },
    {
        "id": 60,
        "code": "\tprotected <P> P postProcess(P object) {\n\t\treturn this.objectPostProcessor.postProcess(object);\n\t}",
        "summary_tokens": [
            "performs",
            "post",
            "processing",
            "of",
            "an",
            "object"
        ]
    },
    {
        "id": 61,
        "code": "\tprotected final O doBuild() throws Exception {\n\t\tsynchronized (this.configurers) {\n\t\t\tthis.buildState = BuildState.INITIALIZING;\n\t\t\tbeforeInit();\n\t\t\tinit();\n\t\t\tthis.buildState = BuildState.CONFIGURING;\n\t\t\tbeforeConfigure();\n\t\t\tconfigure();\n\t\t\tthis.buildState = BuildState.BUILDING;\n\t\t\tO result = performBuild();\n\t\t\tthis.buildState = BuildState.BUILT;\n\t\t\treturn result;\n\t\t}\n\t}",
        "summary_tokens": [
            "executes",
            "the",
            "build",
            "using",
            "the",
            "security",
            "configurer",
            "s",
            "that",
            "have",
            "been",
            "applied",
            "using",
            "the",
            "following",
            "steps"
        ]
    },
    {
        "id": 62,
        "code": "\tprotected void beforeInit() throws Exception {\n\t}",
        "summary_tokens": [
            "invoked",
            "prior",
            "to",
            "invoking",
            "each",
            "security",
            "configurer",
            "init",
            "security",
            "builder",
            "method"
        ]
    },
    {
        "id": 63,
        "code": "\tprotected void beforeConfigure() throws Exception {\n\t}",
        "summary_tokens": [
            "invoked",
            "prior",
            "to",
            "invoking",
            "each",
            "security",
            "configurer",
            "configure",
            "security",
            "builder",
            "method"
        ]
    },
    {
        "id": 64,
        "code": "\tprivate boolean isUnbuilt() {\n\t\tsynchronized (this.configurers) {\n\t\t\treturn this.buildState == BuildState.UNBUILT;\n\t\t}\n\t}",
        "summary_tokens": [
            "determines",
            "if",
            "the",
            "object",
            "is",
            "unbuilt"
        ]
    },
    {
        "id": 65,
        "code": "\tpublic final O getObject() {\n\t\tif (!this.building.get()) {\n\t\t\tthrow new IllegalStateException(\"This object has not been built\");\n\t\t}\n\t\treturn this.object;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "object",
            "that",
            "was",
            "built"
        ]
    },
    {
        "id": 66,
        "code": "\tpublic B and() {\n\t\treturn getBuilder();\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "security",
            "builder",
            "when",
            "done",
            "using",
            "the",
            "security",
            "configurer"
        ]
    },
    {
        "id": 67,
        "code": "\tprotected final B getBuilder() {\n\t\tAssert.state(this.securityBuilder != null, \"securityBuilder cannot be null\");\n\t\treturn this.securityBuilder;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "security",
            "builder"
        ]
    },
    {
        "id": 68,
        "code": "\tprotected <T> T postProcess(T object) {\n\t\treturn (T) this.objectPostProcessor.postProcess(object);\n\t}",
        "summary_tokens": [
            "performs",
            "post",
            "processing",
            "of",
            "an",
            "object"
        ]
    },
    {
        "id": 69,
        "code": "\tpublic void addObjectPostProcessor(ObjectPostProcessor<?> objectPostProcessor) {\n\t\tthis.objectPostProcessor.addObjectPostProcessor(objectPostProcessor);\n\t}",
        "summary_tokens": [
            "adds",
            "an",
            "object",
            "post",
            "processor",
            "to",
            "be",
            "used",
            "for",
            "this",
            "security",
            "configurer",
            "adapter"
        ]
    },
    {
        "id": 70,
        "code": "\tpublic void setBuilder(B builder) {\n\t\tthis.securityBuilder = builder;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "builder",
            "to",
            "be",
            "used"
        ]
    },
    {
        "id": 71,
        "code": "\tpublic AuthenticationManagerBuilder parentAuthenticationManager(AuthenticationManager authenticationManager) {\n\t\tif (authenticationManager instanceof ProviderManager) {\n\t\t\teraseCredentials(((ProviderManager) authenticationManager).isEraseCredentialsAfterAuthentication());\n\t\t}\n\t\tthis.parentAuthenticationManager = authenticationManager;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "allows",
            "providing",
            "a",
            "parent",
            "authentication",
            "manager",
            "that",
            "will",
            "be",
            "tried",
            "if",
            "this",
            "authentication",
            "manager",
            "was",
            "unable",
            "to",
            "attempt",
            "to",
            "authenticate",
            "the",
            "provided",
            "authentication"
        ]
    },
    {
        "id": 72,
        "code": "\tpublic AuthenticationManagerBuilder authenticationEventPublisher(AuthenticationEventPublisher eventPublisher) {\n\t\tAssert.notNull(eventPublisher, \"AuthenticationEventPublisher cannot be null\");\n\t\tthis.eventPublisher = eventPublisher;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "authentication",
            "event",
            "publisher",
            "event",
            "publisher",
            "the",
            "authentication",
            "event",
            "publisher",
            "to",
            "use",
            "the",
            "authentication",
            "manager",
            "builder",
            "for",
            "further",
            "customizations"
        ]
    },
    {
        "id": 73,
        "code": "\tpublic AuthenticationManagerBuilder eraseCredentials(boolean eraseCredentials) {\n\t\tthis.eraseCredentials = eraseCredentials;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "erase",
            "credentials",
            "true",
            "if",
            "authentication",
            "manager",
            "should",
            "clear",
            "the",
            "credentials",
            "from",
            "the",
            "authentication",
            "object",
            "after",
            "authenticating",
            "the",
            "authentication",
            "manager",
            "builder",
            "for",
            "further",
            "customizations"
        ]
    },
    {
        "id": 74,
        "code": "\tpublic InMemoryUserDetailsManagerConfigurer<AuthenticationManagerBuilder> inMemoryAuthentication()\n\t\t\tthrows Exception {\n\t\treturn apply(new InMemoryUserDetailsManagerConfigurer<>());\n\t}",
        "summary_tokens": [
            "add",
            "in",
            "memory",
            "authentication",
            "to",
            "the",
            "authentication",
            "manager",
            "builder",
            "and",
            "return",
            "a",
            "in",
            "memory",
            "user",
            "details",
            "manager",
            "configurer",
            "to",
            "allow",
            "customization",
            "of",
            "the",
            "in",
            "memory",
            "authentication"
        ]
    },
    {
        "id": 75,
        "code": "\tpublic JdbcUserDetailsManagerConfigurer<AuthenticationManagerBuilder> jdbcAuthentication() throws Exception {\n\t\treturn apply(new JdbcUserDetailsManagerConfigurer<>());\n\t}",
        "summary_tokens": [
            "add",
            "jdbc",
            "authentication",
            "to",
            "the",
            "authentication",
            "manager",
            "builder",
            "and",
            "return",
            "a",
            "jdbc",
            "user",
            "details",
            "manager",
            "configurer",
            "to",
            "allow",
            "customization",
            "of",
            "the",
            "jdbc",
            "authentication"
        ]
    },
    {
        "id": 76,
        "code": "\tpublic <T extends UserDetailsService> DaoAuthenticationConfigurer<AuthenticationManagerBuilder, T> userDetailsService(\n\t\t\tT userDetailsService) throws Exception {\n\t\tthis.defaultUserDetailsService = userDetailsService;\n\t\treturn apply(new DaoAuthenticationConfigurer<>(userDetailsService));\n\t}",
        "summary_tokens": [
            "add",
            "authentication",
            "based",
            "upon",
            "the",
            "custom",
            "user",
            "details",
            "service",
            "that",
            "is",
            "passed",
            "in"
        ]
    },
    {
        "id": 77,
        "code": "\tpublic LdapAuthenticationProviderConfigurer<AuthenticationManagerBuilder> ldapAuthentication() throws Exception {\n\t\treturn apply(new LdapAuthenticationProviderConfigurer<>());\n\t}",
        "summary_tokens": [
            "add",
            "ldap",
            "authentication",
            "to",
            "the",
            "authentication",
            "manager",
            "builder",
            "and",
            "return",
            "a",
            "ldap",
            "authentication",
            "provider",
            "configurer",
            "to",
            "allow",
            "customization",
            "of",
            "the",
            "ldap",
            "authentication"
        ]
    },
    {
        "id": 78,
        "code": "\tpublic AuthenticationManagerBuilder authenticationProvider(AuthenticationProvider authenticationProvider) {\n\t\tthis.authenticationProviders.add(authenticationProvider);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "add",
            "authentication",
            "based",
            "upon",
            "the",
            "custom",
            "authentication",
            "provider",
            "that",
            "is",
            "passed",
            "in"
        ]
    },
    {
        "id": 79,
        "code": "\tpublic boolean isConfigured() {\n\t\treturn !this.authenticationProviders.isEmpty() || this.parentAuthenticationManager != null;\n\t}",
        "summary_tokens": [
            "determines",
            "if",
            "the",
            "authentication",
            "manager",
            "builder",
            "is",
            "configured",
            "to",
            "build",
            "a",
            "non",
            "null",
            "authentication",
            "manager"
        ]
    },
    {
        "id": 80,
        "code": "\tpublic UserDetailsService getDefaultUserDetailsService() {\n\t\treturn this.defaultUserDetailsService;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "default",
            "user",
            "details",
            "service",
            "for",
            "the",
            "authentication",
            "manager",
            "builder"
        ]
    },
    {
        "id": 81,
        "code": "\tprivate <C extends UserDetailsAwareConfigurer<AuthenticationManagerBuilder, ? extends UserDetailsService>> C apply(\n\t\t\tC configurer) throws Exception {\n\t\tthis.defaultUserDetailsService = configurer.getUserDetailsService();\n\t\treturn super.apply(configurer);\n\t}",
        "summary_tokens": [
            "captures",
            "the",
            "user",
            "details",
            "service",
            "from",
            "any",
            "user",
            "details",
            "aware",
            "configurer"
        ]
    },
    {
        "id": 82,
        "code": "\tpublic LdapAuthenticationProviderConfigurer<B> ldapAuthoritiesPopulator(\n\t\t\tLdapAuthoritiesPopulator ldapAuthoritiesPopulator) {\n\t\tthis.ldapAuthoritiesPopulator = ldapAuthoritiesPopulator;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "specifies",
            "the",
            "ldap",
            "authorities",
            "populator"
        ]
    },
    {
        "id": 83,
        "code": "\tpublic LdapAuthenticationProviderConfigurer<B> withObjectPostProcessor(ObjectPostProcessor<?> objectPostProcessor) {\n\t\taddObjectPostProcessor(objectPostProcessor);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "adds",
            "an",
            "object",
            "post",
            "processor",
            "for",
            "this",
            "class"
        ]
    },
    {
        "id": 84,
        "code": "\tprivate LdapAuthoritiesPopulator getLdapAuthoritiesPopulator() {\n\t\tif (this.ldapAuthoritiesPopulator != null) {\n\t\t\treturn this.ldapAuthoritiesPopulator;\n\t\t}\n\t\tDefaultLdapAuthoritiesPopulator defaultAuthoritiesPopulator = new DefaultLdapAuthoritiesPopulator(\n\t\t\t\tthis.contextSource, this.groupSearchBase);\n\t\tdefaultAuthoritiesPopulator.setGroupRoleAttribute(this.groupRoleAttribute);\n\t\tdefaultAuthoritiesPopulator.setGroupSearchFilter(this.groupSearchFilter);\n\t\tdefaultAuthoritiesPopulator.setSearchSubtree(this.groupSearchSubtree);\n\t\tdefaultAuthoritiesPopulator.setRolePrefix(this.rolePrefix);\n\t\tthis.ldapAuthoritiesPopulator = postProcess(defaultAuthoritiesPopulator);\n\t\treturn defaultAuthoritiesPopulator;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "ldap",
            "authorities",
            "populator",
            "and",
            "defaults",
            "to",
            "default",
            "ldap",
            "authorities",
            "populator",
            "the",
            "ldap",
            "authorities",
            "populator"
        ]
    },
    {
        "id": 85,
        "code": "\tpublic LdapAuthenticationProviderConfigurer<B> authoritiesMapper(\n\t\t\tGrantedAuthoritiesMapper grantedAuthoritiesMapper) {\n\t\tthis.authoritiesMapper = grantedAuthoritiesMapper;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "specifies",
            "the",
            "granted",
            "authorities",
            "mapper"
        ]
    },
    {
        "id": 86,
        "code": "\tprotected GrantedAuthoritiesMapper getAuthoritiesMapper() throws Exception {\n\t\tif (this.authoritiesMapper != null) {\n\t\t\treturn this.authoritiesMapper;\n\t\t}\n\t\tSimpleAuthorityMapper simpleAuthorityMapper = new SimpleAuthorityMapper();\n\t\tsimpleAuthorityMapper.setPrefix(this.rolePrefix);\n\t\tsimpleAuthorityMapper.afterPropertiesSet();\n\t\tthis.authoritiesMapper = simpleAuthorityMapper;\n\t\treturn simpleAuthorityMapper;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "granted",
            "authorities",
            "mapper",
            "and",
            "defaults",
            "to",
            "simple",
            "authority",
            "mapper"
        ]
    },
    {
        "id": 87,
        "code": "\tprivate LdapAuthenticator createLdapAuthenticator(BaseLdapPathContextSource contextSource) {\n\t\tAbstractLdapAuthenticator ldapAuthenticator = (this.passwordEncoder != null)\n\t\t\t\t? createPasswordCompareAuthenticator(contextSource) : createBindAuthenticator(contextSource);\n\t\tLdapUserSearch userSearch = createUserSearch();\n\t\tif (userSearch != null) {\n\t\t\tldapAuthenticator.setUserSearch(userSearch);\n\t\t}\n\t\tif (this.userDnPatterns != null && this.userDnPatterns.length > 0) {\n\t\t\tldapAuthenticator.setUserDnPatterns(this.userDnPatterns);\n\t\t}\n\t\treturn postProcess(ldapAuthenticator);\n\t}",
        "summary_tokens": [
            "creates",
            "the",
            "ldap",
            "authenticator",
            "to",
            "use",
            "context",
            "source",
            "the",
            "base",
            "ldap",
            "path",
            "context",
            "source",
            "to",
            "use",
            "the",
            "ldap",
            "authenticator",
            "to",
            "use"
        ]
    },
    {
        "id": 88,
        "code": "\tprivate PasswordComparisonAuthenticator createPasswordCompareAuthenticator(\n\t\t\tBaseLdapPathContextSource contextSource) {\n\t\tPasswordComparisonAuthenticator ldapAuthenticator = new PasswordComparisonAuthenticator(contextSource);\n\t\tif (this.passwordAttribute != null) {\n\t\t\tldapAuthenticator.setPasswordAttributeName(this.passwordAttribute);\n\t\t}\n\t\tldapAuthenticator.setPasswordEncoder(this.passwordEncoder);\n\t\treturn ldapAuthenticator;\n\t}",
        "summary_tokens": [
            "creates",
            "password",
            "comparison",
            "authenticator",
            "context",
            "source",
            "the",
            "base",
            "ldap",
            "path",
            "context",
            "source",
            "to",
            "use"
        ]
    },
    {
        "id": 89,
        "code": "\tprivate BindAuthenticator createBindAuthenticator(BaseLdapPathContextSource contextSource) {\n\t\treturn new BindAuthenticator(contextSource);\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "bind",
            "authenticator",
            "context",
            "source",
            "the",
            "base",
            "ldap",
            "path",
            "context",
            "source",
            "to",
            "use",
            "the",
            "bind",
            "authenticator",
            "to",
            "use"
        ]
    },
    {
        "id": 90,
        "code": "\tpublic ContextSourceBuilder contextSource() {\n\t\treturn this.contextSourceBuilder;\n\t}",
        "summary_tokens": [
            "allows",
            "easily",
            "configuring",
            "of",
            "a",
            "base",
            "ldap",
            "path",
            "context",
            "source",
            "with",
            "defaults",
            "pointing",
            "to",
            "an",
            "embedded",
            "ldap",
            "server",
            "that",
            "is",
            "created"
        ]
    },
    {
        "id": 91,
        "code": "\tpublic LdapAuthenticationProviderConfigurer<B> userDnPatterns(String... userDnPatterns) {\n\t\tthis.userDnPatterns = userDnPatterns;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "if",
            "your",
            "users",
            "are",
            "at",
            "a",
            "fixed",
            "location",
            "in",
            "the",
            "directory",
            "i"
        ]
    },
    {
        "id": 92,
        "code": "\tpublic LdapAuthenticationProviderConfigurer<B> userDetailsContextMapper(\n\t\t\tUserDetailsContextMapper userDetailsContextMapper) {\n\t\tthis.userDetailsContextMapper = userDetailsContextMapper;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "allows",
            "explicit",
            "customization",
            "of",
            "the",
            "loaded",
            "user",
            "object",
            "by",
            "specifying",
            "a",
            "user",
            "details",
            "context",
            "mapper",
            "bean",
            "which",
            "will",
            "be",
            "called",
            "with",
            "the",
            "context",
            "information",
            "from",
            "the",
            "user",
            "s",
            "directory",
            "entry"
        ]
    },
    {
        "id": 93,
        "code": "\tpublic LdapAuthenticationProviderConfigurer<B> groupRoleAttribute(String groupRoleAttribute) {\n\t\tthis.groupRoleAttribute = groupRoleAttribute;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "specifies",
            "the",
            "attribute",
            "name",
            "which",
            "contains",
            "the",
            "role",
            "name"
        ]
    },
    {
        "id": 94,
        "code": "\tpublic LdapAuthenticationProviderConfigurer<B> groupSearchBase(String groupSearchBase) {\n\t\tthis.groupSearchBase = groupSearchBase;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "the",
            "search",
            "base",
            "for",
            "group",
            "membership",
            "searches"
        ]
    },
    {
        "id": 95,
        "code": "\tpublic LdapAuthenticationProviderConfigurer<B> groupSearchSubtree(boolean groupSearchSubtree) {\n\t\tthis.groupSearchSubtree = groupSearchSubtree;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "if",
            "set",
            "to",
            "true",
            "a",
            "subtree",
            "scope",
            "search",
            "will",
            "be",
            "performed",
            "for",
            "group",
            "membership"
        ]
    },
    {
        "id": 96,
        "code": "\tpublic LdapAuthenticationProviderConfigurer<B> groupSearchFilter(String groupSearchFilter) {\n\t\tthis.groupSearchFilter = groupSearchFilter;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "the",
            "ldap",
            "filter",
            "to",
            "search",
            "for",
            "groups"
        ]
    },
    {
        "id": 97,
        "code": "\tpublic LdapAuthenticationProviderConfigurer<B> rolePrefix(String rolePrefix) {\n\t\tthis.rolePrefix = rolePrefix;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "a",
            "non",
            "empty",
            "string",
            "prefix",
            "that",
            "will",
            "be",
            "added",
            "as",
            "a",
            "prefix",
            "to",
            "the",
            "existing",
            "roles"
        ]
    },
    {
        "id": 98,
        "code": "\tpublic LdapAuthenticationProviderConfigurer<B> userSearchBase(String userSearchBase) {\n\t\tthis.userSearchBase = userSearchBase;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "search",
            "base",
            "for",
            "user",
            "searches"
        ]
    },
    {
        "id": 99,
        "code": "\tpublic LdapAuthenticationProviderConfigurer<B> userSearchFilter(String userSearchFilter) {\n\t\tthis.userSearchFilter = userSearchFilter;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "the",
            "ldap",
            "filter",
            "used",
            "to",
            "search",
            "for",
            "users",
            "optional"
        ]
    },
    {
        "id": 100,
        "code": "\tpublic PasswordCompareConfigurer passwordCompare() {\n\t\treturn new PasswordCompareConfigurer().passwordAttribute(\"password\")\n\t\t\t\t.passwordEncoder(NoOpPasswordEncoder.getInstance());\n\t}",
        "summary_tokens": [
            "the",
            "password",
            "compare",
            "configurer",
            "for",
            "further",
            "customizations"
        ]
    },
    {
        "id": 101,
        "code": "\tpublic JdbcUserDetailsManagerConfigurer<B> dataSource(DataSource dataSource) {\n\t\tthis.dataSource = dataSource;\n\t\tgetUserDetailsService().setDataSource(dataSource);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "populates",
            "the",
            "data",
            "source",
            "to",
            "be",
            "used"
        ]
    },
    {
        "id": 102,
        "code": "\tpublic JdbcUserDetailsManagerConfigurer<B> usersByUsernameQuery(String query) {\n\t\tgetUserDetailsService().setUsersByUsernameQuery(query);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "query",
            "to",
            "be",
            "used",
            "for",
            "finding",
            "a",
            "user",
            "by",
            "their",
            "username"
        ]
    },
    {
        "id": 103,
        "code": "\tpublic JdbcUserDetailsManagerConfigurer<B> authoritiesByUsernameQuery(String query) {\n\t\tgetUserDetailsService().setAuthoritiesByUsernameQuery(query);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "query",
            "to",
            "be",
            "used",
            "for",
            "finding",
            "a",
            "user",
            "s",
            "authorities",
            "by",
            "their",
            "username"
        ]
    },
    {
        "id": 104,
        "code": "\tpublic JdbcUserDetailsManagerConfigurer<B> groupAuthoritiesByUsername(String query) {\n\t\tJdbcUserDetailsManager userDetailsService = getUserDetailsService();\n\t\tuserDetailsService.setEnableGroups(true);\n\t\tuserDetailsService.setGroupAuthoritiesByUsernameQuery(query);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "an",
            "sql",
            "statement",
            "to",
            "query",
            "user",
            "s",
            "group",
            "authorities",
            "given",
            "a",
            "username"
        ]
    },
    {
        "id": 105,
        "code": "\tpublic JdbcUserDetailsManagerConfigurer<B> rolePrefix(String rolePrefix) {\n\t\tgetUserDetailsService().setRolePrefix(rolePrefix);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "a",
            "non",
            "empty",
            "string",
            "prefix",
            "that",
            "will",
            "be",
            "added",
            "to",
            "role",
            "strings",
            "loaded",
            "from",
            "persistent",
            "storage",
            "default",
            "is"
        ]
    },
    {
        "id": 106,
        "code": "\tpublic JdbcUserDetailsManagerConfigurer<B> userCache(UserCache userCache) {\n\t\tgetUserDetailsService().setUserCache(userCache);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "defines",
            "the",
            "user",
            "cache",
            "to",
            "use",
            "user",
            "cache",
            "the",
            "user",
            "cache",
            "to",
            "use",
            "the",
            "jdbc",
            "user",
            "details",
            "manager",
            "configurer",
            "for",
            "further",
            "customizations"
        ]
    },
    {
        "id": 107,
        "code": "\tpublic JdbcUserDetailsManagerConfigurer<B> withDefaultSchema() {\n\t\tthis.initScripts.add(new ClassPathResource(\"org/springframework/security/core/userdetails/jdbc/users.ddl\"));\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "populates",
            "the",
            "default",
            "schema",
            "that",
            "allows",
            "users",
            "and",
            "authorities",
            "to",
            "be",
            "stored"
        ]
    },
    {
        "id": 108,
        "code": "\tprotected void initUserDetailsService() throws Exception {\n\t\tfor (UserDetailsBuilder userBuilder : this.userBuilders) {\n\t\t\tgetUserDetailsService().createUser(userBuilder.build());\n\t\t}\n\t\tfor (UserDetails userDetails : this.users) {\n\t\t\tgetUserDetailsService().createUser(userDetails);\n\t\t}\n\t}",
        "summary_tokens": [
            "populates",
            "the",
            "users",
            "that",
            "have",
            "been",
            "added"
        ]
    },
    {
        "id": 109,
        "code": "\tpublic final UserDetailsBuilder withUser(String username) {\n\t\tUserDetailsBuilder userBuilder = new UserDetailsBuilder((C) this);\n\t\tuserBuilder.username(username);\n\t\tthis.userBuilders.add(userBuilder);\n\t\treturn userBuilder;\n\t}",
        "summary_tokens": [
            "allows",
            "adding",
            "a",
            "user",
            "to",
            "the",
            "user",
            "details",
            "manager",
            "that",
            "is",
            "being",
            "created"
        ]
    },
    {
        "id": 110,
        "code": "\tpublic C withObjectPostProcessor(ObjectPostProcessor<?> objectPostProcessor) {\n\t\taddObjectPostProcessor(objectPostProcessor);\n\t\treturn (C) this;\n\t}",
        "summary_tokens": [
            "adds",
            "an",
            "object",
            "post",
            "processor",
            "for",
            "this",
            "class"
        ]
    },
    {
        "id": 111,
        "code": "\tpublic C passwordEncoder(PasswordEncoder passwordEncoder) {\n\t\tthis.provider.setPasswordEncoder(passwordEncoder);\n\t\treturn (C) this;\n\t}",
        "summary_tokens": [
            "allows",
            "specifying",
            "the",
            "password",
            "encoder",
            "to",
            "use",
            "with",
            "the",
            "dao",
            "authentication",
            "provider"
        ]
    },
    {
        "id": 112,
        "code": "\tpublic U getUserDetailsService() {\n\t\treturn this.userDetailsService;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "user",
            "details",
            "service",
            "that",
            "is",
            "used",
            "with",
            "the",
            "dao",
            "authentication",
            "provider",
            "the",
            "user",
            "details",
            "service",
            "that",
            "is",
            "used",
            "with",
            "the",
            "dao",
            "authentication",
            "provider"
        ]
    },
    {
        "id": 113,
        "code": "\tprotected void initUserDetailsService() throws Exception {\n\t}",
        "summary_tokens": [
            "allows",
            "subclasses",
            "to",
            "initialize",
            "the",
            "user",
            "details",
            "service"
        ]
    },
    {
        "id": 114,
        "code": "\tpublic void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {\n\t\tBeanDefinition interceptor = registry.getBeanDefinition(\"methodSecurityInterceptor\");\n\t\tBeanDefinitionBuilder aspect = BeanDefinitionBuilder.rootBeanDefinition(\n\t\t\t\t\"org.springframework.security.access.intercept.aspectj.aspect.AnnotationSecurityAspect\");\n\t\taspect.setFactoryMethod(\"aspectOf\");\n\t\taspect.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n\t\taspect.addPropertyValue(\"securityInterceptor\", interceptor);\n\t\tregistry.registerBeanDefinition(\"annotationSecurityAspect$0\", aspect.getBeanDefinition());\n\t}",
        "summary_tokens": [
            "register",
            "escalate",
            "and",
            "configure",
            "the",
            "aspect",
            "j",
            "auto",
            "proxy",
            "creator",
            "based",
            "on",
            "the",
            "value",
            "of",
            "the",
            "enable",
            "global",
            "method",
            "security",
            "proxy",
            "target",
            "class",
            "attribute",
            "on",
            "the",
            "importing",
            "class"
        ]
    },
    {
        "id": 115,
        "code": "\tpublic MethodInterceptor methodSecurityInterceptor(MethodSecurityMetadataSource methodSecurityMetadataSource) {\n\t\tthis.methodSecurityInterceptor = isAspectJ() ? new AspectJMethodSecurityInterceptor()\n\t\t\t\t: new MethodSecurityInterceptor();\n\t\tthis.methodSecurityInterceptor.setAccessDecisionManager(accessDecisionManager());\n\t\tthis.methodSecurityInterceptor.setAfterInvocationManager(afterInvocationManager());\n\t\tthis.methodSecurityInterceptor.setSecurityMetadataSource(methodSecurityMetadataSource);\n\t\tthis.methodSecurityInterceptor.setSecurityContextHolderStrategy(this.securityContextHolderStrategy);\n\t\tRunAsManager runAsManager = runAsManager();\n\t\tif (runAsManager != null) {\n\t\t\tthis.methodSecurityInterceptor.setRunAsManager(runAsManager);\n\t\t}\n\t\treturn this.methodSecurityInterceptor;\n\t}",
        "summary_tokens": [
            "creates",
            "the",
            "default",
            "method",
            "interceptor",
            "which",
            "is",
            "a",
            "method",
            "security",
            "interceptor",
            "using",
            "the",
            "following",
            "methods",
            "to",
            "construct",
            "it"
        ]
    },
    {
        "id": 116,
        "code": "\tprotected AfterInvocationManager afterInvocationManager() {\n\t\tif (prePostEnabled()) {\n\t\t\tAfterInvocationProviderManager invocationProviderManager = new AfterInvocationProviderManager();\n\t\t\tExpressionBasedPostInvocationAdvice postAdvice = new ExpressionBasedPostInvocationAdvice(\n\t\t\t\t\tgetExpressionHandler());\n\t\t\tPostInvocationAdviceProvider postInvocationAdviceProvider = new PostInvocationAdviceProvider(postAdvice);\n\t\t\tList<AfterInvocationProvider> afterInvocationProviders = new ArrayList<>();\n\t\t\tafterInvocationProviders.add(postInvocationAdviceProvider);\n\t\t\tinvocationProviderManager.setProviders(afterInvocationProviders);\n\t\t\treturn invocationProviderManager;\n\t\t}\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "provide",
            "a",
            "custom",
            "after",
            "invocation",
            "manager",
            "for",
            "the",
            "default",
            "implementation",
            "of",
            "method",
            "security",
            "interceptor",
            "method",
            "security",
            "metadata",
            "source"
        ]
    },
    {
        "id": 117,
        "code": "\tprotected RunAsManager runAsManager() {\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "provide",
            "a",
            "custom",
            "run",
            "as",
            "manager",
            "for",
            "the",
            "default",
            "implementation",
            "of",
            "method",
            "security",
            "interceptor",
            "method",
            "security",
            "metadata",
            "source"
        ]
    },
    {
        "id": 118,
        "code": "\tprotected AccessDecisionManager accessDecisionManager() {\n\t\tList<AccessDecisionVoter<?>> decisionVoters = new ArrayList<>();\n\t\tif (prePostEnabled()) {\n\t\t\tExpressionBasedPreInvocationAdvice expressionAdvice = new ExpressionBasedPreInvocationAdvice();\n\t\t\texpressionAdvice.setExpressionHandler(getExpressionHandler());\n\t\t\tdecisionVoters.add(new PreInvocationAuthorizationAdviceVoter(expressionAdvice));\n\t\t}\n\t\tif (jsr250Enabled()) {\n\t\t\tdecisionVoters.add(new Jsr250Voter());\n\t\t}\n\t\tRoleVoter roleVoter = new RoleVoter();\n\t\tGrantedAuthorityDefaults grantedAuthorityDefaults = getSingleBeanOrNull(GrantedAuthorityDefaults.class);\n\t\tif (grantedAuthorityDefaults != null) {\n\t\t\troleVoter.setRolePrefix(grantedAuthorityDefaults.getRolePrefix());\n\t\t}\n\t\tdecisionVoters.add(roleVoter);\n\t\tdecisionVoters.add(new AuthenticatedVoter());\n\t\treturn new AffirmativeBased(decisionVoters);\n\t}",
        "summary_tokens": [
            "allows",
            "subclasses",
            "to",
            "provide",
            "a",
            "custom",
            "access",
            "decision",
            "manager"
        ]
    },
    {
        "id": 119,
        "code": "\tprotected MethodSecurityExpressionHandler createExpressionHandler() {\n\t\treturn this.defaultMethodExpressionHandler;\n\t}",
        "summary_tokens": [
            "provide",
            "a",
            "method",
            "security",
            "expression",
            "handler",
            "that",
            "is",
            "registered",
            "with",
            "the",
            "expression",
            "based",
            "pre",
            "invocation",
            "advice"
        ]
    },
    {
        "id": 120,
        "code": "\tprotected final MethodSecurityExpressionHandler getExpressionHandler() {\n\t\tif (this.expressionHandler == null) {\n\t\t\tthis.expressionHandler = createExpressionHandler();\n\t\t}\n\t\treturn this.expressionHandler;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "method",
            "security",
            "expression",
            "handler",
            "or",
            "creates",
            "it",
            "using",
            "expression",
            "handler"
        ]
    },
    {
        "id": 121,
        "code": "\tprotected MethodSecurityMetadataSource customMethodSecurityMetadataSource() {\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "provides",
            "a",
            "custom",
            "method",
            "security",
            "metadata",
            "source",
            "that",
            "is",
            "registered",
            "with",
            "the",
            "method",
            "security",
            "metadata",
            "source"
        ]
    },
    {
        "id": 122,
        "code": "\tprotected AuthenticationManager authenticationManager() throws Exception {\n\t\tif (this.authenticationManager == null) {\n\t\t\tDefaultAuthenticationEventPublisher eventPublisher = this.objectPostProcessor\n\t\t\t\t\t.postProcess(new DefaultAuthenticationEventPublisher());\n\t\t\tthis.auth = new AuthenticationManagerBuilder(this.objectPostProcessor);\n\t\t\tthis.auth.authenticationEventPublisher(eventPublisher);\n\t\t\tconfigure(this.auth);\n\t\t\tthis.authenticationManager = (this.disableAuthenticationRegistry)\n\t\t\t\t\t? getAuthenticationConfiguration().getAuthenticationManager() : this.auth.build();\n\t\t}\n\t\treturn this.authenticationManager;\n\t}",
        "summary_tokens": [
            "allows",
            "providing",
            "a",
            "custom",
            "authentication",
            "manager"
        ]
    },
    {
        "id": 123,
        "code": "\tprotected void configure(AuthenticationManagerBuilder auth) throws Exception {\n\t\tthis.disableAuthenticationRegistry = true;\n\t}",
        "summary_tokens": [
            "sub",
            "classes",
            "can",
            "override",
            "this",
            "method",
            "to",
            "register",
            "different",
            "types",
            "of",
            "authentication"
        ]
    },
    {
        "id": 124,
        "code": "\tpublic MethodSecurityMetadataSource methodSecurityMetadataSource() {\n\t\tList<MethodSecurityMetadataSource> sources = new ArrayList<>();\n\t\tExpressionBasedAnnotationAttributeFactory attributeFactory = new ExpressionBasedAnnotationAttributeFactory(\n\t\t\t\tgetExpressionHandler());\n\t\tMethodSecurityMetadataSource customMethodSecurityMetadataSource = customMethodSecurityMetadataSource();\n\t\tif (customMethodSecurityMetadataSource != null) {\n\t\t\tsources.add(customMethodSecurityMetadataSource);\n\t\t}\n\t\tboolean hasCustom = customMethodSecurityMetadataSource != null;\n\t\tboolean isPrePostEnabled = prePostEnabled();\n\t\tboolean isSecuredEnabled = securedEnabled();\n\t\tboolean isJsr250Enabled = jsr250Enabled();\n\t\tAssert.state(isPrePostEnabled || isSecuredEnabled || isJsr250Enabled || hasCustom,\n\t\t\t\t\"In the composition of all global method configuration, \"\n\t\t\t\t\t\t+ \"no annotation support was actually activated\");\n\t\tif (isPrePostEnabled) {\n\t\t\tsources.add(new PrePostAnnotationSecurityMetadataSource(attributeFactory));\n\t\t}\n\t\tif (isSecuredEnabled) {\n\t\t\tsources.add(new SecuredAnnotationSecurityMetadataSource());\n\t\t}\n\t\tif (isJsr250Enabled) {\n\t\t\tGrantedAuthorityDefaults grantedAuthorityDefaults = getSingleBeanOrNull(GrantedAuthorityDefaults.class);\n\t\t\tJsr250MethodSecurityMetadataSource jsr250MethodSecurityMetadataSource = this.context\n\t\t\t\t\t.getBean(Jsr250MethodSecurityMetadataSource.class);\n\t\t\tif (grantedAuthorityDefaults != null) {\n\t\t\t\tjsr250MethodSecurityMetadataSource.setDefaultRolePrefix(grantedAuthorityDefaults.getRolePrefix());\n\t\t\t}\n\t\t\tsources.add(jsr250MethodSecurityMetadataSource);\n\t\t}\n\t\treturn new DelegatingMethodSecurityMetadataSource(sources);\n\t}",
        "summary_tokens": [
            "provides",
            "the",
            "default",
            "method",
            "security",
            "metadata",
            "source",
            "that",
            "will",
            "be",
            "used"
        ]
    },
    {
        "id": 125,
        "code": "\tpublic PreInvocationAuthorizationAdvice preInvocationAuthorizationAdvice() {\n\t\tExpressionBasedPreInvocationAdvice preInvocationAdvice = new ExpressionBasedPreInvocationAdvice();\n\t\tpreInvocationAdvice.setExpressionHandler(getExpressionHandler());\n\t\treturn preInvocationAdvice;\n\t}",
        "summary_tokens": [
            "creates",
            "the",
            "pre",
            "invocation",
            "authorization",
            "advice",
            "to",
            "be",
            "used"
        ]
    },
    {
        "id": 126,
        "code": "\tpublic final void setImportMetadata(AnnotationMetadata importMetadata) {\n\t\tMap<String, Object> annotationAttributes = importMetadata\n\t\t\t\t.getAnnotationAttributes(EnableGlobalMethodSecurity.class.getName());\n\t\tthis.enableMethodSecurity = AnnotationAttributes.fromMap(annotationAttributes);\n\t}",
        "summary_tokens": [
            "obtains",
            "the",
            "attributes",
            "from",
            "enable",
            "global",
            "method",
            "security",
            "if",
            "this",
            "class",
            "was",
            "imported",
            "using",
            "the",
            "enable",
            "global",
            "method",
            "security",
            "annotation"
        ]
    },
    {
        "id": 127,
        "code": "\tpublic void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {\n\t\tregisterBeanDefinition(\"preFilterAuthorizationMethodInterceptor\",\n\t\t\t\t\"org.springframework.security.authorization.method.aspectj.PreFilterAspect\", \"preFilterAspect$0\",\n\t\t\t\tregistry);\n\t\tregisterBeanDefinition(\"postFilterAuthorizationMethodInterceptor\",\n\t\t\t\t\"org.springframework.security.authorization.method.aspectj.PostFilterAspect\", \"postFilterAspect$0\",\n\t\t\t\tregistry);\n\t\tregisterBeanDefinition(\"preAuthorizeAuthorizationMethodInterceptor\",\n\t\t\t\t\"org.springframework.security.authorization.method.aspectj.PreAuthorizeAspect\", \"preAuthorizeAspect$0\",\n\t\t\t\tregistry);\n\t\tregisterBeanDefinition(\"postAuthorizeAuthorizationMethodInterceptor\",\n\t\t\t\t\"org.springframework.security.authorization.method.aspectj.PostAuthorizeAspect\",\n\t\t\t\t\"postAuthorizeAspect$0\", registry);\n\t\tregisterBeanDefinition(\"securedAuthorizationMethodInterceptor\",\n\t\t\t\t\"org.springframework.security.authorization.method.aspectj.SecuredAspect\", \"securedAspect$0\", registry);\n\t}",
        "summary_tokens": [
            "register",
            "escalate",
            "and",
            "configure",
            "the",
            "aspect",
            "j",
            "auto",
            "proxy",
            "creator",
            "based",
            "on",
            "the",
            "value",
            "of",
            "the",
            "enable",
            "method",
            "security",
            "proxy",
            "target",
            "class",
            "attribute",
            "on",
            "the",
            "importing",
            "class"
        ]
    },
    {
        "id": 128,
        "code": "\tpublic void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {\n\t\tBeanDefinitionBuilder advisor = BeanDefinitionBuilder\n\t\t\t\t.rootBeanDefinition(MethodSecurityMetadataSourceAdvisor.class);\n\t\tadvisor.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n\t\tadvisor.addConstructorArgValue(\"methodSecurityInterceptor\");\n\t\tadvisor.addConstructorArgReference(\"methodSecurityMetadataSource\");\n\t\tadvisor.addConstructorArgValue(\"methodSecurityMetadataSource\");\n\t\tMultiValueMap<String, Object> attributes = importingClassMetadata\n\t\t\t\t.getAllAnnotationAttributes(EnableGlobalMethodSecurity.class.getName());\n\t\tInteger order = (Integer) attributes.getFirst(\"order\");\n\t\tif (order != null) {\n\t\t\tadvisor.addPropertyValue(\"order\", order);\n\t\t}\n\t\tregistry.registerBeanDefinition(\"metaDataSourceAdvisor\", advisor.getBeanDefinition());\n\t}",
        "summary_tokens": [
            "register",
            "escalate",
            "and",
            "configure",
            "the",
            "aspect",
            "j",
            "auto",
            "proxy",
            "creator",
            "based",
            "on",
            "the",
            "value",
            "of",
            "the",
            "enable",
            "global",
            "method",
            "security",
            "proxy",
            "target",
            "class",
            "attribute",
            "on",
            "the",
            "importing",
            "class"
        ]
    },
    {
        "id": 129,
        "code": "\tpublic RSocketSecurity addPayloadInterceptor(PayloadInterceptor interceptor) {\n\t\tthis.payloadInterceptors.add(interceptor);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "adds",
            "a",
            "payload",
            "interceptor",
            "to",
            "be",
            "used"
        ]
    },
    {
        "id": 130,
        "code": "\tpublic RSocketSecurity simpleAuthentication(Customizer<SimpleAuthenticationSpec> simple) {\n\t\tif (this.simpleAuthSpec == null) {\n\t\t\tthis.simpleAuthSpec = new SimpleAuthenticationSpec();\n\t\t}\n\t\tsimple.customize(this.simpleAuthSpec);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "adds",
            "support",
            "for",
            "validating",
            "a",
            "username",
            "and",
            "password",
            "using",
            "a",
            "href",
            "https",
            "github"
        ]
    },
    {
        "id": 131,
        "code": "\tpublic RSocketSecurity basicAuthentication(Customizer<BasicAuthenticationSpec> basic) {\n\t\tif (this.basicAuthSpec == null) {\n\t\t\tthis.basicAuthSpec = new BasicAuthenticationSpec();\n\t\t}\n\t\tbasic.customize(this.basicAuthSpec);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "adds",
            "authentication",
            "with",
            "basic",
            "authentication",
            "payload",
            "exchange",
            "converter"
        ]
    },
    {
        "id": 132,
        "code": "\tprotected final ApplicationContext getApplicationContext() {\n\t\treturn this.context;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "application",
            "context",
            "the",
            "application",
            "context"
        ]
    },
    {
        "id": 133,
        "code": "\tpublic C antMatchers(String... antPatterns) {\n\t\tAssert.state(!this.anyRequestConfigured, \"Can't configure antMatchers after anyRequest\");\n\t\treturn chainRequestMatchers(RequestMatchers.antMatchers(antPatterns));\n\t}",
        "summary_tokens": [
            "maps",
            "a",
            "list",
            "of",
            "org"
        ]
    },
    {
        "id": 134,
        "code": "\tprotected final List<MvcRequestMatcher> createMvcMatchers(HttpMethod method, String... mvcPatterns) {\n\t\tAssert.state(!this.anyRequestConfigured, \"Can't configure mvcMatchers after anyRequest\");\n\t\tObjectPostProcessor<Object> opp = this.context.getBean(ObjectPostProcessor.class);\n\t\tif (!this.context.containsBean(HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME)) {\n\t\t\tthrow new NoSuchBeanDefinitionException(\"A Bean named \" + HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME\n\t\t\t\t\t+ \" of type \" + HandlerMappingIntrospector.class.getName()\n\t\t\t\t\t+ \" is required to use MvcRequestMatcher. Please ensure Spring Security & Spring MVC are configured in a shared ApplicationContext.\");\n\t\t}\n\t\tHandlerMappingIntrospector introspector = this.context.getBean(HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME,\n\t\t\t\tHandlerMappingIntrospector.class);\n\t\tList<MvcRequestMatcher> matchers = new ArrayList<>(mvcPatterns.length);\n\t\tfor (String mvcPattern : mvcPatterns) {\n\t\t\tMvcRequestMatcher matcher = new MvcRequestMatcher(introspector, mvcPattern);\n\t\t\topp.postProcess(matcher);\n\t\t\tif (method != null) {\n\t\t\t\tmatcher.setMethod(method);\n\t\t\t}\n\t\t\tmatchers.add(matcher);\n\t\t}\n\t\treturn matchers;\n\t}",
        "summary_tokens": [
            "creates",
            "mvc",
            "request",
            "matcher",
            "instances",
            "for",
            "the",
            "method",
            "and",
            "patterns",
            "passed",
            "in",
            "method",
            "the",
            "http",
            "method",
            "to",
            "use",
            "or",
            "null",
            "if",
            "any",
            "should",
            "be",
            "used",
            "mvc",
            "patterns",
            "the",
            "spring",
            "mvc",
            "patterns",
            "to",
            "match",
            "on",
            "a",
            "list",
            "of",
            "mvc",
            "request",
            "matcher",
            "instances"
        ]
    },
    {
        "id": 135,
        "code": "\tpublic C regexMatchers(String... regexPatterns) {\n\t\tAssert.state(!this.anyRequestConfigured, \"Can't configure regexMatchers after anyRequest\");\n\t\treturn chainRequestMatchers(RequestMatchers.regexMatchers(regexPatterns));\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "list",
            "of",
            "org"
        ]
    },
    {
        "id": 136,
        "code": "\tpublic C dispatcherTypeMatchers(DispatcherType... dispatcherTypes) {\n\t\tAssert.state(!this.anyRequestConfigured, \"Can't configure dispatcherTypeMatchers after anyRequest\");\n\t\treturn dispatcherTypeMatchers(null, dispatcherTypes);\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "list",
            "of",
            "org"
        ]
    },
    {
        "id": 137,
        "code": "\tpublic C requestMatchers(RequestMatcher... requestMatchers) {\n\t\tAssert.state(!this.anyRequestConfigured, \"Can't configure requestMatchers after anyRequest\");\n\t\treturn chainRequestMatchers(Arrays.asList(requestMatchers));\n\t}",
        "summary_tokens": [
            "associates",
            "a",
            "list",
            "of",
            "request",
            "matcher",
            "instances",
            "with",
            "the",
            "abstract",
            "config",
            "attribute",
            "request",
            "matcher",
            "registry",
            "request",
            "matchers",
            "the",
            "request",
            "matcher",
            "instances",
            "the",
            "object",
            "that",
            "is",
            "chained",
            "after",
            "creating",
            "the",
            "request",
            "matcher"
        ]
    },
    {
        "id": 138,
        "code": "\tvoid put(Class<? extends Filter> filter, int position) {\n\t\tString className = filter.getName();\n\t\tif (this.filterToOrder.containsKey(className)) {\n\t\t\treturn;\n\t\t}\n\t\tthis.filterToOrder.put(className, position);\n\t}",
        "summary_tokens": [
            "register",
            "a",
            "filter",
            "with",
            "its",
            "specific",
            "position"
        ]
    },
    {
        "id": 139,
        "code": "\tInteger getOrder(Class<?> clazz) {\n\t\twhile (clazz != null) {\n\t\t\tInteger result = this.filterToOrder.get(clazz.getName());\n\t\t\tif (result != null) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tclazz = clazz.getSuperclass();\n\t\t}\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "order",
            "of",
            "a",
            "particular",
            "filter",
            "class",
            "taking",
            "into",
            "consideration",
            "superclasses"
        ]
    },
    {
        "id": 140,
        "code": "\tpublic HttpSecurity headers(Customizer<HeadersConfigurer<HttpSecurity>> headersCustomizer) throws Exception {\n\t\theadersCustomizer.customize(getOrApply(new HeadersConfigurer<>()));\n\t\treturn HttpSecurity.this;\n\t}",
        "summary_tokens": [
            "adds",
            "the",
            "security",
            "headers",
            "to",
            "the",
            "response"
        ]
    },
    {
        "id": 141,
        "code": "\tpublic HttpSecurity cors(Customizer<CorsConfigurer<HttpSecurity>> corsCustomizer) throws Exception {\n\t\tcorsCustomizer.customize(getOrApply(new CorsConfigurer<>()));\n\t\treturn HttpSecurity.this;\n\t}",
        "summary_tokens": [
            "adds",
            "a",
            "cors",
            "filter",
            "to",
            "be",
            "used"
        ]
    },
    {
        "id": 142,
        "code": "\tpublic HttpSecurity sessionManagement(\n\t\t\tCustomizer<SessionManagementConfigurer<HttpSecurity>> sessionManagementCustomizer) throws Exception {\n\t\tsessionManagementCustomizer.customize(getOrApply(new SessionManagementConfigurer<>()));\n\t\treturn HttpSecurity.this;\n\t}",
        "summary_tokens": [
            "allows",
            "configuring",
            "of",
            "session",
            "management"
        ]
    },
    {
        "id": 143,
        "code": "\tpublic HttpSecurity portMapper(Customizer<PortMapperConfigurer<HttpSecurity>> portMapperCustomizer)\n\t\t\tthrows Exception {\n\t\tportMapperCustomizer.customize(getOrApply(new PortMapperConfigurer<>()));\n\t\treturn HttpSecurity.this;\n\t}",
        "summary_tokens": [
            "allows",
            "configuring",
            "a",
            "port",
            "mapper",
            "that",
            "is",
            "available",
            "from",
            "http",
            "security",
            "get",
            "shared",
            "object",
            "class"
        ]
    },
    {
        "id": 144,
        "code": "\tpublic HttpSecurity jee(Customizer<JeeConfigurer<HttpSecurity>> jeeCustomizer) throws Exception {\n\t\tjeeCustomizer.customize(getOrApply(new JeeConfigurer<>()));\n\t\treturn HttpSecurity.this;\n\t}",
        "summary_tokens": [
            "configures",
            "container",
            "based",
            "pre",
            "authentication"
        ]
    },
    {
        "id": 145,
        "code": "\tpublic HttpSecurity x509(Customizer<X509Configurer<HttpSecurity>> x509Customizer) throws Exception {\n\t\tx509Customizer.customize(getOrApply(new X509Configurer<>()));\n\t\treturn HttpSecurity.this;\n\t}",
        "summary_tokens": [
            "configures",
            "x",
            "0",
            "based",
            "pre",
            "authentication"
        ]
    },
    {
        "id": 146,
        "code": "\tpublic HttpSecurity rememberMe(Customizer<RememberMeConfigurer<HttpSecurity>> rememberMeCustomizer)\n\t\t\tthrows Exception {\n\t\trememberMeCustomizer.customize(getOrApply(new RememberMeConfigurer<>()));\n\t\treturn HttpSecurity.this;\n\t}",
        "summary_tokens": [
            "allows",
            "configuring",
            "of",
            "remember",
            "me",
            "authentication"
        ]
    },
    {
        "id": 147,
        "code": "\tpublic HttpSecurity authorizeRequests(\n\t\t\tCustomizer<ExpressionUrlAuthorizationConfigurer<HttpSecurity>.ExpressionInterceptUrlRegistry> authorizeRequestsCustomizer)\n\t\t\tthrows Exception {\n\t\tApplicationContext context = getContext();\n\t\tauthorizeRequestsCustomizer\n\t\t\t\t.customize(getOrApply(new ExpressionUrlAuthorizationConfigurer<>(context)).getRegistry());\n\t\treturn HttpSecurity.this;\n\t}",
        "summary_tokens": [
            "allows",
            "restricting",
            "access",
            "based",
            "upon",
            "the",
            "http",
            "servlet",
            "request",
            "using",
            "request",
            "matcher",
            "implementations",
            "i"
        ]
    },
    {
        "id": 148,
        "code": "\tpublic HttpSecurity authorizeHttpRequests(\n\t\t\tCustomizer<AuthorizeHttpRequestsConfigurer<HttpSecurity>.AuthorizationManagerRequestMatcherRegistry> authorizeHttpRequestsCustomizer)\n\t\t\tthrows Exception {\n\t\tApplicationContext context = getContext();\n\t\tauthorizeHttpRequestsCustomizer\n\t\t\t\t.customize(getOrApply(new AuthorizeHttpRequestsConfigurer<>(context)).getRegistry());\n\t\treturn HttpSecurity.this;\n\t}",
        "summary_tokens": [
            "allows",
            "restricting",
            "access",
            "based",
            "upon",
            "the",
            "http",
            "servlet",
            "request",
            "using",
            "request",
            "matcher",
            "implementations",
            "i"
        ]
    },
    {
        "id": 149,
        "code": "\tpublic HttpSecurity requestCache(Customizer<RequestCacheConfigurer<HttpSecurity>> requestCacheCustomizer)\n\t\t\tthrows Exception {\n\t\trequestCacheCustomizer.customize(getOrApply(new RequestCacheConfigurer<>()));\n\t\treturn HttpSecurity.this;\n\t}",
        "summary_tokens": [
            "allows",
            "configuring",
            "the",
            "request",
            "cache"
        ]
    },
    {
        "id": 150,
        "code": "\tpublic HttpSecurity exceptionHandling(\n\t\t\tCustomizer<ExceptionHandlingConfigurer<HttpSecurity>> exceptionHandlingCustomizer) throws Exception {\n\t\texceptionHandlingCustomizer.customize(getOrApply(new ExceptionHandlingConfigurer<>()));\n\t\treturn HttpSecurity.this;\n\t}",
        "summary_tokens": [
            "allows",
            "configuring",
            "exception",
            "handling"
        ]
    },
    {
        "id": 151,
        "code": "\tpublic HttpSecurity securityContext(Customizer<SecurityContextConfigurer<HttpSecurity>> securityContextCustomizer)\n\t\t\tthrows Exception {\n\t\tsecurityContextCustomizer.customize(getOrApply(new SecurityContextConfigurer<>()));\n\t\treturn HttpSecurity.this;\n\t}",
        "summary_tokens": [
            "sets",
            "up",
            "management",
            "of",
            "the",
            "security",
            "context",
            "on",
            "the",
            "security",
            "context",
            "holder",
            "between",
            "http",
            "servlet",
            "request",
            "s"
        ]
    },
    {
        "id": 152,
        "code": "\tpublic HttpSecurity servletApi(Customizer<ServletApiConfigurer<HttpSecurity>> servletApiCustomizer)\n\t\t\tthrows Exception {\n\t\tservletApiCustomizer.customize(getOrApply(new ServletApiConfigurer<>()));\n\t\treturn HttpSecurity.this;\n\t}",
        "summary_tokens": [
            "integrates",
            "the",
            "http",
            "servlet",
            "request",
            "methods",
            "with",
            "the",
            "values",
            "found",
            "on",
            "the",
            "security",
            "context"
        ]
    },
    {
        "id": 153,
        "code": "\tpublic HttpSecurity anonymous(Customizer<AnonymousConfigurer<HttpSecurity>> anonymousCustomizer) throws Exception {\n\t\tanonymousCustomizer.customize(getOrApply(new AnonymousConfigurer<>()));\n\t\treturn HttpSecurity.this;\n\t}",
        "summary_tokens": [
            "allows",
            "configuring",
            "how",
            "an",
            "anonymous",
            "user",
            "is",
            "represented"
        ]
    },
    {
        "id": 154,
        "code": "\tpublic HttpSecurity formLogin(Customizer<FormLoginConfigurer<HttpSecurity>> formLoginCustomizer) throws Exception {\n\t\tformLoginCustomizer.customize(getOrApply(new FormLoginConfigurer<>()));\n\t\treturn HttpSecurity.this;\n\t}",
        "summary_tokens": [
            "specifies",
            "to",
            "support",
            "form",
            "based",
            "authentication"
        ]
    },
    {
        "id": 155,
        "code": "\tpublic HttpSecurity saml2Login(Customizer<Saml2LoginConfigurer<HttpSecurity>> saml2LoginCustomizer)\n\t\t\tthrows Exception {\n\t\tsaml2LoginCustomizer.customize(getOrApply(new Saml2LoginConfigurer<>()));\n\t\treturn HttpSecurity.this;\n\t}",
        "summary_tokens": [
            "configures",
            "authentication",
            "support",
            "using",
            "an",
            "saml",
            "0"
        ]
    },
    {
        "id": 156,
        "code": "\tpublic Saml2LogoutConfigurer<HttpSecurity> saml2Logout() throws Exception {\n\t\treturn getOrApply(new Saml2LogoutConfigurer<>(getContext()));\n\t}",
        "summary_tokens": [
            "configures",
            "logout",
            "support",
            "for",
            "an",
            "saml",
            "0"
        ]
    },
    {
        "id": 157,
        "code": "\tpublic HttpSecurity oauth2Login(Customizer<OAuth2LoginConfigurer<HttpSecurity>> oauth2LoginCustomizer)\n\t\t\tthrows Exception {\n\t\toauth2LoginCustomizer.customize(getOrApply(new OAuth2LoginConfigurer<>()));\n\t\treturn HttpSecurity.this;\n\t}",
        "summary_tokens": [
            "configures",
            "authentication",
            "support",
            "using",
            "an",
            "oauth",
            "0"
        ]
    },
    {
        "id": 158,
        "code": "\tpublic HttpSecurity httpBasic(Customizer<HttpBasicConfigurer<HttpSecurity>> httpBasicCustomizer) throws Exception {\n\t\thttpBasicCustomizer.customize(getOrApply(new HttpBasicConfigurer<>()));\n\t\treturn HttpSecurity.this;\n\t}",
        "summary_tokens": [
            "configures",
            "http",
            "basic",
            "authentication"
        ]
    },
    {
        "id": 159,
        "code": "\tpublic HttpSecurity passwordManagement(\n\t\t\tCustomizer<PasswordManagementConfigurer<HttpSecurity>> passwordManagementCustomizer) throws Exception {\n\t\tpasswordManagementCustomizer.customize(getOrApply(new PasswordManagementConfigurer<>()));\n\t\treturn HttpSecurity.this;\n\t}",
        "summary_tokens": [
            "adds",
            "support",
            "for",
            "the",
            "password",
            "management"
        ]
    },
    {
        "id": 160,
        "code": "\tpublic HttpSecurity authenticationManager(AuthenticationManager authenticationManager) {\n\t\tAssert.notNull(authenticationManager, \"authenticationManager cannot be null\");\n\t\tthis.authenticationManager = authenticationManager;\n\t\treturn HttpSecurity.this;\n\t}",
        "summary_tokens": [
            "configure",
            "the",
            "default",
            "authentication",
            "manager"
        ]
    },
    {
        "id": 161,
        "code": "\tpublic HttpSecurity addFilterAt(Filter filter, Class<? extends Filter> atFilter) {\n\t\treturn addFilterAtOffsetOf(filter, 0, atFilter);\n\t}",
        "summary_tokens": [
            "adds",
            "the",
            "filter",
            "at",
            "the",
            "location",
            "of",
            "the",
            "specified",
            "filter",
            "class"
        ]
    },
    {
        "id": 162,
        "code": "\tpublic HttpSecurity requestMatchers(Customizer<RequestMatcherConfigurer> requestMatcherCustomizer) {\n\t\trequestMatcherCustomizer.customize(this.requestMatcherConfigurer);\n\t\treturn HttpSecurity.this;\n\t}",
        "summary_tokens": [
            "allows",
            "specifying",
            "which",
            "http",
            "servlet",
            "request",
            "instances",
            "this",
            "http",
            "security",
            "will",
            "be",
            "invoked",
            "on"
        ]
    },
    {
        "id": 163,
        "code": "\tpublic HttpSecurity requestMatcher(RequestMatcher requestMatcher) {\n\t\tthis.requestMatcher = requestMatcher;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "allows",
            "configuring",
            "the",
            "http",
            "security",
            "to",
            "only",
            "be",
            "invoked",
            "when",
            "matching",
            "the",
            "provided",
            "request",
            "matcher"
        ]
    },
    {
        "id": 164,
        "code": "\tpublic HttpSecurity antMatcher(String antPattern) {\n\t\treturn requestMatcher(new AntPathRequestMatcher(antPattern));\n\t}",
        "summary_tokens": [
            "allows",
            "configuring",
            "the",
            "http",
            "security",
            "to",
            "only",
            "be",
            "invoked",
            "when",
            "matching",
            "the",
            "provided",
            "ant",
            "pattern"
        ]
    },
    {
        "id": 165,
        "code": "\tpublic HttpSecurity mvcMatcher(String mvcPattern) {\n\t\tHandlerMappingIntrospector introspector = new HandlerMappingIntrospector();\n\t\tintrospector.setApplicationContext(getContext());\n\t\tintrospector.afterPropertiesSet();\n\t\treturn requestMatcher(new MvcRequestMatcher(introspector, mvcPattern));\n\t}",
        "summary_tokens": [
            "allows",
            "configuring",
            "the",
            "http",
            "security",
            "to",
            "only",
            "be",
            "invoked",
            "when",
            "matching",
            "the",
            "provided",
            "spring",
            "mvc",
            "pattern"
        ]
    },
    {
        "id": 166,
        "code": "\tpublic HttpSecurity regexMatcher(String pattern) {\n\t\treturn requestMatcher(new RegexRequestMatcher(pattern, null));\n\t}",
        "summary_tokens": [
            "allows",
            "configuring",
            "the",
            "http",
            "security",
            "to",
            "only",
            "be",
            "invoked",
            "when",
            "matching",
            "the",
            "provided",
            "regex",
            "pattern"
        ]
    },
    {
        "id": 167,
        "code": "\tprivate <C extends SecurityConfigurerAdapter<DefaultSecurityFilterChain, HttpSecurity>> C getOrApply(C configurer)\n\t\t\tthrows Exception {\n\t\tC existingConfig = (C) getConfigurer(configurer.getClass());\n\t\tif (existingConfig != null) {\n\t\t\treturn existingConfig;\n\t\t}\n\t\treturn apply(configurer);\n\t}",
        "summary_tokens": [
            "if",
            "the",
            "security",
            "configurer",
            "has",
            "already",
            "been",
            "specified",
            "get",
            "the",
            "original",
            "otherwise",
            "apply",
            "the",
            "new",
            "security",
            "configurer",
            "adapter"
        ]
    },
    {
        "id": 168,
        "code": "\tpublic IgnoredRequestConfigurer ignoring() {\n\t\treturn this.ignoredRequestRegistry;\n\t}",
        "summary_tokens": [
            "p",
            "allows",
            "adding",
            "request",
            "matcher",
            "instances",
            "that",
            "spring",
            "security",
            "should",
            "ignore"
        ]
    },
    {
        "id": 169,
        "code": "\tpublic WebSecurity httpFirewall(HttpFirewall httpFirewall) {\n\t\tthis.httpFirewall = httpFirewall;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "allows",
            "customizing",
            "the",
            "http",
            "firewall"
        ]
    },
    {
        "id": 170,
        "code": "\tpublic WebSecurity debug(boolean debugEnabled) {\n\t\tthis.debugEnabled = debugEnabled;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "controls",
            "debugging",
            "support",
            "for",
            "spring",
            "security"
        ]
    },
    {
        "id": 171,
        "code": "\tpublic WebSecurity addSecurityFilterChainBuilder(\n\t\t\tSecurityBuilder<? extends SecurityFilterChain> securityFilterChainBuilder) {\n\t\tthis.securityFilterChainBuilders.add(securityFilterChainBuilder);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "p",
            "adds",
            "builders",
            "to",
            "create",
            "security",
            "filter",
            "chain",
            "instances"
        ]
    },
    {
        "id": 172,
        "code": "\tpublic WebSecurity privilegeEvaluator(WebInvocationPrivilegeEvaluator privilegeEvaluator) {\n\t\tthis.privilegeEvaluator = privilegeEvaluator;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "web",
            "invocation",
            "privilege",
            "evaluator",
            "to",
            "be",
            "used"
        ]
    },
    {
        "id": 173,
        "code": "\tpublic WebSecurity expressionHandler(SecurityExpressionHandler<FilterInvocation> expressionHandler) {\n\t\tAssert.notNull(expressionHandler, \"expressionHandler cannot be null\");\n\t\tthis.expressionHandler = expressionHandler;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "security",
            "expression",
            "handler",
            "to",
            "be",
            "used"
        ]
    },
    {
        "id": 174,
        "code": "\tpublic SecurityExpressionHandler<FilterInvocation> getExpressionHandler() {\n\t\treturn this.expressionHandler;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "security",
            "expression",
            "handler",
            "to",
            "be",
            "used"
        ]
    },
    {
        "id": 175,
        "code": "\tpublic WebInvocationPrivilegeEvaluator getPrivilegeEvaluator() {\n\t\treturn this.privilegeEvaluator;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "web",
            "invocation",
            "privilege",
            "evaluator",
            "to",
            "be",
            "used"
        ]
    },
    {
        "id": 176,
        "code": "\tpublic WebSecurity postBuildAction(Runnable postBuildAction) {\n\t\tthis.postBuildAction = postBuildAction;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "executes",
            "the",
            "runnable",
            "immediately",
            "after",
            "the",
            "build",
            "takes",
            "place",
            "post",
            "build",
            "action",
            "the",
            "web",
            "security",
            "for",
            "further",
            "customizations"
        ]
    },
    {
        "id": 177,
        "code": "\tpublic WebSecurity requestRejectedHandler(RequestRejectedHandler requestRejectedHandler) {\n\t\tAssert.notNull(requestRejectedHandler, \"requestRejectedHandler cannot be null\");\n\t\tthis.requestRejectedHandler = requestRejectedHandler;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "handler",
            "to",
            "handle",
            "org"
        ]
    },
    {
        "id": 178,
        "code": "\tpublic Filter springSecurityFilterChain() throws Exception {\n\t\tboolean hasConfigurers = this.webSecurityConfigurers != null && !this.webSecurityConfigurers.isEmpty();\n\t\tboolean hasFilterChain = !this.securityFilterChains.isEmpty();\n\t\tAssert.state(!(hasConfigurers && hasFilterChain),\n\t\t\t\t\"Found WebSecurityConfigurerAdapter as well as SecurityFilterChain. Please select just one.\");\n\t\tif (!hasConfigurers && !hasFilterChain) {\n\t\t\tWebSecurityConfigurerAdapter adapter = this.objectObjectPostProcessor\n\t\t\t\t\t.postProcess(new WebSecurityConfigurerAdapter() {\n\t\t\t\t\t});\n\t\t\tthis.webSecurity.apply(adapter);\n\t\t}\n\t\tfor (SecurityFilterChain securityFilterChain : this.securityFilterChains) {\n\t\t\tthis.webSecurity.addSecurityFilterChainBuilder(() -> securityFilterChain);\n\t\t}\n\t\tfor (WebSecurityCustomizer customizer : this.webSecurityCustomizers) {\n\t\t\tcustomizer.customize(this.webSecurity);\n\t\t}\n\t\treturn this.webSecurity.build();\n\t}",
        "summary_tokens": [
            "creates",
            "the",
            "spring",
            "security",
            "filter",
            "chain",
            "the",
            "filter",
            "that",
            "represents",
            "the",
            "security",
            "filter",
            "chain",
            "exception"
        ]
    },
    {
        "id": 179,
        "code": "\tpublic WebInvocationPrivilegeEvaluator privilegeEvaluator() {\n\t\treturn this.webSecurity.getPrivilegeEvaluator();\n\t}",
        "summary_tokens": [
            "creates",
            "the",
            "web",
            "invocation",
            "privilege",
            "evaluator",
            "that",
            "is",
            "necessary",
            "to",
            "evaluate",
            "privileges",
            "for",
            "a",
            "given",
            "web",
            "uri",
            "the",
            "web",
            "invocation",
            "privilege",
            "evaluator"
        ]
    },
    {
        "id": 180,
        "code": "\tpublic void setFilterChainProxySecurityConfigurer(ObjectPostProcessor<Object> objectPostProcessor,\n\t\t\tConfigurableListableBeanFactory beanFactory) throws Exception {\n\t\tthis.webSecurity = objectPostProcessor.postProcess(new WebSecurity(objectPostProcessor));\n\t\tif (this.debugEnabled != null) {\n\t\t\tthis.webSecurity.debug(this.debugEnabled);\n\t\t}\n\t\tList<SecurityConfigurer<Filter, WebSecurity>> webSecurityConfigurers = new AutowiredWebSecurityConfigurersIgnoreParents(\n\t\t\t\tbeanFactory).getWebSecurityConfigurers();\n\t\twebSecurityConfigurers.sort(AnnotationAwareOrderComparator.INSTANCE);\n\t\tInteger previousOrder = null;\n\t\tObject previousConfig = null;\n\t\tfor (SecurityConfigurer<Filter, WebSecurity> config : webSecurityConfigurers) {\n\t\t\tInteger order = AnnotationAwareOrderComparator.lookupOrder(config);\n\t\t\tif (previousOrder != null && previousOrder.equals(order)) {\n\t\t\t\tthrow new IllegalStateException(\"@Order on WebSecurityConfigurers must be unique. Order of \" + order\n\t\t\t\t\t\t+ \" was already used on \" + previousConfig + \", so it cannot be used on \" + config + \" too.\");\n\t\t\t}\n\t\t\tpreviousOrder = order;\n\t\t\tpreviousConfig = config;\n\t\t}\n\t\tfor (SecurityConfigurer<Filter, WebSecurity> webSecurityConfigurer : webSecurityConfigurers) {\n\t\t\tthis.webSecurity.apply(webSecurityConfigurer);\n\t\t}\n\t\tthis.webSecurityConfigurers = webSecurityConfigurers;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "configurer",
            "filter",
            "chain",
            "proxy",
            "web",
            "security",
            "builder",
            "instances",
            "used",
            "to",
            "create",
            "the",
            "web",
            "configuration"
        ]
    },
    {
        "id": 181,
        "code": "\tprotected void configure(HttpSecurity http) throws Exception {\n\t\tthis.logger.debug(\"Using default configure(HttpSecurity). \"\n\t\t\t\t+ \"If subclassed this will potentially override subclass configure(HttpSecurity).\");\n\t\thttp.authorizeRequests((requests) -> requests.anyRequest().authenticated());\n\t\thttp.formLogin();\n\t\thttp.httpBasic();\n\t}",
        "summary_tokens": [
            "override",
            "this",
            "method",
            "to",
            "configure",
            "the",
            "http",
            "security"
        ]
    },
    {
        "id": 182,
        "code": "\tprotected final HttpSecurity getHttp() throws Exception {\n\t\tif (this.http != null) {\n\t\t\treturn this.http;\n\t\t}\n\t\tAuthenticationEventPublisher eventPublisher = getAuthenticationEventPublisher();\n\t\tthis.localConfigureAuthenticationBldr.authenticationEventPublisher(eventPublisher);\n\t\tAuthenticationManager authenticationManager = authenticationManager();\n\t\tthis.authenticationBuilder.parentAuthenticationManager(authenticationManager);\n\t\tMap<Class<?>, Object> sharedObjects = createSharedObjects();\n\t\tthis.http = new HttpSecurity(this.objectPostProcessor, this.authenticationBuilder, sharedObjects);\n\t\tif (!this.disableDefaults) {\n\t\t\tapplyDefaultConfiguration(this.http);\n\t\t\tClassLoader classLoader = this.context.getClassLoader();\n\t\t\tList<AbstractHttpConfigurer> defaultHttpConfigurers = SpringFactoriesLoader\n\t\t\t\t\t.loadFactories(AbstractHttpConfigurer.class, classLoader);\n\t\t\tfor (AbstractHttpConfigurer configurer : defaultHttpConfigurers) {\n\t\t\t\tthis.http.apply(configurer);\n\t\t\t}\n\t\t}\n\t\tconfigure(this.http);\n\t\treturn this.http;\n\t}",
        "summary_tokens": [
            "creates",
            "the",
            "http",
            "security",
            "or",
            "returns",
            "the",
            "current",
            "instance",
            "the",
            "http",
            "security",
            "exception"
        ]
    },
    {
        "id": 183,
        "code": "\tpublic AuthenticationManager authenticationManagerBean() throws Exception {\n\t\treturn new AuthenticationManagerDelegator(this.authenticationBuilder, this.context);\n\t}",
        "summary_tokens": [
            "override",
            "this",
            "method",
            "to",
            "expose",
            "the",
            "authentication",
            "manager",
            "from",
            "configure",
            "authentication",
            "manager",
            "builder",
            "to",
            "be",
            "exposed",
            "as",
            "a",
            "bean"
        ]
    },
    {
        "id": 184,
        "code": "\tprotected AuthenticationManager authenticationManager() throws Exception {\n\t\tif (!this.authenticationManagerInitialized) {\n\t\t\tconfigure(this.localConfigureAuthenticationBldr);\n\t\t\tif (this.disableLocalConfigureAuthenticationBldr) {\n\t\t\t\tthis.authenticationManager = this.authenticationConfiguration.getAuthenticationManager();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.authenticationManager = this.localConfigureAuthenticationBldr.build();\n\t\t\t}\n\t\t\tthis.authenticationManagerInitialized = true;\n\t\t}\n\t\treturn this.authenticationManager;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "authentication",
            "manager",
            "to",
            "use"
        ]
    },
    {
        "id": 185,
        "code": "\tpublic UserDetailsService userDetailsServiceBean() throws Exception {\n\t\tAuthenticationManagerBuilder globalAuthBuilder = this.context.getBean(AuthenticationManagerBuilder.class);\n\t\treturn new UserDetailsServiceDelegator(Arrays.asList(this.localConfigureAuthenticationBldr, globalAuthBuilder));\n\t}",
        "summary_tokens": [
            "override",
            "this",
            "method",
            "to",
            "expose",
            "a",
            "user",
            "details",
            "service",
            "created",
            "from",
            "configure",
            "authentication",
            "manager",
            "builder",
            "as",
            "a",
            "bean"
        ]
    },
    {
        "id": 186,
        "code": "\tprotected UserDetailsService userDetailsService() {\n\t\tAuthenticationManagerBuilder globalAuthBuilder = this.context.getBean(AuthenticationManagerBuilder.class);\n\t\treturn new UserDetailsServiceDelegator(Arrays.asList(this.localConfigureAuthenticationBldr, globalAuthBuilder));\n\t}",
        "summary_tokens": [
            "allows",
            "modifying",
            "and",
            "accessing",
            "the",
            "user",
            "details",
            "service",
            "from",
            "user",
            "details",
            "service",
            "bean",
            "without",
            "interacting",
            "with",
            "the",
            "application",
            "context"
        ]
    },
    {
        "id": 187,
        "code": "\tprotected final ApplicationContext getApplicationContext() {\n\t\treturn this.context;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "application",
            "context",
            "the",
            "context"
        ]
    },
    {
        "id": 188,
        "code": "\tprivate Map<Class<?>, Object> createSharedObjects() {\n\t\tMap<Class<?>, Object> sharedObjects = new HashMap<>();\n\t\tsharedObjects.putAll(this.localConfigureAuthenticationBldr.getSharedObjects());\n\t\tsharedObjects.put(UserDetailsService.class, userDetailsService());\n\t\tsharedObjects.put(ApplicationContext.class, this.context);\n\t\tsharedObjects.put(ContentNegotiationStrategy.class, this.contentNegotiationStrategy);\n\t\tsharedObjects.put(AuthenticationTrustResolver.class, this.trustResolver);\n\t\treturn sharedObjects;\n\t}",
        "summary_tokens": [
            "creates",
            "the",
            "shared",
            "objects",
            "the",
            "shared",
            "objects"
        ]
    },
    {
        "id": 189,
        "code": "\tpublic final T defaultSuccessUrl(String defaultSuccessUrl, boolean alwaysUse) {\n\t\tSavedRequestAwareAuthenticationSuccessHandler handler = new SavedRequestAwareAuthenticationSuccessHandler();\n\t\thandler.setDefaultTargetUrl(defaultSuccessUrl);\n\t\thandler.setAlwaysUseDefaultTargetUrl(alwaysUse);\n\t\tthis.defaultSuccessHandler = handler;\n\t\treturn successHandler(handler);\n\t}",
        "summary_tokens": [
            "specifies",
            "where",
            "users",
            "will",
            "be",
            "redirected",
            "after",
            "authenticating",
            "successfully",
            "if",
            "they",
            "have",
            "not",
            "visited",
            "a",
            "secured",
            "page",
            "prior",
            "to",
            "authenticating",
            "or",
            "always",
            "use",
            "is",
            "true"
        ]
    },
    {
        "id": 190,
        "code": "\tpublic T loginProcessingUrl(String loginProcessingUrl) {\n\t\tthis.loginProcessingUrl = loginProcessingUrl;\n\t\tthis.authFilter.setRequiresAuthenticationRequestMatcher(createLoginProcessingUrlMatcher(loginProcessingUrl));\n\t\treturn getSelf();\n\t}",
        "summary_tokens": [
            "specifies",
            "the",
            "url",
            "to",
            "validate",
            "the",
            "credentials"
        ]
    },
    {
        "id": 191,
        "code": "\tpublic final T authenticationDetailsSource(\n\t\t\tAuthenticationDetailsSource<HttpServletRequest, ?> authenticationDetailsSource) {\n\t\tthis.authenticationDetailsSource = authenticationDetailsSource;\n\t\treturn getSelf();\n\t}",
        "summary_tokens": [
            "specifies",
            "a",
            "custom",
            "authentication",
            "details",
            "source"
        ]
    },
    {
        "id": 192,
        "code": "\tpublic final T successHandler(AuthenticationSuccessHandler successHandler) {\n\t\tthis.successHandler = successHandler;\n\t\treturn getSelf();\n\t}",
        "summary_tokens": [
            "specifies",
            "the",
            "authentication",
            "success",
            "handler",
            "to",
            "be",
            "used"
        ]
    },
    {
        "id": 193,
        "code": "\tpublic final T permitAll(boolean permitAll) {\n\t\tthis.permitAll = permitAll;\n\t\treturn getSelf();\n\t}",
        "summary_tokens": [
            "ensures",
            "the",
            "urls",
            "for",
            "failure",
            "url",
            "string",
            "as",
            "well",
            "as",
            "for",
            "the",
            "http",
            "security",
            "builder",
            "the",
            "get",
            "login",
            "page",
            "and",
            "get",
            "login",
            "processing",
            "url",
            "are",
            "granted",
            "access",
            "to",
            "any",
            "user"
        ]
    },
    {
        "id": 194,
        "code": "\tpublic final T failureUrl(String authenticationFailureUrl) {\n\t\tT result = failureHandler(new SimpleUrlAuthenticationFailureHandler(authenticationFailureUrl));\n\t\tthis.failureUrl = authenticationFailureUrl;\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "the",
            "url",
            "to",
            "send",
            "users",
            "if",
            "authentication",
            "fails"
        ]
    },
    {
        "id": 195,
        "code": "\tpublic final T failureHandler(AuthenticationFailureHandler authenticationFailureHandler) {\n\t\tthis.failureUrl = null;\n\t\tthis.failureHandler = authenticationFailureHandler;\n\t\treturn getSelf();\n\t}",
        "summary_tokens": [
            "specifies",
            "the",
            "authentication",
            "failure",
            "handler",
            "to",
            "use",
            "when",
            "authentication",
            "fails"
        ]
    },
    {
        "id": 196,
        "code": "\tprotected T loginPage(String loginPage) {\n\t\tsetLoginPage(loginPage);\n\t\tupdateAuthenticationDefaults();\n\t\tthis.customLoginPage = true;\n\t\treturn getSelf();\n\t}",
        "summary_tokens": [
            "p",
            "specifies",
            "the",
            "url",
            "to",
            "send",
            "users",
            "to",
            "if",
            "login",
            "is",
            "required"
        ]
    },
    {
        "id": 197,
        "code": "\tpublic final boolean isCustomLoginPage() {\n\t\treturn this.customLoginPage;\n\t}",
        "summary_tokens": [
            "true",
            "if",
            "a",
            "custom",
            "login",
            "page",
            "has",
            "been",
            "specified",
            "else",
            "false"
        ]
    },
    {
        "id": 198,
        "code": "\tprotected final F getAuthenticationFilter() {\n\t\treturn this.authFilter;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "authentication",
            "filter",
            "the",
            "authentication",
            "filter"
        ]
    },
    {
        "id": 199,
        "code": "\tprotected final void setAuthenticationFilter(F authFilter) {\n\t\tthis.authFilter = authFilter;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "authentication",
            "filter",
            "auth",
            "filter",
            "the",
            "authentication",
            "filter"
        ]
    },
    {
        "id": 200,
        "code": "\tprotected final String getLoginPage() {\n\t\treturn this.loginPage;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "login",
            "page",
            "the",
            "login",
            "page"
        ]
    },
    {
        "id": 201,
        "code": "\tprotected final AuthenticationEntryPoint getAuthenticationEntryPoint() {\n\t\treturn this.authenticationEntryPoint;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "authentication",
            "entry",
            "point",
            "the",
            "authentication",
            "entry",
            "point"
        ]
    },
    {
        "id": 202,
        "code": "\tprotected final String getLoginProcessingUrl() {\n\t\treturn this.loginProcessingUrl;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "url",
            "to",
            "submit",
            "an",
            "authentication",
            "request",
            "to",
            "i"
        ]
    },
    {
        "id": 203,
        "code": "\tprotected final String getFailureUrl() {\n\t\treturn this.failureUrl;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "url",
            "to",
            "send",
            "users",
            "to",
            "if",
            "authentication",
            "fails",
            "the",
            "url",
            "to",
            "send",
            "users",
            "if",
            "authentication",
            "fails",
            "e"
        ]
    },
    {
        "id": 204,
        "code": "\tprotected final void updateAuthenticationDefaults() {\n\t\tif (this.loginProcessingUrl == null) {\n\t\t\tloginProcessingUrl(this.loginPage);\n\t\t}\n\t\tif (this.failureHandler == null) {\n\t\t\tfailureUrl(this.loginPage + \"?error\");\n\t\t}\n\t\tLogoutConfigurer<B> logoutConfigurer = getBuilder().getConfigurer(LogoutConfigurer.class);\n\t\tif (logoutConfigurer != null && !logoutConfigurer.isCustomLogoutSuccess()) {\n\t\t\tlogoutConfigurer.logoutSuccessUrl(this.loginPage + \"?logout\");\n\t\t}\n\t}",
        "summary_tokens": [
            "updates",
            "the",
            "default",
            "values",
            "for",
            "authentication"
        ]
    },
    {
        "id": 205,
        "code": "\tprotected final void updateAccessDefaults(B http) {\n\t\tif (this.permitAll) {\n\t\t\tPermitAllSupport.permitAll(http, this.loginPage, this.loginProcessingUrl, this.failureUrl);\n\t\t}\n\t}",
        "summary_tokens": [
            "updates",
            "the",
            "default",
            "values",
            "for",
            "access"
        ]
    },
    {
        "id": 206,
        "code": "\tprivate void setLoginPage(String loginPage) {\n\t\tthis.loginPage = loginPage;\n\t\tthis.authenticationEntryPoint = new LoginUrlAuthenticationEntryPoint(loginPage);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "login",
            "page",
            "and",
            "updates",
            "the",
            "authentication",
            "entry",
            "point"
        ]
    },
    {
        "id": 207,
        "code": "\tfinal List<UrlMapping> getUrlMappings() {\n\t\treturn this.urlMappings;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "url",
            "mapping",
            "added",
            "by",
            "subclasses",
            "in",
            "chain",
            "request",
            "matchers",
            "java"
        ]
    },
    {
        "id": 208,
        "code": "\tfinal void addMapping(int index, UrlMapping urlMapping) {\n\t\tthis.urlMappings.add(index, urlMapping);\n\t}",
        "summary_tokens": [
            "adds",
            "a",
            "url",
            "mapping",
            "added",
            "by",
            "subclasses",
            "in",
            "chain",
            "request",
            "matchers",
            "java"
        ]
    },
    {
        "id": 209,
        "code": "\tprotected final C chainRequestMatchers(List<RequestMatcher> requestMatchers) {\n\t\tthis.unmappedMatchers = requestMatchers;\n\t\treturn chainRequestMatchersInternal(requestMatchers);\n\t}",
        "summary_tokens": [
            "marks",
            "the",
            "request",
            "matcher",
            "s",
            "as",
            "unmapped",
            "and",
            "then",
            "calls",
            "chain",
            "request",
            "matchers",
            "internal",
            "list"
        ]
    },
    {
        "id": 210,
        "code": "\tfinal LinkedHashMap<RequestMatcher, Collection<ConfigAttribute>> createRequestMap() {\n\t\tAssert.state(this.unmappedMatchers == null, () -> \"An incomplete mapping was found for \" + this.unmappedMatchers\n\t\t\t\t+ \". Try completing it with something like requestUrls().<something>.hasRole('USER')\");\n\t\tLinkedHashMap<RequestMatcher, Collection<ConfigAttribute>> requestMap = new LinkedHashMap<>();\n\t\tfor (UrlMapping mapping : getUrlMappings()) {\n\t\t\tRequestMatcher matcher = mapping.getRequestMatcher();\n\t\t\tCollection<ConfigAttribute> configAttrs = mapping.getConfigAttrs();\n\t\t\trequestMap.put(matcher, configAttrs);\n\t\t}\n\t\treturn requestMap;\n\t}",
        "summary_tokens": [
            "creates",
            "the",
            "mapping",
            "of",
            "request",
            "matcher",
            "to",
            "collection",
            "of",
            "config",
            "attribute",
            "instances",
            "the",
            "mapping",
            "of",
            "request",
            "matcher",
            "to",
            "collection",
            "of",
            "config",
            "attribute",
            "instances"
        ]
    },
    {
        "id": 211,
        "code": "\tpublic B disable() {\n\t\tgetBuilder().removeConfigurer(getClass());\n\t\treturn getBuilder();\n\t}",
        "summary_tokens": [
            "disables",
            "the",
            "abstract",
            "http",
            "configurer",
            "by",
            "removing",
            "it"
        ]
    },
    {
        "id": 212,
        "code": "\tprivate AccessDecisionManager createDefaultAccessDecisionManager(H http) {\n\t\tAffirmativeBased result = new AffirmativeBased(getDecisionVoters(http));\n\t\treturn postProcess(result);\n\t}",
        "summary_tokens": [
            "creates",
            "the",
            "default",
            "access",
            "decision",
            "manager",
            "the",
            "default",
            "access",
            "decision",
            "manager"
        ]
    },
    {
        "id": 213,
        "code": "\tprivate AccessDecisionManager getAccessDecisionManager(H http) {\n\t\tif (this.accessDecisionManager == null) {\n\t\t\tthis.accessDecisionManager = createDefaultAccessDecisionManager(http);\n\t\t}\n\t\treturn this.accessDecisionManager;\n\t}",
        "summary_tokens": [
            "if",
            "currently",
            "null",
            "creates",
            "a",
            "default",
            "access",
            "decision",
            "manager",
            "using",
            "create",
            "default",
            "access",
            "decision",
            "manager",
            "http",
            "security",
            "builder"
        ]
    },
    {
        "id": 214,
        "code": "\tprivate FilterSecurityInterceptor createFilterSecurityInterceptor(H http,\n\t\t\tFilterInvocationSecurityMetadataSource metadataSource, AuthenticationManager authenticationManager)\n\t\t\tthrows Exception {\n\t\tFilterSecurityInterceptor securityInterceptor = new FilterSecurityInterceptor();\n\t\tsecurityInterceptor.setSecurityMetadataSource(metadataSource);\n\t\tsecurityInterceptor.setAccessDecisionManager(getAccessDecisionManager(http));\n\t\tsecurityInterceptor.setAuthenticationManager(authenticationManager);\n\t\tsecurityInterceptor.setSecurityContextHolderStrategy(getSecurityContextHolderStrategy());\n\t\tsecurityInterceptor.afterPropertiesSet();\n\t\treturn securityInterceptor;\n\t}",
        "summary_tokens": [
            "creates",
            "the",
            "filter",
            "security",
            "interceptor",
            "http",
            "the",
            "builder",
            "to",
            "use",
            "metadata",
            "source",
            "the",
            "filter",
            "invocation",
            "security",
            "metadata",
            "source",
            "to",
            "use",
            "authentication",
            "manager",
            "the",
            "authentication",
            "manager",
            "to",
            "use",
            "the",
            "filter",
            "security",
            "interceptor",
            "exception"
        ]
    },
    {
        "id": 215,
        "code": "\tpublic AnonymousConfigurer<H> key(String key) {\n\t\tthis.key = key;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "key",
            "to",
            "identify",
            "tokens",
            "created",
            "for",
            "anonymous",
            "authentication"
        ]
    },
    {
        "id": 216,
        "code": "\tpublic AnonymousConfigurer<H> principal(Object principal) {\n\t\tthis.principal = principal;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "principal",
            "for",
            "authentication",
            "objects",
            "of",
            "anonymous",
            "users",
            "principal",
            "used",
            "for",
            "the",
            "authentication",
            "object",
            "of",
            "anonymous",
            "users",
            "the",
            "anonymous",
            "configurer",
            "for",
            "further",
            "customization",
            "of",
            "anonymous",
            "authentication"
        ]
    },
    {
        "id": 217,
        "code": "\tpublic AnonymousConfigurer<H> authenticationProvider(AuthenticationProvider authenticationProvider) {\n\t\tthis.authenticationProvider = authenticationProvider;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "authentication",
            "provider",
            "used",
            "to",
            "validate",
            "an",
            "anonymous",
            "user"
        ]
    },
    {
        "id": 218,
        "code": "\tpublic AnonymousConfigurer<H> authenticationFilter(AnonymousAuthenticationFilter authenticationFilter) {\n\t\tthis.authenticationFilter = authenticationFilter;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "anonymous",
            "authentication",
            "filter",
            "used",
            "to",
            "populate",
            "an",
            "anonymous",
            "user"
        ]
    },
    {
        "id": 219,
        "code": "\tpublic AuthorizationManagerRequestMatcherRegistry getRegistry() {\n\t\treturn this.registry;\n\t}",
        "summary_tokens": [
            "the",
            "authorization",
            "manager",
            "request",
            "matcher",
            "registry",
            "is",
            "what",
            "users",
            "will",
            "interact",
            "with",
            "after",
            "applying",
            "the",
            "authorize",
            "http",
            "requests",
            "configurer"
        ]
    },
    {
        "id": 220,
        "code": "\tpublic CsrfConfigurer<H> csrfTokenRepository(CsrfTokenRepository csrfTokenRepository) {\n\t\tAssert.notNull(csrfTokenRepository, \"csrfTokenRepository cannot be null\");\n\t\tthis.csrfTokenRepository = csrfTokenRepository;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "specify",
            "the",
            "csrf",
            "token",
            "repository",
            "to",
            "use"
        ]
    },
    {
        "id": 221,
        "code": "\tpublic CsrfConfigurer<H> requireCsrfProtectionMatcher(RequestMatcher requireCsrfProtectionMatcher) {\n\t\tAssert.notNull(requireCsrfProtectionMatcher, \"requireCsrfProtectionMatcher cannot be null\");\n\t\tthis.requireCsrfProtectionMatcher = requireCsrfProtectionMatcher;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "specify",
            "the",
            "request",
            "matcher",
            "to",
            "use",
            "for",
            "determining",
            "when",
            "csrf",
            "should",
            "be",
            "applied"
        ]
    },
    {
        "id": 222,
        "code": "\tpublic CsrfConfigurer<H> csrfTokenRequestAttributeHandler(\n\t\t\tCsrfTokenRequestAttributeHandler requestAttributeHandler) {\n\t\tthis.requestAttributeHandler = requestAttributeHandler;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "specify",
            "a",
            "csrf",
            "token",
            "request",
            "attribute",
            "handler",
            "to",
            "use",
            "for",
            "making",
            "the",
            "csrf",
            "token",
            "available",
            "as",
            "a",
            "request",
            "attribute"
        ]
    },
    {
        "id": 223,
        "code": "\tpublic CsrfConfigurer<H> csrfTokenRequestResolver(CsrfTokenRequestResolver requestResolver) {\n\t\tthis.requestResolver = requestResolver;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "specify",
            "a",
            "csrf",
            "token",
            "request",
            "resolver",
            "to",
            "use",
            "for",
            "resolving",
            "the",
            "token",
            "value",
            "from",
            "the",
            "request"
        ]
    },
    {
        "id": 224,
        "code": "\tpublic CsrfConfigurer<H> ignoringAntMatchers(String... antPatterns) {\n\t\treturn new IgnoreCsrfProtectionRegistry(this.context).antMatchers(antPatterns).and();\n\t}",
        "summary_tokens": [
            "p",
            "allows",
            "specifying",
            "http",
            "servlet",
            "request",
            "that",
            "should",
            "not",
            "use",
            "csrf",
            "protection",
            "even",
            "if",
            "they",
            "match",
            "the",
            "require",
            "csrf",
            "protection",
            "matcher",
            "request",
            "matcher"
        ]
    },
    {
        "id": 225,
        "code": "\tpublic CsrfConfigurer<H> ignoringRequestMatchers(RequestMatcher... requestMatchers) {\n\t\treturn new IgnoreCsrfProtectionRegistry(this.context).requestMatchers(requestMatchers).and();\n\t}",
        "summary_tokens": [
            "p",
            "allows",
            "specifying",
            "http",
            "servlet",
            "request",
            "s",
            "that",
            "should",
            "not",
            "use",
            "csrf",
            "protection",
            "even",
            "if",
            "they",
            "match",
            "the",
            "require",
            "csrf",
            "protection",
            "matcher",
            "request",
            "matcher"
        ]
    },
    {
        "id": 226,
        "code": "\tpublic CsrfConfigurer<H> sessionAuthenticationStrategy(\n\t\t\tSessionAuthenticationStrategy sessionAuthenticationStrategy) {\n\t\tAssert.notNull(sessionAuthenticationStrategy, \"sessionAuthenticationStrategy cannot be null\");\n\t\tthis.sessionAuthenticationStrategy = sessionAuthenticationStrategy;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "p",
            "specify",
            "the",
            "session",
            "authentication",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 227,
        "code": "\tprivate RequestMatcher getRequireCsrfProtectionMatcher() {\n\t\tif (this.ignoredCsrfProtectionMatchers.isEmpty()) {\n\t\t\treturn this.requireCsrfProtectionMatcher;\n\t\t}\n\t\treturn new AndRequestMatcher(this.requireCsrfProtectionMatcher,\n\t\t\t\tnew NegatedRequestMatcher(new OrRequestMatcher(this.ignoredCsrfProtectionMatchers)));\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "final",
            "request",
            "matcher",
            "to",
            "use",
            "by",
            "combining",
            "the",
            "require",
            "csrf",
            "protection",
            "matcher",
            "request",
            "matcher",
            "and",
            "any",
            "ignore"
        ]
    },
    {
        "id": 228,
        "code": "\tprivate AccessDeniedHandler getDefaultAccessDeniedHandler(H http) {\n\t\tExceptionHandlingConfigurer<H> exceptionConfig = http.getConfigurer(ExceptionHandlingConfigurer.class);\n\t\tAccessDeniedHandler handler = null;\n\t\tif (exceptionConfig != null) {\n\t\t\thandler = exceptionConfig.getAccessDeniedHandler(http);\n\t\t}\n\t\tif (handler == null) {\n\t\t\thandler = new AccessDeniedHandlerImpl();\n\t\t}\n\t\treturn handler;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "default",
            "access",
            "denied",
            "handler",
            "from",
            "the",
            "exception",
            "handling",
            "configurer",
            "get",
            "access",
            "denied",
            "handler",
            "http",
            "security",
            "builder",
            "or",
            "create",
            "a",
            "access",
            "denied",
            "handler",
            "impl",
            "if",
            "not",
            "available"
        ]
    },
    {
        "id": 229,
        "code": "\tprivate InvalidSessionStrategy getInvalidSessionStrategy(H http) {\n\t\tSessionManagementConfigurer<H> sessionManagement = http.getConfigurer(SessionManagementConfigurer.class);\n\t\tif (sessionManagement == null) {\n\t\t\treturn null;\n\t\t}\n\t\treturn sessionManagement.getInvalidSessionStrategy();\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "default",
            "invalid",
            "session",
            "strategy",
            "from",
            "the",
            "session",
            "management",
            "configurer",
            "get",
            "invalid",
            "session",
            "strategy",
            "or",
            "null",
            "if",
            "not",
            "available"
        ]
    },
    {
        "id": 230,
        "code": "\tprivate AccessDeniedHandler createAccessDeniedHandler(H http) {\n\t\tInvalidSessionStrategy invalidSessionStrategy = getInvalidSessionStrategy(http);\n\t\tAccessDeniedHandler defaultAccessDeniedHandler = getDefaultAccessDeniedHandler(http);\n\t\tif (invalidSessionStrategy == null) {\n\t\t\treturn defaultAccessDeniedHandler;\n\t\t}\n\t\tInvalidSessionAccessDeniedHandler invalidSessionDeniedHandler = new InvalidSessionAccessDeniedHandler(\n\t\t\t\tinvalidSessionStrategy);\n\t\tLinkedHashMap<Class<? extends AccessDeniedException>, AccessDeniedHandler> handlers = new LinkedHashMap<>();\n\t\thandlers.put(MissingCsrfTokenException.class, invalidSessionDeniedHandler);\n\t\treturn new DelegatingAccessDeniedHandler(handlers, defaultAccessDeniedHandler);\n\t}",
        "summary_tokens": [
            "creates",
            "the",
            "access",
            "denied",
            "handler",
            "from",
            "the",
            "result",
            "of",
            "get",
            "default",
            "access",
            "denied",
            "handler",
            "http",
            "security",
            "builder",
            "and",
            "get",
            "invalid",
            "session",
            "strategy",
            "http",
            "security",
            "builder"
        ]
    },
    {
        "id": 231,
        "code": "\tprivate SessionAuthenticationStrategy getSessionAuthenticationStrategy() {\n\t\tif (this.sessionAuthenticationStrategy != null) {\n\t\t\treturn this.sessionAuthenticationStrategy;\n\t\t}\n\t\tCsrfAuthenticationStrategy csrfAuthenticationStrategy = new CsrfAuthenticationStrategy(\n\t\t\t\tthis.csrfTokenRepository);\n\t\tif (this.requestAttributeHandler != null) {\n\t\t\tcsrfAuthenticationStrategy.setRequestAttributeHandler(this.requestAttributeHandler);\n\t\t}\n\t\treturn csrfAuthenticationStrategy;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "session",
            "authentication",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 232,
        "code": "\tpublic ExceptionHandlingConfigurer<H> accessDeniedPage(String accessDeniedUrl) {\n\t\tAccessDeniedHandlerImpl accessDeniedHandler = new AccessDeniedHandlerImpl();\n\t\taccessDeniedHandler.setErrorPage(accessDeniedUrl);\n\t\treturn accessDeniedHandler(accessDeniedHandler);\n\t}",
        "summary_tokens": [
            "shortcut",
            "to",
            "specify",
            "the",
            "access",
            "denied",
            "handler",
            "to",
            "be",
            "used",
            "is",
            "a",
            "specific",
            "error",
            "page",
            "access",
            "denied",
            "url",
            "the",
            "url",
            "to",
            "the",
            "access",
            "denied",
            "page",
            "i"
        ]
    },
    {
        "id": 233,
        "code": "\tpublic ExceptionHandlingConfigurer<H> accessDeniedHandler(AccessDeniedHandler accessDeniedHandler) {\n\t\tthis.accessDeniedHandler = accessDeniedHandler;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "specifies",
            "the",
            "access",
            "denied",
            "handler",
            "to",
            "be",
            "used",
            "access",
            "denied",
            "handler",
            "the",
            "access",
            "denied",
            "handler",
            "to",
            "be",
            "used",
            "the",
            "exception",
            "handling",
            "configurer",
            "for",
            "further",
            "customization"
        ]
    },
    {
        "id": 234,
        "code": "\tpublic ExceptionHandlingConfigurer<H> defaultAccessDeniedHandlerFor(AccessDeniedHandler deniedHandler,\n\t\t\tRequestMatcher preferredMatcher) {\n\t\tthis.defaultDeniedHandlerMappings.put(preferredMatcher, deniedHandler);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "sets",
            "a",
            "default",
            "access",
            "denied",
            "handler",
            "to",
            "be",
            "used",
            "which",
            "prefers",
            "being",
            "invoked",
            "for",
            "the",
            "provided",
            "request",
            "matcher"
        ]
    },
    {
        "id": 235,
        "code": "\tpublic ExceptionHandlingConfigurer<H> authenticationEntryPoint(AuthenticationEntryPoint authenticationEntryPoint) {\n\t\tthis.authenticationEntryPoint = authenticationEntryPoint;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "authentication",
            "entry",
            "point",
            "to",
            "be",
            "used"
        ]
    },
    {
        "id": 236,
        "code": "\tpublic ExceptionHandlingConfigurer<H> defaultAuthenticationEntryPointFor(AuthenticationEntryPoint entryPoint,\n\t\t\tRequestMatcher preferredMatcher) {\n\t\tthis.defaultEntryPointMappings.put(preferredMatcher, entryPoint);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "sets",
            "a",
            "default",
            "authentication",
            "entry",
            "point",
            "to",
            "be",
            "used",
            "which",
            "prefers",
            "being",
            "invoked",
            "for",
            "the",
            "provided",
            "request",
            "matcher"
        ]
    },
    {
        "id": 237,
        "code": "\tAuthenticationEntryPoint getAuthenticationEntryPoint(H http) {\n\t\tAuthenticationEntryPoint entryPoint = this.authenticationEntryPoint;\n\t\tif (entryPoint == null) {\n\t\t\tentryPoint = createDefaultEntryPoint(http);\n\t\t}\n\t\treturn entryPoint;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "authentication",
            "entry",
            "point",
            "according",
            "to",
            "the",
            "rules",
            "specified",
            "by",
            "authentication",
            "entry",
            "point",
            "authentication",
            "entry",
            "point",
            "http",
            "the",
            "http",
            "security",
            "used",
            "to",
            "look",
            "up",
            "shared",
            "authentication",
            "entry",
            "point",
            "the",
            "authentication",
            "entry",
            "point",
            "to",
            "use"
        ]
    },
    {
        "id": 238,
        "code": "\tAccessDeniedHandler getAccessDeniedHandler(H http) {\n\t\tAccessDeniedHandler deniedHandler = this.accessDeniedHandler;\n\t\tif (deniedHandler == null) {\n\t\t\tdeniedHandler = createDefaultDeniedHandler(http);\n\t\t}\n\t\treturn deniedHandler;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "access",
            "denied",
            "handler",
            "according",
            "to",
            "the",
            "rules",
            "specified",
            "by",
            "access",
            "denied",
            "handler",
            "access",
            "denied",
            "handler",
            "http",
            "the",
            "http",
            "security",
            "used",
            "to",
            "look",
            "up",
            "shared",
            "access",
            "denied",
            "handler",
            "the",
            "access",
            "denied",
            "handler",
            "to",
            "use"
        ]
    },
    {
        "id": 239,
        "code": "\tprivate RequestCache getRequestCache(H http) {\n\t\tRequestCache result = http.getSharedObject(RequestCache.class);\n\t\tif (result != null) {\n\t\t\treturn result;\n\t\t}\n\t\treturn new HttpSessionRequestCache();\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "request",
            "cache",
            "to",
            "use"
        ]
    },
    {
        "id": 240,
        "code": "\tprivate void interceptUrl(Iterable<? extends RequestMatcher> requestMatchers,\n\t\t\tCollection<ConfigAttribute> configAttributes) {\n\t\tfor (RequestMatcher requestMatcher : requestMatchers) {\n\t\t\tthis.REGISTRY.addMapping(\n\t\t\t\t\tnew AbstractConfigAttributeRequestMatcherRegistry.UrlMapping(requestMatcher, configAttributes));\n\t\t}\n\t}",
        "summary_tokens": [
            "allows",
            "registering",
            "multiple",
            "request",
            "matcher",
            "instances",
            "to",
            "a",
            "collection",
            "of",
            "config",
            "attribute",
            "instances",
            "request",
            "matchers",
            "the",
            "request",
            "matcher",
            "instances",
            "to",
            "register",
            "to",
            "the",
            "config",
            "attribute",
            "instances",
            "config",
            "attributes",
            "the",
            "config",
            "attribute",
            "to",
            "be",
            "mapped",
            "by",
            "the",
            "request",
            "matcher",
            "instances"
        ]
    },
    {
        "id": 241,
        "code": "\tpublic FormLoginConfigurer<H> loginPage(String loginPage) {\n\t\treturn super.loginPage(loginPage);\n\t}",
        "summary_tokens": [
            "p",
            "specifies",
            "the",
            "url",
            "to",
            "send",
            "users",
            "to",
            "if",
            "login",
            "is",
            "required"
        ]
    },
    {
        "id": 242,
        "code": "\tpublic FormLoginConfigurer<H> usernameParameter(String usernameParameter) {\n\t\tgetAuthenticationFilter().setUsernameParameter(usernameParameter);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "the",
            "http",
            "parameter",
            "to",
            "look",
            "for",
            "the",
            "username",
            "when",
            "performing",
            "authentication"
        ]
    },
    {
        "id": 243,
        "code": "\tpublic FormLoginConfigurer<H> passwordParameter(String passwordParameter) {\n\t\tgetAuthenticationFilter().setPasswordParameter(passwordParameter);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "the",
            "http",
            "parameter",
            "to",
            "look",
            "for",
            "the",
            "password",
            "when",
            "performing",
            "authentication"
        ]
    },
    {
        "id": 244,
        "code": "\tpublic FormLoginConfigurer<H> failureForwardUrl(String forwardUrl) {\n\t\tfailureHandler(new ForwardAuthenticationFailureHandler(forwardUrl));\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "forward",
            "authentication",
            "failure",
            "handler",
            "forward",
            "url",
            "the",
            "target",
            "url",
            "in",
            "case",
            "of",
            "failure",
            "the",
            "form",
            "login",
            "configurer",
            "for",
            "additional",
            "customization"
        ]
    },
    {
        "id": 245,
        "code": "\tpublic FormLoginConfigurer<H> successForwardUrl(String forwardUrl) {\n\t\tsuccessHandler(new ForwardAuthenticationSuccessHandler(forwardUrl));\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "forward",
            "authentication",
            "success",
            "handler",
            "forward",
            "url",
            "the",
            "target",
            "url",
            "in",
            "case",
            "of",
            "success",
            "the",
            "form",
            "login",
            "configurer",
            "for",
            "additional",
            "customization"
        ]
    },
    {
        "id": 246,
        "code": "\tprivate String getUsernameParameter() {\n\t\treturn getAuthenticationFilter().getUsernameParameter();\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "http",
            "parameter",
            "that",
            "is",
            "used",
            "to",
            "submit",
            "the",
            "username"
        ]
    },
    {
        "id": 247,
        "code": "\tprivate String getPasswordParameter() {\n\t\treturn getAuthenticationFilter().getPasswordParameter();\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "http",
            "parameter",
            "that",
            "is",
            "used",
            "to",
            "submit",
            "the",
            "password"
        ]
    },
    {
        "id": 248,
        "code": "\tprivate void initDefaultLoginFilter(H http) {\n\t\tDefaultLoginPageGeneratingFilter loginPageGeneratingFilter = http\n\t\t\t\t.getSharedObject(DefaultLoginPageGeneratingFilter.class);\n\t\tif (loginPageGeneratingFilter != null && !isCustomLoginPage()) {\n\t\t\tloginPageGeneratingFilter.setFormLoginEnabled(true);\n\t\t\tloginPageGeneratingFilter.setUsernameParameter(getUsernameParameter());\n\t\t\tloginPageGeneratingFilter.setPasswordParameter(getPasswordParameter());\n\t\t\tloginPageGeneratingFilter.setLoginPageUrl(getLoginPage());\n\t\t\tloginPageGeneratingFilter.setFailureUrl(getFailureUrl());\n\t\t\tloginPageGeneratingFilter.setAuthenticationUrl(getLoginProcessingUrl());\n\t\t}\n\t}",
        "summary_tokens": [
            "if",
            "available",
            "initializes",
            "the",
            "default",
            "login",
            "page",
            "generating",
            "filter",
            "shared",
            "object"
        ]
    },
    {
        "id": 249,
        "code": "\tpublic HeadersConfigurer<H> addHeaderWriter(HeaderWriter headerWriter) {\n\t\tAssert.notNull(headerWriter, \"headerWriter cannot be null\");\n\t\tthis.headerWriters.add(headerWriter);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "adds",
            "a",
            "header",
            "writer",
            "instance",
            "header",
            "writer",
            "the",
            "header",
            "writer",
            "instance",
            "to",
            "add",
            "the",
            "headers",
            "configurer",
            "for",
            "additional",
            "customizations"
        ]
    },
    {
        "id": 250,
        "code": "\tpublic HeadersConfigurer<H> contentTypeOptions(Customizer<ContentTypeOptionsConfig> contentTypeOptionsCustomizer) {\n\t\tcontentTypeOptionsCustomizer.customize(this.contentTypeOptions.enable());\n\t\treturn HeadersConfigurer.this;\n\t}",
        "summary_tokens": [
            "configures",
            "the",
            "xcontent",
            "type",
            "options",
            "header",
            "writer",
            "which",
            "inserts",
            "the",
            "a",
            "href",
            "https",
            "msdn"
        ]
    },
    {
        "id": 251,
        "code": "\tpublic HeadersConfigurer<H> xssProtection(Customizer<XXssConfig> xssCustomizer) {\n\t\txssCustomizer.customize(this.xssProtection.enable());\n\t\treturn HeadersConfigurer.this;\n\t}",
        "summary_tokens": [
            "strong",
            "note",
            "this",
            "is",
            "not",
            "comprehensive",
            "xss",
            "protection",
            "strong"
        ]
    },
    {
        "id": 252,
        "code": "\tpublic HeadersConfigurer<H> cacheControl(Customizer<CacheControlConfig> cacheControlCustomizer) {\n\t\tcacheControlCustomizer.customize(this.cacheControl.enable());\n\t\treturn HeadersConfigurer.this;\n\t}",
        "summary_tokens": [
            "allows",
            "customizing",
            "the",
            "cache",
            "control",
            "headers",
            "writer"
        ]
    },
    {
        "id": 253,
        "code": "\tpublic HeadersConfigurer<H> httpStrictTransportSecurity(Customizer<HstsConfig> hstsCustomizer) {\n\t\thstsCustomizer.customize(this.hsts.enable());\n\t\treturn HeadersConfigurer.this;\n\t}",
        "summary_tokens": [
            "allows",
            "customizing",
            "the",
            "hsts",
            "header",
            "writer",
            "which",
            "provides",
            "support",
            "for",
            "a",
            "href",
            "https",
            "tools"
        ]
    },
    {
        "id": 254,
        "code": "\tpublic HeadersConfigurer<H> frameOptions(Customizer<FrameOptionsConfig> frameOptionsCustomizer) {\n\t\tframeOptionsCustomizer.customize(this.frameOptions.enable());\n\t\treturn HeadersConfigurer.this;\n\t}",
        "summary_tokens": [
            "allows",
            "customizing",
            "the",
            "xframe",
            "options",
            "header",
            "writer"
        ]
    },
    {
        "id": 255,
        "code": "\tpublic HeadersConfigurer<H> httpPublicKeyPinning(Customizer<HpkpConfig> hpkpCustomizer) {\n\t\thpkpCustomizer.customize(this.hpkp.enable());\n\t\treturn HeadersConfigurer.this;\n\t}",
        "summary_tokens": [
            "allows",
            "customizing",
            "the",
            "hpkp",
            "header",
            "writer",
            "which",
            "provides",
            "support",
            "for",
            "a",
            "href",
            "https",
            "tools"
        ]
    },
    {
        "id": 256,
        "code": "\tpublic HeadersConfigurer<H> contentSecurityPolicy(\n\t\t\tCustomizer<ContentSecurityPolicyConfig> contentSecurityCustomizer) {\n\t\tthis.contentSecurityPolicy.writer = new ContentSecurityPolicyHeaderWriter();\n\t\tcontentSecurityCustomizer.customize(this.contentSecurityPolicy);\n\t\treturn HeadersConfigurer.this;\n\t}",
        "summary_tokens": [
            "p",
            "allows",
            "configuration",
            "for",
            "a",
            "href",
            "https",
            "www"
        ]
    },
    {
        "id": 257,
        "code": "\tpublic HeadersConfigurer<H> defaultsDisabled() {\n\t\tthis.contentTypeOptions.disable();\n\t\tthis.xssProtection.disable();\n\t\tthis.cacheControl.disable();\n\t\tthis.hsts.disable();\n\t\tthis.frameOptions.disable();\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "clears",
            "all",
            "of",
            "the",
            "default",
            "headers",
            "from",
            "the",
            "response"
        ]
    },
    {
        "id": 258,
        "code": "\tprivate HeaderWriterFilter createHeaderWriterFilter() {\n\t\tList<HeaderWriter> writers = getHeaderWriters();\n\t\tif (writers.isEmpty()) {\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\"Headers security is enabled, but no headers will be added. Either add headers or disable headers security\");\n\t\t}\n\t\tHeaderWriterFilter headersFilter = new HeaderWriterFilter(writers);\n\t\theadersFilter = postProcess(headersFilter);\n\t\treturn headersFilter;\n\t}",
        "summary_tokens": [
            "creates",
            "the",
            "header",
            "writer",
            "the",
            "header",
            "writer"
        ]
    },
    {
        "id": 259,
        "code": "\tprivate List<HeaderWriter> getHeaderWriters() {\n\t\tList<HeaderWriter> writers = new ArrayList<>();\n\t\taddIfNotNull(writers, this.contentTypeOptions.writer);\n\t\taddIfNotNull(writers, this.xssProtection.writer);\n\t\taddIfNotNull(writers, this.cacheControl.writer);\n\t\taddIfNotNull(writers, this.hsts.writer);\n\t\taddIfNotNull(writers, this.frameOptions.writer);\n\t\taddIfNotNull(writers, this.hpkp.writer);\n\t\taddIfNotNull(writers, this.contentSecurityPolicy.writer);\n\t\taddIfNotNull(writers, this.referrerPolicy.writer);\n\t\taddIfNotNull(writers, this.featurePolicy.writer);\n\t\taddIfNotNull(writers, this.permissionsPolicy.writer);\n\t\taddIfNotNull(writers, this.crossOriginOpenerPolicy.writer);\n\t\taddIfNotNull(writers, this.crossOriginEmbedderPolicy.writer);\n\t\taddIfNotNull(writers, this.crossOriginResourcePolicy.writer);\n\t\twriters.addAll(this.headerWriters);\n\t\treturn writers;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "header",
            "writer",
            "instances",
            "and",
            "possibly",
            "initializes",
            "with",
            "the",
            "defaults"
        ]
    },
    {
        "id": 260,
        "code": "\tpublic HeadersConfigurer<H> referrerPolicy(Customizer<ReferrerPolicyConfig> referrerPolicyCustomizer) {\n\t\tthis.referrerPolicy.writer = new ReferrerPolicyHeaderWriter();\n\t\treferrerPolicyCustomizer.customize(this.referrerPolicy);\n\t\treturn HeadersConfigurer.this;\n\t}",
        "summary_tokens": [
            "p",
            "allows",
            "configuration",
            "for",
            "a",
            "href",
            "https",
            "www"
        ]
    },
    {
        "id": 261,
        "code": "\tpublic FeaturePolicyConfig featurePolicy(String policyDirectives) {\n\t\tthis.featurePolicy.writer = new FeaturePolicyHeaderWriter(policyDirectives);\n\t\treturn this.featurePolicy;\n\t}",
        "summary_tokens": [
            "allows",
            "configuration",
            "for",
            "a",
            "href",
            "https",
            "wicg"
        ]
    },
    {
        "id": 262,
        "code": "\tpublic PermissionsPolicyConfig permissionsPolicy(Customizer<PermissionsPolicyConfig> permissionsPolicyCustomizer) {\n\t\tthis.permissionsPolicy.writer = new PermissionsPolicyHeaderWriter();\n\t\tpermissionsPolicyCustomizer.customize(this.permissionsPolicy);\n\t\treturn this.permissionsPolicy;\n\t}",
        "summary_tokens": [
            "allows",
            "configuration",
            "for",
            "a",
            "href",
            "https",
            "w",
            "0",
            "c"
        ]
    },
    {
        "id": 263,
        "code": "\tpublic HeadersConfigurer<H> crossOriginOpenerPolicy(\n\t\t\tCustomizer<CrossOriginOpenerPolicyConfig> crossOriginOpenerPolicyCustomizer) {\n\t\tthis.crossOriginOpenerPolicy.writer = new CrossOriginOpenerPolicyHeaderWriter();\n\t\tcrossOriginOpenerPolicyCustomizer.customize(this.crossOriginOpenerPolicy);\n\t\treturn HeadersConfigurer.this;\n\t}",
        "summary_tokens": [
            "allows",
            "configuration",
            "for",
            "a",
            "href",
            "https",
            "developer"
        ]
    },
    {
        "id": 264,
        "code": "\tpublic HeadersConfigurer<H> crossOriginEmbedderPolicy(\n\t\t\tCustomizer<CrossOriginEmbedderPolicyConfig> crossOriginEmbedderPolicyCustomizer) {\n\t\tthis.crossOriginEmbedderPolicy.writer = new CrossOriginEmbedderPolicyHeaderWriter();\n\t\tcrossOriginEmbedderPolicyCustomizer.customize(this.crossOriginEmbedderPolicy);\n\t\treturn HeadersConfigurer.this;\n\t}",
        "summary_tokens": [
            "allows",
            "configuration",
            "for",
            "a",
            "href",
            "https",
            "developer"
        ]
    },
    {
        "id": 265,
        "code": "\tpublic HeadersConfigurer<H> crossOriginResourcePolicy(\n\t\t\tCustomizer<CrossOriginResourcePolicyConfig> crossOriginResourcePolicyCustomizer) {\n\t\tthis.crossOriginResourcePolicy.writer = new CrossOriginResourcePolicyHeaderWriter();\n\t\tcrossOriginResourcePolicyCustomizer.customize(this.crossOriginResourcePolicy);\n\t\treturn HeadersConfigurer.this;\n\t}",
        "summary_tokens": [
            "allows",
            "configuration",
            "for",
            "a",
            "href",
            "https",
            "developer"
        ]
    },
    {
        "id": 266,
        "code": "\tpublic HttpBasicConfigurer<B> realmName(String realmName) {\n\t\tthis.basicAuthEntryPoint.setRealmName(realmName);\n\t\tthis.basicAuthEntryPoint.afterPropertiesSet();\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "allows",
            "easily",
            "changing",
            "the",
            "realm",
            "but",
            "leaving",
            "the",
            "remaining",
            "defaults",
            "in",
            "place"
        ]
    },
    {
        "id": 267,
        "code": "\tpublic HttpBasicConfigurer<B> authenticationEntryPoint(AuthenticationEntryPoint authenticationEntryPoint) {\n\t\tthis.authenticationEntryPoint = authenticationEntryPoint;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "the",
            "authentication",
            "entry",
            "point",
            "to",
            "be",
            "populated",
            "on",
            "basic",
            "authentication",
            "filter",
            "in",
            "the",
            "event",
            "that",
            "authentication",
            "fails"
        ]
    },
    {
        "id": 268,
        "code": "\tpublic HttpBasicConfigurer<B> authenticationDetailsSource(\n\t\t\tAuthenticationDetailsSource<HttpServletRequest, ?> authenticationDetailsSource) {\n\t\tthis.authenticationDetailsSource = authenticationDetailsSource;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "specifies",
            "a",
            "custom",
            "authentication",
            "details",
            "source",
            "to",
            "use",
            "for",
            "basic",
            "authentication"
        ]
    },
    {
        "id": 269,
        "code": "\tpublic JeeConfigurer<H> mappableAuthorities(Set<String> mappableRoles) {\n\t\tthis.mappableRoles = mappableRoles;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "specifies",
            "roles",
            "to",
            "use",
            "map",
            "from",
            "the",
            "http",
            "servlet",
            "request",
            "to",
            "the",
            "user",
            "details"
        ]
    },
    {
        "id": 270,
        "code": "\tpublic JeeConfigurer<H> mappableRoles(String... mappableRoles) {\n\t\tthis.mappableRoles.clear();\n\t\tfor (String role : mappableRoles) {\n\t\t\tthis.mappableRoles.add(\"ROLE_\" + role);\n\t\t}\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "specifies",
            "roles",
            "to",
            "use",
            "map",
            "from",
            "the",
            "http",
            "servlet",
            "request",
            "to",
            "the",
            "user",
            "details",
            "and",
            "automatically",
            "prefixes",
            "it",
            "with",
            "role"
        ]
    },
    {
        "id": 271,
        "code": "\tpublic JeeConfigurer<H> authenticatedUserDetailsService(\n\t\t\tAuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken> authenticatedUserDetailsService) {\n\t\tthis.authenticationUserDetailsService = authenticatedUserDetailsService;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "specifies",
            "the",
            "authentication",
            "user",
            "details",
            "service",
            "that",
            "is",
            "used",
            "with",
            "the",
            "pre",
            "authenticated",
            "authentication",
            "provider"
        ]
    },
    {
        "id": 272,
        "code": "\tpublic JeeConfigurer<H> j2eePreAuthenticatedProcessingFilter(\n\t\t\tJ2eePreAuthenticatedProcessingFilter j2eePreAuthenticatedProcessingFilter) {\n\t\tthis.j2eePreAuthenticatedProcessingFilter = j2eePreAuthenticatedProcessingFilter;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "allows",
            "specifying",
            "the",
            "j",
            "0",
            "ee",
            "pre",
            "authenticated",
            "processing",
            "filter",
            "to",
            "use"
        ]
    },
    {
        "id": 273,
        "code": "\tpublic void init(H http) {\n\t\tPreAuthenticatedAuthenticationProvider authenticationProvider = new PreAuthenticatedAuthenticationProvider();\n\t\tauthenticationProvider.setPreAuthenticatedUserDetailsService(getUserDetailsService());\n\t\tauthenticationProvider = postProcess(authenticationProvider);\n\t\thttp.authenticationProvider(authenticationProvider).setSharedObject(AuthenticationEntryPoint.class,\n\t\t\t\tnew Http403ForbiddenEntryPoint());\n\t}",
        "summary_tokens": [
            "populates",
            "a",
            "pre",
            "authenticated",
            "authentication",
            "provider",
            "into",
            "http",
            "security",
            "authentication",
            "provider",
            "org"
        ]
    },
    {
        "id": 274,
        "code": "\tprivate J2eePreAuthenticatedProcessingFilter getFilter(AuthenticationManager authenticationManager, H http) {\n\t\tif (this.j2eePreAuthenticatedProcessingFilter == null) {\n\t\t\tthis.j2eePreAuthenticatedProcessingFilter = new J2eePreAuthenticatedProcessingFilter();\n\t\t\tthis.j2eePreAuthenticatedProcessingFilter.setAuthenticationManager(authenticationManager);\n\t\t\tthis.j2eePreAuthenticatedProcessingFilter\n\t\t\t\t\t.setAuthenticationDetailsSource(createWebAuthenticationDetailsSource());\n\t\t\tthis.j2eePreAuthenticatedProcessingFilter\n\t\t\t\t\t.setSecurityContextHolderStrategy(getSecurityContextHolderStrategy());\n\t\t\tthis.j2eePreAuthenticatedProcessingFilter = postProcess(this.j2eePreAuthenticatedProcessingFilter);\n\t\t}\n\n\t\treturn this.j2eePreAuthenticatedProcessingFilter;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "j",
            "0",
            "ee",
            "pre",
            "authenticated",
            "processing",
            "filter",
            "or",
            "creates",
            "a",
            "default",
            "instance",
            "using",
            "the",
            "properties",
            "provided"
        ]
    },
    {
        "id": 275,
        "code": "\tprivate AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken> getUserDetailsService() {\n\t\treturn (this.authenticationUserDetailsService != null) ? this.authenticationUserDetailsService\n\t\t\t\t: new PreAuthenticatedGrantedAuthoritiesUserDetailsService();\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "authentication",
            "user",
            "details",
            "service",
            "that",
            "was",
            "specified",
            "or",
            "defaults",
            "to",
            "pre",
            "authenticated",
            "granted",
            "authorities",
            "user",
            "details",
            "service"
        ]
    },
    {
        "id": 276,
        "code": "\tprivate J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource createWebAuthenticationDetailsSource() {\n\t\tJ2eeBasedPreAuthenticatedWebAuthenticationDetailsSource detailsSource = new J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource();\n\t\tSimpleMappableAttributesRetriever rolesRetriever = new SimpleMappableAttributesRetriever();\n\t\trolesRetriever.setMappableAttributes(this.mappableRoles);\n\t\tdetailsSource.setMappableRolesRetriever(rolesRetriever);\n\t\tdetailsSource = postProcess(detailsSource);\n\t\treturn detailsSource;\n\t}",
        "summary_tokens": [
            "creates",
            "the",
            "j",
            "0",
            "ee",
            "based",
            "pre",
            "authenticated",
            "web",
            "authentication",
            "details",
            "source",
            "to",
            "set",
            "on",
            "the",
            "j",
            "0",
            "ee",
            "pre",
            "authenticated",
            "processing",
            "filter"
        ]
    },
    {
        "id": 277,
        "code": "\tpublic LogoutConfigurer<H> addLogoutHandler(LogoutHandler logoutHandler) {\n\t\tAssert.notNull(logoutHandler, \"logoutHandler cannot be null\");\n\t\tthis.logoutHandlers.add(logoutHandler);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "adds",
            "a",
            "logout",
            "handler"
        ]
    },
    {
        "id": 278,
        "code": "\tpublic LogoutConfigurer<H> clearAuthentication(boolean clearAuthentication) {\n\t\tthis.contextLogoutHandler.setClearAuthentication(clearAuthentication);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "specifies",
            "if",
            "security",
            "context",
            "logout",
            "handler",
            "should",
            "clear",
            "the",
            "authentication",
            "at",
            "the",
            "time",
            "of",
            "logout"
        ]
    },
    {
        "id": 279,
        "code": "\tpublic LogoutConfigurer<H> invalidateHttpSession(boolean invalidateHttpSession) {\n\t\tthis.contextLogoutHandler.setInvalidateHttpSession(invalidateHttpSession);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "configures",
            "security",
            "context",
            "logout",
            "handler",
            "to",
            "invalidate",
            "the",
            "http",
            "session",
            "at",
            "the",
            "time",
            "of",
            "logout"
        ]
    },
    {
        "id": 280,
        "code": "\tpublic LogoutConfigurer<H> logoutUrl(String logoutUrl) {\n\t\tthis.logoutRequestMatcher = null;\n\t\tthis.logoutUrl = logoutUrl;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "the",
            "url",
            "that",
            "triggers",
            "log",
            "out",
            "to",
            "occur",
            "default",
            "is",
            "logout"
        ]
    },
    {
        "id": 281,
        "code": "\tpublic LogoutConfigurer<H> logoutRequestMatcher(RequestMatcher logoutRequestMatcher) {\n\t\tthis.logoutRequestMatcher = logoutRequestMatcher;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "the",
            "request",
            "matcher",
            "that",
            "triggers",
            "log",
            "out",
            "to",
            "occur"
        ]
    },
    {
        "id": 282,
        "code": "\tpublic LogoutConfigurer<H> logoutSuccessUrl(String logoutSuccessUrl) {\n\t\tthis.customLogoutSuccess = true;\n\t\tthis.logoutSuccessUrl = logoutSuccessUrl;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "the",
            "url",
            "to",
            "redirect",
            "to",
            "after",
            "logout",
            "has",
            "occurred"
        ]
    },
    {
        "id": 283,
        "code": "\tpublic LogoutConfigurer<H> permitAll(boolean permitAll) {\n\t\tthis.permitAll = permitAll;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "grants",
            "access",
            "to",
            "the",
            "logout",
            "success",
            "url",
            "string",
            "and",
            "the",
            "logout",
            "url",
            "string",
            "for",
            "every",
            "user"
        ]
    },
    {
        "id": 284,
        "code": "\tpublic LogoutConfigurer<H> deleteCookies(String... cookieNamesToClear) {\n\t\treturn addLogoutHandler(new CookieClearingLogoutHandler(cookieNamesToClear));\n\t}",
        "summary_tokens": [
            "allows",
            "specifying",
            "the",
            "names",
            "of",
            "cookies",
            "to",
            "be",
            "removed",
            "on",
            "logout",
            "success"
        ]
    },
    {
        "id": 285,
        "code": "\tpublic LogoutConfigurer<H> logoutSuccessHandler(LogoutSuccessHandler logoutSuccessHandler) {\n\t\tthis.logoutSuccessUrl = null;\n\t\tthis.customLogoutSuccess = true;\n\t\tthis.logoutSuccessHandler = logoutSuccessHandler;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "logout",
            "success",
            "handler",
            "to",
            "use"
        ]
    },
    {
        "id": 286,
        "code": "\tpublic LogoutConfigurer<H> defaultLogoutSuccessHandlerFor(LogoutSuccessHandler handler,\n\t\t\tRequestMatcher preferredMatcher) {\n\t\tAssert.notNull(handler, \"handler cannot be null\");\n\t\tAssert.notNull(preferredMatcher, \"preferredMatcher cannot be null\");\n\t\tthis.defaultLogoutSuccessHandlerMappings.put(preferredMatcher, handler);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "sets",
            "a",
            "default",
            "logout",
            "success",
            "handler",
            "to",
            "be",
            "used",
            "which",
            "prefers",
            "being",
            "invoked",
            "for",
            "the",
            "provided",
            "request",
            "matcher"
        ]
    },
    {
        "id": 287,
        "code": "\tpublic LogoutSuccessHandler getLogoutSuccessHandler() {\n\t\tLogoutSuccessHandler handler = this.logoutSuccessHandler;\n\t\tif (handler == null) {\n\t\t\thandler = createDefaultSuccessHandler();\n\t\t\tthis.logoutSuccessHandler = handler;\n\t\t}\n\t\treturn handler;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "logout",
            "success",
            "handler",
            "if",
            "not",
            "null",
            "otherwise",
            "creates",
            "a",
            "new",
            "simple",
            "url",
            "logout",
            "success",
            "handler",
            "using",
            "the",
            "logout",
            "success",
            "url",
            "string"
        ]
    },
    {
        "id": 288,
        "code": "\tboolean isCustomLogoutSuccess() {\n\t\treturn this.customLogoutSuccess;\n\t}",
        "summary_tokens": [
            "returns",
            "true",
            "if",
            "the",
            "logout",
            "success",
            "has",
            "been",
            "customized",
            "via",
            "logout",
            "success",
            "url",
            "string",
            "or",
            "logout",
            "success",
            "handler",
            "logout",
            "success",
            "handler"
        ]
    },
    {
        "id": 289,
        "code": "\tprivate String getLogoutSuccessUrl() {\n\t\treturn this.logoutSuccessUrl;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "logout",
            "succes",
            "url",
            "or",
            "null",
            "if",
            "a",
            "logout",
            "success",
            "handler",
            "logout",
            "success",
            "handler",
            "was",
            "configured"
        ]
    },
    {
        "id": 290,
        "code": "\tpublic List<LogoutHandler> getLogoutHandlers() {\n\t\treturn this.logoutHandlers;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "logout",
            "handler",
            "instances",
            "that",
            "will",
            "be",
            "used"
        ]
    },
    {
        "id": 291,
        "code": "\tprivate LogoutFilter createLogoutFilter(H http) {\n\t\tthis.contextLogoutHandler.setSecurityContextHolderStrategy(getSecurityContextHolderStrategy());\n\t\tthis.logoutHandlers.add(this.contextLogoutHandler);\n\t\tthis.logoutHandlers.add(postProcess(new LogoutSuccessEventPublishingLogoutHandler()));\n\t\tLogoutHandler[] handlers = this.logoutHandlers.toArray(new LogoutHandler[0]);\n\t\tLogoutFilter result = new LogoutFilter(getLogoutSuccessHandler(), handlers);\n\t\tresult.setSecurityContextHolderStrategy(getSecurityContextHolderStrategy());\n\t\tresult.setLogoutRequestMatcher(getLogoutRequestMatcher(http));\n\t\tresult.setSecurityContextHolderStrategy(getSecurityContextHolderStrategy());\n\t\tresult = postProcess(result);\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "creates",
            "the",
            "logout",
            "filter",
            "using",
            "the",
            "logout",
            "handler",
            "instances",
            "the",
            "logout",
            "success",
            "handler",
            "logout",
            "success",
            "handler",
            "and",
            "the",
            "logout",
            "url",
            "string"
        ]
    },
    {
        "id": 292,
        "code": "\tpublic PasswordManagementConfigurer<B> changePasswordPage(String changePasswordPage) {\n\t\tAssert.hasText(changePasswordPage, \"changePasswordPage cannot be empty\");\n\t\tthis.changePasswordPage = changePasswordPage;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "change",
            "password",
            "page"
        ]
    },
    {
        "id": 293,
        "code": "\tpublic PortMapperConfigurer<H> portMapper(PortMapper portMapper) {\n\t\tthis.portMapper = portMapper;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "allows",
            "specifying",
            "the",
            "port",
            "mapper",
            "instance"
        ]
    },
    {
        "id": 294,
        "code": "\tpublic HttpPortMapping http(int httpPort) {\n\t\treturn new HttpPortMapping(httpPort);\n\t}",
        "summary_tokens": [
            "adds",
            "a",
            "port",
            "mapping",
            "http",
            "port",
            "the",
            "http",
            "port",
            "that",
            "maps",
            "to",
            "a",
            "specific",
            "https",
            "port"
        ]
    },
    {
        "id": 295,
        "code": "\tprivate PortMapper getPortMapper() {\n\t\tif (this.portMapper == null) {\n\t\t\tPortMapperImpl portMapper = new PortMapperImpl();\n\t\t\tportMapper.setPortMappings(this.httpsPortMappings);\n\t\t\tthis.portMapper = portMapper;\n\t\t}\n\t\treturn this.portMapper;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "port",
            "mapper",
            "to",
            "use"
        ]
    },
    {
        "id": 296,
        "code": "\tpublic RememberMeConfigurer<H> useSecureCookie(boolean useSecureCookie) {\n\t\tthis.useSecureCookie = useSecureCookie;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "whether",
            "the",
            "cookie",
            "should",
            "be",
            "flagged",
            "as",
            "secure",
            "or",
            "not"
        ]
    },
    {
        "id": 297,
        "code": "\tpublic RememberMeConfigurer<H> userDetailsService(UserDetailsService userDetailsService) {\n\t\tthis.userDetailsService = userDetailsService;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "specifies",
            "the",
            "user",
            "details",
            "service",
            "used",
            "to",
            "look",
            "up",
            "the",
            "user",
            "details",
            "when",
            "a",
            "remember",
            "me",
            "token",
            "is",
            "valid"
        ]
    },
    {
        "id": 298,
        "code": "\tpublic RememberMeConfigurer<H> tokenRepository(PersistentTokenRepository tokenRepository) {\n\t\tthis.tokenRepository = tokenRepository;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "specifies",
            "the",
            "persistent",
            "token",
            "repository",
            "to",
            "use"
        ]
    },
    {
        "id": 299,
        "code": "\tpublic RememberMeConfigurer<H> key(String key) {\n\t\tthis.key = key;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "key",
            "to",
            "identify",
            "tokens",
            "created",
            "for",
            "remember",
            "me",
            "authentication"
        ]
    },
    {
        "id": 300,
        "code": "\tpublic RememberMeConfigurer<H> rememberMeParameter(String rememberMeParameter) {\n\t\tthis.rememberMeParameter = rememberMeParameter;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "the",
            "http",
            "parameter",
            "used",
            "to",
            "indicate",
            "to",
            "remember",
            "the",
            "user",
            "at",
            "time",
            "of",
            "login"
        ]
    },
    {
        "id": 301,
        "code": "\tpublic RememberMeConfigurer<H> rememberMeCookieName(String rememberMeCookieName) {\n\t\tthis.rememberMeCookieName = rememberMeCookieName;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "the",
            "name",
            "of",
            "cookie",
            "which",
            "store",
            "the",
            "token",
            "for",
            "remember",
            "me",
            "authentication"
        ]
    },
    {
        "id": 302,
        "code": "\tpublic RememberMeConfigurer<H> rememberMeCookieDomain(String rememberMeCookieDomain) {\n\t\tthis.rememberMeCookieDomain = rememberMeCookieDomain;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "the",
            "domain",
            "name",
            "within",
            "which",
            "the",
            "remember",
            "me",
            "cookie",
            "is",
            "visible"
        ]
    },
    {
        "id": 303,
        "code": "\tpublic RememberMeConfigurer<H> authenticationSuccessHandler(\n\t\t\tAuthenticationSuccessHandler authenticationSuccessHandler) {\n\t\tthis.authenticationSuccessHandler = authenticationSuccessHandler;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "allows",
            "control",
            "over",
            "the",
            "destination",
            "a",
            "remembered",
            "user",
            "is",
            "sent",
            "to",
            "when",
            "they",
            "are",
            "successfully",
            "authenticated"
        ]
    },
    {
        "id": 304,
        "code": "\tpublic RememberMeConfigurer<H> rememberMeServices(RememberMeServices rememberMeServices) {\n\t\tthis.rememberMeServices = rememberMeServices;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "specify",
            "the",
            "remember",
            "me",
            "services",
            "to",
            "use"
        ]
    },
    {
        "id": 305,
        "code": "\tpublic RememberMeConfigurer<H> alwaysRemember(boolean alwaysRemember) {\n\t\tthis.alwaysRemember = alwaysRemember;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "whether",
            "the",
            "cookie",
            "should",
            "always",
            "be",
            "created",
            "even",
            "if",
            "the",
            "remember",
            "me",
            "parameter",
            "is",
            "not",
            "set"
        ]
    },
    {
        "id": 306,
        "code": "\tprivate void validateInput() {\n\t\tif (this.rememberMeServices != null && !DEFAULT_REMEMBER_ME_NAME.equals(this.rememberMeCookieName)) {\n\t\t\tthrow new IllegalArgumentException(\"Can not set rememberMeCookieName and custom rememberMeServices.\");\n\t\t}\n\t}",
        "summary_tokens": [
            "validate",
            "remember",
            "me",
            "services",
            "and",
            "remember",
            "me",
            "cookie",
            "name",
            "have",
            "not",
            "been",
            "set",
            "at",
            "the",
            "same",
            "time"
        ]
    },
    {
        "id": 307,
        "code": "\tprivate String getRememberMeParameter() {\n\t\treturn this.rememberMeParameter;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "http",
            "parameter",
            "used",
            "to",
            "indicate",
            "to",
            "remember",
            "the",
            "user",
            "at",
            "time",
            "of",
            "login"
        ]
    },
    {
        "id": 308,
        "code": "\tprivate void initDefaultLoginFilter(H http) {\n\t\tDefaultLoginPageGeneratingFilter loginPageGeneratingFilter = http\n\t\t\t\t.getSharedObject(DefaultLoginPageGeneratingFilter.class);\n\t\tif (loginPageGeneratingFilter != null) {\n\t\t\tloginPageGeneratingFilter.setRememberMeParameter(getRememberMeParameter());\n\t\t}\n\t}",
        "summary_tokens": [
            "if",
            "available",
            "initializes",
            "the",
            "default",
            "login",
            "page",
            "generating",
            "filter",
            "shared",
            "object"
        ]
    },
    {
        "id": 309,
        "code": "\tprivate RememberMeServices getRememberMeServices(H http, String key) throws Exception {\n\t\tif (this.rememberMeServices != null) {\n\t\t\tif (this.rememberMeServices instanceof LogoutHandler && this.logoutHandler == null) {\n\t\t\t\tthis.logoutHandler = (LogoutHandler) this.rememberMeServices;\n\t\t\t}\n\t\t\treturn this.rememberMeServices;\n\t\t}\n\t\tAbstractRememberMeServices tokenRememberMeServices = createRememberMeServices(http, key);\n\t\ttokenRememberMeServices.setParameter(this.rememberMeParameter);\n\t\ttokenRememberMeServices.setCookieName(this.rememberMeCookieName);\n\t\tif (this.rememberMeCookieDomain != null) {\n\t\t\ttokenRememberMeServices.setCookieDomain(this.rememberMeCookieDomain);\n\t\t}\n\t\tif (this.tokenValiditySeconds != null) {\n\t\t\ttokenRememberMeServices.setTokenValiditySeconds(this.tokenValiditySeconds);\n\t\t}\n\t\tif (this.useSecureCookie != null) {\n\t\t\ttokenRememberMeServices.setUseSecureCookie(this.useSecureCookie);\n\t\t}\n\t\tif (this.alwaysRemember != null) {\n\t\t\ttokenRememberMeServices.setAlwaysRemember(this.alwaysRemember);\n\t\t}\n\t\ttokenRememberMeServices.afterPropertiesSet();\n\t\tthis.logoutHandler = tokenRememberMeServices;\n\t\tthis.rememberMeServices = tokenRememberMeServices;\n\t\treturn tokenRememberMeServices;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "remember",
            "me",
            "services",
            "or",
            "creates",
            "the",
            "remember",
            "me",
            "services"
        ]
    },
    {
        "id": 310,
        "code": "\tprivate AbstractRememberMeServices createRememberMeServices(H http, String key) {\n\t\treturn (this.tokenRepository != null) ? createPersistentRememberMeServices(http, key)\n\t\t\t\t: createTokenBasedRememberMeServices(http, key);\n\t}",
        "summary_tokens": [
            "creates",
            "the",
            "remember",
            "me",
            "services",
            "to",
            "use",
            "when",
            "none",
            "is",
            "provided"
        ]
    },
    {
        "id": 311,
        "code": "\tprivate AbstractRememberMeServices createTokenBasedRememberMeServices(H http, String key) {\n\t\tUserDetailsService userDetailsService = getUserDetailsService(http);\n\t\treturn new TokenBasedRememberMeServices(key, userDetailsService);\n\t}",
        "summary_tokens": [
            "creates",
            "token",
            "based",
            "remember",
            "me",
            "services",
            "http",
            "the",
            "http",
            "security",
            "to",
            "lookup",
            "shared",
            "objects",
            "key",
            "the",
            "key",
            "string",
            "the",
            "token",
            "based",
            "remember",
            "me",
            "services"
        ]
    },
    {
        "id": 312,
        "code": "\tprivate AbstractRememberMeServices createPersistentRememberMeServices(H http, String key) {\n\t\tUserDetailsService userDetailsService = getUserDetailsService(http);\n\t\treturn new PersistentTokenBasedRememberMeServices(key, userDetailsService, this.tokenRepository);\n\t}",
        "summary_tokens": [
            "creates",
            "persistent",
            "token",
            "based",
            "remember",
            "me",
            "services",
            "http",
            "the",
            "http",
            "security",
            "to",
            "lookup",
            "shared",
            "objects",
            "key",
            "the",
            "key",
            "string",
            "the",
            "persistent",
            "token",
            "based",
            "remember",
            "me",
            "services"
        ]
    },
    {
        "id": 313,
        "code": "\tprivate UserDetailsService getUserDetailsService(H http) {\n\t\tif (this.userDetailsService == null) {\n\t\t\tthis.userDetailsService = getSharedOrBean(http, UserDetailsService.class);\n\t\t}\n\t\tAssert.state(this.userDetailsService != null,\n\t\t\t\t() -> \"userDetailsService cannot be null. Invoke \" + RememberMeConfigurer.class.getSimpleName()\n\t\t\t\t\t\t+ \"#userDetailsService(UserDetailsService) or see its javadoc for alternative approaches.\");\n\t\treturn this.userDetailsService;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "user",
            "details",
            "service",
            "to",
            "use"
        ]
    },
    {
        "id": 314,
        "code": "\tprivate String getKey() {\n\t\tif (this.key == null) {\n\t\t\tif (this.rememberMeServices instanceof AbstractRememberMeServices) {\n\t\t\t\tthis.key = ((AbstractRememberMeServices) this.rememberMeServices).getKey();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.key = UUID.randomUUID().toString();\n\t\t\t}\n\t\t}\n\t\treturn this.key;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "key",
            "to",
            "use",
            "for",
            "validating",
            "remember",
            "me",
            "tokens"
        ]
    },
    {
        "id": 315,
        "code": "\tpublic RequestCacheConfigurer<H> requestCache(RequestCache requestCache) {\n\t\tgetBuilder().setSharedObject(RequestCache.class, requestCache);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "allows",
            "explicit",
            "configuration",
            "of",
            "the",
            "request",
            "cache",
            "to",
            "be",
            "used"
        ]
    },
    {
        "id": 316,
        "code": "\tprivate RequestCache getRequestCache(H http) {\n\t\tRequestCache result = http.getSharedObject(RequestCache.class);\n\t\tif (result != null) {\n\t\t\treturn result;\n\t\t}\n\t\tresult = getBeanOrNull(RequestCache.class);\n\t\tif (result != null) {\n\t\t\treturn result;\n\t\t}\n\t\tHttpSessionRequestCache defaultCache = new HttpSessionRequestCache();\n\t\tdefaultCache.setRequestMatcher(createDefaultSavedRequestMatcher(http));\n\t\treturn defaultCache;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "request",
            "cache",
            "to",
            "use"
        ]
    },
    {
        "id": 317,
        "code": "\tpublic SecurityContextConfigurer<H> securityContextRepository(SecurityContextRepository securityContextRepository) {\n\t\tgetBuilder().setSharedObject(SecurityContextRepository.class, securityContextRepository);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "specifies",
            "the",
            "shared",
            "security",
            "context",
            "repository",
            "that",
            "is",
            "to",
            "be",
            "used",
            "security",
            "context",
            "repository",
            "the",
            "security",
            "context",
            "repository",
            "to",
            "use",
            "the",
            "http",
            "security",
            "for",
            "further",
            "customizations"
        ]
    },
    {
        "id": 318,
        "code": "\tpublic SessionManagementConfigurer<H> invalidSessionUrl(String invalidSessionUrl) {\n\t\tthis.invalidSessionUrl = invalidSessionUrl;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "setting",
            "this",
            "attribute",
            "will",
            "inject",
            "the",
            "session",
            "management",
            "filter",
            "with",
            "a",
            "simple",
            "redirect",
            "invalid",
            "session",
            "strategy",
            "configured",
            "with",
            "the",
            "attribute",
            "value"
        ]
    },
    {
        "id": 319,
        "code": "\tpublic SessionManagementConfigurer<H> requireExplicitAuthenticationStrategy(\n\t\t\tboolean requireExplicitAuthenticationStrategy) {\n\t\tthis.requireExplicitAuthenticationStrategy = requireExplicitAuthenticationStrategy;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "setting",
            "this",
            "means",
            "that",
            "explicit",
            "invocation",
            "of",
            "session",
            "authentication",
            "strategy",
            "is",
            "required"
        ]
    },
    {
        "id": 320,
        "code": "\tpublic SessionManagementConfigurer<H> invalidSessionStrategy(InvalidSessionStrategy invalidSessionStrategy) {\n\t\tAssert.notNull(invalidSessionStrategy, \"invalidSessionStrategy\");\n\t\tthis.invalidSessionStrategy = invalidSessionStrategy;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "setting",
            "this",
            "attribute",
            "will",
            "inject",
            "the",
            "provided",
            "invalid",
            "session",
            "strategy",
            "into",
            "the",
            "session",
            "management",
            "filter"
        ]
    },
    {
        "id": 321,
        "code": "\tpublic SessionManagementConfigurer<H> sessionAuthenticationErrorUrl(String sessionAuthenticationErrorUrl) {\n\t\tthis.sessionAuthenticationErrorUrl = sessionAuthenticationErrorUrl;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "defines",
            "the",
            "url",
            "of",
            "the",
            "error",
            "page",
            "which",
            "should",
            "be",
            "shown",
            "when",
            "the",
            "session",
            "authentication",
            "strategy",
            "raises",
            "an",
            "exception"
        ]
    },
    {
        "id": 322,
        "code": "\tpublic SessionManagementConfigurer<H> sessionAuthenticationFailureHandler(\n\t\t\tAuthenticationFailureHandler sessionAuthenticationFailureHandler) {\n\t\tthis.sessionAuthenticationFailureHandler = sessionAuthenticationFailureHandler;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "defines",
            "the",
            "authentication",
            "failure",
            "handler",
            "which",
            "will",
            "be",
            "used",
            "when",
            "the",
            "session",
            "authentication",
            "strategy",
            "raises",
            "an",
            "exception"
        ]
    },
    {
        "id": 323,
        "code": "\tpublic SessionManagementConfigurer<H> enableSessionUrlRewriting(boolean enableSessionUrlRewriting) {\n\t\tthis.enableSessionUrlRewriting = enableSessionUrlRewriting;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "if",
            "set",
            "to",
            "true",
            "allows",
            "http",
            "sessions",
            "to",
            "be",
            "rewritten",
            "in",
            "the",
            "urls",
            "when",
            "using",
            "http",
            "servlet",
            "response",
            "encode",
            "redirect",
            "url",
            "string",
            "or",
            "http",
            "servlet",
            "response",
            "encode",
            "url",
            "string",
            "otherwise",
            "disallows",
            "http",
            "sessions",
            "to",
            "be",
            "included",
            "in",
            "the",
            "url"
        ]
    },
    {
        "id": 324,
        "code": "\tpublic SessionManagementConfigurer<H> sessionCreationPolicy(SessionCreationPolicy sessionCreationPolicy) {\n\t\tAssert.notNull(sessionCreationPolicy, \"sessionCreationPolicy cannot be null\");\n\t\tthis.sessionPolicy = sessionCreationPolicy;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "allows",
            "specifying",
            "the",
            "session",
            "creation",
            "policy",
            "session",
            "creation",
            "policy",
            "the",
            "session",
            "creation",
            "policy",
            "to",
            "use"
        ]
    },
    {
        "id": 325,
        "code": "\tpublic SessionManagementConfigurer<H> sessionAuthenticationStrategy(\n\t\t\tSessionAuthenticationStrategy sessionAuthenticationStrategy) {\n\t\tthis.providedSessionAuthenticationStrategy = sessionAuthenticationStrategy;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "allows",
            "explicitly",
            "specifying",
            "the",
            "session",
            "authentication",
            "strategy"
        ]
    },
    {
        "id": 326,
        "code": "\tSessionManagementConfigurer<H> addSessionAuthenticationStrategy(\n\t\t\tSessionAuthenticationStrategy sessionAuthenticationStrategy) {\n\t\tthis.sessionAuthenticationStrategies.add(sessionAuthenticationStrategy);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "adds",
            "an",
            "additional",
            "session",
            "authentication",
            "strategy",
            "to",
            "be",
            "used",
            "within",
            "the",
            "composite",
            "session",
            "authentication",
            "strategy"
        ]
    },
    {
        "id": 327,
        "code": "\tpublic SessionManagementConfigurer<H> sessionFixation(\n\t\t\tCustomizer<SessionFixationConfigurer> sessionFixationCustomizer) {\n\t\tsessionFixationCustomizer.customize(new SessionFixationConfigurer());\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "allows",
            "configuring",
            "session",
            "fixation",
            "protection"
        ]
    },
    {
        "id": 328,
        "code": "\tpublic ConcurrencyControlConfigurer maximumSessions(int maximumSessions) {\n\t\tthis.maximumSessions = maximumSessions;\n\t\treturn new ConcurrencyControlConfigurer();\n\t}",
        "summary_tokens": [
            "controls",
            "the",
            "maximum",
            "number",
            "of",
            "sessions",
            "for",
            "a",
            "user"
        ]
    },
    {
        "id": 329,
        "code": "\tpublic SessionManagementConfigurer<H> sessionConcurrency(\n\t\t\tCustomizer<ConcurrencyControlConfigurer> sessionConcurrencyCustomizer) {\n\t\tsessionConcurrencyCustomizer.customize(new ConcurrencyControlConfigurer());\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "controls",
            "the",
            "maximum",
            "number",
            "of",
            "sessions",
            "for",
            "a",
            "user"
        ]
    },
    {
        "id": 330,
        "code": "\tprivate void setSessionFixationAuthenticationStrategy(\n\t\t\tSessionAuthenticationStrategy sessionFixationAuthenticationStrategy) {\n\t\tthis.sessionFixationAuthenticationStrategy = postProcess(sessionFixationAuthenticationStrategy);\n\t}",
        "summary_tokens": [
            "invokes",
            "post",
            "process",
            "object",
            "and",
            "sets",
            "the",
            "session",
            "authentication",
            "strategy",
            "for",
            "session",
            "fixation"
        ]
    },
    {
        "id": 331,
        "code": "\tInvalidSessionStrategy getInvalidSessionStrategy() {\n\t\tif (this.invalidSessionStrategy != null) {\n\t\t\treturn this.invalidSessionStrategy;\n\t\t}\n\t\tif (this.invalidSessionUrl == null) {\n\t\t\treturn null;\n\t\t}\n\t\tthis.invalidSessionStrategy = new SimpleRedirectInvalidSessionStrategy(this.invalidSessionUrl);\n\t\treturn this.invalidSessionStrategy;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "invalid",
            "session",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 332,
        "code": "\tSessionCreationPolicy getSessionCreationPolicy() {\n\t\tif (this.sessionPolicy != null) {\n\t\t\treturn this.sessionPolicy;\n\t\t}\n\t\tSessionCreationPolicy sessionPolicy = getBuilder().getSharedObject(SessionCreationPolicy.class);\n\t\treturn (sessionPolicy != null) ? sessionPolicy : SessionCreationPolicy.IF_REQUIRED;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "session",
            "creation",
            "policy"
        ]
    },
    {
        "id": 333,
        "code": "\tprivate boolean isAllowSessionCreation() {\n\t\tSessionCreationPolicy sessionPolicy = getSessionCreationPolicy();\n\t\treturn SessionCreationPolicy.ALWAYS == sessionPolicy || SessionCreationPolicy.IF_REQUIRED == sessionPolicy;\n\t}",
        "summary_tokens": [
            "returns",
            "true",
            "if",
            "the",
            "session",
            "creation",
            "policy",
            "allows",
            "session",
            "creation",
            "else",
            "false",
            "true",
            "if",
            "the",
            "session",
            "creation",
            "policy",
            "allows",
            "session",
            "creation"
        ]
    },
    {
        "id": 334,
        "code": "\tprivate boolean isStateless() {\n\t\tSessionCreationPolicy sessionPolicy = getSessionCreationPolicy();\n\t\treturn SessionCreationPolicy.STATELESS == sessionPolicy;\n\t}",
        "summary_tokens": [
            "returns",
            "true",
            "if",
            "the",
            "session",
            "creation",
            "policy",
            "is",
            "stateless"
        ]
    },
    {
        "id": 335,
        "code": "\tprivate SessionAuthenticationStrategy getSessionAuthenticationStrategy(H http) {\n\t\tif (this.sessionAuthenticationStrategy != null) {\n\t\t\treturn this.sessionAuthenticationStrategy;\n\t\t}\n\t\tList<SessionAuthenticationStrategy> delegateStrategies = this.sessionAuthenticationStrategies;\n\t\tSessionAuthenticationStrategy defaultSessionAuthenticationStrategy;\n\t\tif (this.providedSessionAuthenticationStrategy == null) {\n\t\t\t\n\t\t\t\n\t\t\tdefaultSessionAuthenticationStrategy = postProcess(this.sessionFixationAuthenticationStrategy);\n\t\t}\n\t\telse {\n\t\t\tdefaultSessionAuthenticationStrategy = this.providedSessionAuthenticationStrategy;\n\t\t}\n\t\tif (isConcurrentSessionControlEnabled()) {\n\t\t\tSessionRegistry sessionRegistry = getSessionRegistry(http);\n\t\t\tConcurrentSessionControlAuthenticationStrategy concurrentSessionControlStrategy = new ConcurrentSessionControlAuthenticationStrategy(\n\t\t\t\t\tsessionRegistry);\n\t\t\tconcurrentSessionControlStrategy.setMaximumSessions(this.maximumSessions);\n\t\t\tconcurrentSessionControlStrategy.setExceptionIfMaximumExceeded(this.maxSessionsPreventsLogin);\n\t\t\tconcurrentSessionControlStrategy = postProcess(concurrentSessionControlStrategy);\n\t\t\tRegisterSessionAuthenticationStrategy registerSessionStrategy = new RegisterSessionAuthenticationStrategy(\n\t\t\t\t\tsessionRegistry);\n\t\t\tregisterSessionStrategy = postProcess(registerSessionStrategy);\n\n\t\t\tdelegateStrategies.addAll(Arrays.asList(concurrentSessionControlStrategy,\n\t\t\t\t\tdefaultSessionAuthenticationStrategy, registerSessionStrategy));\n\t\t}\n\t\telse {\n\t\t\tdelegateStrategies.add(defaultSessionAuthenticationStrategy);\n\t\t}\n\t\tthis.sessionAuthenticationStrategy = postProcess(\n\t\t\t\tnew CompositeSessionAuthenticationStrategy(delegateStrategies));\n\t\treturn this.sessionAuthenticationStrategy;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "customized",
            "session",
            "authentication",
            "strategy",
            "if",
            "session",
            "authentication",
            "strategy",
            "session",
            "authentication",
            "strategy",
            "was",
            "specified"
        ]
    },
    {
        "id": 336,
        "code": "\tprivate boolean isConcurrentSessionControlEnabled() {\n\t\treturn this.maximumSessions != null;\n\t}",
        "summary_tokens": [
            "returns",
            "true",
            "if",
            "the",
            "number",
            "of",
            "concurrent",
            "sessions",
            "per",
            "user",
            "should",
            "be",
            "restricted"
        ]
    },
    {
        "id": 337,
        "code": "\tprivate static SessionAuthenticationStrategy createDefaultSessionFixationProtectionStrategy() {\n\t\treturn new ChangeSessionIdAuthenticationStrategy();\n\t}",
        "summary_tokens": [
            "creates",
            "the",
            "default",
            "session",
            "authentication",
            "strategy",
            "for",
            "session",
            "fixation",
            "the",
            "default",
            "session",
            "authentication",
            "strategy",
            "for",
            "session",
            "fixation"
        ]
    },
    {
        "id": 338,
        "code": "\tpublic StandardInterceptUrlRegistry getRegistry() {\n\t\treturn this.registry;\n\t}",
        "summary_tokens": [
            "the",
            "standard",
            "intercept",
            "url",
            "registry",
            "is",
            "what",
            "users",
            "will",
            "interact",
            "with",
            "after",
            "applying",
            "the",
            "url",
            "authorization",
            "configurer"
        ]
    },
    {
        "id": 339,
        "code": "\tpublic UrlAuthorizationConfigurer<H> withObjectPostProcessor(ObjectPostProcessor<?> objectPostProcessor) {\n\t\taddObjectPostProcessor(objectPostProcessor);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "adds",
            "an",
            "object",
            "post",
            "processor",
            "for",
            "this",
            "class"
        ]
    },
    {
        "id": 340,
        "code": "\tList<AccessDecisionVoter<?>> getDecisionVoters(H http) {\n\t\tList<AccessDecisionVoter<?>> decisionVoters = new ArrayList<>();\n\t\tdecisionVoters.add(new RoleVoter());\n\t\tdecisionVoters.add(new AuthenticatedVoter());\n\t\treturn decisionVoters;\n\t}",
        "summary_tokens": [
            "creates",
            "the",
            "default",
            "access",
            "decision",
            "voter",
            "instances",
            "used",
            "if",
            "an",
            "access",
            "decision",
            "manager",
            "was",
            "not",
            "specified"
        ]
    },
    {
        "id": 341,
        "code": "\tFilterInvocationSecurityMetadataSource createMetadataSource(H http) {\n\t\treturn new DefaultFilterInvocationSecurityMetadataSource(this.registry.createRequestMap());\n\t}",
        "summary_tokens": [
            "creates",
            "the",
            "filter",
            "invocation",
            "security",
            "metadata",
            "source",
            "to",
            "use"
        ]
    },
    {
        "id": 342,
        "code": "\tprivate StandardInterceptUrlRegistry addMapping(Iterable<? extends RequestMatcher> requestMatchers,\n\t\t\tCollection<ConfigAttribute> configAttributes) {\n\t\tfor (RequestMatcher requestMatcher : requestMatchers) {\n\t\t\tthis.registry.addMapping(\n\t\t\t\t\tnew AbstractConfigAttributeRequestMatcherRegistry.UrlMapping(requestMatcher, configAttributes));\n\t\t}\n\t\treturn this.registry;\n\t}",
        "summary_tokens": [
            "adds",
            "a",
            "mapping",
            "of",
            "the",
            "request",
            "matcher",
            "instances",
            "to",
            "the",
            "config",
            "attribute",
            "instances"
        ]
    },
    {
        "id": 343,
        "code": "\tprivate static String hasRole(String role) {\n\t\tAssert.isTrue(!role.startsWith(\"ROLE_\"), () -> role\n\t\t\t\t+ \" should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead.\");\n\t\treturn \"ROLE_\" + role;\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "string",
            "for",
            "specifying",
            "a",
            "user",
            "requires",
            "a",
            "role"
        ]
    },
    {
        "id": 344,
        "code": "\tprivate static String[] hasAnyRole(String... roles) {\n\t\tfor (int i = 0; i < roles.length; i++) {\n\t\t\troles[i] = \"ROLE_\" + roles[i];\n\t\t}\n\t\treturn roles;\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "string",
            "for",
            "specifying",
            "that",
            "a",
            "user",
            "requires",
            "one",
            "of",
            "many",
            "roles"
        ]
    },
    {
        "id": 345,
        "code": "\tprivate static String[] hasAnyAuthority(String... authorities) {\n\t\treturn authorities;\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "string",
            "for",
            "specifying",
            "that",
            "a",
            "user",
            "requires",
            "one",
            "of",
            "many",
            "authorities",
            "authorities",
            "the",
            "authorities",
            "that",
            "the",
            "user",
            "should",
            "have",
            "at",
            "least",
            "one",
            "of",
            "i"
        ]
    },
    {
        "id": 346,
        "code": "\tpublic X509Configurer<H> x509AuthenticationFilter(X509AuthenticationFilter x509AuthenticationFilter) {\n\t\tthis.x509AuthenticationFilter = x509AuthenticationFilter;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "allows",
            "specifying",
            "the",
            "entire",
            "x",
            "0",
            "authentication",
            "filter"
        ]
    },
    {
        "id": 347,
        "code": "\tpublic X509Configurer<H> x509PrincipalExtractor(X509PrincipalExtractor x509PrincipalExtractor) {\n\t\tthis.x509PrincipalExtractor = x509PrincipalExtractor;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "specifies",
            "the",
            "x",
            "0",
            "principal",
            "extractor",
            "x",
            "0",
            "principal",
            "extractor",
            "the",
            "x",
            "0",
            "principal",
            "extractor",
            "to",
            "use",
            "the",
            "x",
            "0",
            "configurer",
            "to",
            "use"
        ]
    },
    {
        "id": 348,
        "code": "\tpublic X509Configurer<H> authenticationDetailsSource(\n\t\t\tAuthenticationDetailsSource<HttpServletRequest, PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails> authenticationDetailsSource) {\n\t\tthis.authenticationDetailsSource = authenticationDetailsSource;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "specifies",
            "the",
            "authentication",
            "details",
            "source",
            "authentication",
            "details",
            "source",
            "the",
            "authentication",
            "details",
            "source",
            "to",
            "use",
            "the",
            "x",
            "0",
            "configurer",
            "to",
            "use"
        ]
    },
    {
        "id": 349,
        "code": "\tpublic X509Configurer<H> userDetailsService(UserDetailsService userDetailsService) {\n\t\tUserDetailsByNameServiceWrapper<PreAuthenticatedAuthenticationToken> authenticationUserDetailsService = new UserDetailsByNameServiceWrapper<>();\n\t\tauthenticationUserDetailsService.setUserDetailsService(userDetailsService);\n\t\treturn authenticationUserDetailsService(authenticationUserDetailsService);\n\t}",
        "summary_tokens": [
            "shortcut",
            "for",
            "invoking",
            "authentication",
            "user",
            "details",
            "service",
            "authentication",
            "user",
            "details",
            "service",
            "with",
            "a",
            "user",
            "details",
            "by",
            "name",
            "service",
            "wrapper"
        ]
    },
    {
        "id": 350,
        "code": "\tpublic X509Configurer<H> authenticationUserDetailsService(\n\t\t\tAuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken> authenticationUserDetailsService) {\n\t\tthis.authenticationUserDetailsService = authenticationUserDetailsService;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "specifies",
            "the",
            "authentication",
            "user",
            "details",
            "service",
            "to",
            "use"
        ]
    },
    {
        "id": 351,
        "code": "\tpublic X509Configurer<H> subjectPrincipalRegex(String subjectPrincipalRegex) {\n\t\tSubjectDnX509PrincipalExtractor principalExtractor = new SubjectDnX509PrincipalExtractor();\n\t\tprincipalExtractor.setSubjectDnRegex(subjectPrincipalRegex);\n\t\tthis.x509PrincipalExtractor = principalExtractor;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "specifies",
            "the",
            "regex",
            "to",
            "extract",
            "the",
            "principal",
            "from",
            "the",
            "certificate"
        ]
    },
    {
        "id": 352,
        "code": "\tpublic OAuth2ClientConfigurer<B> clientRegistrationRepository(\n\t\t\tClientRegistrationRepository clientRegistrationRepository) {\n\t\tAssert.notNull(clientRegistrationRepository, \"clientRegistrationRepository cannot be null\");\n\t\tthis.getBuilder().setSharedObject(ClientRegistrationRepository.class, clientRegistrationRepository);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "repository",
            "of",
            "client",
            "registrations"
        ]
    },
    {
        "id": 353,
        "code": "\tpublic OAuth2ClientConfigurer<B> authorizedClientRepository(\n\t\t\tOAuth2AuthorizedClientRepository authorizedClientRepository) {\n\t\tAssert.notNull(authorizedClientRepository, \"authorizedClientRepository cannot be null\");\n\t\tthis.getBuilder().setSharedObject(OAuth2AuthorizedClientRepository.class, authorizedClientRepository);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "repository",
            "for",
            "authorized",
            "client",
            "s"
        ]
    },
    {
        "id": 354,
        "code": "\tpublic OAuth2ClientConfigurer<B> authorizedClientService(OAuth2AuthorizedClientService authorizedClientService) {\n\t\tAssert.notNull(authorizedClientService, \"authorizedClientService cannot be null\");\n\t\tthis.authorizedClientRepository(\n\t\t\t\tnew AuthenticatedPrincipalOAuth2AuthorizedClientRepository(authorizedClientService));\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "service",
            "for",
            "authorized",
            "client",
            "s"
        ]
    },
    {
        "id": 355,
        "code": "\tpublic OAuth2ClientConfigurer<B> authorizationCodeGrant(\n\t\t\tCustomizer<AuthorizationCodeGrantConfigurer> authorizationCodeGrantCustomizer) {\n\t\tauthorizationCodeGrantCustomizer.customize(this.authorizationCodeGrantConfigurer);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "configures",
            "the",
            "oauth",
            "0"
        ]
    },
    {
        "id": 356,
        "code": "\tpublic OAuth2LoginConfigurer<B> clientRegistrationRepository(\n\t\t\tClientRegistrationRepository clientRegistrationRepository) {\n\t\tAssert.notNull(clientRegistrationRepository, \"clientRegistrationRepository cannot be null\");\n\t\tthis.getBuilder().setSharedObject(ClientRegistrationRepository.class, clientRegistrationRepository);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "repository",
            "of",
            "client",
            "registrations"
        ]
    },
    {
        "id": 357,
        "code": "\tpublic OAuth2LoginConfigurer<B> authorizedClientRepository(\n\t\t\tOAuth2AuthorizedClientRepository authorizedClientRepository) {\n\t\tAssert.notNull(authorizedClientRepository, \"authorizedClientRepository cannot be null\");\n\t\tthis.getBuilder().setSharedObject(OAuth2AuthorizedClientRepository.class, authorizedClientRepository);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "repository",
            "for",
            "authorized",
            "client",
            "s"
        ]
    },
    {
        "id": 358,
        "code": "\tpublic OAuth2LoginConfigurer<B> authorizedClientService(OAuth2AuthorizedClientService authorizedClientService) {\n\t\tAssert.notNull(authorizedClientService, \"authorizedClientService cannot be null\");\n\t\tthis.authorizedClientRepository(\n\t\t\t\tnew AuthenticatedPrincipalOAuth2AuthorizedClientRepository(authorizedClientService));\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "service",
            "for",
            "authorized",
            "client",
            "s"
        ]
    },
    {
        "id": 359,
        "code": "\tpublic OAuth2LoginConfigurer<B> authorizationEndpoint(\n\t\t\tCustomizer<AuthorizationEndpointConfig> authorizationEndpointCustomizer) {\n\t\tauthorizationEndpointCustomizer.customize(this.authorizationEndpointConfig);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "configures",
            "the",
            "authorization",
            "server",
            "s",
            "authorization",
            "endpoint"
        ]
    },
    {
        "id": 360,
        "code": "\tpublic OAuth2LoginConfigurer<B> tokenEndpoint(Customizer<TokenEndpointConfig> tokenEndpointCustomizer) {\n\t\ttokenEndpointCustomizer.customize(this.tokenEndpointConfig);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "configures",
            "the",
            "authorization",
            "server",
            "s",
            "token",
            "endpoint"
        ]
    },
    {
        "id": 361,
        "code": "\tpublic OAuth2LoginConfigurer<B> redirectionEndpoint(\n\t\t\tCustomizer<RedirectionEndpointConfig> redirectionEndpointCustomizer) {\n\t\tredirectionEndpointCustomizer.customize(this.redirectionEndpointConfig);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "configures",
            "the",
            "client",
            "s",
            "redirection",
            "endpoint"
        ]
    },
    {
        "id": 362,
        "code": "\tpublic OAuth2LoginConfigurer<B> userInfoEndpoint(Customizer<UserInfoEndpointConfig> userInfoEndpointCustomizer) {\n\t\tuserInfoEndpointCustomizer.customize(this.userInfoEndpointConfig);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "configures",
            "the",
            "authorization",
            "server",
            "s",
            "user",
            "info",
            "endpoint"
        ]
    },
    {
        "id": 363,
        "code": "\tpublic OAuth2ResourceServerConfigurer<H> jwt(Customizer<JwtConfigurer> jwtCustomizer) {\n\t\tif (this.jwtConfigurer == null) {\n\t\t\tthis.jwtConfigurer = new JwtConfigurer(this.context);\n\t\t}\n\t\tjwtCustomizer.customize(this.jwtConfigurer);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "enables",
            "jwt",
            "encoded",
            "bearer",
            "token",
            "support"
        ]
    },
    {
        "id": 364,
        "code": "\tpublic OAuth2ResourceServerConfigurer<H> opaqueToken(Customizer<OpaqueTokenConfigurer> opaqueTokenCustomizer) {\n\t\tif (this.opaqueTokenConfigurer == null) {\n\t\t\tthis.opaqueTokenConfigurer = new OpaqueTokenConfigurer(this.context);\n\t\t}\n\t\topaqueTokenCustomizer.customize(this.opaqueTokenConfigurer);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "enables",
            "opaque",
            "bearer",
            "token",
            "support"
        ]
    },
    {
        "id": 365,
        "code": "\tpublic Saml2LoginConfigurer<B> authenticationConverter(AuthenticationConverter authenticationConverter) {\n\t\tAssert.notNull(authenticationConverter, \"authenticationConverter cannot be null\");\n\t\tthis.authenticationConverter = authenticationConverter;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "use",
            "this",
            "authentication",
            "converter",
            "when",
            "converting",
            "incoming",
            "requests",
            "to",
            "an",
            "authentication"
        ]
    },
    {
        "id": 366,
        "code": "\tpublic Saml2LoginConfigurer<B> authenticationManager(AuthenticationManager authenticationManager) {\n\t\tAssert.notNull(authenticationManager, \"authenticationManager cannot be null\");\n\t\tthis.authenticationManager = authenticationManager;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "allows",
            "a",
            "configuration",
            "of",
            "a",
            "authentication",
            "manager",
            "to",
            "be",
            "used",
            "during",
            "saml",
            "0",
            "authentication"
        ]
    },
    {
        "id": 367,
        "code": "\tpublic Saml2LoginConfigurer<B> relyingPartyRegistrationRepository(RelyingPartyRegistrationRepository repo) {\n\t\tthis.relyingPartyRegistrationRepository = repo;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "relying",
            "party",
            "registration",
            "repository",
            "of",
            "relying",
            "parties",
            "each",
            "party",
            "representing",
            "a",
            "service",
            "provider",
            "sp",
            "and",
            "this",
            "host",
            "and",
            "identity",
            "provider",
            "idp",
            "pair",
            "that",
            "communicate",
            "with",
            "each",
            "other"
        ]
    },
    {
        "id": 368,
        "code": "\tpublic Saml2LoginConfigurer<B> authenticationRequestResolver(\n\t\t\tSaml2AuthenticationRequestResolver authenticationRequestResolver) {\n\t\tAssert.notNull(authenticationRequestResolver, \"authenticationRequestResolver cannot be null\");\n\t\tthis.authenticationRequestResolver = authenticationRequestResolver;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "use",
            "this",
            "saml",
            "0",
            "authentication",
            "request",
            "resolver",
            "for",
            "generating",
            "saml",
            "0"
        ]
    },
    {
        "id": 369,
        "code": "\tpublic Saml2LoginConfigurer<B> authenticationRequestUri(String authenticationRequestUri) {\n\t\t\n\t\tif (version().startsWith(\"3\")) {\n\t\t\treturn this;\n\t\t}\n\t\tAssert.state(authenticationRequestUri.contains(\"{registrationId}\"),\n\t\t\t\t\"authenticationRequestUri must contain {registrationId} path variable\");\n\t\tthis.authenticationRequestUri = authenticationRequestUri;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "customize",
            "the",
            "url",
            "that",
            "the",
            "saml",
            "authentication",
            "request",
            "will",
            "be",
            "sent",
            "to"
        ]
    },
    {
        "id": 370,
        "code": "\tpublic Saml2LoginConfigurer<B> loginProcessingUrl(String loginProcessingUrl) {\n\t\tAssert.hasText(loginProcessingUrl, \"loginProcessingUrl cannot be empty\");\n\t\tthis.loginProcessingUrl = loginProcessingUrl;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "specifies",
            "the",
            "url",
            "to",
            "validate",
            "the",
            "credentials"
        ]
    },
    {
        "id": 371,
        "code": "\tpublic void init(B http) throws Exception {\n\t\tregisterDefaultCsrfOverride(http);\n\t\trelyingPartyRegistrationRepository(http);\n\t\tthis.saml2WebSsoAuthenticationFilter = new Saml2WebSsoAuthenticationFilter(getAuthenticationConverter(http),\n\t\t\t\tthis.loginProcessingUrl);\n\t\tsetAuthenticationRequestRepository(http, this.saml2WebSsoAuthenticationFilter);\n\t\tsetAuthenticationFilter(this.saml2WebSsoAuthenticationFilter);\n\t\tsuper.loginProcessingUrl(this.loginProcessingUrl);\n\t\tif (StringUtils.hasText(this.loginPage)) {\n\t\t\t\n\t\t\tsuper.loginPage(this.loginPage);\n\t\t\tsuper.init(http);\n\t\t}\n\t\telse {\n\t\t\tMap<String, String> providerUrlMap = getIdentityProviderUrlMap(this.authenticationRequestUri,\n\t\t\t\t\tthis.relyingPartyRegistrationRepository);\n\t\t\tboolean singleProvider = providerUrlMap.size() == 1;\n\t\t\tif (singleProvider) {\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tthis.updateAuthenticationDefaults();\n\t\t\t\tthis.updateAccessDefaults(http);\n\t\t\t\tString loginUrl = providerUrlMap.entrySet().iterator().next().getKey();\n\t\t\t\tregisterAuthenticationEntryPoint(http, getLoginEntryPoint(http, loginUrl));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsuper.init(http);\n\t\t\t}\n\t\t}\n\t\tthis.initDefaultLoginFilter(http);\n\t}",
        "summary_tokens": [
            "p",
            "initializes",
            "this",
            "filter",
            "chain",
            "for",
            "saml",
            "0",
            "login"
        ]
    },
    {
        "id": 372,
        "code": "\tpublic void configure(B http) throws Exception {\n\t\tSaml2WebSsoAuthenticationRequestFilter filter = getAuthenticationRequestFilter(http);\n\t\tfilter.setAuthenticationRequestRepository(getAuthenticationRequestRepository(http));\n\t\thttp.addFilter(postProcess(filter));\n\t\tsuper.configure(http);\n\t\tif (this.authenticationManager == null) {\n\t\t\tregisterDefaultAuthenticationProvider(http);\n\t\t}\n\t\telse {\n\t\t\tthis.saml2WebSsoAuthenticationFilter.setAuthenticationManager(this.authenticationManager);\n\t\t}\n\t}",
        "summary_tokens": [
            "p",
            "during",
            "the",
            "configure",
            "phase",
            "a",
            "saml",
            "0",
            "web",
            "sso",
            "authentication",
            "request",
            "filter",
            "is",
            "added",
            "to",
            "handle",
            "saml",
            "0"
        ]
    },
    {
        "id": 373,
        "code": "\tpublic Saml2LogoutConfigurer<H> logoutUrl(String logoutUrl) {\n\t\tthis.logoutUrl = logoutUrl;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "the",
            "url",
            "by",
            "which",
            "the",
            "relying",
            "or",
            "asserting",
            "party",
            "can",
            "trigger",
            "logout"
        ]
    },
    {
        "id": 374,
        "code": "\tpublic Saml2LogoutConfigurer<H> relyingPartyRegistrationRepository(RelyingPartyRegistrationRepository repo) {\n\t\tthis.relyingPartyRegistrationRepository = repo;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "relying",
            "party",
            "registration",
            "repository",
            "of",
            "relying",
            "parties",
            "each",
            "party",
            "representing",
            "a",
            "service",
            "provider",
            "sp",
            "and",
            "this",
            "host",
            "and",
            "identity",
            "provider",
            "idp",
            "pair",
            "that",
            "communicate",
            "with",
            "each",
            "other"
        ]
    },
    {
        "id": 375,
        "code": "\tpublic LogoutRequestConfigurer logoutRequest() {\n\t\treturn this.logoutRequestConfigurer;\n\t}",
        "summary_tokens": [
            "get",
            "configurer",
            "for",
            "saml",
            "0"
        ]
    },
    {
        "id": 376,
        "code": "\tpublic LogoutResponseConfigurer logoutResponse() {\n\t\treturn this.logoutResponseConfigurer;\n\t}",
        "summary_tokens": [
            "get",
            "configurer",
            "for",
            "saml",
            "0"
        ]
    },
    {
        "id": 377,
        "code": "\tpublic Constraint anyMessage() {\n\t\treturn matchers(MessageMatcher.ANY_MESSAGE);\n\t}",
        "summary_tokens": [
            "maps",
            "any",
            "message",
            "to",
            "a",
            "security",
            "expression"
        ]
    },
    {
        "id": 378,
        "code": "\tpublic Constraint nullDestMatcher() {\n\t\treturn matchers(SimpDestinationMessageMatcher.NULL_DESTINATION_MATCHER);\n\t}",
        "summary_tokens": [
            "maps",
            "any",
            "message",
            "that",
            "has",
            "a",
            "null",
            "simp",
            "message",
            "header",
            "accessor",
            "destination",
            "header",
            "i"
        ]
    },
    {
        "id": 379,
        "code": "\tpublic Constraint simpTypeMatchers(SimpMessageType... typesToMatch) {\n\t\tMessageMatcher<?>[] typeMatchers = new MessageMatcher<?>[typesToMatch.length];\n\t\tfor (int i = 0; i < typesToMatch.length; i++) {\n\t\t\tSimpMessageType typeToMatch = typesToMatch[i];\n\t\t\ttypeMatchers[i] = new SimpMessageTypeMatcher(typeToMatch);\n\t\t}\n\t\treturn matchers(typeMatchers);\n\t}",
        "summary_tokens": [
            "maps",
            "a",
            "list",
            "of",
            "simp",
            "destination",
            "message",
            "matcher",
            "instances"
        ]
    },
    {
        "id": 380,
        "code": "\tprivate Constraint simpDestMatchers(SimpMessageType type, String... patterns) {\n\t\tList<MatcherBuilder> matchers = new ArrayList<>(patterns.length);\n\t\tfor (String pattern : patterns) {\n\t\t\tmatchers.add(new PathMatcherMessageMatcherBuilder(pattern, type));\n\t\t}\n\t\treturn new Constraint(matchers);\n\t}",
        "summary_tokens": [
            "maps",
            "a",
            "list",
            "of",
            "simp",
            "destination",
            "message",
            "matcher",
            "instances"
        ]
    },
    {
        "id": 381,
        "code": "\tpublic Constraint simpMessageDestMatchers(String... patterns) {\n\t\treturn simpDestMatchers(SimpMessageType.MESSAGE, patterns);\n\t}",
        "summary_tokens": [
            "maps",
            "a",
            "list",
            "of",
            "simp",
            "destination",
            "message",
            "matcher",
            "instances",
            "that",
            "match",
            "on",
            "simp",
            "message",
            "type"
        ]
    },
    {
        "id": 382,
        "code": "\tpublic Constraint simpSubscribeDestMatchers(String... patterns) {\n\t\treturn simpDestMatchers(SimpMessageType.SUBSCRIBE, patterns);\n\t}",
        "summary_tokens": [
            "maps",
            "a",
            "list",
            "of",
            "simp",
            "destination",
            "message",
            "matcher",
            "instances",
            "that",
            "match",
            "on",
            "simp",
            "message",
            "type"
        ]
    },
    {
        "id": 383,
        "code": "\tpublic MessageSecurityMetadataSourceRegistry simpDestPathMatcher(PathMatcher pathMatcher) {\n\t\tAssert.notNull(pathMatcher, \"pathMatcher cannot be null\");\n\t\tthis.pathMatcher.setPathMatcher(pathMatcher);\n\t\tthis.defaultPathMatcher = false;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "the",
            "path",
            "matcher",
            "to",
            "be",
            "used",
            "with",
            "the",
            "message",
            "security",
            "metadata",
            "source",
            "registry",
            "simp",
            "dest",
            "matchers",
            "string"
        ]
    },
    {
        "id": 384,
        "code": "\tprotected boolean isSimpDestPathMatcherConfigured() {\n\t\treturn !this.defaultPathMatcher;\n\t}",
        "summary_tokens": [
            "determines",
            "if",
            "the",
            "simp",
            "dest",
            "path",
            "matcher",
            "path",
            "matcher",
            "has",
            "been",
            "explicitly",
            "set"
        ]
    },
    {
        "id": 385,
        "code": "\tpublic Constraint matchers(MessageMatcher<?>... matchers) {\n\t\tList<MatcherBuilder> builders = new ArrayList<>(matchers.length);\n\t\tfor (MessageMatcher<?> matcher : matchers) {\n\t\t\tbuilders.add(new PreBuiltMatcherBuilder(matcher));\n\t\t}\n\t\treturn new Constraint(builders);\n\t}",
        "summary_tokens": [
            "maps",
            "a",
            "list",
            "of",
            "message",
            "matcher",
            "instances",
            "to",
            "a",
            "security",
            "expression"
        ]
    },
    {
        "id": 386,
        "code": "\tpublic MessageSecurityMetadataSourceRegistry expressionHandler(\n\t\t\tSecurityExpressionHandler<Message<Object>> expressionHandler) {\n\t\tAssert.notNull(expressionHandler, \"expressionHandler cannot be null\");\n\t\tthis.expressionHandler = expressionHandler;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "the",
            "security",
            "expression",
            "handler",
            "to",
            "be",
            "used"
        ]
    },
    {
        "id": 387,
        "code": "\tprotected MessageSecurityMetadataSource createMetadataSource() {\n\t\tLinkedHashMap<MessageMatcher<?>, String> matcherToExpression = new LinkedHashMap<>();\n\t\tfor (Map.Entry<MatcherBuilder, String> entry : this.matcherToExpression.entrySet()) {\n\t\t\tmatcherToExpression.put(entry.getKey().build(), entry.getValue());\n\t\t}\n\t\treturn ExpressionBasedMessageSecurityMetadataSourceFactory\n\t\t\t\t.createExpressionMessageMetadataSource(matcherToExpression, this.expressionHandler);\n\t}",
        "summary_tokens": [
            "allows",
            "subclasses",
            "to",
            "create",
            "creating",
            "a",
            "message",
            "security",
            "metadata",
            "source"
        ]
    },
    {
        "id": 388,
        "code": "\tprotected boolean containsMapping() {\n\t\treturn !this.matcherToExpression.isEmpty();\n\t}",
        "summary_tokens": [
            "allows",
            "determining",
            "if",
            "a",
            "mapping",
            "was",
            "added"
        ]
    },
    {
        "id": 389,
        "code": "\tprivate SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) {\n\t\thttp.authorizeExchange().anyExchange().authenticated();\n\t\tif (isOAuth2Present && OAuth2ClasspathGuard.shouldConfigure(this.context)) {\n\t\t\tOAuth2ClasspathGuard.configure(this.context, http);\n\t\t}\n\t\telse {\n\t\t\thttp.httpBasic();\n\t\t\thttp.formLogin();\n\t\t}\n\t\tSecurityWebFilterChain result = http.build();\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "the",
            "default",
            "server",
            "http",
            "security",
            "configuration"
        ]
    },
    {
        "id": 390,
        "code": "\tprotected boolean sameOriginDisabled() {\n\t\treturn false;\n\t}",
        "summary_tokens": [
            "p",
            "determines",
            "if",
            "a",
            "csrf",
            "token",
            "is",
            "required",
            "for",
            "connecting"
        ]
    },
    {
        "id": 391,
        "code": "\tprotected void customizeClientInboundChannel(ChannelRegistration registration) {\n\t}",
        "summary_tokens": [
            "allows",
            "subclasses",
            "to",
            "customize",
            "the",
            "configuration",
            "of",
            "the",
            "channel",
            "registration"
        ]
    },
    {
        "id": 392,
        "code": "\tpublic String getRolePrefix() {\n\t\treturn this.rolePrefix;\n\t}",
        "summary_tokens": [
            "the",
            "default",
            "prefix",
            "used",
            "with",
            "role",
            "based",
            "authorization"
        ]
    },
    {
        "id": 393,
        "code": "\tpublic void setResourceLocation(String resourceLocation) {\n\t\tthis.userDetails.setResourceLocation(resourceLocation);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "location",
            "of",
            "a",
            "resource",
            "that",
            "is",
            "a",
            "properties",
            "file",
            "in",
            "the",
            "format",
            "defined",
            "in",
            "user",
            "details",
            "resource",
            "factory",
            "bean"
        ]
    },
    {
        "id": 394,
        "code": "\tpublic void setResource(Resource resource) {\n\t\tthis.userDetails.setResource(resource);\n\t}",
        "summary_tokens": [
            "sets",
            "a",
            "resource",
            "that",
            "is",
            "a",
            "properties",
            "file",
            "in",
            "the",
            "format",
            "defined",
            "in",
            "user",
            "details",
            "resource",
            "factory",
            "bean"
        ]
    },
    {
        "id": 395,
        "code": "\tpublic static ReactiveUserDetailsServiceResourceFactoryBean fromResourceLocation(String resourceLocation) {\n\t\tReactiveUserDetailsServiceResourceFactoryBean result = new ReactiveUserDetailsServiceResourceFactoryBean();\n\t\tresult.setResourceLocation(resourceLocation);\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "reactive",
            "user",
            "details",
            "service",
            "resource",
            "factory",
            "bean",
            "with",
            "the",
            "location",
            "of",
            "a",
            "resource",
            "that",
            "is",
            "a",
            "properties",
            "file",
            "in",
            "the",
            "format",
            "defined",
            "in",
            "user",
            "details",
            "resource",
            "factory",
            "bean"
        ]
    },
    {
        "id": 396,
        "code": "\tpublic static ReactiveUserDetailsServiceResourceFactoryBean fromResource(Resource propertiesResource) {\n\t\tReactiveUserDetailsServiceResourceFactoryBean result = new ReactiveUserDetailsServiceResourceFactoryBean();\n\t\tresult.setResource(propertiesResource);\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "reactive",
            "user",
            "details",
            "service",
            "resource",
            "factory",
            "bean",
            "with",
            "a",
            "resource",
            "that",
            "is",
            "a",
            "properties",
            "file",
            "in",
            "the",
            "format",
            "defined",
            "in",
            "user",
            "details",
            "resource",
            "factory",
            "bean"
        ]
    },
    {
        "id": 397,
        "code": "\tpublic static ReactiveUserDetailsServiceResourceFactoryBean fromString(String users) {\n\t\tReactiveUserDetailsServiceResourceFactoryBean result = new ReactiveUserDetailsServiceResourceFactoryBean();\n\t\tresult.setResource(new InMemoryResource(users));\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "reactive",
            "user",
            "details",
            "service",
            "resource",
            "factory",
            "bean",
            "with",
            "a",
            "string",
            "that",
            "is",
            "in",
            "the",
            "format",
            "defined",
            "in",
            "user",
            "details",
            "resource",
            "factory",
            "bean"
        ]
    },
    {
        "id": 398,
        "code": "\tpublic void setResourceLocation(String resourceLocation) {\n\t\tthis.resourceLocation = resourceLocation;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "location",
            "of",
            "a",
            "resource",
            "that",
            "is",
            "a",
            "properties",
            "file",
            "in",
            "the",
            "format",
            "defined",
            "in",
            "user",
            "details",
            "resource",
            "factory",
            "bean"
        ]
    },
    {
        "id": 399,
        "code": "\tpublic void setResource(Resource resource) {\n\t\tthis.resource = resource;\n\t}",
        "summary_tokens": [
            "sets",
            "a",
            "resource",
            "that",
            "is",
            "a",
            "properties",
            "file",
            "in",
            "the",
            "format",
            "defined",
            "in",
            "user",
            "details",
            "resource",
            "factory",
            "bean"
        ]
    },
    {
        "id": 400,
        "code": "\tpublic static UserDetailsResourceFactoryBean fromResourceLocation(String resourceLocation) {\n\t\tUserDetailsResourceFactoryBean result = new UserDetailsResourceFactoryBean();\n\t\tresult.setResourceLocation(resourceLocation);\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "user",
            "details",
            "resource",
            "factory",
            "bean",
            "with",
            "the",
            "location",
            "of",
            "a",
            "resource",
            "that",
            "is",
            "a",
            "properties",
            "file",
            "in",
            "the",
            "format",
            "defined",
            "in",
            "user",
            "details",
            "resource",
            "factory",
            "bean"
        ]
    },
    {
        "id": 401,
        "code": "\tpublic static UserDetailsResourceFactoryBean fromResource(Resource propertiesResource) {\n\t\tUserDetailsResourceFactoryBean result = new UserDetailsResourceFactoryBean();\n\t\tresult.setResource(propertiesResource);\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "user",
            "details",
            "resource",
            "factory",
            "bean",
            "with",
            "a",
            "resource",
            "that",
            "is",
            "a",
            "properties",
            "file",
            "in",
            "the",
            "format",
            "defined",
            "in",
            "user",
            "details",
            "resource",
            "factory",
            "bean"
        ]
    },
    {
        "id": 402,
        "code": "\tpublic static UserDetailsResourceFactoryBean fromString(String users) {\n\t\tInMemoryResource resource = new InMemoryResource(users);\n\t\treturn fromResource(resource);\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "user",
            "details",
            "resource",
            "factory",
            "bean",
            "with",
            "a",
            "resource",
            "from",
            "the",
            "provided",
            "string",
            "users",
            "the",
            "string",
            "representing",
            "the",
            "users",
            "the",
            "user",
            "details",
            "resource",
            "factory",
            "bean"
        ]
    },
    {
        "id": 403,
        "code": "\tvoid initAccessDeniedHandler(BeanDefinition invalidSessionStrategy, BeanMetadataElement defaultDeniedHandler) {\n\t\tBeanMetadataElement accessDeniedHandler = createAccessDeniedHandler(invalidSessionStrategy,\n\t\t\t\tdefaultDeniedHandler);\n\t\tthis.csrfFilter.getPropertyValues().addPropertyValue(\"accessDeniedHandler\", accessDeniedHandler);\n\t}",
        "summary_tokens": [
            "populate",
            "the",
            "access",
            "denied",
            "handler",
            "on",
            "the",
            "csrf",
            "filter",
            "invalid",
            "session",
            "strategy",
            "the",
            "invalid",
            "session",
            "strategy",
            "to",
            "use",
            "default",
            "denied",
            "handler",
            "the",
            "access",
            "denied",
            "handler",
            "to",
            "use"
        ]
    },
    {
        "id": 404,
        "code": "\tprivate BeanMetadataElement createAccessDeniedHandler(BeanDefinition invalidSessionStrategy,\n\t\t\tBeanMetadataElement defaultDeniedHandler) {\n\t\tif (invalidSessionStrategy == null) {\n\t\t\treturn defaultDeniedHandler;\n\t\t}\n\t\tManagedMap<Class<? extends AccessDeniedException>, BeanDefinition> handlers = new ManagedMap<>();\n\t\tBeanDefinitionBuilder invalidSessionHandlerBldr = BeanDefinitionBuilder\n\t\t\t\t.rootBeanDefinition(InvalidSessionAccessDeniedHandler.class);\n\t\tinvalidSessionHandlerBldr.addConstructorArgValue(invalidSessionStrategy);\n\t\thandlers.put(MissingCsrfTokenException.class, invalidSessionHandlerBldr.getBeanDefinition());\n\t\tBeanDefinitionBuilder deniedBldr = BeanDefinitionBuilder\n\t\t\t\t.rootBeanDefinition(DelegatingAccessDeniedHandler.class);\n\t\tdeniedBldr.addConstructorArgValue(handlers);\n\t\tdeniedBldr.addConstructorArgValue(defaultDeniedHandler);\n\t\treturn deniedBldr.getBeanDefinition();\n\t}",
        "summary_tokens": [
            "creates",
            "the",
            "access",
            "denied",
            "handler",
            "from",
            "the",
            "result",
            "of",
            "get",
            "default",
            "access",
            "denied",
            "handler",
            "http",
            "security",
            "builder",
            "and",
            "get",
            "invalid",
            "session",
            "strategy",
            "http",
            "security",
            "builder"
        ]
    },
    {
        "id": 405,
        "code": "\tprivate void checkFilterStack(List<Filter> filters) {\n\t\tcheckForDuplicates(SecurityContextPersistenceFilter.class, filters);\n\t\tcheckForDuplicates(UsernamePasswordAuthenticationFilter.class, filters);\n\t\tcheckForDuplicates(SessionManagementFilter.class, filters);\n\t\tcheckForDuplicates(BasicAuthenticationFilter.class, filters);\n\t\tcheckForDuplicates(SecurityContextHolderAwareRequestFilter.class, filters);\n\t\tcheckForDuplicates(JaasApiIntegrationFilter.class, filters);\n\t\tcheckForDuplicates(ExceptionTranslationFilter.class, filters);\n\t\tcheckForDuplicates(FilterSecurityInterceptor.class, filters);\n\t\tcheckForDuplicates(AuthorizationFilter.class, filters);\n\t}",
        "summary_tokens": [
            "checks",
            "the",
            "filter",
            "list",
            "for",
            "possible",
            "errors",
            "and",
            "logs",
            "them"
        ]
    },
    {
        "id": 406,
        "code": "\tprivate String resolveAttribute(ParserContext pc, Element element, String attributeName) {\n\t\treturn pc.getReaderContext().getEnvironment().resolvePlaceholders(element.getAttribute(attributeName));\n\t}",
        "summary_tokens": [
            "resolve",
            "the",
            "placeholder",
            "for",
            "a",
            "given",
            "attribute",
            "on",
            "a",
            "element"
        ]
    },
    {
        "id": 407,
        "code": "\tprivate ManagedMap<BeanMetadataElement, BeanDefinition> parseInterceptUrlsForChannelSecurity() {\n\t\tManagedMap<BeanMetadataElement, BeanDefinition> channelRequestMap = new ManagedMap<>();\n\t\tfor (Element urlElt : this.interceptUrls) {\n\t\t\tString path = urlElt.getAttribute(HttpSecurityBeanDefinitionParser.ATT_PATH_PATTERN);\n\t\t\tString method = urlElt.getAttribute(HttpSecurityBeanDefinitionParser.ATT_HTTP_METHOD);\n\t\t\tString matcherRef = urlElt.getAttribute(HttpSecurityBeanDefinitionParser.ATT_REQUEST_MATCHER_REF);\n\t\t\tboolean hasMatcherRef = StringUtils.hasText(matcherRef);\n\t\t\tif (!hasMatcherRef && !StringUtils.hasText(path)) {\n\t\t\t\tthis.pc.getReaderContext().error(\"pattern attribute cannot be empty or null\", urlElt);\n\t\t\t}\n\t\t\tString requiredChannel = urlElt.getAttribute(HttpSecurityBeanDefinitionParser.ATT_REQUIRES_CHANNEL);\n\t\t\tif (StringUtils.hasText(requiredChannel)) {\n\t\t\t\tBeanMetadataElement matcher = hasMatcherRef ? new RuntimeBeanReference(matcherRef)\n\t\t\t\t\t\t: this.matcherType.createMatcher(this.pc, path, method);\n\t\t\t\tRootBeanDefinition channelAttributes = new RootBeanDefinition(ChannelAttributeFactory.class);\n\t\t\t\tchannelAttributes.getConstructorArgumentValues().addGenericArgumentValue(requiredChannel);\n\t\t\t\tchannelAttributes.setFactoryMethodName(\"createChannelAttributes\");\n\t\t\t\tchannelRequestMap.put(matcher, channelAttributes);\n\t\t\t}\n\t\t}\n\t\treturn channelRequestMap;\n\t}",
        "summary_tokens": [
            "parses",
            "the",
            "intercept",
            "url",
            "elements",
            "to",
            "obtain",
            "the",
            "map",
            "used",
            "by",
            "channel",
            "security"
        ]
    },
    {
        "id": 408,
        "code": "\tpublic BeanDefinition parse(Element element, ParserContext pc) {\n\t\tCompositeComponentDefinition compositeDef = new CompositeComponentDefinition(element.getTagName(),\n\t\t\t\tpc.extractSource(element));\n\t\tpc.pushContainingComponent(compositeDef);\n\t\tregisterFilterChainProxyIfNecessary(pc, pc.extractSource(element));\n\t\t\n\t\tBeanDefinition listFactoryBean = pc.getRegistry().getBeanDefinition(BeanIds.FILTER_CHAINS);\n\t\tList<BeanReference> filterChains = (List<BeanReference>) listFactoryBean.getPropertyValues()\n\t\t\t\t.getPropertyValue(\"sourceList\").getValue();\n\t\tfilterChains.add(createFilterChain(element, pc));\n\t\tpc.popAndRegisterContainingComponent();\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "the",
            "aim",
            "of",
            "this",
            "method",
            "is",
            "to",
            "build",
            "the",
            "list",
            "of",
            "filters",
            "which",
            "have",
            "been",
            "defined",
            "by",
            "the",
            "namespace",
            "elements",
            "and",
            "attributes",
            "within",
            "the",
            "lt",
            "http",
            "gt",
            "configuration",
            "along",
            "with",
            "any",
            "custom",
            "filter",
            "s",
            "linked",
            "to",
            "user",
            "defined",
            "filter",
            "beans"
        ]
    },
    {
        "id": 409,
        "code": "\tprivate BeanReference createFilterChain(Element element, ParserContext pc) {\n\t\tboolean secured = !OPT_SECURITY_NONE.equals(element.getAttribute(ATT_SECURED));\n\t\tif (!secured) {\n\t\t\tvalidateSecuredFilterChainElement(element, pc);\n\t\t\tfor (int i = 0; i < element.getChildNodes().getLength(); i++) {\n\t\t\t\tif (element.getChildNodes().item(i) instanceof Element) {\n\t\t\t\t\tpc.getReaderContext().error(\"If you are using <http> to define an unsecured pattern, \"\n\t\t\t\t\t\t\t+ \"it cannot contain child elements.\", pc.extractSource(element));\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn createSecurityFilterChainBean(element, pc, Collections.emptyList());\n\t\t}\n\t\tBeanReference portMapper = createPortMapper(element, pc);\n\t\tBeanReference portResolver = createPortResolver(portMapper, pc);\n\t\tManagedList<BeanReference> authenticationProviders = new ManagedList<>();\n\t\tBeanReference authenticationManager = createAuthenticationManager(element, pc, authenticationProviders);\n\t\tboolean forceAutoConfig = isDefaultHttpConfig(element);\n\t\tHttpConfigurationBuilder httpBldr = new HttpConfigurationBuilder(element, forceAutoConfig, pc, portMapper,\n\t\t\t\tportResolver, authenticationManager);\n\t\thttpBldr.getSecurityContextRepositoryForAuthenticationFilters();\n\t\tAuthenticationConfigBuilder authBldr = new AuthenticationConfigBuilder(element, forceAutoConfig, pc,\n\t\t\t\thttpBldr.getSessionCreationPolicy(), httpBldr.getRequestCache(), authenticationManager,\n\t\t\t\thttpBldr.getSecurityContextHolderStrategyForAuthenticationFilters(),\n\t\t\t\thttpBldr.getSecurityContextRepositoryForAuthenticationFilters(), httpBldr.getSessionStrategy(),\n\t\t\t\tportMapper, portResolver, httpBldr.getCsrfLogoutHandler());\n\t\thttpBldr.setLogoutHandlers(authBldr.getLogoutHandlers());\n\t\thttpBldr.setEntryPoint(authBldr.getEntryPointBean());\n\t\thttpBldr.setAccessDeniedHandler(authBldr.getAccessDeniedHandlerBean());\n\t\thttpBldr.setCsrfIgnoreRequestMatchers(authBldr.getCsrfIgnoreRequestMatchers());\n\t\tauthenticationProviders.addAll(authBldr.getProviders());\n\t\tList<OrderDecorator> unorderedFilterChain = new ArrayList<>();\n\t\tunorderedFilterChain.addAll(httpBldr.getFilters());\n\t\tunorderedFilterChain.addAll(authBldr.getFilters());\n\t\tunorderedFilterChain.addAll(buildCustomFilterList(element, pc));\n\t\tunorderedFilterChain.sort(new OrderComparator());\n\t\tcheckFilterChainOrder(unorderedFilterChain, pc, pc.extractSource(element));\n\t\t\n\t\tList<BeanMetadataElement> filterChain = new ManagedList<>();\n\t\tfor (OrderDecorator od : unorderedFilterChain) {\n\t\t\tfilterChain.add(od.bean);\n\t\t}\n\t\treturn createSecurityFilterChainBean(element, pc, filterChain);\n\t}",
        "summary_tokens": [
            "creates",
            "the",
            "security",
            "filter",
            "chain",
            "bean",
            "from",
            "an",
            "lt",
            "http",
            "gt",
            "element"
        ]
    },
    {
        "id": 410,
        "code": "\tprivate BeanReference createAuthenticationManager(Element element, ParserContext pc,\n\t\t\tManagedList<BeanReference> authenticationProviders) {\n\t\tString parentMgrRef = element.getAttribute(ATT_AUTHENTICATION_MANAGER_REF);\n\t\tBeanDefinitionBuilder authManager = BeanDefinitionBuilder.rootBeanDefinition(ProviderManager.class);\n\t\tauthManager.addConstructorArgValue(authenticationProviders);\n\t\tif (StringUtils.hasText(parentMgrRef)) {\n\t\t\tRuntimeBeanReference parentAuthManager = new RuntimeBeanReference(parentMgrRef);\n\t\t\tauthManager.addConstructorArgValue(parentAuthManager);\n\t\t\tRootBeanDefinition clearCredentials = new RootBeanDefinition(\n\t\t\t\t\tClearCredentialsMethodInvokingFactoryBean.class);\n\t\t\tclearCredentials.getPropertyValues().addPropertyValue(\"targetObject\", parentAuthManager);\n\t\t\tclearCredentials.getPropertyValues().addPropertyValue(\"targetMethod\",\n\t\t\t\t\t\"isEraseCredentialsAfterAuthentication\");\n\t\t\tauthManager.addPropertyValue(\"eraseCredentialsAfterAuthentication\", clearCredentials);\n\t\t}\n\t\telse {\n\t\t\tRootBeanDefinition amfb = new RootBeanDefinition(AuthenticationManagerFactoryBean.class);\n\t\t\tamfb.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n\t\t\tString amfbId = pc.getReaderContext().generateBeanName(amfb);\n\t\t\tpc.registerBeanComponent(new BeanComponentDefinition(amfb, amfbId));\n\t\t\tRootBeanDefinition clearCredentials = new RootBeanDefinition(MethodInvokingFactoryBean.class);\n\t\t\tclearCredentials.getPropertyValues().addPropertyValue(\"targetObject\", new RuntimeBeanReference(amfbId));\n\t\t\tclearCredentials.getPropertyValues().addPropertyValue(\"targetMethod\",\n\t\t\t\t\t\"isEraseCredentialsAfterAuthentication\");\n\t\t\tauthManager.addConstructorArgValue(new RuntimeBeanReference(amfbId));\n\t\t\tauthManager.addPropertyValue(\"eraseCredentialsAfterAuthentication\", clearCredentials);\n\t\t}\n\t\t\n\t\tauthManager.addPropertyValue(\"authenticationEventPublisher\",\n\t\t\t\tnew RootBeanDefinition(DefaultAuthenticationEventPublisher.class));\n\t\tauthManager.getRawBeanDefinition().setSource(pc.extractSource(element));\n\t\tBeanDefinition authMgrBean = authManager.getBeanDefinition();\n\t\tString id = pc.getReaderContext().generateBeanName(authMgrBean);\n\t\tpc.registerBeanComponent(new BeanComponentDefinition(authMgrBean, id));\n\t\treturn new RuntimeBeanReference(id);\n\t}",
        "summary_tokens": [
            "creates",
            "the",
            "internal",
            "authentication",
            "manager",
            "bean",
            "which",
            "uses",
            "either",
            "the",
            "externally",
            "registered",
            "global",
            "one",
            "as",
            "a",
            "parent",
            "or",
            "the",
            "bean",
            "specified",
            "by",
            "authentication",
            "manager",
            "ref"
        ]
    },
    {
        "id": 411,
        "code": "\tpublic BeanDefinition parse(Element oauth2ResourceServer, ParserContext pc) {\n\t\tElement jwt = DomUtils.getChildElementByTagName(oauth2ResourceServer, Elements.JWT);\n\t\tElement opaqueToken = DomUtils.getChildElementByTagName(oauth2ResourceServer, Elements.OPAQUE_TOKEN);\n\t\tvalidateConfiguration(oauth2ResourceServer, jwt, opaqueToken, pc);\n\t\tif (jwt != null) {\n\t\t\tBeanDefinition jwtAuthenticationProvider = new JwtBeanDefinitionParser().parse(jwt, pc);\n\t\t\tthis.authenticationProviders.add(new RuntimeBeanReference(\n\t\t\t\t\tpc.getReaderContext().registerWithGeneratedName(jwtAuthenticationProvider)));\n\t\t}\n\t\tif (opaqueToken != null) {\n\t\t\tBeanDefinition opaqueTokenAuthenticationProvider = new OpaqueTokenBeanDefinitionParser().parse(opaqueToken,\n\t\t\t\t\tpc);\n\t\t\tthis.authenticationProviders.add(new RuntimeBeanReference(\n\t\t\t\t\tpc.getReaderContext().registerWithGeneratedName(opaqueTokenAuthenticationProvider)));\n\t\t}\n\t\tBeanMetadataElement bearerTokenResolver = getBearerTokenResolver(oauth2ResourceServer);\n\t\tBeanDefinitionBuilder requestMatcherBuilder = BeanDefinitionBuilder\n\t\t\t\t.rootBeanDefinition(BearerTokenRequestMatcher.class);\n\t\trequestMatcherBuilder.addConstructorArgValue(bearerTokenResolver);\n\t\tBeanDefinition requestMatcher = requestMatcherBuilder.getBeanDefinition();\n\t\tBeanMetadataElement authenticationEntryPoint = getEntryPoint(oauth2ResourceServer);\n\t\tthis.entryPoints.put(requestMatcher, authenticationEntryPoint);\n\t\tthis.deniedHandlers.put(requestMatcher, this.accessDeniedHandler);\n\t\tthis.ignoreCsrfRequestMatchers.add(requestMatcher);\n\t\tBeanDefinitionBuilder filterBuilder = BeanDefinitionBuilder\n\t\t\t\t.rootBeanDefinition(BearerTokenAuthenticationFilter.class);\n\t\tBeanMetadataElement authenticationManagerResolver = getAuthenticationManagerResolver(oauth2ResourceServer);\n\t\tfilterBuilder.addConstructorArgValue(authenticationManagerResolver);\n\t\tfilterBuilder.addPropertyValue(BEARER_TOKEN_RESOLVER, bearerTokenResolver);\n\t\tfilterBuilder.addPropertyValue(AUTHENTICATION_ENTRY_POINT, authenticationEntryPoint);\n\t\treturn filterBuilder.getBeanDefinition();\n\t}",
        "summary_tokens": [
            "parse",
            "a",
            "lt",
            "oauth",
            "0",
            "resource",
            "server",
            "gt",
            "element",
            "and",
            "return",
            "the",
            "corresponding",
            "bearer",
            "token",
            "authentication",
            "filter",
            "oauth",
            "0",
            "resource",
            "server",
            "the",
            "lt",
            "oauth",
            "0",
            "resource",
            "server",
            "gt",
            "element"
        ]
    },
    {
        "id": 412,
        "code": "\tprivate UserDetailsService getUserDetailsService() {\n\t\tMap<String, ?> beans = getBeansOfType(CachingUserDetailsService.class);\n\t\tif (beans.size() == 0) {\n\t\t\tbeans = getBeansOfType(UserDetailsService.class);\n\t\t}\n\t\tif (beans.size() == 0) {\n\t\t\tthrow new ApplicationContextException(\"No UserDetailsService registered.\");\n\t\t}\n\t\tif (beans.size() > 1) {\n\t\t\tthrow new ApplicationContextException(\"More than one UserDetailsService registered. Please \"\n\t\t\t\t\t+ \"use a specific Id reference in <remember-me/> or <x509 /> elements.\");\n\t\t}\n\t\treturn (UserDetailsService) beans.values().toArray()[0];\n\t}",
        "summary_tokens": [
            "obtains",
            "a",
            "user",
            "details",
            "service",
            "for",
            "use",
            "in",
            "remember",
            "me",
            "services",
            "etc"
        ]
    },
    {
        "id": 413,
        "code": "\tstatic void validateHttpRedirect(String url, ParserContext pc, Object source) {\n\t\tif (!StringUtils.hasText(url) || UrlUtils.isValidRedirectUrl(url) || url.startsWith(\"$\")\n\t\t\t\t|| url.startsWith(\"#\")) {\n\t\t\treturn;\n\t\t}\n\t\tpc.getReaderContext().warning(url + \" is not a valid redirect URL (must start with '/' or http(s))\", source);\n\t}",
        "summary_tokens": [
            "checks",
            "the",
            "value",
            "of",
            "an",
            "xml",
            "attribute",
            "which",
            "represents",
            "a",
            "redirect",
            "url"
        ]
    },
    {
        "id": 414,
        "code": "\tpublic void setContextSource(BaseLdapPathContextSource contextSource) {\n\t\tthis.contextSource = contextSource;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "base",
            "ldap",
            "path",
            "context",
            "source",
            "used",
            "to",
            "perform",
            "ldap",
            "authentication"
        ]
    },
    {
        "id": 415,
        "code": "\tprotected final BaseLdapPathContextSource getContextSource() {\n\t\treturn this.contextSource;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "base",
            "ldap",
            "path",
            "context",
            "source",
            "used",
            "to",
            "perform",
            "ldap",
            "authentication"
        ]
    },
    {
        "id": 416,
        "code": "\tpublic void setLdapAuthoritiesPopulator(LdapAuthoritiesPopulator ldapAuthoritiesPopulator) {\n\t\tthis.ldapAuthoritiesPopulator = ldapAuthoritiesPopulator;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "ldap",
            "authorities",
            "populator",
            "used",
            "to",
            "obtain",
            "a",
            "list",
            "of",
            "granted",
            "authorities",
            "for",
            "an",
            "ldap",
            "user"
        ]
    },
    {
        "id": 417,
        "code": "\tpublic void setAuthoritiesMapper(GrantedAuthoritiesMapper authoritiesMapper) {\n\t\tthis.authoritiesMapper = authoritiesMapper;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "granted",
            "authorities",
            "mapper",
            "used",
            "for",
            "converting",
            "the",
            "authorities",
            "loaded",
            "from",
            "storage",
            "to",
            "a",
            "new",
            "set",
            "of",
            "authorities",
            "which",
            "will",
            "be",
            "associated",
            "to",
            "the",
            "username",
            "password",
            "authentication",
            "token"
        ]
    },
    {
        "id": 418,
        "code": "\tpublic void setUserDetailsContextMapper(UserDetailsContextMapper userDetailsContextMapper) {\n\t\tthis.userDetailsContextMapper = userDetailsContextMapper;\n\t}",
        "summary_tokens": [
            "sets",
            "a",
            "custom",
            "strategy",
            "to",
            "be",
            "used",
            "for",
            "creating",
            "the",
            "user",
            "details",
            "which",
            "will",
            "be",
            "stored",
            "as",
            "the",
            "principal",
            "in",
            "the",
            "authentication"
        ]
    },
    {
        "id": 419,
        "code": "\tpublic void setUserDnPatterns(String... userDnPatterns) {\n\t\tthis.userDnPatterns = userDnPatterns;\n\t}",
        "summary_tokens": [
            "if",
            "your",
            "users",
            "are",
            "at",
            "a",
            "fixed",
            "location",
            "in",
            "the",
            "directory",
            "i"
        ]
    },
    {
        "id": 420,
        "code": "\tpublic void setUserSearchFilter(String userSearchFilter) {\n\t\tthis.userSearchFilter = userSearchFilter;\n\t}",
        "summary_tokens": [
            "the",
            "ldap",
            "filter",
            "used",
            "to",
            "search",
            "for",
            "users",
            "optional"
        ]
    },
    {
        "id": 421,
        "code": "\tpublic void setUserSearchBase(String userSearchBase) {\n\t\tthis.userSearchBase = userSearchBase;\n\t}",
        "summary_tokens": [
            "search",
            "base",
            "for",
            "user",
            "searches"
        ]
    },
    {
        "id": 422,
        "code": "\tpublic final AuthenticationManager createAuthenticationManager() {\n\t\tLdapAuthenticationProvider ldapAuthenticationProvider = getProvider();\n\t\treturn new ProviderManager(ldapAuthenticationProvider);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "configured",
            "authentication",
            "manager",
            "that",
            "can",
            "be",
            "used",
            "to",
            "perform",
            "ldap",
            "authentication"
        ]
    },
    {
        "id": 423,
        "code": "\tpublic static EmbeddedLdapServerContextSourceFactoryBean fromEmbeddedLdapServer() {\n\t\treturn new EmbeddedLdapServerContextSourceFactoryBean();\n\t}",
        "summary_tokens": [
            "create",
            "an",
            "embedded",
            "ldap",
            "server",
            "context",
            "source",
            "factory",
            "bean",
            "that",
            "will",
            "use",
            "an",
            "embedded",
            "ldap",
            "server",
            "to",
            "perform",
            "ldap",
            "authentication"
        ]
    },
    {
        "id": 424,
        "code": "\tpublic void setLdif(String ldif) {\n\t\tthis.ldif = ldif;\n\t}",
        "summary_tokens": [
            "specifies",
            "an",
            "ldif",
            "to",
            "load",
            "at",
            "startup",
            "for",
            "an",
            "embedded",
            "ldap",
            "server"
        ]
    },
    {
        "id": 425,
        "code": "\tpublic void setPort(int port) {\n\t\tthis.port = port;\n\t}",
        "summary_tokens": [
            "the",
            "port",
            "to",
            "connect",
            "to",
            "ldap",
            "to",
            "the",
            "default",
            "is",
            "0",
            "or",
            "random",
            "available",
            "port",
            "if",
            "unavailable"
        ]
    },
    {
        "id": 426,
        "code": "\tpublic void setRoot(String root) {\n\t\tthis.root = root;\n\t}",
        "summary_tokens": [
            "optional",
            "root",
            "suffix",
            "for",
            "the",
            "embedded",
            "ldap",
            "server"
        ]
    },
    {
        "id": 427,
        "code": "\tpublic void setManagerDn(String managerDn) {\n\t\tthis.managerDn = managerDn;\n\t}",
        "summary_tokens": [
            "username",
            "dn",
            "of",
            "the",
            "manager",
            "user",
            "identity",
            "i"
        ]
    },
    {
        "id": 428,
        "code": "\tpublic void setManagerPassword(String managerPassword) {\n\t\tthis.managerPassword = managerPassword;\n\t}",
        "summary_tokens": [
            "the",
            "password",
            "for",
            "the",
            "manager",
            "dn"
        ]
    },
    {
        "id": 429,
        "code": "\tpublic void setPasswordEncoder(PasswordEncoder passwordEncoder) {\n\t\tAssert.notNull(passwordEncoder, \"passwordEncoder must not be null.\");\n\t\tthis.passwordEncoder = passwordEncoder;\n\t}",
        "summary_tokens": [
            "specifies",
            "the",
            "password",
            "encoder",
            "to",
            "be",
            "used",
            "when",
            "authenticating",
            "with",
            "password",
            "comparison"
        ]
    },
    {
        "id": 430,
        "code": "\tpublic void setPasswordAttribute(String passwordAttribute) {\n\t\tthis.passwordAttribute = passwordAttribute;\n\t}",
        "summary_tokens": [
            "the",
            "attribute",
            "in",
            "the",
            "directory",
            "which",
            "contains",
            "the",
            "user",
            "password"
        ]
    },
    {
        "id": 431,
        "code": "\tprivate RootBeanDefinition createEmbeddedServer(Element element, ParserContext parserContext) {\n\t\tObject source = parserContext.extractSource(element);\n\t\tString suffix = element.getAttribute(ATT_ROOT_SUFFIX);\n\t\tif (!StringUtils.hasText(suffix)) {\n\t\t\tsuffix = OPT_DEFAULT_ROOT_SUFFIX;\n\t\t}\n\t\tBeanDefinitionBuilder contextSource = BeanDefinitionBuilder.rootBeanDefinition(CONTEXT_SOURCE_CLASS);\n\t\tcontextSource.addConstructorArgValue(suffix);\n\t\tcontextSource.addPropertyValue(\"userDn\", \"uid=admin,ou=system\");\n\t\tcontextSource.addPropertyValue(\"password\", \"secret\");\n\t\tBeanDefinition embeddedLdapServerConfigBean = BeanDefinitionBuilder\n\t\t\t\t.rootBeanDefinition(EmbeddedLdapServerConfigBean.class).getBeanDefinition();\n\t\tString embeddedLdapServerConfigBeanName = parserContext.getReaderContext()\n\t\t\t\t.generateBeanName(embeddedLdapServerConfigBean);\n\t\tparserContext.registerBeanComponent(\n\t\t\t\tnew BeanComponentDefinition(embeddedLdapServerConfigBean, embeddedLdapServerConfigBeanName));\n\t\tcontextSource.setFactoryMethodOnBean(\"createEmbeddedContextSource\", embeddedLdapServerConfigBeanName);\n\t\tString mode = element.getAttribute(\"mode\");\n\t\tRootBeanDefinition ldapContainer = getRootBeanDefinition(mode);\n\t\tldapContainer.setSource(source);\n\t\tldapContainer.getConstructorArgumentValues().addGenericArgumentValue(suffix);\n\t\tString ldifs = element.getAttribute(ATT_LDIF_FILE);\n\t\tif (!StringUtils.hasText(ldifs)) {\n\t\t\tldifs = OPT_DEFAULT_LDIF_FILE;\n\t\t}\n\t\tldapContainer.getConstructorArgumentValues().addGenericArgumentValue(ldifs);\n\t\tldapContainer.getPropertyValues().addPropertyValue(\"port\", getPort(element));\n\t\tif (parserContext.getRegistry().containsBeanDefinition(BeanIds.EMBEDDED_APACHE_DS)\n\t\t\t\t|| parserContext.getRegistry().containsBeanDefinition(BeanIds.EMBEDDED_UNBOUNDID)) {\n\t\t\tparserContext.getReaderContext().error(\"Only one embedded server bean is allowed per application context\",\n\t\t\t\t\telement);\n\t\t}\n\t\tString beanId = resolveBeanId(mode);\n\t\tif (beanId != null) {\n\t\t\tparserContext.getRegistry().registerBeanDefinition(beanId, ldapContainer);\n\t\t}\n\t\treturn (RootBeanDefinition) contextSource.getBeanDefinition();\n\t}",
        "summary_tokens": [
            "will",
            "be",
            "called",
            "if",
            "no",
            "url",
            "attribute",
            "is",
            "supplied"
        ]
    },
    {
        "id": 432,
        "code": "\tprivate String registerAccessManager(ParserContext pc, boolean jsr250Enabled, BeanDefinition expressionVoter) {\n\t\tBeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder.rootBeanDefinition(AffirmativeBased.class);\n\t\tManagedList voters = new ManagedList(4);\n\t\tif (expressionVoter != null) {\n\t\t\tvoters.add(expressionVoter);\n\t\t}\n\t\tvoters.add(new RootBeanDefinition(RoleVoter.class));\n\t\tvoters.add(new RootBeanDefinition(AuthenticatedVoter.class));\n\t\tif (jsr250Enabled) {\n\t\t\tvoters.add(new RootBeanDefinition(Jsr250Voter.class));\n\t\t}\n\t\taccessMgrBuilder.addConstructorArgValue(voters);\n\t\tBeanDefinition accessManager = accessMgrBuilder.getBeanDefinition();\n\t\tString id = pc.getReaderContext().generateBeanName(accessManager);\n\t\tpc.registerBeanComponent(new BeanComponentDefinition(accessManager, id));\n\t\treturn id;\n\t}",
        "summary_tokens": [
            "register",
            "the",
            "default",
            "access",
            "decision",
            "manager"
        ]
    },
    {
        "id": 433,
        "code": "\tpublic void setResourceLocation(String resourceLocation) {\n\t\tthis.userDetails.setResourceLocation(resourceLocation);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "location",
            "of",
            "a",
            "resource",
            "that",
            "is",
            "a",
            "properties",
            "file",
            "in",
            "the",
            "format",
            "defined",
            "in",
            "user",
            "details",
            "resource",
            "factory",
            "bean"
        ]
    },
    {
        "id": 434,
        "code": "\tpublic void setResource(Resource resource) {\n\t\tthis.userDetails.setResource(resource);\n\t}",
        "summary_tokens": [
            "sets",
            "a",
            "resource",
            "that",
            "is",
            "a",
            "properties",
            "file",
            "in",
            "the",
            "format",
            "defined",
            "in",
            "user",
            "details",
            "resource",
            "factory",
            "bean"
        ]
    },
    {
        "id": 435,
        "code": "\tpublic static UserDetailsManagerResourceFactoryBean fromResourceLocation(String resourceLocation) {\n\t\tUserDetailsManagerResourceFactoryBean result = new UserDetailsManagerResourceFactoryBean();\n\t\tresult.setResourceLocation(resourceLocation);\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "user",
            "details",
            "manager",
            "resource",
            "factory",
            "bean",
            "with",
            "the",
            "location",
            "of",
            "a",
            "resource",
            "that",
            "is",
            "a",
            "properties",
            "file",
            "in",
            "the",
            "format",
            "defined",
            "in",
            "user",
            "details",
            "resource",
            "factory",
            "bean"
        ]
    },
    {
        "id": 436,
        "code": "\tpublic static UserDetailsManagerResourceFactoryBean fromResource(Resource resource) {\n\t\tUserDetailsManagerResourceFactoryBean result = new UserDetailsManagerResourceFactoryBean();\n\t\tresult.setResource(resource);\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "user",
            "details",
            "manager",
            "resource",
            "factory",
            "bean",
            "with",
            "a",
            "resource",
            "that",
            "is",
            "a",
            "properties",
            "file",
            "in",
            "the",
            "format",
            "defined",
            "in",
            "user",
            "details",
            "resource",
            "factory",
            "bean"
        ]
    },
    {
        "id": 437,
        "code": "\tpublic static UserDetailsManagerResourceFactoryBean fromString(String users) {\n\t\tUserDetailsManagerResourceFactoryBean result = new UserDetailsManagerResourceFactoryBean();\n\t\tresult.setResource(new InMemoryResource(users));\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "user",
            "details",
            "manager",
            "resource",
            "factory",
            "bean",
            "with",
            "a",
            "string",
            "that",
            "is",
            "in",
            "the",
            "format",
            "defined",
            "in",
            "user",
            "details",
            "resource",
            "factory",
            "bean"
        ]
    },
    {
        "id": 438,
        "code": "\tpublic T pathMatchers(String... antPatterns) {\n\t\treturn matcher(ServerWebExchangeMatchers.pathMatchers(antPatterns));\n\t}",
        "summary_tokens": [
            "maps",
            "a",
            "list",
            "of",
            "path",
            "pattern",
            "parser",
            "server",
            "web",
            "exchange",
            "matcher",
            "instances",
            "that",
            "do",
            "not",
            "care",
            "which",
            "http",
            "method",
            "is",
            "used"
        ]
    },
    {
        "id": 439,
        "code": "\tpublic T matchers(ServerWebExchangeMatcher... matchers) {\n\t\treturn registerMatcher(new OrServerWebExchangeMatcher(matchers));\n\t}",
        "summary_tokens": [
            "associates",
            "a",
            "list",
            "of",
            "server",
            "web",
            "exchange",
            "matcher",
            "instances",
            "matchers",
            "the",
            "server",
            "web",
            "exchange",
            "matcher",
            "instances",
            "the",
            "object",
            "that",
            "is",
            "chained",
            "after",
            "creating",
            "the",
            "server",
            "web",
            "exchange",
            "matcher"
        ]
    },
    {
        "id": 440,
        "code": "\tprivate T matcher(ServerWebExchangeMatcher matcher) {\n\t\treturn registerMatcher(matcher);\n\t}",
        "summary_tokens": [
            "associates",
            "a",
            "server",
            "web",
            "exchange",
            "matcher",
            "instances",
            "matcher",
            "the",
            "server",
            "web",
            "exchange",
            "matcher",
            "instance",
            "the",
            "object",
            "that",
            "is",
            "chained",
            "after",
            "creating",
            "the",
            "server",
            "web",
            "exchange",
            "matcher"
        ]
    },
    {
        "id": 441,
        "code": "\tpublic ServerHttpSecurity securityMatcher(ServerWebExchangeMatcher matcher) {\n\t\tAssert.notNull(matcher, \"matcher cannot be null\");\n\t\tthis.securityMatcher = matcher;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "the",
            "server",
            "exchange",
            "matcher",
            "that",
            "determines",
            "which",
            "requests",
            "apply",
            "to",
            "this",
            "http",
            "security",
            "instance"
        ]
    },
    {
        "id": 442,
        "code": "\tpublic ServerHttpSecurity addFilterAt(WebFilter webFilter, SecurityWebFiltersOrder order) {\n\t\tthis.webFilters.add(new OrderedWebFilter(webFilter, order.getOrder()));\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "adds",
            "a",
            "web",
            "filter",
            "at",
            "a",
            "specific",
            "position"
        ]
    },
    {
        "id": 443,
        "code": "\tpublic ServerHttpSecurity addFilterBefore(WebFilter webFilter, SecurityWebFiltersOrder order) {\n\t\tthis.webFilters.add(new OrderedWebFilter(webFilter, order.getOrder() - 1));\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "adds",
            "a",
            "web",
            "filter",
            "before",
            "specific",
            "position"
        ]
    },
    {
        "id": 444,
        "code": "\tpublic ServerHttpSecurity addFilterAfter(WebFilter webFilter, SecurityWebFiltersOrder order) {\n\t\tthis.webFilters.add(new OrderedWebFilter(webFilter, order.getOrder() + 1));\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "adds",
            "a",
            "web",
            "filter",
            "after",
            "specific",
            "position"
        ]
    },
    {
        "id": 445,
        "code": "\tprivate ServerWebExchangeMatcher getSecurityMatcher() {\n\t\treturn this.securityMatcher;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "server",
            "exchange",
            "matcher",
            "that",
            "determines",
            "which",
            "requests",
            "apply",
            "to",
            "this",
            "http",
            "security",
            "instance"
        ]
    },
    {
        "id": 446,
        "code": "\tpublic ServerHttpSecurity securityContextRepository(ServerSecurityContextRepository securityContextRepository) {\n\t\tAssert.notNull(securityContextRepository, \"securityContextRepository cannot be null\");\n\t\tthis.securityContextRepository = securityContextRepository;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "the",
            "strategy",
            "used",
            "with",
            "reactor",
            "context",
            "web",
            "filter"
        ]
    },
    {
        "id": 447,
        "code": "\tpublic ServerHttpSecurity redirectToHttps(Customizer<HttpsRedirectSpec> httpsRedirectCustomizer) {\n\t\tthis.httpsRedirectSpec = new HttpsRedirectSpec();\n\t\thttpsRedirectCustomizer.customize(this.httpsRedirectSpec);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "configures",
            "https",
            "redirection",
            "rules"
        ]
    },
    {
        "id": 448,
        "code": "\tpublic ServerHttpSecurity csrf(Customizer<CsrfSpec> csrfCustomizer) {\n\t\tif (this.csrf == null) {\n\t\t\tthis.csrf = new CsrfSpec();\n\t\t}\n\t\tcsrfCustomizer.customize(this.csrf);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "configures",
            "a",
            "href",
            "https",
            "www"
        ]
    },
    {
        "id": 449,
        "code": "\tpublic ServerHttpSecurity anonymous(Customizer<AnonymousSpec> anonymousCustomizer) {\n\t\tif (this.anonymous == null) {\n\t\t\tthis.anonymous = new AnonymousSpec();\n\t\t}\n\t\tanonymousCustomizer.customize(this.anonymous);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "enables",
            "and",
            "configures",
            "anonymous",
            "authentication"
        ]
    },
    {
        "id": 450,
        "code": "\tpublic ServerHttpSecurity httpBasic(Customizer<HttpBasicSpec> httpBasicCustomizer) {\n\t\tif (this.httpBasic == null) {\n\t\t\tthis.httpBasic = new HttpBasicSpec();\n\t\t}\n\t\thttpBasicCustomizer.customize(this.httpBasic);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "configures",
            "http",
            "basic",
            "authentication"
        ]
    },
    {
        "id": 451,
        "code": "\tpublic ServerHttpSecurity formLogin(Customizer<FormLoginSpec> formLoginCustomizer) {\n\t\tif (this.formLogin == null) {\n\t\t\tthis.formLogin = new FormLoginSpec();\n\t\t}\n\t\tformLoginCustomizer.customize(this.formLogin);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "configures",
            "form",
            "based",
            "authentication"
        ]
    },
    {
        "id": 452,
        "code": "\tpublic ServerHttpSecurity x509(Customizer<X509Spec> x509Customizer) {\n\t\tif (this.x509 == null) {\n\t\t\tthis.x509 = new X509Spec();\n\t\t}\n\t\tx509Customizer.customize(this.x509);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "configures",
            "x",
            "0",
            "authentication",
            "using",
            "a",
            "certificate",
            "provided",
            "by",
            "a",
            "client"
        ]
    },
    {
        "id": 453,
        "code": "\tpublic ServerHttpSecurity oauth2Login(Customizer<OAuth2LoginSpec> oauth2LoginCustomizer) {\n\t\tif (this.oauth2Login == null) {\n\t\t\tthis.oauth2Login = new OAuth2LoginSpec();\n\t\t}\n\t\toauth2LoginCustomizer.customize(this.oauth2Login);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "configures",
            "authentication",
            "support",
            "using",
            "an",
            "oauth",
            "0"
        ]
    },
    {
        "id": 454,
        "code": "\tpublic ServerHttpSecurity oauth2Client(Customizer<OAuth2ClientSpec> oauth2ClientCustomizer) {\n\t\tif (this.client == null) {\n\t\t\tthis.client = new OAuth2ClientSpec();\n\t\t}\n\t\toauth2ClientCustomizer.customize(this.client);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "configures",
            "the",
            "oauth",
            "0",
            "client"
        ]
    },
    {
        "id": 455,
        "code": "\tpublic ServerHttpSecurity headers(Customizer<HeaderSpec> headerCustomizer) {\n\t\tif (this.headers == null) {\n\t\t\tthis.headers = new HeaderSpec();\n\t\t}\n\t\theaderCustomizer.customize(this.headers);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "configures",
            "http",
            "response",
            "headers"
        ]
    },
    {
        "id": 456,
        "code": "\tpublic ServerHttpSecurity exceptionHandling(Customizer<ExceptionHandlingSpec> exceptionHandlingCustomizer) {\n\t\tif (this.exceptionHandling == null) {\n\t\t\tthis.exceptionHandling = new ExceptionHandlingSpec();\n\t\t}\n\t\texceptionHandlingCustomizer.customize(this.exceptionHandling);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "configures",
            "exception",
            "handling",
            "i"
        ]
    },
    {
        "id": 457,
        "code": "\tpublic ServerHttpSecurity requestCache(Customizer<RequestCacheSpec> requestCacheCustomizer) {\n\t\trequestCacheCustomizer.customize(this.requestCache);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "configures",
            "the",
            "request",
            "cache",
            "which",
            "is",
            "used",
            "when",
            "a",
            "flow",
            "is",
            "interrupted",
            "i"
        ]
    },
    {
        "id": 458,
        "code": "\tpublic ServerHttpSecurity authenticationManager(ReactiveAuthenticationManager manager) {\n\t\tthis.authenticationManager = manager;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "configure",
            "the",
            "default",
            "authentication",
            "manager"
        ]
    },
    {
        "id": 459,
        "code": "\tpublic SecurityWebFilterChain build() {\n\t\tif (this.built != null) {\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\"This has already been built with the following stacktrace. \" + buildToString());\n\t\t}\n\t\tthis.built = new RuntimeException(\"First Build Invocation\").fillInStackTrace();\n\t\tif (this.headers != null) {\n\t\t\tthis.headers.configure(this);\n\t\t}\n\t\tWebFilter securityContextRepositoryWebFilter = securityContextRepositoryWebFilter();\n\t\tthis.webFilters.add(securityContextRepositoryWebFilter);\n\t\tif (this.httpsRedirectSpec != null) {\n\t\t\tthis.httpsRedirectSpec.configure(this);\n\t\t}\n\t\tif (this.x509 != null) {\n\t\t\tthis.x509.configure(this);\n\t\t}\n\t\tif (this.csrf != null) {\n\t\t\tthis.csrf.configure(this);\n\t\t}\n\t\tif (this.cors != null) {\n\t\t\tthis.cors.configure(this);\n\t\t}\n\t\tif (this.httpBasic != null) {\n\t\t\tif (this.httpBasic.authenticationManager == null) {\n\t\t\t\tthis.httpBasic.authenticationManager(this.authenticationManager);\n\t\t\t}\n\t\t\tif (this.httpBasic.securityContextRepository != null) {\n\t\t\t\tthis.httpBasic.securityContextRepository(this.httpBasic.securityContextRepository);\n\t\t\t}\n\t\t\telse if (this.securityContextRepository != null) {\n\t\t\t\tthis.httpBasic.securityContextRepository(this.securityContextRepository);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.httpBasic.securityContextRepository(NoOpServerSecurityContextRepository.getInstance());\n\t\t\t}\n\t\t\tthis.httpBasic.configure(this);\n\t\t}\n\t\tif (this.passwordManagement != null) {\n\t\t\tthis.passwordManagement.configure(this);\n\t\t}\n\t\tif (this.formLogin != null) {\n\t\t\tif (this.formLogin.authenticationManager == null) {\n\t\t\t\tthis.formLogin.authenticationManager(this.authenticationManager);\n\t\t\t}\n\t\t\tif (this.formLogin.securityContextRepository != null) {\n\t\t\t\tthis.formLogin.securityContextRepository(this.formLogin.securityContextRepository);\n\t\t\t}\n\t\t\telse if (this.securityContextRepository != null) {\n\t\t\t\tthis.formLogin.securityContextRepository(this.securityContextRepository);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.formLogin.securityContextRepository(new WebSessionServerSecurityContextRepository());\n\t\t\t}\n\t\t\tthis.formLogin.configure(this);\n\t\t}\n\t\tif (this.oauth2Login != null) {\n\t\t\tif (this.oauth2Login.securityContextRepository != null) {\n\t\t\t\tthis.oauth2Login.securityContextRepository(this.oauth2Login.securityContextRepository);\n\t\t\t}\n\t\t\telse if (this.securityContextRepository != null) {\n\t\t\t\tthis.oauth2Login.securityContextRepository(this.securityContextRepository);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.oauth2Login.securityContextRepository(new WebSessionServerSecurityContextRepository());\n\t\t\t}\n\t\t\tthis.oauth2Login.configure(this);\n\t\t}\n\t\tif (this.resourceServer != null) {\n\t\t\tthis.resourceServer.configure(this);\n\t\t}\n\t\tif (this.client != null) {\n\t\t\tthis.client.configure(this);\n\t\t}\n\t\tif (this.anonymous != null) {\n\t\t\tthis.anonymous.configure(this);\n\t\t}\n\t\tthis.loginPage.configure(this);\n\t\tif (this.logout != null) {\n\t\t\tthis.logout.configure(this);\n\t\t}\n\t\tthis.requestCache.configure(this);\n\t\tthis.addFilterAt(new SecurityContextServerWebExchangeWebFilter(),\n\t\t\t\tSecurityWebFiltersOrder.SECURITY_CONTEXT_SERVER_WEB_EXCHANGE);\n\t\tif (this.authorizeExchange != null) {\n\t\t\tServerAuthenticationEntryPoint authenticationEntryPoint = getAuthenticationEntryPoint();\n\t\t\tExceptionTranslationWebFilter exceptionTranslationWebFilter = new ExceptionTranslationWebFilter();\n\t\t\tif (authenticationEntryPoint != null) {\n\t\t\t\texceptionTranslationWebFilter.setAuthenticationEntryPoint(authenticationEntryPoint);\n\t\t\t}\n\t\t\tServerAccessDeniedHandler accessDeniedHandler = getAccessDeniedHandler();\n\t\t\tif (accessDeniedHandler != null) {\n\t\t\t\texceptionTranslationWebFilter.setAccessDeniedHandler(accessDeniedHandler);\n\t\t\t}\n\t\t\tthis.addFilterAt(exceptionTranslationWebFilter, SecurityWebFiltersOrder.EXCEPTION_TRANSLATION);\n\t\t\tthis.authorizeExchange.configure(this);\n\t\t}\n\t\tAnnotationAwareOrderComparator.sort(this.webFilters);\n\t\tList<WebFilter> sortedWebFilters = new ArrayList<>();\n\t\tthis.webFilters.forEach((f) -> {\n\t\t\tif (f instanceof OrderedWebFilter) {\n\t\t\t\tf = ((OrderedWebFilter) f).webFilter;\n\t\t\t}\n\t\t\tsortedWebFilters.add(f);\n\t\t});\n\t\tsortedWebFilters.add(0, new ServerWebExchangeReactorContextWebFilter());\n\t\treturn new MatcherSecurityWebFilterChain(getSecurityMatcher(), sortedWebFilters);\n\t}",
        "summary_tokens": [
            "builds",
            "the",
            "security",
            "web",
            "filter",
            "chain",
            "the",
            "security",
            "web",
            "filter",
            "chain"
        ]
    },
    {
        "id": 460,
        "code": "\tpublic static ServerHttpSecurity http() {\n\t\treturn new ServerHttpSecurity();\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "new",
            "instance"
        ]
    },
    {
        "id": 461,
        "code": "\tpublic BeanDefinition parse(Element element, ParserContext parserContext) {\n\t\tString id = element.getAttribute(ID_ATTR);\n\t\tString inSecurityInterceptorName = parseAuthorization(element, parserContext);\n\t\tBeanDefinitionRegistry registry = parserContext.getRegistry();\n\t\tif (StringUtils.hasText(id)) {\n\t\t\tregistry.registerAlias(inSecurityInterceptorName, id);\n\t\t\tif (!registry.containsBeanDefinition(PATH_MATCHER_BEAN_NAME)) {\n\t\t\t\tregistry.registerBeanDefinition(PATH_MATCHER_BEAN_NAME, new RootBeanDefinition(AntPathMatcher.class));\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tboolean sameOriginDisabled = Boolean.parseBoolean(element.getAttribute(DISABLED_ATTR));\n\t\t\tXmlReaderContext context = parserContext.getReaderContext();\n\t\t\tBeanDefinitionBuilder mspp = BeanDefinitionBuilder.rootBeanDefinition(MessageSecurityPostProcessor.class);\n\t\t\tmspp.addConstructorArgValue(inSecurityInterceptorName);\n\t\t\tmspp.addConstructorArgValue(sameOriginDisabled);\n\t\t\tcontext.registerWithGeneratedName(mspp.getBeanDefinition());\n\t\t}\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "element",
            "parser",
            "context",
            "the",
            "bean",
            "definition"
        ]
    },
    {
        "id": 462,
        "code": "\tpublic void basicAuthenticationWhenUsingDefaultsThenMatchesNamespace() throws Exception {\n\t\tthis.spring.register(HttpBasicConfig.class, UserConfig.class).autowire();\n\t\tthis.mvc.perform(get(\"/\")).andExpect(status().isUnauthorized());\n\t\tMockHttpServletRequestBuilder requestWithInvalidPassword = get(\"/\").with(httpBasic(\"user\", \"invalid\"));\n\t\t\n\t\tthis.mvc.perform(requestWithInvalidPassword)\n\t\t\t\t.andExpect(status().isUnauthorized())\n\t\t\t\t.andExpect(header().string(HttpHeaders.WWW_AUTHENTICATE, \"Basic realm=\\\"Realm\\\"\"));\n\t\t\n\t\tMockHttpServletRequestBuilder requestWithValidPassword = get(\"/\").with(httpBasic(\"user\", \"password\"));\n\t\tthis.mvc.perform(requestWithValidPassword).andExpect(status().isNotFound());\n\t}",
        "summary_tokens": [
            "http",
            "http",
            "basic",
            "equivalent"
        ]
    },
    {
        "id": 463,
        "code": "\tpublic void basicAuthenticationWhenUsingAuthenticationDetailsSourceRefThenMatchesNamespace() throws Exception {\n\t\tthis.spring.register(AuthenticationDetailsSourceHttpBasicConfig.class, UserConfig.class).autowire();\n\t\tAuthenticationDetailsSource<HttpServletRequest, ?> source = this.spring.getContext()\n\t\t\t\t.getBean(AuthenticationDetailsSource.class);\n\t\tthis.mvc.perform(get(\"/\").with(httpBasic(\"user\", \"password\")));\n\t\tverify(source).buildDetails(any(HttpServletRequest.class));\n\t}",
        "summary_tokens": [
            "http",
            "http",
            "basic",
            "details",
            "source",
            "ref",
            "equivalent"
        ]
    },
    {
        "id": 464,
        "code": "\tpublic void basicAuthenticationWhenUsingEntryPointRefThenMatchesNamespace() throws Exception {\n\t\tthis.spring.register(EntryPointRefHttpBasicConfig.class, UserConfig.class).autowire();\n\t\tthis.mvc.perform(get(\"/\")).andExpect(status().is(999));\n\t\tthis.mvc.perform(get(\"/\").with(httpBasic(\"user\", \"invalid\"))).andExpect(status().is(999));\n\t\tthis.mvc.perform(get(\"/\").with(httpBasic(\"user\", \"password\"))).andExpect(status().isNotFound());\n\t}",
        "summary_tokens": [
            "http",
            "http",
            "basic",
            "point",
            "ref"
        ]
    },
    {
        "id": 465,
        "code": "\tpublic void logoutWhenUsingSuccessHandlerRefThenMatchesNamespace() throws Exception {\n\t\tthis.spring.register(SuccessHandlerRefHttpLogoutConfig.class).autowire();\n\t\t\n\t\tthis.mvc.perform(post(\"/logout\").with(csrf()))\n\t\t\t\t.andExpect(authenticated(false))\n\t\t\t\t.andExpect(redirectedUrl(\"/SuccessHandlerRefHttpLogoutConfig\"))\n\t\t\t\t.andExpect(noCookies())\n\t\t\t\t.andExpect(session(Objects::isNull));\n\t\t\n\t}",
        "summary_tokens": [
            "http",
            "logout",
            "handler",
            "ref"
        ]
    },
    {
        "id": 466,
        "code": "\tpublic Collection<String> getIds() {\n\t\tCollection<String> ids = new ArrayList<>();\n\t\tids.add(getId());\n\t\tthis.childElmts.values().forEach((elmt) -> ids.add(elmt.getId()));\n\t\tthis.attrs.forEach((attr) -> ids.add(attr.getId()));\n\t\tif (!this.childElmts.isEmpty()) {\n\t\t\tids.add(getId() + \"-children\");\n\t\t}\n\t\tif (!this.attrs.isEmpty()) {\n\t\t\tids.add(getId() + \"-attributes\");\n\t\t}\n\t\tif (!this.parentElmts.isEmpty()) {\n\t\t\tids.add(getId() + \"-parents\");\n\t\t}\n\t\treturn ids;\n\t}",
        "summary_tokens": [
            "gets",
            "all",
            "the",
            "ids",
            "related",
            "to",
            "this",
            "element",
            "including",
            "attributes",
            "parent",
            "elements",
            "and",
            "child",
            "elements"
        ]
    },
    {
        "id": 467,
        "code": "\tpublic Map<String, Element> parse() {\n\t\telements(this.rootElement);\n\t\treturn this.elementNameToElement;\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "map",
            "of",
            "the",
            "element",
            "name",
            "to",
            "the",
            "element"
        ]
    },
    {
        "id": 468,
        "code": "\tprivate Map<String, Element> elements(XmlNode node) {\n\t\tMap<String, Element> elementNameToElement = new HashMap<>();\n\t\tnode.children().forEach((child) -> {\n\t\t\tif (\"element\".equals(child.simpleName())) {\n\t\t\t\tElement e = elmt(child);\n\t\t\t\telementNameToElement.put(e.getName(), e);\n\t\t\t}\n\t\t\telse {\n\t\t\t\telementNameToElement.putAll(elements(child));\n\t\t\t}\n\t\t});\n\t\treturn elementNameToElement;\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "map",
            "of",
            "the",
            "name",
            "to",
            "an",
            "element",
            "object",
            "of",
            "all",
            "the",
            "children",
            "of",
            "element"
        ]
    },
    {
        "id": 469,
        "code": "\tprivate Collection<Attribute> attrs(XmlNode element) {\n\t\tCollection<Attribute> attrs = new ArrayList<>();\n\t\telement.children().forEach((c) -> {\n\t\t\tString name = c.simpleName();\n\t\t\tif (\"attribute\".equals(name)) {\n\t\t\t\tattrs.add(attr(c));\n\t\t\t}\n\t\t\telse if (!\"element\".equals(name)) {\n\t\t\t\tattrs.addAll(attrs(c));\n\t\t\t}\n\t\t});\n\t\treturn attrs;\n\t}",
        "summary_tokens": [
            "any",
            "children",
            "that",
            "are",
            "attribute",
            "will",
            "be",
            "returned",
            "as",
            "an",
            "attribute",
            "object"
        ]
    },
    {
        "id": 470,
        "code": "\tprivate Collection<Attribute> attrgrps(XmlNode element) {\n\t\tCollection<Attribute> attrgrp = new ArrayList<>();\n\t\telement.children().forEach((c) -> {\n\t\t\tif (!\"element\".equals(c.simpleName())) {\n\t\t\t\tif (\"attributeGroup\".equals(c.simpleName())) {\n\t\t\t\t\tif (c.attribute(\"name\") != null) {\n\t\t\t\t\t\tattrgrp.addAll(attrgrp(c));\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tString name = c.attribute(\"ref\").split(\":\")[1];\n\t\t\t\t\t\tXmlNode attrGrp = findNode(element, name);\n\t\t\t\t\t\tattrgrp.addAll(attrgrp(attrGrp));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tattrgrp.addAll(attrgrps(c));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn attrgrp;\n\t}",
        "summary_tokens": [
            "any",
            "children",
            "will",
            "be",
            "searched",
            "for",
            "an",
            "attribute",
            "group",
            "each",
            "of",
            "its",
            "children",
            "will",
            "be",
            "returned",
            "as",
            "an",
            "attribute",
            "element"
        ]
    },
    {
        "id": 471,
        "code": "\tprivate Collection<Attribute> attrgrp(XmlNode e) {\n\t\tCollection<Attribute> attrs = attrs(e);\n\t\tattrs.addAll(attrgrps(e));\n\t\treturn attrs;\n\t}",
        "summary_tokens": [
            "processes",
            "an",
            "individual",
            "attribute",
            "group",
            "by",
            "obtaining",
            "all",
            "the",
            "attributes",
            "and",
            "then",
            "looking",
            "for",
            "more",
            "attribute",
            "group",
            "elements",
            "and",
            "prcessing",
            "them"
        ]
    },
    {
        "id": 472,
        "code": "\tprivate String desc(XmlNode element) {\n\t\treturn element.child(\"annotation\").flatMap((annotation) -> annotation.child(\"documentation\"))\n\t\t\t\t.map((documentation) -> documentation.text()).orElse(null);\n\t}",
        "summary_tokens": [
            "obtains",
            "the",
            "description",
            "for",
            "a",
            "specific",
            "element",
            "element"
        ]
    },
    {
        "id": 473,
        "code": "\tprivate Attribute attr(XmlNode n) {\n\t\treturn new Attribute(desc(n), n.attribute(\"name\"));\n\t}",
        "summary_tokens": [
            "given",
            "an",
            "element",
            "creates",
            "an",
            "attribute",
            "from",
            "it"
        ]
    },
    {
        "id": 474,
        "code": "\tprivate Element elmt(XmlNode n) {\n\t\tString name = n.attribute(\"ref\");\n\t\tif (StringUtils.isEmpty(name)) {\n\t\t\tname = n.attribute(\"name\");\n\t\t}\n\t\telse {\n\t\t\tname = name.split(\":\")[1];\n\t\t\tn = findNode(n, name);\n\t\t}\n\t\tif (this.elementNameToElement.containsKey(name)) {\n\t\t\treturn this.elementNameToElement.get(name);\n\t\t}\n\t\tthis.attrElmts.add(name);\n\t\tElement e = new Element();\n\t\te.setName(n.attribute(\"name\"));\n\t\te.setDesc(desc(n));\n\t\te.setChildElmts(elements(n));\n\t\te.setAttrs(attrs(n));\n\t\te.getAttrs().addAll(attrgrps(n));\n\t\te.getAttrs().forEach((attr) -> attr.setElmt(e));\n\t\te.getChildElmts().values().forEach((element) -> element.getParentElmts().put(e.getName(), e));\n\t\tString subGrpName = n.attribute(\"substitutionGroup\");\n\t\tif (!StringUtils.isEmpty(subGrpName)) {\n\t\t\tElement subGrp = elmt(findNode(n, subGrpName.split(\":\")[1]));\n\t\t\tsubGrp.getSubGrps().add(e);\n\t\t}\n\t\tthis.elementNameToElement.put(name, e);\n\t\treturn e;\n\t}",
        "summary_tokens": [
            "given",
            "an",
            "element",
            "creates",
            "an",
            "element",
            "out",
            "of",
            "it",
            "by",
            "collecting",
            "all",
            "its",
            "attributes",
            "and",
            "child",
            "elements"
        ]
    },
    {
        "id": 475,
        "code": "\tpublic void sizeWhenReadingFilesystemThenIsCorrectNumberOfSchemaFiles() throws IOException {\n\t\tClassPathResource resource = new ClassPathResource(this.schemaDocumentLocation);\n\t\t\n\t\tString[] schemas = resource.getFile()\n\t\t\t\t.getParentFile()\n\t\t\t\t.list((dir, name) -> name.endsWith(\".xsd\"));\n\t\t\n\t\tassertThat(schemas.length).isEqualTo(21)\n\t\t\t\t.withFailMessage(\"the count is equal to 21, if not then schemaDocument needs updating\");\n\t}",
        "summary_tokens": [
            "this",
            "will",
            "check",
            "to",
            "ensure",
            "that",
            "the",
            "expected",
            "number",
            "of",
            "xsd",
            "documents",
            "are",
            "found",
            "to",
            "ensure",
            "that",
            "we",
            "are",
            "validating",
            "against",
            "the",
            "current",
            "xsd",
            "document"
        ]
    },
    {
        "id": 476,
        "code": "\tpublic void countReferencesWhenReviewingDocumentationThenEntireSchemaIsIncluded() throws IOException {\n\t\tMap<String, Element> elementsByElementName = this.xml.elementsByElementName(this.schemaDocumentLocation);\n\t\t\n\t\tList<String> documentIds = namespaceLines()\n\t\t\t\t.filter((line) -> line.matches(\"\\\\[\\\\[(nsa-.*)\\\\]\\\\]\"))\n\t\t\t\t.map((line) -> line.substring(2, line.length() - 2))\n\t\t\t\t.collect(Collectors.toList());\n\t\tSet<String> expectedIds = elementsByElementName.values()\n\t\t\t\t.stream()\n\t\t\t\t.flatMap((element) -> element.getIds().stream())\n\t\t\t\t.collect(Collectors.toSet());\n\t\t\n\t\tdocumentIds.removeAll(this.ignoredIds);\n\t\texpectedIds.removeAll(this.ignoredIds);\n\t\tassertThat(documentIds).containsAll(expectedIds);\n\t\tassertThat(expectedIds).containsAll(documentIds);\n\t}",
        "summary_tokens": [
            "this",
            "uses",
            "a",
            "naming",
            "convention",
            "for",
            "the",
            "ids",
            "of",
            "the",
            "appendix",
            "to",
            "ensure",
            "that",
            "the",
            "entire",
            "appendix",
            "is",
            "documented"
        ]
    },
    {
        "id": 477,
        "code": "\tpublic void countLinksWhenReviewingDocumentationThenParentsAndChildrenAreCorrectlyLinked() throws IOException {\n\t\tMap<String, List<String>> docAttrNameToChildren = new TreeMap<>();\n\t\tMap<String, List<String>> docAttrNameToParents = new TreeMap<>();\n\t\tString docAttrName = null;\n\t\tMap<String, List<String>> currentDocAttrNameToElmt = null;\n\t\tList<String> lines = namespaceLines().collect(Collectors.toList());\n\t\tfor (String line : lines) {\n\t\t\tif (line.matches(\"^\\\\[\\\\[.*\\\\]\\\\]$\")) {\n\t\t\t\tString id = line.substring(2, line.length() - 2);\n\t\t\t\tif (id.endsWith(\"-children\")) {\n\t\t\t\t\tdocAttrName = id.substring(0, id.length() - 9);\n\t\t\t\t\tcurrentDocAttrNameToElmt = docAttrNameToChildren;\n\t\t\t\t}\n\t\t\t\telse if (id.endsWith(\"-parents\")) {\n\t\t\t\t\tdocAttrName = id.substring(0, id.length() - 8);\n\t\t\t\t\tcurrentDocAttrNameToElmt = docAttrNameToParents;\n\t\t\t\t}\n\t\t\t\telse if (id.endsWith(\"-attributes\") || docAttrName != null && !id.startsWith(docAttrName)) {\n\t\t\t\t\tcurrentDocAttrNameToElmt = null;\n\t\t\t\t\tdocAttrName = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (docAttrName != null && currentDocAttrNameToElmt != null) {\n\t\t\t\tString expression = \".*<<(nsa-.*),.*>>.*\";\n\t\t\t\tif (line.matches(expression)) {\n\t\t\t\t\tString elmtId = line.replaceAll(expression, \"$1\");\n\t\t\t\t\tcurrentDocAttrNameToElmt.computeIfAbsent(docAttrName, (key) -> new ArrayList<>()).add(elmtId);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\texpression = \".*xref:.*#(nsa-.*)\\\\[.*\\\\]\";\n\t\t\t\t\tif (line.matches(expression)) {\n\t\t\t\t\t\tString elmtId = line.replaceAll(expression, \"$1\");\n\t\t\t\t\t\tcurrentDocAttrNameToElmt.computeIfAbsent(docAttrName, (key) -> new ArrayList<>()).add(elmtId);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tMap<String, Element> elementNameToElement = this.xml.elementsByElementName(this.schemaDocumentLocation);\n\t\tMap<String, List<String>> schemaAttrNameToChildren = new TreeMap<>();\n\t\tMap<String, List<String>> schemaAttrNameToParents = new TreeMap<>();\n\t\telementNameToElement.entrySet().stream().forEach((entry) -> {\n\t\t\tString key = \"nsa-\" + entry.getKey();\n\t\t\tif (this.ignoredIds.contains(key)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tList<String> parentIds = entry.getValue()\n\t\t\t\t\t.getAllParentElmts()\n\t\t\t\t\t.values()\n\t\t\t\t\t.stream()\n\t\t\t\t\t.filter((element) -> !this.ignoredIds.contains(element.getId()))\n\t\t\t\t\t.map((element) -> element.getId())\n\t\t\t\t\t.sorted()\n\t\t\t\t\t.collect(Collectors.toList());\n\t\t\t\n\t\t\tif (!parentIds.isEmpty()) {\n\t\t\t\tschemaAttrNameToParents.put(key, parentIds);\n\t\t\t}\n\t\t\t\n\t\t\tList<String> childIds = entry.getValue()\n\t\t\t\t\t.getAllChildElmts()\n\t\t\t\t\t.values()\n\t\t\t\t\t.stream()\n\t\t\t\t\t.filter((element) -> !this.ignoredIds.contains(element.getId())).map((element) -> element.getId())\n\t\t\t\t\t.sorted()\n\t\t\t\t\t.collect(Collectors.toList());\n\t\t\t\n\t\t\tif (!childIds.isEmpty()) {\n\t\t\t\tschemaAttrNameToChildren.put(key, childIds);\n\t\t\t}\n\t\t});\n\t\tassertThat(docAttrNameToChildren)\n\t\t\t\t.describedAs(toString(docAttrNameToChildren) + \"\\n!=\\n\\n\" + toString(schemaAttrNameToChildren))\n\t\t\t\t.containsExactlyInAnyOrderEntriesOf(schemaAttrNameToChildren);\n\t\tassertThat(docAttrNameToParents)\n\t\t\t\t.describedAs(toString(docAttrNameToParents) + \"\\n!=\\n\\n\" + toString(schemaAttrNameToParents))\n\t\t\t\t.containsExactlyInAnyOrderEntriesOf(schemaAttrNameToParents);\n\t}",
        "summary_tokens": [
            "this",
            "test",
            "ensures",
            "that",
            "any",
            "element",
            "that",
            "has",
            "children",
            "or",
            "parents",
            "contains",
            "a",
            "section",
            "that",
            "has",
            "links",
            "pointing",
            "to",
            "that",
            "documentation"
        ]
    },
    {
        "id": 478,
        "code": "\tpublic void countWhenReviewingDocumentationThenAllElementsDocumented() throws IOException {\n\t\tMap<String, Element> elementNameToElement = this.xml.elementsByElementName(this.schemaDocumentLocation);\n\t\t\n\t\tString notDocElmtIds = elementNameToElement.values()\n\t\t\t\t.stream()\n\t\t\t\t.filter((element) -> StringUtils.isEmpty(element.getDesc())\n\t\t\t\t\t\t&& !this.ignoredIds.contains(element.getId()))\n\t\t\t\t.map((element) -> element.getId())\n\t\t\t\t.sorted()\n\t\t\t\t.collect(Collectors.joining(\"\\n\"));\n\t\tString notDocAttrIds = elementNameToElement.values()\n\t\t\t\t.stream()\n\t\t\t\t.flatMap((element) -> element.getAttrs().stream())\n\t\t\t\t.filter((element) -> StringUtils.isEmpty(element.getDesc())\n\t\t\t\t\t\t&& !this.ignoredIds.contains(element.getId()))\n\t\t\t\t.map((element) -> element.getId())\n\t\t\t\t.sorted()\n\t\t\t\t.collect(Collectors.joining(\"\\n\"));\n\t\t\n\t\tassertThat(notDocElmtIds).isEmpty();\n\t\tassertThat(notDocAttrIds).isEmpty();\n\t}",
        "summary_tokens": [
            "this",
            "test",
            "checks",
            "each",
            "xsd",
            "element",
            "and",
            "ensures",
            "there",
            "is",
            "documentation",
            "for",
            "it"
        ]
    },
    {
        "id": 479,
        "code": "\tpublic void postWhenUsingCsrfAndCustomSessionManagementAndNoSessionThenStillRedirectsToInvalidSessionUrl()\n\t\t\tthrows Exception {\n\t\tthis.spring.configLocations(this.xml(\"WithSessionManagement\")).autowire();\n\t\t\n\t\tMockHttpServletRequestBuilder postToOk = post(\"/ok\")\n\t\t\t\t.param(\"_csrf\", \"abc\");\n\t\tMvcResult result = this.mvc.perform(postToOk)\n\t\t\t\t.andExpect(redirectedUrl(\"/error/sessionError\"))\n\t\t\t\t.andReturn();\n\t\tMockHttpSession session = (MockHttpSession) result.getRequest().getSession();\n\t\tthis.mvc.perform(post(\"/csrf\").session(session))\n\t\t\t\t.andExpect(status().isForbidden());\n\t\t\n\t}",
        "summary_tokens": [
            "sec",
            "0",
            "csrf",
            "expire",
            "csrf",
            "token",
            "and",
            "session",
            "management",
            "invalid",
            "session",
            "url"
        ]
    },
    {
        "id": 480,
        "code": "\tpublic void logoutWhenDefaultConfigurationThenDisabled() throws Exception {\n\t\tthis.spring.configLocations(this.xml(\"shared-controllers\"), this.xml(\"CsrfEnabled\")).autowire();\n\t\t\n\t\t\n\t\tthis.mvc.perform(get(\"/logout\"))\n\t\t\t\t.andExpect(status().isOk());\n\t\t\n\t\t\n\t\t\n\t\tthis.mvc.perform(get(\"/authenticated\"))\n\t\t\t\t.andExpect(status().isOk());\n\t\t\n\t}",
        "summary_tokens": [
            "sec",
            "0",
            "csrf",
            "disables",
            "logout",
            "on",
            "get"
        ]
    },
    {
        "id": 481,
        "code": "\tpublic void autowireWhenCustomLoginPageIsSlashLoginThenNoDefaultLoginPageGeneratingFilterIsWired()\n\t\t\tthrows Exception {\n\t\tthis.spring.configLocations(this.xml(\"ForSec2919\")).autowire();\n\t\tthis.mvc.perform(get(\"/login\")).andExpect(content().string(\"teapot\"));\n\t\tassertThat(getFilter(this.spring.getContext(), DefaultLoginPageGeneratingFilter.class)).isNull();\n\t}",
        "summary_tokens": [
            "sec",
            "0",
            "default",
            "login",
            "generating",
            "filter",
            "incorrectly",
            "used",
            "if",
            "login",
            "url",
            "login"
        ]
    },
    {
        "id": 482,
        "code": "\tpublic void authenticateWhenLoginPageIsSlashLoginAndAuthenticationFailsThenRedirectContainsErrorParameter()\n\t\t\tthrows Exception {\n\t\tthis.spring.configLocations(this.xml(\"ForSec3147\")).autowire();\n\t\t\n\t\tMockHttpServletRequestBuilder loginRequest = post(\"/login\")\n\t\t\t\t.param(\"username\", \"user\")\n\t\t\t\t.param(\"password\", \"wrong\")\n\t\t\t\t.with(csrf());\n\t\tthis.mvc.perform(loginRequest)\n\t\t\t\t.andExpect(redirectedUrl(\"/login?error\"));\n\t\t\n\t}",
        "summary_tokens": [
            "sec",
            "0",
            "authentication",
            "failure",
            "url",
            "should",
            "be",
            "contained",
            "error",
            "parameter",
            "if",
            "login",
            "page",
            "login"
        ]
    },
    {
        "id": 483,
        "code": "\tpublic void servletIsUserInRoleWhenUsingDefaultConfigThenRoleIsSet() throws Exception {\n\t\tthis.spring.configLocations(this.xml(\"Simple\")).autowire();\n\t\t\n\t\tthis.mvc.perform(get(\"/role\"))\n\t\t\t\t.andExpect(content().string(\"true\"));\n\t\t\n\t}",
        "summary_tokens": [
            "sec",
            "0",
            "role",
            "prefix",
            "is",
            "set"
        ]
    },
    {
        "id": 484,
        "code": "\tstatic void validateContextPath(@Nullable String contextPath) {\n\t\tif (contextPath == null || \"\".equals(contextPath)) {\n\t\t\treturn;\n\t\t}\n\t\tAssert.isTrue(contextPath.startsWith(\"/\"), () -> \"contextPath '\" + contextPath + \"' must start with '/'.\");\n\t\tAssert.isTrue(!contextPath.endsWith(\"/\"), () -> \"contextPath '\" + contextPath + \"' must not end with '/'.\");\n\t}",
        "summary_tokens": [
            "validate",
            "the",
            "supplied",
            "context",
            "path"
        ]
    },
    {
        "id": 485,
        "code": "\tpublic static ResultMatcher redirectToCachedRequest() {\n\t\treturn (mvcResult) -> {\n\t\t\tRequestCache requestCache = new HttpSessionRequestCache();\n\t\t\tMockHttpServletResponse response = mvcResult.getResponse();\n\t\t\tSavedRequest savedRequest = requestCache.getRequest(mvcResult.getRequest(), response);\n\t\t\tassertThat(savedRequest).describedAs(\"savedReqeust cannot be null\").isNotNull();\n\t\t\tString cachedRedirectUrl = savedRequest.getRedirectUrl();\n\t\t\tassertThat(response.getRedirectedUrl()).isEqualTo(cachedRedirectUrl);\n\t\t};\n\t}",
        "summary_tokens": [
            "verifies",
            "that",
            "the",
            "mock",
            "mvc",
            "result",
            "redirects",
            "to",
            "the",
            "saved",
            "reqeust",
            "cache"
        ]
    },
    {
        "id": 486,
        "code": "\tpublic void setDefaultRolePrefix(String defaultRolePrefix) {\n\t\tthis.defaultRolePrefix = defaultRolePrefix;\n\t}",
        "summary_tokens": [
            "p",
            "sets",
            "the",
            "default",
            "prefix",
            "to",
            "be",
            "added",
            "to",
            "roles",
            "allowed"
        ]
    },
    {
        "id": 487,
        "code": "\tpublic boolean supports(Class<?> clazz) {\n\t\treturn true;\n\t}",
        "summary_tokens": [
            "all",
            "classes",
            "are",
            "supported"
        ]
    },
    {
        "id": 488,
        "code": "\tpublic int vote(Authentication authentication, Object object, Collection<ConfigAttribute> definition) {\n\t\tboolean jsr250AttributeFound = false;\n\t\tfor (ConfigAttribute attribute : definition) {\n\t\t\tif (Jsr250SecurityConfig.PERMIT_ALL_ATTRIBUTE.equals(attribute)) {\n\t\t\t\treturn ACCESS_GRANTED;\n\t\t\t}\n\t\t\tif (Jsr250SecurityConfig.DENY_ALL_ATTRIBUTE.equals(attribute)) {\n\t\t\t\treturn ACCESS_DENIED;\n\t\t\t}\n\t\t\tif (supports(attribute)) {\n\t\t\t\tjsr250AttributeFound = true;\n\t\t\t\t\n\t\t\t\tfor (GrantedAuthority authority : authentication.getAuthorities()) {\n\t\t\t\t\tif (attribute.getAttribute().equals(authority.getAuthority())) {\n\t\t\t\t\t\treturn ACCESS_GRANTED;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn jsr250AttributeFound ? ACCESS_DENIED : ACCESS_ABSTAIN;\n\t}",
        "summary_tokens": [
            "votes",
            "according",
            "to",
            "jsr",
            "0"
        ]
    },
    {
        "id": 489,
        "code": "\tpublic final EvaluationContext createEvaluationContext(Authentication authentication, T invocation) {\n\t\tSecurityExpressionOperations root = createSecurityExpressionRoot(authentication, invocation);\n\t\tStandardEvaluationContext ctx = createEvaluationContextInternal(authentication, invocation);\n\t\tctx.setBeanResolver(this.beanResolver);\n\t\tctx.setRootObject(root);\n\t\treturn ctx;\n\t}",
        "summary_tokens": [
            "invokes",
            "the",
            "internal",
            "template",
            "methods",
            "to",
            "create",
            "standard",
            "evaluation",
            "context",
            "and",
            "security",
            "expression",
            "root",
            "objects"
        ]
    },
    {
        "id": 490,
        "code": "\tprotected StandardEvaluationContext createEvaluationContextInternal(Authentication authentication, T invocation) {\n\t\treturn new StandardEvaluationContext();\n\t}",
        "summary_tokens": [
            "override",
            "to",
            "create",
            "a",
            "custom",
            "instance",
            "of",
            "standard",
            "evaluation",
            "context"
        ]
    },
    {
        "id": 491,
        "code": "\tdefault EvaluationContext createEvaluationContext(Supplier<Authentication> authentication, T invocation) {\n\t\treturn createEvaluationContext(authentication.get(), invocation);\n\t}",
        "summary_tokens": [
            "provides",
            "an",
            "evaluation",
            "context",
            "in",
            "which",
            "to",
            "evaluate",
            "security",
            "expressions",
            "for",
            "the",
            "invocation",
            "type"
        ]
    },
    {
        "id": 492,
        "code": "\tpublic Object getPrincipal() {\n\t\treturn getAuthentication().getPrincipal();\n\t}",
        "summary_tokens": [
            "convenience",
            "method",
            "to",
            "access",
            "authentication",
            "get",
            "principal",
            "from",
            "get",
            "authentication"
        ]
    },
    {
        "id": 493,
        "code": "\tpublic void setDefaultRolePrefix(String defaultRolePrefix) {\n\t\tthis.defaultRolePrefix = defaultRolePrefix;\n\t}",
        "summary_tokens": [
            "p",
            "sets",
            "the",
            "default",
            "prefix",
            "to",
            "be",
            "added",
            "to",
            "has",
            "any",
            "role",
            "string"
        ]
    },
    {
        "id": 494,
        "code": "\tprivate static String getRoleWithDefaultPrefix(String defaultRolePrefix, String role) {\n\t\tif (role == null) {\n\t\t\treturn role;\n\t\t}\n\t\tif (defaultRolePrefix == null || defaultRolePrefix.length() == 0) {\n\t\t\treturn role;\n\t\t}\n\t\tif (role.startsWith(defaultRolePrefix)) {\n\t\t\treturn role;\n\t\t}\n\t\treturn defaultRolePrefix + role;\n\t}",
        "summary_tokens": [
            "prefixes",
            "role",
            "with",
            "default",
            "role",
            "prefix",
            "if",
            "default",
            "role",
            "prefix",
            "is",
            "non",
            "null",
            "and",
            "if",
            "role",
            "does",
            "not",
            "already",
            "start",
            "with",
            "default",
            "role",
            "prefix"
        ]
    },
    {
        "id": 495,
        "code": "\tpublic StandardEvaluationContext createEvaluationContextInternal(Authentication auth, MethodInvocation mi) {\n\t\treturn new MethodSecurityEvaluationContext(auth, mi, getParameterNameDiscoverer());\n\t}",
        "summary_tokens": [
            "uses",
            "a",
            "method",
            "security",
            "evaluation",
            "context",
            "as",
            "the",
            "tt",
            "evaluation",
            "context",
            "tt",
            "implementation"
        ]
    },
    {
        "id": 496,
        "code": "\tprotected MethodSecurityExpressionOperations createSecurityExpressionRoot(Authentication authentication,\n\t\t\tMethodInvocation invocation) {\n\t\treturn createSecurityExpressionRoot(() -> authentication, invocation);\n\t}",
        "summary_tokens": [
            "creates",
            "the",
            "root",
            "object",
            "for",
            "expression",
            "evaluation"
        ]
    },
    {
        "id": 497,
        "code": "\tpublic Object filter(Object filterTarget, Expression filterExpression, EvaluationContext ctx) {\n\t\tMethodSecurityExpressionOperations rootObject = (MethodSecurityExpressionOperations) ctx.getRootObject()\n\t\t\t\t.getValue();\n\t\tthis.logger.debug(LogMessage.format(\"Filtering with expression: %s\", filterExpression.getExpressionString()));\n\t\tif (filterTarget instanceof Collection) {\n\t\t\treturn filterCollection((Collection<?>) filterTarget, filterExpression, ctx, rootObject);\n\t\t}\n\t\tif (filterTarget.getClass().isArray()) {\n\t\t\treturn filterArray((Object[]) filterTarget, filterExpression, ctx, rootObject);\n\t\t}\n\t\tif (filterTarget instanceof Map) {\n\t\t\treturn filterMap((Map<?, ?>) filterTarget, filterExpression, ctx, rootObject);\n\t\t}\n\t\tif (filterTarget instanceof Stream) {\n\t\t\treturn filterStream((Stream<?>) filterTarget, filterExpression, ctx, rootObject);\n\t\t}\n\t\tthrow new IllegalArgumentException(\n\t\t\t\t\"Filter target must be a collection, array, map or stream type, but was \" + filterTarget);\n\t}",
        "summary_tokens": [
            "filters",
            "the",
            "filter",
            "target",
            "object",
            "which",
            "must",
            "be",
            "either",
            "a",
            "collection",
            "array",
            "map",
            "or",
            "stream",
            "by",
            "evaluating",
            "the",
            "supplied",
            "expression"
        ]
    },
    {
        "id": 498,
        "code": "\tpublic void setTrustResolver(AuthenticationTrustResolver trustResolver) {\n\t\tAssert.notNull(trustResolver, \"trustResolver cannot be null\");\n\t\tthis.trustResolver = trustResolver;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "authentication",
            "trust",
            "resolver",
            "to",
            "be",
            "used"
        ]
    },
    {
        "id": 499,
        "code": "\tprotected AuthenticationTrustResolver getTrustResolver() {\n\t\treturn this.trustResolver;\n\t}",
        "summary_tokens": [
            "the",
            "current",
            "authentication",
            "trust",
            "resolver"
        ]
    },
    {
        "id": 500,
        "code": "\tpublic void setParameterNameDiscoverer(ParameterNameDiscoverer parameterNameDiscoverer) {\n\t\tthis.parameterNameDiscoverer = parameterNameDiscoverer;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "parameter",
            "name",
            "discoverer",
            "to",
            "use"
        ]
    },
    {
        "id": 501,
        "code": "\tprotected ParameterNameDiscoverer getParameterNameDiscoverer() {\n\t\treturn this.parameterNameDiscoverer;\n\t}",
        "summary_tokens": [
            "the",
            "current",
            "parameter",
            "name",
            "discoverer"
        ]
    },
    {
        "id": 502,
        "code": "\tpublic void setDefaultRolePrefix(String defaultRolePrefix) {\n\t\tthis.defaultRolePrefix = defaultRolePrefix;\n\t}",
        "summary_tokens": [
            "p",
            "sets",
            "the",
            "default",
            "prefix",
            "to",
            "be",
            "added",
            "to",
            "org"
        ]
    },
    {
        "id": 503,
        "code": "\tprotected String getDefaultRolePrefix() {\n\t\treturn this.defaultRolePrefix;\n\t}",
        "summary_tokens": [
            "the",
            "default",
            "role",
            "prefix"
        ]
    },
    {
        "id": 504,
        "code": "\tprivate ExpressionParser getParser() {\n\t\tif (this.parser != null) {\n\t\t\treturn this.parser;\n\t\t}\n\t\tsynchronized (this.parserLock) {\n\t\t\tthis.parser = this.handler.getExpressionParser();\n\t\t\tthis.handler = null;\n\t\t}\n\t\treturn this.parser;\n\t}",
        "summary_tokens": [
            "delay",
            "the",
            "lookup",
            "of",
            "the",
            "expression",
            "parser",
            "to",
            "prevent",
            "sec",
            "0"
        ]
    },
    {
        "id": 505,
        "code": "\tvoid setThis(Object target) {\n\t\tthis.target = target;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "this",
            "property",
            "for",
            "use",
            "in",
            "expressions"
        ]
    },
    {
        "id": 506,
        "code": "\tString getFilterTarget() {\n\t\treturn this.filterTarget;\n\t}",
        "summary_tokens": [
            "the",
            "parameter",
            "name",
            "of",
            "the",
            "target",
            "argument",
            "must",
            "be",
            "a",
            "collection",
            "to",
            "which",
            "filtering",
            "will",
            "be",
            "applied"
        ]
    },
    {
        "id": 507,
        "code": "\tpublic void setHierarchy(String roleHierarchyStringRepresentation) {\n\t\tthis.roleHierarchyStringRepresentation = roleHierarchyStringRepresentation;\n\t\tlogger.debug(LogMessage.format(\"setHierarchy() - The following role hierarchy was set: %s\",\n\t\t\t\troleHierarchyStringRepresentation));\n\t\tbuildRolesReachableInOneStepMap();\n\t\tbuildRolesReachableInOneOrMoreStepsMap();\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "role",
            "hierarchy",
            "and",
            "pre",
            "calculate",
            "for",
            "every",
            "role",
            "the",
            "set",
            "of",
            "all",
            "reachable",
            "roles",
            "i"
        ]
    },
    {
        "id": 508,
        "code": "\tprivate void buildRolesReachableInOneStepMap() {\n\t\tthis.rolesReachableInOneStepMap = new HashMap<>();\n\t\tfor (String line : this.roleHierarchyStringRepresentation.split(\"\\n\")) {\n\t\t\t\n\t\t\tString[] roles = line.trim().split(\"\\\\s+>\\\\s+\");\n\t\t\tfor (int i = 1; i < roles.length; i++) {\n\t\t\t\tString higherRole = roles[i - 1];\n\t\t\t\tGrantedAuthority lowerRole = new SimpleGrantedAuthority(roles[i]);\n\t\t\t\tSet<GrantedAuthority> rolesReachableInOneStepSet;\n\t\t\t\tif (!this.rolesReachableInOneStepMap.containsKey(higherRole)) {\n\t\t\t\t\trolesReachableInOneStepSet = new HashSet<>();\n\t\t\t\t\tthis.rolesReachableInOneStepMap.put(higherRole, rolesReachableInOneStepSet);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\trolesReachableInOneStepSet = this.rolesReachableInOneStepMap.get(higherRole);\n\t\t\t\t}\n\t\t\t\trolesReachableInOneStepSet.add(lowerRole);\n\t\t\t\tlogger.debug(LogMessage.format(\n\t\t\t\t\t\t\"buildRolesReachableInOneStepMap() - From role %s one can reach role %s in one step.\",\n\t\t\t\t\t\thigherRole, lowerRole));\n\t\t\t}\n\t\t}\n\t}",
        "summary_tokens": [
            "parse",
            "input",
            "and",
            "build",
            "the",
            "map",
            "for",
            "the",
            "roles",
            "reachable",
            "in",
            "one",
            "step",
            "the",
            "higher",
            "role",
            "will",
            "become",
            "a",
            "key",
            "that",
            "references",
            "a",
            "set",
            "of",
            "the",
            "reachable",
            "lower",
            "roles"
        ]
    },
    {
        "id": 509,
        "code": "\tprivate void buildRolesReachableInOneOrMoreStepsMap() {\n\t\tthis.rolesReachableInOneOrMoreStepsMap = new HashMap<>();\n\t\t\n\t\tfor (String roleName : this.rolesReachableInOneStepMap.keySet()) {\n\t\t\tSet<GrantedAuthority> rolesToVisitSet = new HashSet<>(this.rolesReachableInOneStepMap.get(roleName));\n\t\t\tSet<GrantedAuthority> visitedRolesSet = new HashSet<>();\n\t\t\twhile (!rolesToVisitSet.isEmpty()) {\n\t\t\t\t\n\t\t\t\tGrantedAuthority lowerRole = rolesToVisitSet.iterator().next();\n\t\t\t\trolesToVisitSet.remove(lowerRole);\n\t\t\t\tif (!visitedRolesSet.add(lowerRole)\n\t\t\t\t\t\t|| !this.rolesReachableInOneStepMap.containsKey(lowerRole.getAuthority())) {\n\t\t\t\t\tcontinue; \n\t\t\t\t}\n\t\t\t\telse if (roleName.equals(lowerRole.getAuthority())) {\n\t\t\t\t\tthrow new CycleInRoleHierarchyException();\n\t\t\t\t}\n\t\t\t\trolesToVisitSet.addAll(this.rolesReachableInOneStepMap.get(lowerRole.getAuthority()));\n\t\t\t}\n\t\t\tthis.rolesReachableInOneOrMoreStepsMap.put(roleName, visitedRolesSet);\n\t\t\tlogger.debug(LogMessage.format(\n\t\t\t\t\t\"buildRolesReachableInOneOrMoreStepsMap() - From role %s one can reach %s in one or more steps.\",\n\t\t\t\t\troleName, visitedRolesSet));\n\t\t}\n\n\t}",
        "summary_tokens": [
            "for",
            "every",
            "higher",
            "role",
            "from",
            "roles",
            "reachable",
            "in",
            "one",
            "step",
            "map",
            "store",
            "all",
            "roles",
            "that",
            "are",
            "reachable",
            "from",
            "it",
            "in",
            "the",
            "map",
            "of",
            "roles",
            "reachable",
            "in",
            "one",
            "or",
            "more",
            "steps"
        ]
    },
    {
        "id": 510,
        "code": "\tpublic static String roleHierarchyFromMap(Map<String, List<String>> roleHierarchyMap) {\n\t\tAssert.notEmpty(roleHierarchyMap, \"roleHierarchyMap cannot be empty\");\n\t\tStringWriter result = new StringWriter();\n\t\tPrintWriter writer = new PrintWriter(result);\n\t\troleHierarchyMap.forEach((role, impliedRoles) -> {\n\t\t\tAssert.hasLength(role, \"role name must be supplied\");\n\t\t\tAssert.notEmpty(impliedRoles, \"implied role name(s) cannot be empty\");\n\t\t\tfor (String impliedRole : impliedRoles) {\n\t\t\t\twriter.println(role + \" > \" + impliedRole);\n\t\t\t}\n\t\t});\n\t\treturn result.toString();\n\t}",
        "summary_tokens": [
            "converts",
            "the",
            "supplied",
            "map",
            "of",
            "role",
            "name",
            "to",
            "implied",
            "role",
            "name",
            "s",
            "to",
            "a",
            "string",
            "representation",
            "understood",
            "by",
            "role",
            "hierarchy",
            "impl",
            "set",
            "hierarchy",
            "string"
        ]
    },
    {
        "id": 511,
        "code": "\tprotected void finallyInvocation(InterceptorStatusToken token) {\n\t\tif (token != null && token.isContextHolderRefreshRequired()) {\n\t\t\tthis.securityContextHolderStrategy.setContext(token.getSecurityContext());\n\t\t\tif (this.logger.isDebugEnabled()) {\n\t\t\t\tthis.logger.debug(LogMessage.of(\n\t\t\t\t\t\t() -> \"Reverted to original authentication \" + token.getSecurityContext().getAuthentication()));\n\t\t\t}\n\t\t}\n\t}",
        "summary_tokens": [
            "cleans",
            "up",
            "the",
            "work",
            "of",
            "the",
            "tt",
            "abstract",
            "security",
            "interceptor",
            "tt",
            "after",
            "the",
            "secure",
            "object",
            "invocation",
            "has",
            "been",
            "completed"
        ]
    },
    {
        "id": 512,
        "code": "\tprotected Object afterInvocation(InterceptorStatusToken token, Object returnedObject) {\n\t\tif (token == null) {\n\t\t\t\n\t\t\treturn returnedObject;\n\t\t}\n\t\tfinallyInvocation(token); \n\t\tif (this.afterInvocationManager != null) {\n\t\t\t\n\t\t\ttry {\n\t\t\t\treturnedObject = this.afterInvocationManager.decide(token.getSecurityContext().getAuthentication(),\n\t\t\t\t\t\ttoken.getSecureObject(), token.getAttributes(), returnedObject);\n\t\t\t}\n\t\t\tcatch (AccessDeniedException ex) {\n\t\t\t\tpublishEvent(new AuthorizationFailureEvent(token.getSecureObject(), token.getAttributes(),\n\t\t\t\t\t\ttoken.getSecurityContext().getAuthentication(), ex));\n\t\t\t\tthrow ex;\n\t\t\t}\n\t\t}\n\t\treturn returnedObject;\n\t}",
        "summary_tokens": [
            "completes",
            "the",
            "work",
            "of",
            "the",
            "tt",
            "abstract",
            "security",
            "interceptor",
            "tt",
            "after",
            "the",
            "secure",
            "object",
            "invocation",
            "has",
            "been",
            "completed"
        ]
    },
    {
        "id": 513,
        "code": "\tprivate Authentication authenticateIfRequired() {\n\t\tAuthentication authentication = this.securityContextHolderStrategy.getContext().getAuthentication();\n\t\tif (authentication.isAuthenticated() && !this.alwaysReauthenticate) {\n\t\t\tif (this.logger.isTraceEnabled()) {\n\t\t\t\tthis.logger.trace(LogMessage.format(\"Did not re-authenticate %s before authorizing\", authentication));\n\t\t\t}\n\t\t\treturn authentication;\n\t\t}\n\t\tauthentication = this.authenticationManager.authenticate(authentication);\n\t\t\n\t\tif (this.logger.isDebugEnabled()) {\n\t\t\tthis.logger.debug(LogMessage.format(\"Re-authenticated %s before authorizing\", authentication));\n\t\t}\n\t\tSecurityContext context = this.securityContextHolderStrategy.createEmptyContext();\n\t\tcontext.setAuthentication(authentication);\n\t\tthis.securityContextHolderStrategy.setContext(context);\n\t\treturn authentication;\n\t}",
        "summary_tokens": [
            "checks",
            "the",
            "current",
            "authentication",
            "token",
            "and",
            "passes",
            "it",
            "to",
            "the",
            "authentication",
            "manager",
            "if",
            "org"
        ]
    },
    {
        "id": 514,
        "code": "\tprivate void credentialsNotFound(String reason, Object secureObject, Collection<ConfigAttribute> configAttribs) {\n\t\tAuthenticationCredentialsNotFoundException exception = new AuthenticationCredentialsNotFoundException(reason);\n\t\tAuthenticationCredentialsNotFoundEvent event = new AuthenticationCredentialsNotFoundEvent(secureObject,\n\t\t\t\tconfigAttribs, exception);\n\t\tpublishEvent(event);\n\t\tthrow exception;\n\t}",
        "summary_tokens": [
            "helper",
            "method",
            "which",
            "generates",
            "an",
            "exception",
            "containing",
            "the",
            "passed",
            "reason",
            "and",
            "publishes",
            "an",
            "event",
            "to",
            "the",
            "application",
            "context"
        ]
    },
    {
        "id": 515,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n\t\tAssert.notNull(securityContextHolderStrategy, \"securityContextHolderStrategy cannot be null\");\n\t\tthis.securityContextHolderStrategy = securityContextHolderStrategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 516,
        "code": "\tpublic void setAlwaysReauthenticate(boolean alwaysReauthenticate) {\n\t\tthis.alwaysReauthenticate = alwaysReauthenticate;\n\t}",
        "summary_tokens": [
            "indicates",
            "whether",
            "the",
            "code",
            "abstract",
            "security",
            "interceptor",
            "code",
            "should",
            "ignore",
            "the",
            "authentication",
            "is",
            "authenticated",
            "property"
        ]
    },
    {
        "id": 517,
        "code": "\tpublic void setPublishAuthorizationSuccess(boolean publishAuthorizationSuccess) {\n\t\tthis.publishAuthorizationSuccess = publishAuthorizationSuccess;\n\t}",
        "summary_tokens": [
            "only",
            "authorization",
            "failure",
            "event",
            "will",
            "be",
            "published"
        ]
    },
    {
        "id": 518,
        "code": "\tpublic void setRejectPublicInvocations(boolean rejectPublicInvocations) {\n\t\tthis.rejectPublicInvocations = rejectPublicInvocations;\n\t}",
        "summary_tokens": [
            "by",
            "rejecting",
            "public",
            "invocations",
            "and",
            "setting",
            "this",
            "property",
            "to",
            "tt",
            "true",
            "tt",
            "essentially",
            "you",
            "are",
            "ensuring",
            "that",
            "every",
            "secure",
            "object",
            "invocation",
            "advised",
            "by",
            "code",
            "abstract",
            "security",
            "interceptor",
            "code",
            "has",
            "a",
            "configuration",
            "attribute",
            "defined"
        ]
    },
    {
        "id": 519,
        "code": "\tpublic boolean supports(Class<?> clazz) {\n\t\tfor (AfterInvocationProvider provider : this.providers) {\n\t\t\tif (!provider.supports(clazz)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}",
        "summary_tokens": [
            "iterates",
            "through",
            "all",
            "code",
            "after",
            "invocation",
            "provider",
            "code",
            "s",
            "and",
            "ensures",
            "each",
            "can",
            "support",
            "the",
            "presented",
            "class"
        ]
    },
    {
        "id": 520,
        "code": "\tpublic void setRolePrefix(String rolePrefix) {\n\t\tthis.rolePrefix = rolePrefix;\n\t}",
        "summary_tokens": [
            "allows",
            "the",
            "default",
            "role",
            "prefix",
            "of",
            "code",
            "role",
            "code",
            "to",
            "be",
            "overridden"
        ]
    },
    {
        "id": 521,
        "code": "\tpublic boolean supports(Class<?> clazz) {\n\t\treturn true;\n\t}",
        "summary_tokens": [
            "this",
            "implementation",
            "supports",
            "any",
            "type",
            "of",
            "class",
            "because",
            "it",
            "does",
            "not",
            "query",
            "the",
            "presented",
            "secure",
            "object"
        ]
    },
    {
        "id": 522,
        "code": "\tpublic Object invoke(MethodInvocation mi) throws Throwable {\n\t\tInterceptorStatusToken token = super.beforeInvocation(mi);\n\t\tObject result;\n\t\ttry {\n\t\t\tresult = mi.proceed();\n\t\t}\n\t\tfinally {\n\t\t\tsuper.finallyInvocation(token);\n\t\t}\n\t\treturn super.afterInvocation(token, result);\n\t}",
        "summary_tokens": [
            "this",
            "method",
            "should",
            "be",
            "used",
            "to",
            "enforce",
            "security",
            "on",
            "a",
            "code",
            "method",
            "invocation",
            "code"
        ]
    },
    {
        "id": 523,
        "code": "\tpublic Object invoke(JoinPoint jp, AspectJCallback advisorProceed) {\n\t\tInterceptorStatusToken token = super.beforeInvocation(new MethodInvocationAdapter(jp));\n\t\tObject result;\n\t\ttry {\n\t\t\tresult = advisorProceed.proceedWithObject();\n\t\t}\n\t\tfinally {\n\t\t\tsuper.finallyInvocation(token);\n\t\t}\n\t\treturn super.afterInvocation(token, result);\n\t}",
        "summary_tokens": [
            "method",
            "that",
            "is",
            "suitable",
            "for",
            "user",
            "with",
            "traditional",
            "aspect",
            "j",
            "code",
            "aspects"
        ]
    },
    {
        "id": 524,
        "code": "\tprotected Collection<ConfigAttribute> findAttributes(Method method, Class<?> targetClass) {\n\t\tif (targetClass == null) {\n\t\t\treturn null;\n\t\t}\n\t\treturn findAttributesSpecifiedAgainst(method, targetClass);\n\t}",
        "summary_tokens": [
            "will",
            "walk",
            "the",
            "method",
            "inheritance",
            "tree",
            "to",
            "find",
            "the",
            "most",
            "specific",
            "declaration",
            "applicable"
        ]
    },
    {
        "id": 525,
        "code": "\tprivate void addSecureMethod(RegisteredMethod method, List<ConfigAttribute> attr) {\n\t\tAssert.notNull(method, \"RegisteredMethod required\");\n\t\tAssert.notNull(attr, \"Configuration attribute required\");\n\t\tthis.logger.info(LogMessage.format(\"Adding secure method [%s] with attributes [%s]\", method, attr));\n\t\tthis.methodMap.put(method, attr);\n\t}",
        "summary_tokens": [
            "add",
            "configuration",
            "attributes",
            "for",
            "a",
            "secure",
            "method"
        ]
    },
    {
        "id": 526,
        "code": "\tpublic Collection<ConfigAttribute> getAllConfigAttributes() {\n\t\tSet<ConfigAttribute> allAttributes = new HashSet<>();\n\t\tthis.methodMap.values().forEach(allAttributes::addAll);\n\t\treturn allAttributes;\n\t}",
        "summary_tokens": [
            "obtains",
            "the",
            "configuration",
            "attributes",
            "explicitly",
            "defined",
            "against",
            "this",
            "bean"
        ]
    },
    {
        "id": 527,
        "code": "\tprivate boolean isMatch(String methodName, String mappedName) {\n\t\treturn (mappedName.endsWith(\"*\") && methodName.startsWith(mappedName.substring(0, mappedName.length() - 1)))\n\t\t\t\t|| (mappedName.startsWith(\"*\") && methodName.endsWith(mappedName.substring(1, mappedName.length())));\n\t}",
        "summary_tokens": [
            "return",
            "if",
            "the",
            "given",
            "method",
            "name",
            "matches",
            "the",
            "mapped",
            "name"
        ]
    },
    {
        "id": 528,
        "code": "\tpublic int getMethodMapSize() {\n\t\treturn this.methodMap.size();\n\t}",
        "summary_tokens": [
            "map",
            "size",
            "for",
            "unit",
            "tests",
            "and",
            "diagnostics"
        ]
    },
    {
        "id": 529,
        "code": "\tpublic boolean supports(Class<?> clazz) {\n\t\tfor (AccessDecisionVoter<?> voter : this.decisionVoters) {\n\t\t\tif (!voter.supports(clazz)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}",
        "summary_tokens": [
            "iterates",
            "through",
            "all",
            "code",
            "access",
            "decision",
            "voter",
            "code",
            "s",
            "and",
            "ensures",
            "each",
            "can",
            "support",
            "the",
            "presented",
            "class"
        ]
    },
    {
        "id": 530,
        "code": "\tpublic boolean supports(Class<?> clazz) {\n\t\treturn (MethodInvocation.class.isAssignableFrom(clazz));\n\t}",
        "summary_tokens": [
            "this",
            "implementation",
            "supports",
            "only",
            "code",
            "method",
            "security",
            "interceptor",
            "code",
            "because",
            "it",
            "queries",
            "the",
            "presented",
            "code",
            "method",
            "invocation",
            "code"
        ]
    },
    {
        "id": 531,
        "code": "\tpublic void decide(Authentication authentication, Object object, Collection<ConfigAttribute> configAttributes)\n\t\t\tthrows AccessDeniedException {\n\t\tint deny = 0;\n\t\tfor (AccessDecisionVoter voter : getDecisionVoters()) {\n\t\t\tint result = voter.vote(authentication, object, configAttributes);\n\t\t\tswitch (result) {\n\t\t\tcase AccessDecisionVoter.ACCESS_GRANTED:\n\t\t\t\treturn;\n\t\t\tcase AccessDecisionVoter.ACCESS_DENIED:\n\t\t\t\tdeny++;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (deny > 0) {\n\t\t\tthrow new AccessDeniedException(\n\t\t\t\t\tthis.messages.getMessage(\"AbstractAccessDecisionManager.accessDenied\", \"Access is denied\"));\n\t\t}\n\t\t\n\t\tcheckAllowIfAllAbstainDecisions();\n\t}",
        "summary_tokens": [
            "this",
            "concrete",
            "implementation",
            "simply",
            "polls",
            "all",
            "configured",
            "access",
            "decision",
            "voter",
            "s",
            "and",
            "grants",
            "access",
            "if",
            "any",
            "code",
            "access",
            "decision",
            "voter",
            "code",
            "voted",
            "affirmatively"
        ]
    },
    {
        "id": 532,
        "code": "\tpublic boolean supports(Class<?> clazz) {\n\t\treturn true;\n\t}",
        "summary_tokens": [
            "this",
            "implementation",
            "supports",
            "any",
            "type",
            "of",
            "class",
            "because",
            "it",
            "does",
            "not",
            "query",
            "the",
            "presented",
            "secure",
            "object"
        ]
    },
    {
        "id": 533,
        "code": "\tpublic void decide(Authentication authentication, Object object, Collection<ConfigAttribute> configAttributes)\n\t\t\tthrows AccessDeniedException {\n\t\tint grant = 0;\n\t\tint deny = 0;\n\t\tfor (AccessDecisionVoter voter : getDecisionVoters()) {\n\t\t\tint result = voter.vote(authentication, object, configAttributes);\n\t\t\tswitch (result) {\n\t\t\tcase AccessDecisionVoter.ACCESS_GRANTED:\n\t\t\t\tgrant++;\n\t\t\t\tbreak;\n\t\t\tcase AccessDecisionVoter.ACCESS_DENIED:\n\t\t\t\tdeny++;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (grant > deny) {\n\t\t\treturn;\n\t\t}\n\t\tif (deny > grant) {\n\t\t\tthrow new AccessDeniedException(\n\t\t\t\t\tthis.messages.getMessage(\"AbstractAccessDecisionManager.accessDenied\", \"Access is denied\"));\n\t\t}\n\t\tif ((grant == deny) && (grant != 0)) {\n\t\t\tif (this.allowIfEqualGrantedDeniedDecisions) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthrow new AccessDeniedException(\n\t\t\t\t\tthis.messages.getMessage(\"AbstractAccessDecisionManager.accessDenied\", \"Access is denied\"));\n\t\t}\n\t\t\n\t\tcheckAllowIfAllAbstainDecisions();\n\t}",
        "summary_tokens": [
            "this",
            "concrete",
            "implementation",
            "simply",
            "polls",
            "all",
            "configured",
            "access",
            "decision",
            "voter",
            "s",
            "and",
            "upon",
            "completion",
            "determines",
            "the",
            "consensus",
            "of",
            "granted",
            "against",
            "denied",
            "responses"
        ]
    },
    {
        "id": 534,
        "code": "\tCollection<? extends GrantedAuthority> extractAuthorities(Authentication authentication) {\n\t\treturn this.roleHierarchy.getReachableGrantedAuthorities(authentication.getAuthorities());\n\t}",
        "summary_tokens": [
            "calls",
            "the",
            "tt",
            "role",
            "hierarchy",
            "tt",
            "to",
            "obtain",
            "the",
            "complete",
            "set",
            "of",
            "user",
            "authorities"
        ]
    },
    {
        "id": 535,
        "code": "\tpublic void setRolePrefix(String rolePrefix) {\n\t\tthis.rolePrefix = rolePrefix;\n\t}",
        "summary_tokens": [
            "allows",
            "the",
            "default",
            "role",
            "prefix",
            "of",
            "code",
            "role",
            "code",
            "to",
            "be",
            "overridden"
        ]
    },
    {
        "id": 536,
        "code": "\tpublic boolean supports(Class<?> clazz) {\n\t\treturn true;\n\t}",
        "summary_tokens": [
            "this",
            "implementation",
            "supports",
            "any",
            "type",
            "of",
            "class",
            "because",
            "it",
            "does",
            "not",
            "query",
            "the",
            "presented",
            "secure",
            "object"
        ]
    },
    {
        "id": 537,
        "code": "\tpublic void decide(Authentication authentication, Object object, Collection<ConfigAttribute> attributes)\n\t\t\tthrows AccessDeniedException {\n\t\tint grant = 0;\n\t\tList<ConfigAttribute> singleAttributeList = new ArrayList<>(1);\n\t\tsingleAttributeList.add(null);\n\t\tfor (ConfigAttribute attribute : attributes) {\n\t\t\tsingleAttributeList.set(0, attribute);\n\t\t\tfor (AccessDecisionVoter voter : getDecisionVoters()) {\n\t\t\t\tint result = voter.vote(authentication, object, singleAttributeList);\n\t\t\t\tswitch (result) {\n\t\t\t\tcase AccessDecisionVoter.ACCESS_GRANTED:\n\t\t\t\t\tgrant++;\n\t\t\t\t\tbreak;\n\t\t\t\tcase AccessDecisionVoter.ACCESS_DENIED:\n\t\t\t\t\tthrow new AccessDeniedException(\n\t\t\t\t\t\t\tthis.messages.getMessage(\"AbstractAccessDecisionManager.accessDenied\", \"Access is denied\"));\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (grant > 0) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tcheckAllowIfAllAbstainDecisions();\n\t}",
        "summary_tokens": [
            "this",
            "concrete",
            "implementation",
            "polls",
            "all",
            "configured",
            "access",
            "decision",
            "voter",
            "s",
            "for",
            "each",
            "config",
            "attribute",
            "and",
            "grants",
            "access",
            "if",
            "b",
            "only",
            "b",
            "grant",
            "or",
            "abstain",
            "votes",
            "were",
            "received"
        ]
    },
    {
        "id": 538,
        "code": "\tpublic void eraseCredentials() {\n\t\teraseSecret(getCredentials());\n\t\teraseSecret(getPrincipal());\n\t\teraseSecret(this.details);\n\t}",
        "summary_tokens": [
            "checks",
            "the",
            "credentials",
            "principal",
            "and",
            "details",
            "objects",
            "invoking",
            "the",
            "erase",
            "credentials",
            "method",
            "on",
            "any",
            "which",
            "implement",
            "credentials",
            "container"
        ]
    },
    {
        "id": 539,
        "code": "\tpublic void setPasswordEncoder(PasswordEncoder passwordEncoder) {\n\t\tAssert.notNull(passwordEncoder, \"passwordEncoder cannot be null\");\n\t\tthis.passwordEncoder = passwordEncoder;\n\t}",
        "summary_tokens": [
            "the",
            "password",
            "encoder",
            "that",
            "is",
            "used",
            "for",
            "validating",
            "the",
            "password"
        ]
    },
    {
        "id": 540,
        "code": "\tpublic void setScheduler(Scheduler scheduler) {\n\t\tAssert.notNull(scheduler, \"scheduler cannot be null\");\n\t\tthis.scheduler = scheduler;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "scheduler",
            "used",
            "by",
            "the",
            "user",
            "details",
            "repository",
            "reactive",
            "authentication",
            "manager"
        ]
    },
    {
        "id": 541,
        "code": "\tpublic void setUserDetailsPasswordService(ReactiveUserDetailsPasswordService userDetailsPasswordService) {\n\t\tthis.userDetailsPasswordService = userDetailsPasswordService;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "service",
            "to",
            "use",
            "for",
            "upgrading",
            "passwords",
            "on",
            "successful",
            "authentication"
        ]
    },
    {
        "id": 542,
        "code": "\tpublic void setPostAuthenticationChecks(UserDetailsChecker postAuthenticationChecks) {\n\t\tAssert.notNull(this.postAuthenticationChecks, \"postAuthenticationChecks cannot be null\");\n\t\tthis.postAuthenticationChecks = postAuthenticationChecks;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "strategy",
            "which",
            "will",
            "be",
            "used",
            "to",
            "validate",
            "the",
            "loaded",
            "tt",
            "user",
            "details",
            "tt",
            "object",
            "after",
            "authentication",
            "occurs"
        ]
    },
    {
        "id": 543,
        "code": "\tpublic Object getCredentials() {\n\t\treturn \"\";\n\t}",
        "summary_tokens": [
            "always",
            "returns",
            "an",
            "empty",
            "code",
            "string",
            "code",
            "an",
            "empty",
            "string"
        ]
    },
    {
        "id": 544,
        "code": "\tpublic void setAdditionalExceptionMappings(\n\t\t\tMap<Class<? extends AuthenticationException>, Class<? extends AbstractAuthenticationFailureEvent>> mappings) {\n\t\tAssert.notEmpty(mappings, \"The mappings Map must not be empty nor null\");\n\t\tfor (Map.Entry<Class<? extends AuthenticationException>, Class<? extends AbstractAuthenticationFailureEvent>> entry : mappings\n\t\t\t\t.entrySet()) {\n\t\t\tClass<?> exceptionClass = entry.getKey();\n\t\t\tClass<?> eventClass = entry.getValue();\n\t\t\tAssert.notNull(exceptionClass, \"exceptionClass cannot be null\");\n\t\t\tAssert.notNull(eventClass, \"eventClass cannot be null\");\n\t\t\taddMapping(exceptionClass.getName(), (Class<? extends AbstractAuthenticationFailureEvent>) eventClass);\n\t\t}\n\t}",
        "summary_tokens": [
            "sets",
            "additional",
            "exception",
            "to",
            "event",
            "mappings"
        ]
    },
    {
        "id": 545,
        "code": "\tpublic void setDefaultAuthenticationFailureEvent(\n\t\t\tClass<? extends AbstractAuthenticationFailureEvent> defaultAuthenticationFailureEventClass) {\n\t\tAssert.notNull(defaultAuthenticationFailureEventClass,\n\t\t\t\t\"defaultAuthenticationFailureEventClass must not be null\");\n\t\ttry {\n\t\t\tthis.defaultAuthenticationFailureEventConstructor = defaultAuthenticationFailureEventClass\n\t\t\t\t\t.getConstructor(Authentication.class, AuthenticationException.class);\n\t\t}\n\t\tcatch (NoSuchMethodException ex) {\n\t\t\tthrow new RuntimeException(\"Default Authentication Failure event class \"\n\t\t\t\t\t+ defaultAuthenticationFailureEventClass.getName() + \" has no suitable constructor\");\n\t\t}\n\t}",
        "summary_tokens": [
            "sets",
            "a",
            "default",
            "authentication",
            "failure",
            "event",
            "as",
            "a",
            "fallback",
            "event",
            "for",
            "any",
            "unmapped",
            "exceptions",
            "not",
            "mapped",
            "in",
            "the",
            "exception",
            "mappings"
        ]
    },
    {
        "id": 546,
        "code": "\tpublic Authentication authenticate(Authentication authentication) throws AuthenticationException {\n\t\tClass<? extends Authentication> toTest = authentication.getClass();\n\t\tAuthenticationException lastException = null;\n\t\tAuthenticationException parentException = null;\n\t\tAuthentication result = null;\n\t\tAuthentication parentResult = null;\n\t\tint currentPosition = 0;\n\t\tint size = this.providers.size();\n\t\tfor (AuthenticationProvider provider : getProviders()) {\n\t\t\tif (!provider.supports(toTest)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(LogMessage.format(\"Authenticating request with %s (%d/%d)\",\n\t\t\t\t\t\tprovider.getClass().getSimpleName(), ++currentPosition, size));\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tresult = provider.authenticate(authentication);\n\t\t\t\tif (result != null) {\n\t\t\t\t\tcopyDetails(authentication, result);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (AccountStatusException | InternalAuthenticationServiceException ex) {\n\t\t\t\tprepareException(ex, authentication);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tthrow ex;\n\t\t\t}\n\t\t\tcatch (AuthenticationException ex) {\n\t\t\t\tlastException = ex;\n\t\t\t}\n\t\t}\n\t\tif (result == null && this.parent != null) {\n\t\t\t\n\t\t\ttry {\n\t\t\t\tparentResult = this.parent.authenticate(authentication);\n\t\t\t\tresult = parentResult;\n\t\t\t}\n\t\t\tcatch (ProviderNotFoundException ex) {\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t\tcatch (AuthenticationException ex) {\n\t\t\t\tparentException = ex;\n\t\t\t\tlastException = ex;\n\t\t\t}\n\t\t}\n\t\tif (result != null) {\n\t\t\tif (this.eraseCredentialsAfterAuthentication && (result instanceof CredentialsContainer)) {\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t((CredentialsContainer) result).eraseCredentials();\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tif (parentResult == null) {\n\t\t\t\tthis.eventPublisher.publishAuthenticationSuccess(result);\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t\t\n\t\tif (lastException == null) {\n\t\t\tlastException = new ProviderNotFoundException(this.messages.getMessage(\"ProviderManager.providerNotFound\",\n\t\t\t\t\tnew Object[] { toTest.getName() }, \"No AuthenticationProvider found for {0}\"));\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t\tif (parentException == null) {\n\t\t\tprepareException(lastException, authentication);\n\t\t}\n\t\tthrow lastException;\n\t}",
        "summary_tokens": [
            "attempts",
            "to",
            "authenticate",
            "the",
            "passed",
            "authentication",
            "object"
        ]
    },
    {
        "id": 547,
        "code": "\tprivate void copyDetails(Authentication source, Authentication dest) {\n\t\tif ((dest instanceof AbstractAuthenticationToken) && (dest.getDetails() == null)) {\n\t\t\tAbstractAuthenticationToken token = (AbstractAuthenticationToken) dest;\n\t\t\ttoken.setDetails(source.getDetails());\n\t\t}\n\t}",
        "summary_tokens": [
            "copies",
            "the",
            "authentication",
            "details",
            "from",
            "a",
            "source",
            "authentication",
            "object",
            "to",
            "a",
            "destination",
            "one",
            "provided",
            "the",
            "latter",
            "does",
            "not",
            "already",
            "have",
            "one",
            "set"
        ]
    },
    {
        "id": 548,
        "code": "\tpublic void setEraseCredentialsAfterAuthentication(boolean eraseSecretData) {\n\t\tthis.eraseCredentialsAfterAuthentication = eraseSecretData;\n\t}",
        "summary_tokens": [
            "if",
            "set",
            "to",
            "a",
            "resulting",
            "authentication",
            "which",
            "implements",
            "the",
            "credentials",
            "container",
            "interface",
            "will",
            "have",
            "its",
            "credentials",
            "container",
            "erase",
            "credentials",
            "erase",
            "credentials",
            "method",
            "called",
            "before",
            "it",
            "is",
            "returned",
            "from",
            "the",
            "authenticate",
            "method"
        ]
    },
    {
        "id": 549,
        "code": "\tpublic void setScheduler(Scheduler scheduler) {\n\t\tAssert.notNull(scheduler, \"scheduler cannot be null\");\n\t\tthis.scheduler = scheduler;\n\t}",
        "summary_tokens": [
            "set",
            "a",
            "scheduler",
            "that",
            "will",
            "be",
            "published",
            "on",
            "to",
            "perform",
            "the",
            "authentication",
            "logic"
        ]
    },
    {
        "id": 550,
        "code": "\tpublic Object getCredentials() {\n\t\treturn \"\";\n\t}",
        "summary_tokens": [
            "always",
            "returns",
            "an",
            "empty",
            "code",
            "string",
            "code",
            "an",
            "empty",
            "string"
        ]
    },
    {
        "id": 551,
        "code": "\tpublic static UsernamePasswordAuthenticationToken unauthenticated(Object principal, Object credentials) {\n\t\treturn new UsernamePasswordAuthenticationToken(principal, credentials);\n\t}",
        "summary_tokens": [
            "this",
            "factory",
            "method",
            "can",
            "be",
            "safely",
            "used",
            "by",
            "any",
            "code",
            "that",
            "wishes",
            "to",
            "create",
            "a",
            "unauthenticated",
            "code",
            "username",
            "password",
            "authentication",
            "token",
            "code"
        ]
    },
    {
        "id": 552,
        "code": "\tpublic static UsernamePasswordAuthenticationToken authenticated(Object principal, Object credentials,\n\t\t\tCollection<? extends GrantedAuthority> authorities) {\n\t\treturn new UsernamePasswordAuthenticationToken(principal, credentials, authorities);\n\t}",
        "summary_tokens": [
            "this",
            "factory",
            "method",
            "can",
            "be",
            "safely",
            "used",
            "by",
            "any",
            "code",
            "that",
            "wishes",
            "to",
            "create",
            "a",
            "authenticated",
            "code",
            "username",
            "password",
            "authentication",
            "token",
            "code"
        ]
    },
    {
        "id": 553,
        "code": "\tprotected Authentication createSuccessAuthentication(Object principal, Authentication authentication,\n\t\t\tUserDetails user) {\n\t\t\n\t\t\n\t\t\n\t\t\n\t\tUsernamePasswordAuthenticationToken result = UsernamePasswordAuthenticationToken.authenticated(principal,\n\t\t\t\tauthentication.getCredentials(), this.authoritiesMapper.mapAuthorities(user.getAuthorities()));\n\t\tresult.setDetails(authentication.getDetails());\n\t\tthis.logger.debug(\"Authenticated user\");\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "successful",
            "authentication",
            "object"
        ]
    },
    {
        "id": 554,
        "code": "\tpublic void setHideUserNotFoundExceptions(boolean hideUserNotFoundExceptions) {\n\t\tthis.hideUserNotFoundExceptions = hideUserNotFoundExceptions;\n\t}",
        "summary_tokens": [
            "by",
            "default",
            "the",
            "code",
            "abstract",
            "user",
            "details",
            "authentication",
            "provider",
            "code",
            "throws",
            "a",
            "code",
            "bad",
            "credentials",
            "exception",
            "code",
            "if",
            "a",
            "username",
            "is",
            "not",
            "found",
            "or",
            "the",
            "password",
            "is",
            "incorrect"
        ]
    },
    {
        "id": 555,
        "code": "\tpublic void setPreAuthenticationChecks(UserDetailsChecker preAuthenticationChecks) {\n\t\tthis.preAuthenticationChecks = preAuthenticationChecks;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "policy",
            "will",
            "be",
            "used",
            "to",
            "verify",
            "the",
            "status",
            "of",
            "the",
            "loaded",
            "tt",
            "user",
            "details",
            "tt",
            "em",
            "before",
            "em",
            "validation",
            "of",
            "the",
            "credentials",
            "takes",
            "place"
        ]
    },
    {
        "id": 556,
        "code": "\tpublic void setPasswordEncoder(PasswordEncoder passwordEncoder) {\n\t\tAssert.notNull(passwordEncoder, \"passwordEncoder cannot be null\");\n\t\tthis.passwordEncoder = passwordEncoder;\n\t\tthis.userNotFoundEncodedPassword = null;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "password",
            "encoder",
            "instance",
            "to",
            "be",
            "used",
            "to",
            "encode",
            "and",
            "validate",
            "passwords"
        ]
    },
    {
        "id": 557,
        "code": "\tpublic Authentication getAuthentication() {\n\t\treturn (Authentication) super.getSource();\n\t}",
        "summary_tokens": [
            "getters",
            "for",
            "the",
            "code",
            "authentication",
            "code",
            "request",
            "that",
            "caused",
            "the",
            "event"
        ]
    },
    {
        "id": 558,
        "code": "\tpublic Class<?> getGeneratedBy() {\n\t\treturn this.generatedBy;\n\t}",
        "summary_tokens": [
            "getter",
            "for",
            "the",
            "code",
            "class",
            "code",
            "that",
            "generated",
            "this",
            "event"
        ]
    },
    {
        "id": 559,
        "code": "\tpublic void afterPropertiesSet() throws Exception {\n\t\tAssert.hasLength(this.loginContextName, \"loginContextName cannot be null or empty\");\n\t\tAssert.notEmpty(this.authorityGranters, \"authorityGranters cannot be null or empty\");\n\t\tif (ObjectUtils.isEmpty(this.callbackHandlers)) {\n\t\t\tsetCallbackHandlers(new JaasAuthenticationCallbackHandler[] { new JaasNameCallbackHandler(),\n\t\t\t\t\tnew JaasPasswordCallbackHandler() });\n\t\t}\n\t\tAssert.notNull(this.loginExceptionResolver, \"loginExceptionResolver cannot be null\");\n\t}",
        "summary_tokens": [
            "validates",
            "the",
            "required",
            "properties",
            "are",
            "set"
        ]
    },
    {
        "id": 560,
        "code": "\tpublic Authentication authenticate(Authentication auth) throws AuthenticationException {\n\t\tif (!(auth instanceof UsernamePasswordAuthenticationToken)) {\n\t\t\treturn null;\n\t\t}\n\t\tUsernamePasswordAuthenticationToken request = (UsernamePasswordAuthenticationToken) auth;\n\t\tSet<GrantedAuthority> authorities;\n\t\ttry {\n\t\t\t\n\t\t\tLoginContext loginContext = createLoginContext(new InternalCallbackHandler(auth));\n\t\t\t\n\t\t\t\n\t\t\tloginContext.login();\n\t\t\t\n\t\t\tSet<Principal> principals = loginContext.getSubject().getPrincipals();\n\t\t\t\n\t\t\t\n\t\t\tauthorities = getAuthorities(principals);\n\t\t\t\n\t\t\tJaasAuthenticationToken result = new JaasAuthenticationToken(request.getPrincipal(),\n\t\t\t\t\trequest.getCredentials(), new ArrayList<>(authorities), loginContext);\n\t\t\t\n\t\t\tpublishSuccessEvent(result);\n\t\t\t\n\t\t\treturn result;\n\n\t\t}\n\t\tcatch (LoginException ex) {\n\t\t\tAuthenticationException resolvedException = this.loginExceptionResolver.resolveException(ex);\n\t\t\tpublishFailureEvent(request, resolvedException);\n\t\t\tthrow resolvedException;\n\t\t}\n\t}",
        "summary_tokens": [
            "attempts",
            "to",
            "login",
            "the",
            "user",
            "given",
            "the",
            "authentication",
            "objects",
            "principal",
            "and",
            "credential",
            "auth",
            "the",
            "authentication",
            "object",
            "to",
            "be",
            "authenticated"
        ]
    },
    {
        "id": 561,
        "code": "\tprotected void handleLogout(SessionDestroyedEvent event) {\n\t\tList<SecurityContext> contexts = event.getSecurityContexts();\n\t\tif (contexts.isEmpty()) {\n\t\t\tthis.log.debug(\"The destroyed session has no SecurityContexts\");\n\t\t\treturn;\n\t\t}\n\t\tfor (SecurityContext context : contexts) {\n\t\t\tAuthentication auth = context.getAuthentication();\n\t\t\tif ((auth != null) && (auth instanceof JaasAuthenticationToken)) {\n\t\t\t\tJaasAuthenticationToken token = (JaasAuthenticationToken) auth;\n\t\t\t\ttry {\n\t\t\t\t\tLoginContext loginContext = token.getLoginContext();\n\t\t\t\t\tlogout(token, loginContext);\n\t\t\t\t}\n\t\t\t\tcatch (LoginException ex) {\n\t\t\t\t\tthis.log.warn(\"Error error logging out of LoginContext\", ex);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}",
        "summary_tokens": [
            "handles",
            "the",
            "logout",
            "by",
            "getting",
            "the",
            "security",
            "contexts",
            "for",
            "the",
            "destroyed",
            "session",
            "and",
            "invoking",
            "login",
            "context"
        ]
    },
    {
        "id": 562,
        "code": "\tprotected void publishFailureEvent(UsernamePasswordAuthenticationToken token, AuthenticationException ase) {\n\t\tif (this.applicationEventPublisher != null) {\n\t\t\tthis.applicationEventPublisher.publishEvent(new JaasAuthenticationFailedEvent(token, ase));\n\t\t}\n\t}",
        "summary_tokens": [
            "publishes",
            "the",
            "jaas",
            "authentication",
            "failed",
            "event"
        ]
    },
    {
        "id": 563,
        "code": "\tprotected void publishSuccessEvent(UsernamePasswordAuthenticationToken token) {\n\t\tif (this.applicationEventPublisher != null) {\n\t\t\tthis.applicationEventPublisher.publishEvent(new JaasAuthenticationSuccessEvent(token));\n\t\t}\n\t}",
        "summary_tokens": [
            "publishes",
            "the",
            "jaas",
            "authentication",
            "success",
            "event"
        ]
    },
    {
        "id": 564,
        "code": "\tAuthorityGranter[] getAuthorityGranters() {\n\t\treturn this.authorityGranters;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "authority",
            "grannter",
            "array",
            "that",
            "was",
            "passed",
            "to",
            "the",
            "set",
            "authority",
            "granters",
            "authority",
            "granter",
            "method",
            "or",
            "null",
            "if",
            "it",
            "none",
            "were",
            "ever",
            "set"
        ]
    },
    {
        "id": 565,
        "code": "\tpublic void setAuthorityGranters(AuthorityGranter[] authorityGranters) {\n\t\tthis.authorityGranters = authorityGranters;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "authority",
            "granters",
            "that",
            "should",
            "be",
            "consulted",
            "for",
            "role",
            "names",
            "to",
            "be",
            "granted",
            "to",
            "the",
            "authentication"
        ]
    },
    {
        "id": 566,
        "code": "\tJaasAuthenticationCallbackHandler[] getCallbackHandlers() {\n\t\treturn this.callbackHandlers;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "current",
            "jaas",
            "authentication",
            "callback",
            "handler",
            "array",
            "or",
            "null",
            "if",
            "none",
            "are",
            "set"
        ]
    },
    {
        "id": 567,
        "code": "\tpublic void setCallbackHandlers(JaasAuthenticationCallbackHandler[] callbackHandlers) {\n\t\tthis.callbackHandlers = callbackHandlers;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "jaasauthentcation",
            "callback",
            "handler",
            "array",
            "to",
            "handle",
            "callback",
            "objects",
            "generated",
            "by",
            "the",
            "login",
            "context"
        ]
    },
    {
        "id": 568,
        "code": "\tpublic void setLoginContextName(String loginContextName) {\n\t\tthis.loginContextName = loginContextName;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "login",
            "context",
            "name",
            "this",
            "name",
            "is",
            "used",
            "as",
            "the",
            "index",
            "to",
            "the",
            "configuration",
            "specified",
            "in",
            "the",
            "login",
            "config",
            "property"
        ]
    },
    {
        "id": 569,
        "code": "\tprotected LoginContext createLoginContext(CallbackHandler handler) throws LoginException {\n\t\treturn new LoginContext(getLoginContextName(), null, handler, getConfiguration());\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "login",
            "context",
            "using",
            "the",
            "configuration",
            "that",
            "was",
            "specified",
            "in",
            "set",
            "configuration",
            "configuration"
        ]
    },
    {
        "id": 570,
        "code": "\tpublic void setConfiguration(Configuration configuration) {\n\t\tthis.configuration = configuration;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "configuration",
            "to",
            "use",
            "for",
            "authentication"
        ]
    },
    {
        "id": 571,
        "code": "\tprotected void configureJaas(Resource loginConfig) throws IOException {\n\t\tconfigureJaasUsingLoop();\n\t\tif (this.refreshConfigurationOnStartup) {\n\t\t\t\n\t\t\tConfiguration.getConfiguration().refresh();\n\t\t}\n\t}",
        "summary_tokens": [
            "hook",
            "method",
            "for",
            "configuring",
            "jaas"
        ]
    },
    {
        "id": 572,
        "code": "\tprivate void configureJaasUsingLoop() throws IOException {\n\t\tString loginConfigUrl = convertLoginConfigToUrl();\n\t\tboolean alreadySet = false;\n\t\tint n = 1;\n\t\tfinal String prefix = \"login.config.url.\";\n\t\tString existing;\n\t\twhile ((existing = Security.getProperty(prefix + n)) != null) {\n\t\t\talreadySet = existing.equals(loginConfigUrl);\n\t\t\tif (alreadySet) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tn++;\n\t\t}\n\t\tif (!alreadySet) {\n\t\t\tString key = prefix + n;\n\t\t\tlog.debug(LogMessage.format(\"Setting security property [%s] to: %s\", key, loginConfigUrl));\n\t\t\tSecurity.setProperty(key, loginConfigUrl);\n\t\t}\n\t}",
        "summary_tokens": [
            "loops",
            "through",
            "the",
            "login"
        ]
    },
    {
        "id": 573,
        "code": "\tprotected void publishFailureEvent(UsernamePasswordAuthenticationToken token, AuthenticationException ase) {\n\t\t\n\t\tgetApplicationEventPublisher().publishEvent(new JaasAuthenticationFailedEvent(token, ase));\n\t}",
        "summary_tokens": [
            "publishes",
            "the",
            "jaas",
            "authentication",
            "failed",
            "event"
        ]
    },
    {
        "id": 574,
        "code": "\tpublic void setLoginConfig(Resource loginConfig) {\n\t\tthis.loginConfig = loginConfig;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "jaas",
            "login",
            "configuration",
            "file"
        ]
    },
    {
        "id": 575,
        "code": "\tpublic void setRefreshConfigurationOnStartup(boolean refresh) {\n\t\tthis.refreshConfigurationOnStartup = refresh;\n\t}",
        "summary_tokens": [
            "if",
            "set",
            "a",
            "call",
            "to",
            "configuration",
            "refresh",
            "will",
            "be",
            "made",
            "by",
            "configure",
            "jaas",
            "resource",
            "method"
        ]
    },
    {
        "id": 576,
        "code": "\tpublic void handle(Callback callback, Authentication authentication) {\n\t\tif (callback instanceof NameCallback) {\n\t\t\t((NameCallback) callback).setName(getUserName(authentication));\n\t\t}\n\t}",
        "summary_tokens": [
            "if",
            "the",
            "callback",
            "passed",
            "to",
            "the",
            "handle",
            "method",
            "is",
            "an",
            "instance",
            "of",
            "name",
            "callback",
            "the",
            "jaas",
            "name",
            "callback",
            "handler",
            "will",
            "call",
            "callback"
        ]
    },
    {
        "id": 577,
        "code": "\tpublic void handle(Callback callback, Authentication auth) {\n\t\tif (callback instanceof PasswordCallback) {\n\t\t\t((PasswordCallback) callback).setPassword(auth.getCredentials().toString().toCharArray());\n\t\t}\n\t}",
        "summary_tokens": [
            "if",
            "the",
            "callback",
            "passed",
            "to",
            "the",
            "handle",
            "method",
            "is",
            "an",
            "instance",
            "of",
            "password",
            "callback",
            "the",
            "jaas",
            "password",
            "callback",
            "handler",
            "will",
            "call",
            "callback"
        ]
    },
    {
        "id": 578,
        "code": "\tpublic boolean abort() {\n\t\tif (this.authen == null) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.authen = null;\n\t\treturn true;\n\t}",
        "summary_tokens": [
            "abort",
            "the",
            "authentication",
            "process",
            "by",
            "forgetting",
            "the",
            "spring",
            "security",
            "code",
            "authentication",
            "code"
        ]
    },
    {
        "id": 579,
        "code": "\tpublic boolean commit() {\n\t\tif (this.authen == null) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.subject.getPrincipals().add(this.authen);\n\t\treturn true;\n\t}",
        "summary_tokens": [
            "authenticate",
            "the",
            "code",
            "subject",
            "code",
            "phase",
            "two",
            "by",
            "adding",
            "the",
            "spring",
            "security",
            "code",
            "authentication",
            "code",
            "to",
            "the",
            "code",
            "subject",
            "code",
            "s",
            "principals"
        ]
    },
    {
        "id": 580,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n\t\tAssert.notNull(securityContextHolderStrategy, \"securityContextHolderStrategy cannot be null\");\n\t\tthis.securityContextHolderStrategy = securityContextHolderStrategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 581,
        "code": "\tpublic void initialize(Subject subject, CallbackHandler callbackHandler, Map sharedState, Map options) {\n\t\tthis.subject = subject;\n\t\tif (options != null) {\n\t\t\tthis.ignoreMissingAuthentication = \"true\".equals(options.get(\"ignoreMissingAuthentication\"));\n\t\t}\n\t}",
        "summary_tokens": [
            "initialize",
            "this",
            "code",
            "login",
            "module",
            "code"
        ]
    },
    {
        "id": 582,
        "code": "\tpublic boolean login() throws LoginException {\n\t\tthis.authen = this.securityContextHolderStrategy.getContext().getAuthentication();\n\t\tif (this.authen != null) {\n\t\t\treturn true;\n\t\t}\n\t\tString msg = \"Login cannot complete, authentication not found in security context\";\n\t\tif (!this.ignoreMissingAuthentication) {\n\t\t\tthrow new LoginException(msg);\n\t\t}\n\t\tlog.warn(msg);\n\t\treturn false;\n\t}",
        "summary_tokens": [
            "authenticate",
            "the",
            "code",
            "subject",
            "code",
            "phase",
            "one",
            "by",
            "extracting",
            "the",
            "spring",
            "security",
            "code",
            "authentication",
            "code",
            "from",
            "the",
            "current",
            "code",
            "security",
            "context",
            "code"
        ]
    },
    {
        "id": 583,
        "code": "\tpublic boolean logout() {\n\t\tif (this.authen == null) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.subject.getPrincipals().remove(this.authen);\n\t\tthis.authen = null;\n\t\treturn true;\n\t}",
        "summary_tokens": [
            "log",
            "out",
            "the",
            "code",
            "subject",
            "code"
        ]
    },
    {
        "id": 584,
        "code": "\tpublic Authentication getAuthentication() {\n\t\treturn (Authentication) this.source;\n\t}",
        "summary_tokens": [
            "pre",
            "casted",
            "method",
            "that",
            "returns",
            "the",
            "source",
            "of",
            "the",
            "event"
        ]
    },
    {
        "id": 585,
        "code": "",
        "summary_tokens": [
            "does",
            "nothing",
            "but",
            "required",
            "for",
            "jdk",
            "0"
        ]
    },
    {
        "id": 586,
        "code": "\tpublic void setTrustResolver(AuthenticationTrustResolver trustResolver) {\n\t\tthis.authorizationStrategy.setTrustResolver(trustResolver);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "authentication",
            "trust",
            "resolver",
            "to",
            "be",
            "used"
        ]
    },
    {
        "id": 587,
        "code": "\tpublic static <T> AuthenticatedAuthorizationManager<T> authenticated() {\n\t\treturn new AuthenticatedAuthorizationManager<>();\n\t}",
        "summary_tokens": [
            "creates",
            "an",
            "instance",
            "of",
            "authenticated",
            "authorization",
            "manager"
        ]
    },
    {
        "id": 588,
        "code": "\tpublic static <T> AuthenticatedAuthorizationManager<T> fullyAuthenticated() {\n\t\treturn new AuthenticatedAuthorizationManager<>(new FullyAuthenticatedAuthorizationStrategy());\n\t}",
        "summary_tokens": [
            "creates",
            "an",
            "instance",
            "of",
            "authenticated",
            "authorization",
            "manager",
            "that",
            "determines",
            "if",
            "the",
            "authentication",
            "is",
            "authenticated",
            "without",
            "using",
            "remember",
            "me"
        ]
    },
    {
        "id": 589,
        "code": "\tpublic static <T> AuthenticatedAuthorizationManager<T> rememberMe() {\n\t\treturn new AuthenticatedAuthorizationManager<>(new RememberMeAuthorizationStrategy());\n\t}",
        "summary_tokens": [
            "creates",
            "an",
            "instance",
            "of",
            "authenticated",
            "authorization",
            "manager",
            "that",
            "determines",
            "if",
            "the",
            "authentication",
            "is",
            "authenticated",
            "using",
            "remember",
            "me"
        ]
    },
    {
        "id": 590,
        "code": "\tpublic static <T> AuthenticatedAuthorizationManager<T> anonymous() {\n\t\treturn new AuthenticatedAuthorizationManager<>(new AnonymousAuthorizationStrategy());\n\t}",
        "summary_tokens": [
            "creates",
            "an",
            "instance",
            "of",
            "authenticated",
            "authorization",
            "manager",
            "that",
            "determines",
            "if",
            "the",
            "authentication",
            "is",
            "anonymous"
        ]
    },
    {
        "id": 591,
        "code": "\tpublic AuthorizationDecision check(Supplier<Authentication> authentication, T object) {\n\t\tboolean granted = this.authorizationStrategy.isGranted(authentication.get());\n\t\treturn new AuthorizationDecision(granted);\n\t}",
        "summary_tokens": [
            "determines",
            "if",
            "the",
            "current",
            "user",
            "is",
            "authorized",
            "according",
            "to",
            "the",
            "given",
            "strategy"
        ]
    },
    {
        "id": 592,
        "code": "\tprivate boolean isNotAnonymous(Authentication authentication) {\n\t\treturn !this.authTrustResolver.isAnonymous(authentication);\n\t}",
        "summary_tokens": [
            "verify",
            "via",
            "authentication",
            "trust",
            "resolver",
            "that",
            "the",
            "given",
            "authentication",
            "is",
            "not",
            "anonymous"
        ]
    },
    {
        "id": 593,
        "code": "\tpublic static <T> AuthenticatedReactiveAuthorizationManager<T> authenticated() {\n\t\treturn new AuthenticatedReactiveAuthorizationManager<>();\n\t}",
        "summary_tokens": [
            "gets",
            "an",
            "instance",
            "of",
            "authenticated",
            "reactive",
            "authorization",
            "manager",
            "t"
        ]
    },
    {
        "id": 594,
        "code": "\tpublic void setRoleHierarchy(RoleHierarchy roleHierarchy) {\n\t\tAssert.notNull(roleHierarchy, \"roleHierarchy cannot be null\");\n\t\tthis.roleHierarchy = roleHierarchy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "role",
            "hierarchy",
            "to",
            "be",
            "used"
        ]
    },
    {
        "id": 595,
        "code": "\tpublic static <T> AuthorityAuthorizationManager<T> hasRole(String role) {\n\t\tAssert.notNull(role, \"role cannot be null\");\n\t\treturn hasAuthority(ROLE_PREFIX + role);\n\t}",
        "summary_tokens": [
            "creates",
            "an",
            "instance",
            "of",
            "authority",
            "authorization",
            "manager",
            "with",
            "the",
            "provided",
            "authority"
        ]
    },
    {
        "id": 596,
        "code": "\tpublic static <T> AuthorityAuthorizationManager<T> hasAuthority(String authority) {\n\t\tAssert.notNull(authority, \"authority cannot be null\");\n\t\treturn new AuthorityAuthorizationManager<>(authority);\n\t}",
        "summary_tokens": [
            "creates",
            "an",
            "instance",
            "of",
            "authority",
            "authorization",
            "manager",
            "with",
            "the",
            "provided",
            "authority"
        ]
    },
    {
        "id": 597,
        "code": "\tpublic static <T> AuthorityAuthorizationManager<T> hasAnyRole(String rolePrefix, String[] roles) {\n\t\tAssert.notNull(rolePrefix, \"rolePrefix cannot be null\");\n\t\tAssert.notEmpty(roles, \"roles cannot be empty\");\n\t\tAssert.noNullElements(roles, \"roles cannot contain null values\");\n\t\treturn hasAnyAuthority(toNamedRolesArray(rolePrefix, roles));\n\t}",
        "summary_tokens": [
            "creates",
            "an",
            "instance",
            "of",
            "authority",
            "authorization",
            "manager",
            "with",
            "the",
            "provided",
            "authorities"
        ]
    },
    {
        "id": 598,
        "code": "\tpublic static <T> AuthorityAuthorizationManager<T> hasAnyAuthority(String... authorities) {\n\t\tAssert.notEmpty(authorities, \"authorities cannot be empty\");\n\t\tAssert.noNullElements(authorities, \"authorities cannot contain null values\");\n\t\treturn new AuthorityAuthorizationManager<>(authorities);\n\t}",
        "summary_tokens": [
            "creates",
            "an",
            "instance",
            "of",
            "authority",
            "authorization",
            "manager",
            "with",
            "the",
            "provided",
            "authorities"
        ]
    },
    {
        "id": 599,
        "code": "\tpublic AuthorizationDecision check(Supplier<Authentication> authentication, T object) {\n\t\tboolean granted = isGranted(authentication.get());\n\t\treturn new AuthorityAuthorizationDecision(granted, this.authorities);\n\t}",
        "summary_tokens": [
            "determines",
            "if",
            "the",
            "current",
            "user",
            "is",
            "authorized",
            "by",
            "evaluating",
            "if",
            "the",
            "authentication",
            "contains",
            "a",
            "specified",
            "authority"
        ]
    },
    {
        "id": 600,
        "code": "\tpublic static <T> AuthorityReactiveAuthorizationManager<T> hasAuthority(String authority) {\n\t\tAssert.notNull(authority, \"authority cannot be null\");\n\t\treturn new AuthorityReactiveAuthorizationManager<>(authority);\n\t}",
        "summary_tokens": [
            "creates",
            "an",
            "instance",
            "of",
            "authority",
            "reactive",
            "authorization",
            "manager",
            "with",
            "the",
            "provided",
            "authority"
        ]
    },
    {
        "id": 601,
        "code": "\tpublic static <T> AuthorityReactiveAuthorizationManager<T> hasAnyAuthority(String... authorities) {\n\t\tAssert.notNull(authorities, \"authorities cannot be null\");\n\t\tfor (String authority : authorities) {\n\t\t\tAssert.notNull(authority, \"authority cannot be null\");\n\t\t}\n\t\treturn new AuthorityReactiveAuthorizationManager<>(authorities);\n\t}",
        "summary_tokens": [
            "creates",
            "an",
            "instance",
            "of",
            "authority",
            "reactive",
            "authorization",
            "manager",
            "with",
            "the",
            "provided",
            "authorities"
        ]
    },
    {
        "id": 602,
        "code": "\tpublic static <T> AuthorityReactiveAuthorizationManager<T> hasRole(String role) {\n\t\tAssert.notNull(role, \"role cannot be null\");\n\t\treturn hasAuthority(\"ROLE_\" + role);\n\t}",
        "summary_tokens": [
            "creates",
            "an",
            "instance",
            "of",
            "authority",
            "reactive",
            "authorization",
            "manager",
            "with",
            "the",
            "provided",
            "authority"
        ]
    },
    {
        "id": 603,
        "code": "\tpublic static <T> AuthorityReactiveAuthorizationManager<T> hasAnyRole(String... roles) {\n\t\tAssert.notNull(roles, \"roles cannot be null\");\n\t\tfor (String role : roles) {\n\t\t\tAssert.notNull(role, \"role cannot be null\");\n\t\t}\n\t\treturn hasAnyAuthority(toNamedRolesArray(roles));\n\t}",
        "summary_tokens": [
            "creates",
            "an",
            "instance",
            "of",
            "authority",
            "reactive",
            "authorization",
            "manager",
            "with",
            "the",
            "provided",
            "authorities"
        ]
    },
    {
        "id": 604,
        "code": "\tdefault void verify(Supplier<Authentication> authentication, T object) {\n\t\tAuthorizationDecision decision = check(authentication, object);\n\t\tif (decision != null && !decision.isGranted()) {\n\t\t\tthrow new AccessDeniedException(\"Access Denied\");\n\t\t}\n\t}",
        "summary_tokens": [
            "determines",
            "if",
            "access",
            "should",
            "be",
            "granted",
            "for",
            "a",
            "specific",
            "authentication",
            "and",
            "object"
        ]
    },
    {
        "id": 605,
        "code": "\tdefault Mono<Void> verify(Mono<Authentication> authentication, T object) {\n\t\t\n\t\treturn check(authentication, object)\n\t\t\t\t.filter(AuthorizationDecision::isGranted)\n\t\t\t\t.switchIfEmpty(Mono.defer(() -> Mono.error(new AccessDeniedException(\"Access Denied\"))))\n\t\t\t\t.flatMap((decision) -> Mono.empty());\n\t\t\n\t}",
        "summary_tokens": [
            "determines",
            "if",
            "access",
            "should",
            "be",
            "granted",
            "for",
            "a",
            "specific",
            "authentication",
            "and",
            "object",
            "authentication",
            "the",
            "authentication",
            "to",
            "check",
            "object",
            "the",
            "object",
            "to",
            "check",
            "an",
            "empty",
            "mono",
            "if",
            "authorization",
            "is",
            "granted",
            "or",
            "a",
            "mono",
            "error",
            "if",
            "access",
            "is",
            "denied"
        ]
    },
    {
        "id": 606,
        "code": "\tfinal AuthorizationManager<MethodInvocation> getManager(MethodInvocation methodInvocation) {\n\t\tMethod method = methodInvocation.getMethod();\n\t\tObject target = methodInvocation.getThis();\n\t\tClass<?> targetClass = (target != null) ? target.getClass() : null;\n\t\tMethodClassKey cacheKey = new MethodClassKey(method, targetClass);\n\t\treturn this.cachedManagers.computeIfAbsent(cacheKey, (k) -> resolveManager(method, targetClass));\n\t}",
        "summary_tokens": [
            "returns",
            "an",
            "authorization",
            "manager",
            "for",
            "the",
            "method",
            "invocation"
        ]
    },
    {
        "id": 607,
        "code": "\tfinal T getAttribute(Method method, Class<?> targetClass) {\n\t\tMethodClassKey cacheKey = new MethodClassKey(method, targetClass);\n\t\treturn this.cachedAttributes.computeIfAbsent(cacheKey, (k) -> resolveAttribute(method, targetClass));\n\t}",
        "summary_tokens": [
            "returns",
            "an",
            "expression",
            "attribute",
            "for",
            "the",
            "method",
            "and",
            "the",
            "target",
            "class"
        ]
    },
    {
        "id": 608,
        "code": "\tstatic <A extends Annotation> A findUniqueAnnotation(Class<?> type, Class<A> annotationType) {\n\t\tMergedAnnotations mergedAnnotations = MergedAnnotations.from(type,\n\t\t\t\tMergedAnnotations.SearchStrategy.TYPE_HIERARCHY, RepeatableContainers.none());\n\t\tif (hasDuplicate(mergedAnnotations, annotationType)) {\n\t\t\tthrow new AnnotationConfigurationException(\"Found more than one annotation of type \" + annotationType\n\t\t\t\t\t+ \" attributed to \" + type\n\t\t\t\t\t+ \" Please remove the duplicate annotations and publish a bean to handle your authorization logic.\");\n\t\t}\n\t\treturn AnnotationUtils.findAnnotation(type, annotationType);\n\t}",
        "summary_tokens": [
            "perform",
            "an",
            "exhaustive",
            "search",
            "on",
            "the",
            "type",
            "hierarchy",
            "of",
            "the",
            "given",
            "class",
            "for",
            "the",
            "annotation",
            "of",
            "type",
            "annotation",
            "type",
            "including",
            "any",
            "annotations",
            "using",
            "annotation",
            "type",
            "as",
            "a",
            "meta",
            "annotation"
        ]
    },
    {
        "id": 609,
        "code": "\tpublic static AuthorizationManagerAfterMethodInterceptor postAuthorize(\n\t\t\tPostAuthorizeAuthorizationManager authorizationManager) {\n\t\tAuthorizationManagerAfterMethodInterceptor interceptor = new AuthorizationManagerAfterMethodInterceptor(\n\t\t\t\tAuthorizationMethodPointcuts.forAnnotations(PostAuthorize.class), authorizationManager);\n\t\tinterceptor.setOrder(500);\n\t\treturn interceptor;\n\t}",
        "summary_tokens": [
            "creates",
            "an",
            "interceptor",
            "for",
            "the",
            "post",
            "authorize",
            "annotation",
            "authorization",
            "manager",
            "the",
            "post",
            "authorize",
            "authorization",
            "manager",
            "to",
            "use",
            "the",
            "interceptor"
        ]
    },
    {
        "id": 610,
        "code": "\tpublic Object invoke(MethodInvocation mi) throws Throwable {\n\t\tObject result = mi.proceed();\n\t\tattemptAuthorization(mi, result);\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "determine",
            "if",
            "an",
            "authentication",
            "has",
            "access",
            "to",
            "the",
            "method",
            "invocation",
            "using",
            "the",
            "authorization",
            "manager"
        ]
    },
    {
        "id": 611,
        "code": "\tpublic void setAuthorizationEventPublisher(AuthorizationEventPublisher eventPublisher) {\n\t\tAssert.notNull(eventPublisher, \"eventPublisher cannot be null\");\n\t\tthis.eventPublisher = eventPublisher;\n\t}",
        "summary_tokens": [
            "use",
            "this",
            "authorization",
            "event",
            "publisher",
            "to",
            "publish",
            "the",
            "authorization",
            "manager",
            "result"
        ]
    },
    {
        "id": 612,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy strategy) {\n\t\tthis.authentication = getAuthentication(strategy);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 613,
        "code": "\tpublic static AuthorizationManagerAfterReactiveMethodInterceptor postAuthorize(\n\t\t\tReactiveAuthorizationManager<MethodInvocationResult> authorizationManager) {\n\t\tAuthorizationManagerAfterReactiveMethodInterceptor interceptor = new AuthorizationManagerAfterReactiveMethodInterceptor(\n\t\t\t\tAuthorizationMethodPointcuts.forAnnotations(PostAuthorize.class), authorizationManager);\n\t\tinterceptor.setOrder(AuthorizationInterceptorsOrder.POST_AUTHORIZE.getOrder());\n\t\treturn interceptor;\n\t}",
        "summary_tokens": [
            "creates",
            "an",
            "instance",
            "for",
            "the",
            "post",
            "authorize",
            "annotation"
        ]
    },
    {
        "id": 614,
        "code": "\tpublic Object invoke(MethodInvocation mi) throws Throwable {\n\t\tMethod method = mi.getMethod();\n\t\tClass<?> type = method.getReturnType();\n\t\tAssert.state(Publisher.class.isAssignableFrom(type),\n\t\t\t\t() -> String.format(\"The returnType %s on %s must return an instance of org.reactivestreams.Publisher \"\n\t\t\t\t\t\t+ \"(for example, a Mono or Flux) in order to support Reactor Context\", type, method));\n\t\tMono<Authentication> authentication = ReactiveAuthenticationUtils.getAuthentication();\n\t\tFunction<Object, Mono<?>> postAuthorize = (result) -> postAuthorize(authentication, mi, result);\n\t\tReactiveAdapter adapter = ReactiveAdapterRegistry.getSharedInstance().getAdapter(type);\n\t\tPublisher<?> publisher = ReactiveMethodInvocationUtils.proceed(mi);\n\t\tif (isMultiValue(type, adapter)) {\n\t\t\tFlux<?> flux = Flux.from(publisher).flatMap(postAuthorize);\n\t\t\treturn (adapter != null) ? adapter.fromPublisher(flux) : flux;\n\t\t}\n\t\tMono<?> mono = Mono.from(publisher).flatMap(postAuthorize);\n\t\treturn (adapter != null) ? adapter.fromPublisher(mono) : mono;\n\t}",
        "summary_tokens": [
            "determines",
            "if",
            "an",
            "authentication",
            "has",
            "access",
            "to",
            "the",
            "returned",
            "object",
            "from",
            "the",
            "method",
            "invocation",
            "using",
            "the",
            "configured",
            "reactive",
            "authorization",
            "manager"
        ]
    },
    {
        "id": 615,
        "code": "\tpublic static AuthorizationManagerBeforeMethodInterceptor preAuthorize(\n\t\t\tPreAuthorizeAuthorizationManager authorizationManager) {\n\t\tAuthorizationManagerBeforeMethodInterceptor interceptor = new AuthorizationManagerBeforeMethodInterceptor(\n\t\t\t\tAuthorizationMethodPointcuts.forAnnotations(PreAuthorize.class), authorizationManager);\n\t\tinterceptor.setOrder(AuthorizationInterceptorsOrder.PRE_AUTHORIZE.getOrder());\n\t\treturn interceptor;\n\t}",
        "summary_tokens": [
            "creates",
            "an",
            "interceptor",
            "for",
            "the",
            "pre",
            "authorize",
            "annotation",
            "authorization",
            "manager",
            "the",
            "pre",
            "authorize",
            "authorization",
            "manager",
            "to",
            "use",
            "the",
            "interceptor"
        ]
    },
    {
        "id": 616,
        "code": "\tpublic static AuthorizationManagerBeforeMethodInterceptor secured(\n\t\t\tSecuredAuthorizationManager authorizationManager) {\n\t\tAuthorizationManagerBeforeMethodInterceptor interceptor = new AuthorizationManagerBeforeMethodInterceptor(\n\t\t\t\tAuthorizationMethodPointcuts.forAnnotations(Secured.class), authorizationManager);\n\t\tinterceptor.setOrder(AuthorizationInterceptorsOrder.SECURED.getOrder());\n\t\treturn interceptor;\n\t}",
        "summary_tokens": [
            "creates",
            "an",
            "interceptor",
            "for",
            "the",
            "secured",
            "annotation",
            "authorization",
            "manager",
            "the",
            "secured",
            "authorization",
            "manager",
            "to",
            "use",
            "the",
            "interceptor"
        ]
    },
    {
        "id": 617,
        "code": "\tpublic static AuthorizationManagerBeforeMethodInterceptor jsr250(Jsr250AuthorizationManager authorizationManager) {\n\t\tAuthorizationManagerBeforeMethodInterceptor interceptor = new AuthorizationManagerBeforeMethodInterceptor(\n\t\t\t\tAuthorizationMethodPointcuts.forAnnotations(RolesAllowed.class, DenyAll.class, PermitAll.class),\n\t\t\t\tauthorizationManager);\n\t\tinterceptor.setOrder(AuthorizationInterceptorsOrder.JSR250.getOrder());\n\t\treturn interceptor;\n\t}",
        "summary_tokens": [
            "creates",
            "an",
            "interceptor",
            "for",
            "the",
            "jsr",
            "0",
            "annotations",
            "authorization",
            "manager",
            "the",
            "jsr",
            "0",
            "authorization",
            "manager",
            "to",
            "use",
            "the",
            "interceptor"
        ]
    },
    {
        "id": 618,
        "code": "\tpublic Object invoke(MethodInvocation mi) throws Throwable {\n\t\tattemptAuthorization(mi);\n\t\treturn mi.proceed();\n\t}",
        "summary_tokens": [
            "determine",
            "if",
            "an",
            "authentication",
            "has",
            "access",
            "to",
            "the",
            "method",
            "invocation",
            "using",
            "the",
            "configured",
            "authorization",
            "manager"
        ]
    },
    {
        "id": 619,
        "code": "\tpublic void setAuthorizationEventPublisher(AuthorizationEventPublisher eventPublisher) {\n\t\tAssert.notNull(eventPublisher, \"eventPublisher cannot be null\");\n\t\tthis.eventPublisher = eventPublisher;\n\t}",
        "summary_tokens": [
            "use",
            "this",
            "authorization",
            "event",
            "publisher",
            "to",
            "publish",
            "the",
            "authorization",
            "manager",
            "result"
        ]
    },
    {
        "id": 620,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n\t\tthis.authentication = getAuthentication(securityContextHolderStrategy);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 621,
        "code": "\tpublic static AuthorizationManagerBeforeReactiveMethodInterceptor preAuthorize(\n\t\t\tReactiveAuthorizationManager<MethodInvocation> authorizationManager) {\n\t\tAuthorizationManagerBeforeReactiveMethodInterceptor interceptor = new AuthorizationManagerBeforeReactiveMethodInterceptor(\n\t\t\t\tAuthorizationMethodPointcuts.forAnnotations(PreAuthorize.class), authorizationManager);\n\t\tinterceptor.setOrder(AuthorizationInterceptorsOrder.PRE_AUTHORIZE.getOrder());\n\t\treturn interceptor;\n\t}",
        "summary_tokens": [
            "creates",
            "an",
            "instance",
            "for",
            "the",
            "pre",
            "authorize",
            "annotation"
        ]
    },
    {
        "id": 622,
        "code": "\tpublic Object invoke(MethodInvocation mi) throws Throwable {\n\t\tMethod method = mi.getMethod();\n\t\tClass<?> type = method.getReturnType();\n\t\tAssert.state(Publisher.class.isAssignableFrom(type),\n\t\t\t\t() -> String.format(\"The returnType %s on %s must return an instance of org.reactivestreams.Publisher \"\n\t\t\t\t\t\t+ \"(for example, a Mono or Flux) in order to support Reactor Context\", type, method));\n\t\tMono<Authentication> authentication = ReactiveAuthenticationUtils.getAuthentication();\n\t\tReactiveAdapter adapter = ReactiveAdapterRegistry.getSharedInstance().getAdapter(type);\n\t\tMono<Void> preAuthorize = this.authorizationManager.verify(authentication, mi);\n\t\tif (isMultiValue(type, adapter)) {\n\t\t\tPublisher<?> publisher = Flux.defer(() -> ReactiveMethodInvocationUtils.proceed(mi));\n\t\t\tFlux<?> result = preAuthorize.thenMany(publisher);\n\t\t\treturn (adapter != null) ? adapter.fromPublisher(result) : result;\n\t\t}\n\t\tMono<?> publisher = Mono.defer(() -> ReactiveMethodInvocationUtils.proceed(mi));\n\t\tMono<?> result = preAuthorize.then(publisher);\n\t\treturn (adapter != null) ? adapter.fromPublisher(result) : result;\n\t}",
        "summary_tokens": [
            "determines",
            "if",
            "an",
            "authentication",
            "has",
            "access",
            "to",
            "the",
            "method",
            "invocation",
            "using",
            "the",
            "configured",
            "reactive",
            "authorization",
            "manager"
        ]
    },
    {
        "id": 623,
        "code": "\tpublic void setRolePrefix(String rolePrefix) {\n\t\tAssert.notNull(rolePrefix, \"rolePrefix cannot be null\");\n\t\tthis.rolePrefix = rolePrefix;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "role",
            "prefix"
        ]
    },
    {
        "id": 624,
        "code": "\tpublic AuthorizationDecision check(Supplier<Authentication> authentication, MethodInvocation methodInvocation) {\n\t\tAuthorizationManager<MethodInvocation> delegate = this.registry.getManager(methodInvocation);\n\t\treturn delegate.check(authentication, methodInvocation);\n\t}",
        "summary_tokens": [
            "determine",
            "if",
            "an",
            "authentication",
            "has",
            "access",
            "to",
            "a",
            "method",
            "by",
            "evaluating",
            "the",
            "deny",
            "all",
            "permit",
            "all",
            "and",
            "roles",
            "allowed",
            "annotations",
            "that",
            "method",
            "invocation",
            "specifies"
        ]
    },
    {
        "id": 625,
        "code": "\tpublic void setExpressionHandler(SecurityExpressionHandler<MethodInvocation> expressionHandler) {\n\t\tAssert.notNull(expressionHandler, \"expressionHandler cannot be null\");\n\t\tthis.expressionHandler = expressionHandler;\n\t\tthis.expression = expressionHandler.getExpressionParser()\n\t\t\t\t.parseExpression(this.expression.getExpressionString());\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "expression",
            "handler",
            "to",
            "be",
            "used"
        ]
    },
    {
        "id": 626,
        "code": "\tpublic AuthorizationDecision check(Supplier<Authentication> authentication, MethodInvocation context) {\n\t\tEvaluationContext ctx = this.expressionHandler.createEvaluationContext(authentication, context);\n\t\tboolean granted = ExpressionUtils.evaluateAsBoolean(this.expression, ctx);\n\t\treturn new ExpressionAuthorizationDecision(granted, this.expression);\n\t}",
        "summary_tokens": [
            "determines",
            "the",
            "access",
            "by",
            "evaluating",
            "the",
            "provided",
            "expression"
        ]
    },
    {
        "id": 627,
        "code": "\tpublic MethodInvocation getMethodInvocation() {\n\t\treturn this.methodInvocation;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "already",
            "invoked",
            "method",
            "invocation",
            "the",
            "already",
            "invoked",
            "method",
            "invocation"
        ]
    },
    {
        "id": 628,
        "code": "\tpublic Object getResult() {\n\t\treturn this.result;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "result",
            "of",
            "the",
            "already",
            "invoked",
            "method",
            "invocation",
            "the",
            "result"
        ]
    },
    {
        "id": 629,
        "code": "\tpublic void setExpressionHandler(MethodSecurityExpressionHandler expressionHandler) {\n\t\tthis.registry = new PostAuthorizeExpressionAttributeRegistry(expressionHandler);\n\t}",
        "summary_tokens": [
            "use",
            "this",
            "the",
            "method",
            "security",
            "expression",
            "handler"
        ]
    },
    {
        "id": 630,
        "code": "\tpublic AuthorizationDecision check(Supplier<Authentication> authentication, MethodInvocationResult mi) {\n\t\tExpressionAttribute attribute = this.registry.getAttribute(mi.getMethodInvocation());\n\t\tif (attribute == ExpressionAttribute.NULL_ATTRIBUTE) {\n\t\t\treturn null;\n\t\t}\n\t\tMethodSecurityExpressionHandler expressionHandler = this.registry.getExpressionHandler();\n\t\tEvaluationContext ctx = expressionHandler.createEvaluationContext(authentication, mi.getMethodInvocation());\n\t\texpressionHandler.setReturnObject(mi.getResult(), ctx);\n\t\tboolean granted = ExpressionUtils.evaluateAsBoolean(attribute.getExpression(), ctx);\n\t\treturn new ExpressionAuthorizationDecision(granted, attribute.getExpression());\n\t}",
        "summary_tokens": [
            "determine",
            "if",
            "an",
            "authentication",
            "has",
            "access",
            "to",
            "the",
            "returned",
            "object",
            "by",
            "evaluating",
            "the",
            "post",
            "authorize",
            "annotation",
            "that",
            "the",
            "method",
            "invocation",
            "specifies"
        ]
    },
    {
        "id": 631,
        "code": "\tpublic Mono<AuthorizationDecision> check(Mono<Authentication> authentication, MethodInvocationResult result) {\n\t\tMethodInvocation mi = result.getMethodInvocation();\n\t\tExpressionAttribute attribute = this.registry.getAttribute(mi);\n\t\tif (attribute == ExpressionAttribute.NULL_ATTRIBUTE) {\n\t\t\treturn Mono.empty();\n\t\t}\n\t\tMethodSecurityExpressionHandler expressionHandler = this.registry.getExpressionHandler();\n\t\t\n\t\treturn authentication\n\t\t\t\t.map((auth) -> expressionHandler.createEvaluationContext(auth, mi))\n\t\t\t\t.doOnNext((ctx) -> expressionHandler.setReturnObject(result.getResult(), ctx))\n\t\t\t\t.flatMap((ctx) -> ReactiveExpressionUtils.evaluateAsBoolean(attribute.getExpression(), ctx))\n\t\t\t\t.map((granted) -> new ExpressionAttributeAuthorizationDecision(granted, attribute));\n\t\t\n\t}",
        "summary_tokens": [
            "determines",
            "if",
            "an",
            "authentication",
            "has",
            "access",
            "to",
            "the",
            "returned",
            "object",
            "from",
            "the",
            "method",
            "invocation",
            "by",
            "evaluating",
            "an",
            "expression",
            "from",
            "the",
            "post",
            "authorize",
            "annotation"
        ]
    },
    {
        "id": 632,
        "code": "\tpublic void setExpressionHandler(MethodSecurityExpressionHandler expressionHandler) {\n\t\tthis.registry = new PostFilterExpressionAttributeRegistry(expressionHandler);\n\t}",
        "summary_tokens": [
            "use",
            "this",
            "method",
            "security",
            "expression",
            "handler"
        ]
    },
    {
        "id": 633,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy strategy) {\n\t\tthis.authentication = getAuthentication(strategy);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 634,
        "code": "\tpublic Object invoke(MethodInvocation mi) throws Throwable {\n\t\tObject returnedObject = mi.proceed();\n\t\tExpressionAttribute attribute = this.registry.getAttribute(mi);\n\t\tif (attribute == ExpressionAttribute.NULL_ATTRIBUTE) {\n\t\t\treturn returnedObject;\n\t\t}\n\t\tMethodSecurityExpressionHandler expressionHandler = this.registry.getExpressionHandler();\n\t\tEvaluationContext ctx = expressionHandler.createEvaluationContext(this.authentication, mi);\n\t\treturn expressionHandler.filter(returnedObject, attribute.getExpression(), ctx);\n\t}",
        "summary_tokens": [
            "filter",
            "a",
            "returned",
            "object",
            "using",
            "the",
            "post",
            "filter",
            "annotation",
            "that",
            "the",
            "method",
            "invocation",
            "specifies"
        ]
    },
    {
        "id": 635,
        "code": "\tpublic Object invoke(MethodInvocation mi) throws Throwable {\n\t\tExpressionAttribute attribute = this.registry.getAttribute(mi);\n\t\tif (attribute == ExpressionAttribute.NULL_ATTRIBUTE) {\n\t\t\treturn ReactiveMethodInvocationUtils.proceed(mi);\n\t\t}\n\t\tMono<EvaluationContext> toInvoke = ReactiveAuthenticationUtils.getAuthentication()\n\t\t\t\t.map((auth) -> this.registry.getExpressionHandler().createEvaluationContext(auth, mi));\n\t\tMethod method = mi.getMethod();\n\t\tClass<?> type = method.getReturnType();\n\t\tAssert.state(Publisher.class.isAssignableFrom(type),\n\t\t\t\t() -> String.format(\"The parameter type %s on %s must be an instance of org.reactivestreams.Publisher \"\n\t\t\t\t\t\t+ \"(for example, a Mono or Flux) in order to support Reactor Context\", type, method));\n\t\tReactiveAdapter adapter = ReactiveAdapterRegistry.getSharedInstance().getAdapter(type);\n\t\tif (isMultiValue(type, adapter)) {\n\t\t\tPublisher<?> publisher = Flux.defer(() -> ReactiveMethodInvocationUtils.proceed(mi));\n\t\t\tFlux<?> flux = toInvoke.flatMapMany((ctx) -> filterMultiValue(publisher, ctx, attribute));\n\t\t\treturn (adapter != null) ? adapter.fromPublisher(flux) : flux;\n\t\t}\n\t\tPublisher<?> publisher = Mono.defer(() -> ReactiveMethodInvocationUtils.proceed(mi));\n\t\tMono<?> mono = toInvoke.flatMap((ctx) -> filterSingleValue(publisher, ctx, attribute));\n\t\treturn (adapter != null) ? adapter.fromPublisher(mono) : mono;\n\t}",
        "summary_tokens": [
            "filters",
            "the",
            "returned",
            "object",
            "from",
            "the",
            "method",
            "invocation",
            "by",
            "evaluating",
            "an",
            "expression",
            "from",
            "the",
            "post",
            "filter",
            "annotation"
        ]
    },
    {
        "id": 636,
        "code": "\tpublic void setExpressionHandler(MethodSecurityExpressionHandler expressionHandler) {\n\t\tthis.registry = new PreAuthorizeExpressionAttributeRegistry(expressionHandler);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "method",
            "security",
            "expression",
            "handler"
        ]
    },
    {
        "id": 637,
        "code": "\tpublic AuthorizationDecision check(Supplier<Authentication> authentication, MethodInvocation mi) {\n\t\tExpressionAttribute attribute = this.registry.getAttribute(mi);\n\t\tif (attribute == ExpressionAttribute.NULL_ATTRIBUTE) {\n\t\t\treturn null;\n\t\t}\n\t\tEvaluationContext ctx = this.registry.getExpressionHandler().createEvaluationContext(authentication, mi);\n\t\tboolean granted = ExpressionUtils.evaluateAsBoolean(attribute.getExpression(), ctx);\n\t\treturn new ExpressionAuthorizationDecision(granted, attribute.getExpression());\n\t}",
        "summary_tokens": [
            "determine",
            "if",
            "an",
            "authentication",
            "has",
            "access",
            "to",
            "a",
            "method",
            "by",
            "evaluating",
            "an",
            "expression",
            "from",
            "the",
            "pre",
            "authorize",
            "annotation",
            "that",
            "the",
            "method",
            "invocation",
            "specifies"
        ]
    },
    {
        "id": 638,
        "code": "\tMethodSecurityExpressionHandler getExpressionHandler() {\n\t\treturn this.expressionHandler;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "method",
            "security",
            "expression",
            "handler"
        ]
    },
    {
        "id": 639,
        "code": "\tpublic Mono<AuthorizationDecision> check(Mono<Authentication> authentication, MethodInvocation mi) {\n\t\tExpressionAttribute attribute = this.registry.getAttribute(mi);\n\t\tif (attribute == ExpressionAttribute.NULL_ATTRIBUTE) {\n\t\t\treturn Mono.empty();\n\t\t}\n\t\t\n\t\treturn authentication\n\t\t\t\t.map((auth) -> this.registry.getExpressionHandler().createEvaluationContext(auth, mi))\n\t\t\t\t.flatMap((ctx) -> ReactiveExpressionUtils.evaluateAsBoolean(attribute.getExpression(), ctx))\n\t\t\t\t.map((granted) -> new ExpressionAttributeAuthorizationDecision(granted, attribute));\n\t\t\n\t}",
        "summary_tokens": [
            "determines",
            "if",
            "an",
            "authentication",
            "has",
            "access",
            "to",
            "the",
            "method",
            "invocation",
            "by",
            "evaluating",
            "an",
            "expression",
            "from",
            "the",
            "pre",
            "authorize",
            "annotation"
        ]
    },
    {
        "id": 640,
        "code": "\tpublic void setExpressionHandler(MethodSecurityExpressionHandler expressionHandler) {\n\t\tthis.registry = new PreFilterExpressionAttributeRegistry(expressionHandler);\n\t}",
        "summary_tokens": [
            "use",
            "this",
            "method",
            "security",
            "expression",
            "handler",
            "expression",
            "handler",
            "the",
            "method",
            "security",
            "expression",
            "handler",
            "to",
            "use"
        ]
    },
    {
        "id": 641,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy strategy) {\n\t\tthis.authentication = getAuthentication(strategy);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 642,
        "code": "\tpublic Object invoke(MethodInvocation mi) throws Throwable {\n\t\tPreFilterExpressionAttributeRegistry.PreFilterExpressionAttribute attribute = this.registry.getAttribute(mi);\n\t\tif (attribute == PreFilterExpressionAttributeRegistry.PreFilterExpressionAttribute.NULL_ATTRIBUTE) {\n\t\t\treturn mi.proceed();\n\t\t}\n\t\tMethodSecurityExpressionHandler expressionHandler = this.registry.getExpressionHandler();\n\t\tEvaluationContext ctx = expressionHandler.createEvaluationContext(this.authentication, mi);\n\t\tObject filterTarget = findFilterTarget(attribute.getFilterTarget(), ctx, mi);\n\t\texpressionHandler.filter(filterTarget, attribute.getExpression(), ctx);\n\t\treturn mi.proceed();\n\t}",
        "summary_tokens": [
            "filter",
            "the",
            "method",
            "argument",
            "specified",
            "in",
            "the",
            "pre",
            "filter",
            "annotation",
            "that",
            "method",
            "invocation",
            "specifies"
        ]
    },
    {
        "id": 643,
        "code": "\tpublic void setParameterNameDiscoverer(ParameterNameDiscoverer parameterNameDiscoverer) {\n\t\tAssert.notNull(parameterNameDiscoverer, \"parameterNameDiscoverer cannot be null\");\n\t\tthis.parameterNameDiscoverer = parameterNameDiscoverer;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "parameter",
            "name",
            "discoverer"
        ]
    },
    {
        "id": 644,
        "code": "\tpublic Object invoke(MethodInvocation mi) throws Throwable {\n\t\tPreFilterExpressionAttributeRegistry.PreFilterExpressionAttribute attribute = this.registry.getAttribute(mi);\n\t\tif (attribute == PreFilterExpressionAttributeRegistry.PreFilterExpressionAttribute.NULL_ATTRIBUTE) {\n\t\t\treturn ReactiveMethodInvocationUtils.proceed(mi);\n\t\t}\n\t\tFilterTarget filterTarget = findFilterTarget(attribute.getFilterTarget(), mi);\n\t\tMono<EvaluationContext> toInvoke = ReactiveAuthenticationUtils.getAuthentication()\n\t\t\t\t.map((auth) -> this.registry.getExpressionHandler().createEvaluationContext(auth, mi));\n\t\tMethod method = mi.getMethod();\n\t\tClass<?> type = filterTarget.value.getClass();\n\t\tAssert.state(Publisher.class.isAssignableFrom(type),\n\t\t\t\t() -> String.format(\"The parameter type %s on %s must be an instance of org.reactivestreams.Publisher \"\n\t\t\t\t\t\t+ \"(for example, a Mono or Flux) in order to support Reactor Context\", type, method));\n\t\tReactiveAdapter adapter = ReactiveAdapterRegistry.getSharedInstance().getAdapter(type);\n\t\tif (isMultiValue(type, adapter)) {\n\t\t\tFlux<?> result = toInvoke\n\t\t\t\t\t.flatMapMany((ctx) -> filterMultiValue(filterTarget.value, attribute.getExpression(), ctx));\n\t\t\tmi.getArguments()[filterTarget.index] = (adapter != null) ? adapter.fromPublisher(result) : result;\n\t\t}\n\t\telse {\n\t\t\tMono<?> result = toInvoke\n\t\t\t\t\t.flatMap((ctx) -> filterSingleValue(filterTarget.value, attribute.getExpression(), ctx));\n\t\t\tmi.getArguments()[filterTarget.index] = (adapter != null) ? adapter.fromPublisher(result) : result;\n\t\t}\n\t\treturn ReactiveMethodInvocationUtils.proceed(mi);\n\t}",
        "summary_tokens": [
            "filters",
            "a",
            "reactive",
            "method",
            "argument",
            "by",
            "evaluating",
            "an",
            "expression",
            "from",
            "the",
            "pre",
            "filter",
            "annotation"
        ]
    },
    {
        "id": 645,
        "code": "\tpublic AuthorizationDecision check(Supplier<Authentication> authentication, MethodInvocation mi) {\n\t\tAuthorizationManager<MethodInvocation> delegate = this.registry.getManager(mi);\n\t\treturn delegate.check(authentication, mi);\n\t}",
        "summary_tokens": [
            "determine",
            "if",
            "an",
            "authentication",
            "has",
            "access",
            "to",
            "a",
            "method",
            "by",
            "evaluating",
            "the",
            "secured",
            "annotation",
            "that",
            "method",
            "invocation",
            "specifies"
        ]
    },
    {
        "id": 646,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n\t\tAssert.notNull(securityContextHolderStrategy, \"securityContextHolderStrategy cannot be null\");\n\t\tthis.securityContextHolderStrategy = securityContextHolderStrategy;\n\t\tif (!this.explicitSecurityContextProvided) {\n\t\t\tthis.delegateSecurityContext = securityContextHolderStrategy.getContext();\n\t\t}\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 647,
        "code": "\tpublic static <V> Callable<V> create(Callable<V> delegate, SecurityContext securityContext) {\n\t\treturn (securityContext != null) ? new DelegatingSecurityContextCallable<>(delegate, securityContext)\n\t\t\t\t: new DelegatingSecurityContextCallable<>(delegate);\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "delegating",
            "security",
            "context",
            "callable",
            "and",
            "with",
            "the",
            "given",
            "callable",
            "and",
            "security",
            "context",
            "but",
            "if",
            "the",
            "security",
            "context",
            "is",
            "null",
            "will",
            "defaults",
            "to",
            "the",
            "current",
            "security",
            "context",
            "on",
            "the",
            "security",
            "context",
            "holder",
            "delegate",
            "the",
            "delegate",
            "delegating",
            "security",
            "context",
            "callable",
            "to",
            "run",
            "with",
            "the",
            "specified",
            "security",
            "context"
        ]
    },
    {
        "id": 648,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n\t\tsuper.setSecurityContextHolderStrategy(securityContextHolderStrategy);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 649,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n\t\tAssert.notNull(securityContextHolderStrategy, \"securityContextHolderStrategy cannot be null\");\n\t\tthis.securityContextHolderStrategy = securityContextHolderStrategy;\n\t\tif (!this.explicitSecurityContextProvided) {\n\t\t\tthis.delegateSecurityContext = this.securityContextHolderStrategy.getContext();\n\t\t}\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 650,
        "code": "\tpublic static Runnable create(Runnable delegate, SecurityContext securityContext) {\n\t\tAssert.notNull(delegate, \"delegate cannot be  null\");\n\t\treturn (securityContext != null) ? new DelegatingSecurityContextRunnable(delegate, securityContext)\n\t\t\t\t: new DelegatingSecurityContextRunnable(delegate);\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "for",
            "creating",
            "a",
            "delegating",
            "security",
            "context",
            "runnable"
        ]
    },
    {
        "id": 651,
        "code": "\tpublic void addListener(SmartApplicationListener smartApplicationListener) {\n\t\tAssert.notNull(smartApplicationListener, \"smartApplicationListener cannot be null\");\n\t\tthis.listeners.add(smartApplicationListener);\n\t}",
        "summary_tokens": [
            "adds",
            "a",
            "new",
            "smart",
            "application",
            "listener",
            "to",
            "use"
        ]
    },
    {
        "id": 652,
        "code": "\tpublic static Converter<InputStream, RSAPrivateKey> pkcs8() {\n\t\tKeyFactory keyFactory = rsaFactory();\n\t\treturn (source) -> {\n\t\t\tList<String> lines = readAllLines(source);\n\t\t\tAssert.isTrue(!lines.isEmpty() && lines.get(0).startsWith(PKCS8_PEM_HEADER),\n\t\t\t\t\t\"Key is not in PEM-encoded PKCS#8 format, please check that the header begins with \"\n\t\t\t\t\t\t\t+ PKCS8_PEM_HEADER);\n\t\t\tStringBuilder base64Encoded = new StringBuilder();\n\t\t\tfor (String line : lines) {\n\t\t\t\tif (RsaKeyConverters.isNotPkcs8Wrapper(line)) {\n\t\t\t\t\tbase64Encoded.append(line);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbyte[] pkcs8 = Base64.getDecoder().decode(base64Encoded.toString());\n\t\t\ttry {\n\t\t\t\treturn (RSAPrivateKey) keyFactory.generatePrivate(new PKCS8EncodedKeySpec(pkcs8));\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tthrow new IllegalArgumentException(ex);\n\t\t\t}\n\t\t};\n\t}",
        "summary_tokens": [
            "construct",
            "a",
            "converter",
            "for",
            "converting",
            "a",
            "pem",
            "encoded",
            "pkcs",
            "0",
            "rsa",
            "private",
            "key",
            "into",
            "a",
            "rsaprivate",
            "key"
        ]
    },
    {
        "id": 653,
        "code": "\tpublic static Converter<InputStream, RSAPublicKey> x509() {\n\t\tX509PemDecoder pemDecoder = new X509PemDecoder(rsaFactory());\n\t\tX509CertificateDecoder certDecoder = new X509CertificateDecoder(x509CertificateFactory());\n\t\treturn (source) -> {\n\t\t\tList<String> lines = readAllLines(source);\n\t\t\tAssert.notEmpty(lines, \"Input stream is empty\");\n\t\t\tString encodingHint = lines.get(0);\n\t\t\tConverter<List<String>, RSAPublicKey> decoder = encodingHint.startsWith(X509_PEM_HEADER) ? pemDecoder\n\t\t\t\t\t: encodingHint.startsWith(X509_CERT_HEADER) ? certDecoder : null;\n\t\t\tAssert.notNull(decoder,\n\t\t\t\t\t\"Key is not in PEM-encoded X.509 format or a valid X.509 certificate, please check that the header begins with \"\n\t\t\t\t\t\t\t+ X509_PEM_HEADER + \" or \" + X509_CERT_HEADER);\n\t\t\treturn decoder.convert(lines);\n\t\t};\n\t}",
        "summary_tokens": [
            "construct",
            "a",
            "converter",
            "for",
            "converting",
            "a",
            "pem",
            "encoded",
            "x"
        ]
    },
    {
        "id": 654,
        "code": "\tpublic static void main(String... args) {\n\t\tSystem.out.println(\"Display parameters as parsed by Maven (in canonical form) and comparison result:\");\n\t\tif (args.length == 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tComparableVersion prev = null;\n\t\tint i = 1;\n\t\tfor (String version : args) {\n\t\t\tComparableVersion c = new ComparableVersion(version);\n\n\t\t\tif (prev != null) {\n\t\t\t\tint compare = prev.compareTo(c);\n\t\t\t\tSystem.out.println(\"   \" + prev.toString() + ' ' + ((compare == 0) ? \"==\" : ((compare < 0) ? \"<\" : \">\"))\n\t\t\t\t\t\t+ ' ' + version);\n\t\t\t}\n\n\t\t\tSystem.out.println(String.valueOf(i++) + \". \" + version + \" == \" + c.getCanonical());\n\n\t\t\tprev = c;\n\t\t}\n\t}",
        "summary_tokens": [
            "main",
            "to",
            "test",
            "version",
            "parsing",
            "and",
            "comparison"
        ]
    },
    {
        "id": 655,
        "code": "\tprivate static void performVersionChecks(String minSpringVersion) {\n\t\tif (minSpringVersion == null) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tString springVersion = SpringVersion.getVersion();\n\t\tString version = getVersion();\n\t\tif (disableChecks(springVersion, version)) {\n\t\t\treturn;\n\t\t}\n\t\tlogger.info(\"You are running with Spring Security Core \" + version);\n\t\tif (new ComparableVersion(springVersion).compareTo(new ComparableVersion(minSpringVersion)) < 0) {\n\t\t\tlogger.warn(\"**** You are advised to use Spring \" + minSpringVersion\n\t\t\t\t\t+ \" or later with this version. You are running: \" + springVersion);\n\t\t}\n\t}",
        "summary_tokens": [
            "perform",
            "version",
            "checks",
            "with",
            "specific",
            "min",
            "spring",
            "version",
            "min",
            "spring",
            "version"
        ]
    },
    {
        "id": 656,
        "code": "\tprivate static boolean disableChecks(String springVersion, String springSecurityVersion) {\n\t\tif (springVersion == null || springVersion.equals(springSecurityVersion)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn Boolean.getBoolean(DISABLE_CHECKS);\n\t}",
        "summary_tokens": [
            "disable",
            "if",
            "spring",
            "version",
            "and",
            "spring",
            "security",
            "version",
            "are",
            "the",
            "same",
            "to",
            "allow",
            "working",
            "with",
            "uber",
            "jars"
        ]
    },
    {
        "id": 657,
        "code": "\tprivate static String getSpringVersion() {\n\t\tProperties properties = new Properties();\n\t\ttry (InputStream is = SpringSecurityCoreVersion.class.getClassLoader()\n\t\t\t\t.getResourceAsStream(\"META-INF/spring-security.versions\")) {\n\t\t\tproperties.load(is);\n\t\t}\n\t\tcatch (IOException | NullPointerException ex) {\n\t\t\treturn null;\n\t\t}\n\t\treturn properties.getProperty(\"org.springframework:spring-core\");\n\t}",
        "summary_tokens": [
            "loads",
            "the",
            "spring",
            "version",
            "or",
            "null",
            "if",
            "it",
            "cannot",
            "be",
            "found"
        ]
    },
    {
        "id": 658,
        "code": "\tpublic static List<GrantedAuthority> commaSeparatedStringToAuthorityList(String authorityString) {\n\t\treturn createAuthorityList(StringUtils.tokenizeToStringArray(authorityString, \",\"));\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "array",
            "of",
            "granted",
            "authority",
            "objects",
            "from",
            "a",
            "comma",
            "separated",
            "string",
            "representation",
            "e"
        ]
    },
    {
        "id": 659,
        "code": "\tpublic static Set<String> authorityListToSet(Collection<? extends GrantedAuthority> userAuthorities) {\n\t\tAssert.notNull(userAuthorities, \"userAuthorities cannot be null\");\n\t\tSet<String> set = new HashSet<>(userAuthorities.size());\n\t\tfor (GrantedAuthority authority : userAuthorities) {\n\t\t\tset.add(authority.getAuthority());\n\t\t}\n\t\treturn set;\n\t}",
        "summary_tokens": [
            "converts",
            "an",
            "array",
            "of",
            "granted",
            "authority",
            "objects",
            "to",
            "a",
            "set"
        ]
    },
    {
        "id": 660,
        "code": "\tpublic static List<GrantedAuthority> createAuthorityList(String... authorities) {\n\t\tList<GrantedAuthority> grantedAuthorities = new ArrayList<>(authorities.length);\n\t\tfor (String authority : authorities) {\n\t\t\tgrantedAuthorities.add(new SimpleGrantedAuthority(authority));\n\t\t}\n\t\treturn grantedAuthorities;\n\t}",
        "summary_tokens": [
            "converts",
            "authorities",
            "into",
            "a",
            "list",
            "of",
            "granted",
            "authority",
            "objects"
        ]
    },
    {
        "id": 661,
        "code": "\tpublic List<GrantedAuthority> getGrantedAuthorities(Collection<String> attributes) {\n\t\tArrayList<GrantedAuthority> result = new ArrayList<>();\n\t\tfor (String attribute : attributes) {\n\t\t\tCollection<GrantedAuthority> granted = this.attributes2grantedAuthoritiesMap.get(attribute);\n\t\t\tif (granted != null) {\n\t\t\t\tresult.addAll(granted);\n\t\t\t}\n\t\t}\n\t\tresult.trimToSize();\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "map",
            "the",
            "given",
            "array",
            "of",
            "attributes",
            "to",
            "spring",
            "security",
            "granted",
            "authorities"
        ]
    },
    {
        "id": 662,
        "code": "\tpublic Map<String, Collection<GrantedAuthority>> getAttributes2grantedAuthoritiesMap() {\n\t\treturn this.attributes2grantedAuthoritiesMap;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "attributes",
            "0",
            "granted",
            "authorities",
            "map"
        ]
    },
    {
        "id": 663,
        "code": "\tpublic void setAttributes2grantedAuthoritiesMap(final Map<?, ?> attributes2grantedAuthoritiesMap) {\n\t\tAssert.notEmpty(attributes2grantedAuthoritiesMap,\n\t\t\t\t\"A non-empty attributes2grantedAuthoritiesMap must be supplied\");\n\t\tthis.attributes2grantedAuthoritiesMap = preProcessMap(attributes2grantedAuthoritiesMap);\n\t\tthis.mappableAttributes = Collections.unmodifiableSet(this.attributes2grantedAuthoritiesMap.keySet());\n\t}",
        "summary_tokens": [
            "attributes",
            "0",
            "granted",
            "authorities",
            "map",
            "the",
            "attributes",
            "0",
            "granted",
            "authorities",
            "map",
            "to",
            "set"
        ]
    },
    {
        "id": 664,
        "code": "\tprivate Map<String, Collection<GrantedAuthority>> preProcessMap(Map<?, ?> orgMap) {\n\t\tMap<String, Collection<GrantedAuthority>> result = new HashMap<>(orgMap.size());\n\t\tfor (Map.Entry<?, ?> entry : orgMap.entrySet()) {\n\t\t\tAssert.isInstanceOf(String.class, entry.getKey(),\n\t\t\t\t\t\"attributes2grantedAuthoritiesMap contains non-String objects as keys\");\n\t\t\tresult.put((String) entry.getKey(), getGrantedAuthorityCollection(entry.getValue()));\n\t\t}\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "preprocess",
            "the",
            "given",
            "map",
            "to",
            "convert",
            "all",
            "the",
            "values",
            "to",
            "granted",
            "authority",
            "collections",
            "org",
            "map",
            "the",
            "map",
            "to",
            "process",
            "the",
            "processed",
            "map"
        ]
    },
    {
        "id": 665,
        "code": "\tprivate Collection<GrantedAuthority> getGrantedAuthorityCollection(Object value) {\n\t\tCollection<GrantedAuthority> result = new ArrayList<>();\n\t\taddGrantedAuthorityCollection(result, value);\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "convert",
            "the",
            "given",
            "value",
            "to",
            "a",
            "collection",
            "of",
            "granted",
            "authorities",
            "value",
            "the",
            "value",
            "to",
            "convert",
            "to",
            "a",
            "granted",
            "authority",
            "collection",
            "collection",
            "containing",
            "the",
            "granted",
            "authority",
            "collection"
        ]
    },
    {
        "id": 666,
        "code": "\tprivate void addGrantedAuthorityCollection(Collection<GrantedAuthority> result, Object value) {\n\t\tif (value == null) {\n\t\t\treturn;\n\t\t}\n\t\tif (value instanceof Collection<?>) {\n\t\t\taddGrantedAuthorityCollection(result, (Collection<?>) value);\n\t\t}\n\t\telse if (value instanceof Object[]) {\n\t\t\taddGrantedAuthorityCollection(result, (Object[]) value);\n\t\t}\n\t\telse if (value instanceof String) {\n\t\t\taddGrantedAuthorityCollection(result, (String) value);\n\t\t}\n\t\telse if (value instanceof GrantedAuthority) {\n\t\t\tresult.add((GrantedAuthority) value);\n\t\t}\n\t\telse {\n\t\t\tthrow new IllegalArgumentException(\"Invalid object type: \" + value.getClass().getName());\n\t\t}\n\t}",
        "summary_tokens": [
            "convert",
            "the",
            "given",
            "value",
            "to",
            "a",
            "collection",
            "of",
            "granted",
            "authorities",
            "adding",
            "the",
            "result",
            "to",
            "the",
            "given",
            "result",
            "collection"
        ]
    },
    {
        "id": 667,
        "code": "\tpublic String getStringSeparator() {\n\t\treturn this.stringSeparator;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "string",
            "separator"
        ]
    },
    {
        "id": 668,
        "code": "\tpublic void setStringSeparator(String stringSeparator) {\n\t\tthis.stringSeparator = stringSeparator;\n\t}",
        "summary_tokens": [
            "string",
            "separator",
            "the",
            "string",
            "separator",
            "to",
            "set"
        ]
    },
    {
        "id": 669,
        "code": "\tpublic void afterPropertiesSet() {\n\t\tAssert.isTrue(!(isConvertAttributeToUpperCase() && isConvertAttributeToLowerCase()),\n\t\t\t\t\"Either convertAttributeToUpperCase or convertAttributeToLowerCase can be set to true, but not both\");\n\t}",
        "summary_tokens": [
            "check",
            "whether",
            "all",
            "properties",
            "have",
            "been",
            "set",
            "to",
            "correct",
            "values"
        ]
    },
    {
        "id": 670,
        "code": "\tpublic List<GrantedAuthority> getGrantedAuthorities(Collection<String> attributes) {\n\t\tList<GrantedAuthority> result = new ArrayList<>(attributes.size());\n\t\tfor (String attribute : attributes) {\n\t\t\tresult.add(getGrantedAuthority(attribute));\n\t\t}\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "map",
            "the",
            "given",
            "list",
            "of",
            "string",
            "attributes",
            "one",
            "to",
            "one",
            "to",
            "spring",
            "security",
            "granted",
            "authorities"
        ]
    },
    {
        "id": 671,
        "code": "\tprivate GrantedAuthority getGrantedAuthority(String attribute) {\n\t\tif (isConvertAttributeToLowerCase()) {\n\t\t\tattribute = attribute.toLowerCase(Locale.getDefault());\n\t\t}\n\t\telse if (isConvertAttributeToUpperCase()) {\n\t\t\tattribute = attribute.toUpperCase(Locale.getDefault());\n\t\t}\n\t\tif (isAddPrefixIfAlreadyExisting() || !attribute.startsWith(getAttributePrefix())) {\n\t\t\treturn new SimpleGrantedAuthority(getAttributePrefix() + attribute);\n\t\t}\n\t\telse {\n\t\t\treturn new SimpleGrantedAuthority(attribute);\n\t\t}\n\t}",
        "summary_tokens": [
            "map",
            "the",
            "given",
            "role",
            "one",
            "on",
            "one",
            "to",
            "a",
            "spring",
            "security",
            "granted",
            "authority",
            "optionally",
            "doing",
            "case",
            "conversion",
            "and",
            "or",
            "adding",
            "a",
            "prefix"
        ]
    },
    {
        "id": 672,
        "code": "\tpublic Set<GrantedAuthority> mapAuthorities(Collection<? extends GrantedAuthority> authorities) {\n\t\tHashSet<GrantedAuthority> mapped = new HashSet<>(authorities.size());\n\t\tfor (GrantedAuthority authority : authorities) {\n\t\t\tmapped.add(mapAuthority(authority.getAuthority()));\n\t\t}\n\t\tif (this.defaultAuthority != null) {\n\t\t\tmapped.add(this.defaultAuthority);\n\t\t}\n\t\treturn mapped;\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "mapping",
            "of",
            "the",
            "supplied",
            "authorities",
            "based",
            "on",
            "the",
            "case",
            "conversion",
            "and",
            "prefix",
            "settings"
        ]
    },
    {
        "id": 673,
        "code": "\tpublic void setPrefix(String prefix) {\n\t\tAssert.notNull(prefix, \"prefix cannot be null\");\n\t\tthis.prefix = prefix;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "prefix",
            "which",
            "should",
            "be",
            "added",
            "to",
            "the",
            "authority",
            "name",
            "if",
            "it",
            "doesn",
            "t",
            "already",
            "exist",
            "prefix",
            "the",
            "prefix",
            "typically",
            "to",
            "satisfy",
            "the",
            "behaviour",
            "of",
            "an",
            "access",
            "decision",
            "voter"
        ]
    },
    {
        "id": 674,
        "code": "\tpublic void setConvertToUpperCase(boolean convertToUpperCase) {\n\t\tthis.convertToUpperCase = convertToUpperCase;\n\t}",
        "summary_tokens": [
            "whether",
            "to",
            "convert",
            "the",
            "authority",
            "value",
            "to",
            "upper",
            "case",
            "in",
            "the",
            "mapping"
        ]
    },
    {
        "id": 675,
        "code": "\tpublic void setConvertToLowerCase(boolean convertToLowerCase) {\n\t\tthis.convertToLowerCase = convertToLowerCase;\n\t}",
        "summary_tokens": [
            "whether",
            "to",
            "convert",
            "the",
            "authority",
            "value",
            "to",
            "lower",
            "case",
            "in",
            "the",
            "mapping"
        ]
    },
    {
        "id": 676,
        "code": "\tpublic void setDefaultAuthority(String authority) {\n\t\tAssert.hasText(authority, \"The authority name cannot be set to an empty value\");\n\t\tthis.defaultAuthority = new SimpleGrantedAuthority(authority);\n\t}",
        "summary_tokens": [
            "sets",
            "a",
            "default",
            "authority",
            "to",
            "be",
            "assigned",
            "to",
            "all",
            "users",
            "authority",
            "the",
            "name",
            "of",
            "the",
            "authority",
            "to",
            "be",
            "assigned",
            "to",
            "all",
            "users"
        ]
    },
    {
        "id": 677,
        "code": "\tpublic static Mono<SecurityContext> getContext() {\n\t\t\n\t\treturn Mono.deferContextual(Mono::just)\n\t\t\t\t.cast(Context.class)\n\t\t\t\t.filter(ReactiveSecurityContextHolder::hasSecurityContext)\n\t\t\t\t.flatMap(ReactiveSecurityContextHolder::getSecurityContext);\n\t\t\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "mono",
            "security",
            "context",
            "from",
            "reactor",
            "context",
            "the",
            "mono",
            "security",
            "context"
        ]
    },
    {
        "id": 678,
        "code": "\tpublic static Function<Context, Context> clearContext() {\n\t\treturn (context) -> context.delete(SECURITY_CONTEXT_KEY);\n\t}",
        "summary_tokens": [
            "clears",
            "the",
            "mono",
            "security",
            "context",
            "from",
            "reactor",
            "context",
            "return",
            "a",
            "mono",
            "void",
            "which",
            "only",
            "replays",
            "complete",
            "and",
            "error",
            "signals",
            "from",
            "clearing",
            "the",
            "context"
        ]
    },
    {
        "id": 679,
        "code": "\tpublic static Context withSecurityContext(Mono<? extends SecurityContext> securityContext) {\n\t\treturn Context.of(SECURITY_CONTEXT_KEY, securityContext);\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "reactor",
            "context",
            "that",
            "contains",
            "the",
            "mono",
            "security",
            "context",
            "that",
            "can",
            "be",
            "merged",
            "into",
            "another",
            "context",
            "security",
            "context",
            "the",
            "mono",
            "security",
            "context",
            "to",
            "set",
            "in",
            "the",
            "returned",
            "reactor",
            "context",
            "a",
            "reactor",
            "context",
            "that",
            "contains",
            "the",
            "mono",
            "security",
            "context"
        ]
    },
    {
        "id": 680,
        "code": "\tpublic static Context withAuthentication(Authentication authentication) {\n\t\treturn withSecurityContext(Mono.just(new SecurityContextImpl(authentication)));\n\t}",
        "summary_tokens": [
            "a",
            "shortcut",
            "for",
            "with",
            "security",
            "context",
            "mono",
            "authentication",
            "the",
            "authentication",
            "to",
            "be",
            "used",
            "a",
            "reactor",
            "context",
            "that",
            "contains",
            "the",
            "mono",
            "security",
            "context"
        ]
    },
    {
        "id": 681,
        "code": "\tpublic SecurityContext getOldContext() {\n\t\treturn this.oldContext;\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "security",
            "context",
            "set",
            "on",
            "the",
            "security",
            "context",
            "holder",
            "immediately",
            "previous",
            "to",
            "this",
            "event",
            "the",
            "previous",
            "security",
            "context"
        ]
    },
    {
        "id": 682,
        "code": "\tpublic SecurityContext getNewContext() {\n\t\treturn this.newContext;\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "security",
            "context",
            "set",
            "on",
            "the",
            "security",
            "context",
            "holder",
            "as",
            "of",
            "this",
            "event",
            "the",
            "current",
            "security",
            "context"
        ]
    },
    {
        "id": 683,
        "code": "\tpublic static void clearContext() {\n\t\tstrategy.clearContext();\n\t}",
        "summary_tokens": [
            "explicitly",
            "clears",
            "the",
            "context",
            "value",
            "from",
            "the",
            "current",
            "thread"
        ]
    },
    {
        "id": 684,
        "code": "\tpublic static SecurityContext getContext() {\n\t\treturn strategy.getContext();\n\t}",
        "summary_tokens": [
            "obtain",
            "the",
            "current",
            "code",
            "security",
            "context",
            "code"
        ]
    },
    {
        "id": 685,
        "code": "\tpublic static Supplier<SecurityContext> getDeferredContext() {\n\t\treturn strategy.getDeferredContext();\n\t}",
        "summary_tokens": [
            "obtains",
            "a",
            "supplier",
            "that",
            "returns",
            "the",
            "current",
            "context"
        ]
    },
    {
        "id": 686,
        "code": "\tpublic static int getInitializeCount() {\n\t\treturn initializeCount;\n\t}",
        "summary_tokens": [
            "primarily",
            "for",
            "troubleshooting",
            "purposes",
            "this",
            "method",
            "shows",
            "how",
            "many",
            "times",
            "the",
            "class",
            "has",
            "re",
            "initialized",
            "its",
            "code",
            "security",
            "context",
            "holder",
            "strategy",
            "code"
        ]
    },
    {
        "id": 687,
        "code": "\tpublic static void setContext(SecurityContext context) {\n\t\tstrategy.setContext(context);\n\t}",
        "summary_tokens": [
            "associates",
            "a",
            "new",
            "code",
            "security",
            "context",
            "code",
            "with",
            "the",
            "current",
            "thread",
            "of",
            "execution"
        ]
    },
    {
        "id": 688,
        "code": "\tpublic static void setDeferredContext(Supplier<SecurityContext> deferredContext) {\n\t\tstrategy.setDeferredContext(deferredContext);\n\t}",
        "summary_tokens": [
            "sets",
            "a",
            "supplier",
            "that",
            "will",
            "return",
            "the",
            "current",
            "context"
        ]
    },
    {
        "id": 689,
        "code": "\tpublic static void setStrategyName(String strategyName) {\n\t\tSecurityContextHolder.strategyName = strategyName;\n\t\tinitialize();\n\t}",
        "summary_tokens": [
            "changes",
            "the",
            "preferred",
            "strategy"
        ]
    },
    {
        "id": 690,
        "code": "\tpublic static void setContextHolderStrategy(SecurityContextHolderStrategy strategy) {\n\t\tAssert.notNull(strategy, \"securityContextHolderStrategy cannot be null\");\n\t\tSecurityContextHolder.strategyName = MODE_PRE_INITIALIZED;\n\t\tSecurityContextHolder.strategy = strategy;\n\t\tinitialize();\n\t}",
        "summary_tokens": [
            "use",
            "this",
            "security",
            "context",
            "holder",
            "strategy"
        ]
    },
    {
        "id": 691,
        "code": "\tpublic static SecurityContextHolderStrategy getContextHolderStrategy() {\n\t\treturn strategy;\n\t}",
        "summary_tokens": [
            "allows",
            "retrieval",
            "of",
            "the",
            "context",
            "strategy"
        ]
    },
    {
        "id": 692,
        "code": "\tpublic static SecurityContext createEmptyContext() {\n\t\treturn strategy.createEmptyContext();\n\t}",
        "summary_tokens": [
            "delegates",
            "the",
            "creation",
            "of",
            "a",
            "new",
            "empty",
            "context",
            "to",
            "the",
            "configured",
            "strategy"
        ]
    },
    {
        "id": 693,
        "code": "\tdefault Supplier<SecurityContext> getDeferredContext() {\n\t\treturn () -> getContext();\n\t}",
        "summary_tokens": [
            "obtains",
            "a",
            "supplier",
            "that",
            "returns",
            "the",
            "current",
            "context"
        ]
    },
    {
        "id": 694,
        "code": "\tdefault void setDeferredContext(Supplier<SecurityContext> deferredContext) {\n\t\tsetContext(deferredContext.get());\n\t}",
        "summary_tokens": [
            "sets",
            "a",
            "supplier",
            "that",
            "will",
            "return",
            "the",
            "current",
            "context"
        ]
    },
    {
        "id": 695,
        "code": "\tprivate <T extends AccessibleObject> String[] lookupParameterNames(ParameterNameFactory<T> parameterNameFactory,\n\t\t\tT t) {\n\t\tAnnotation[][] parameterAnnotations = parameterNameFactory.findParameterAnnotations(t);\n\t\tint parameterCount = parameterAnnotations.length;\n\t\tString[] paramNames = new String[parameterCount];\n\t\tboolean found = false;\n\t\tfor (int i = 0; i < parameterCount; i++) {\n\t\t\tAnnotation[] annotations = parameterAnnotations[i];\n\t\t\tString parameterName = findParameterName(annotations);\n\t\t\tif (parameterName != null) {\n\t\t\t\tfound = true;\n\t\t\t\tparamNames[i] = parameterName;\n\t\t\t}\n\t\t}\n\t\treturn found ? paramNames : null;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "parameter",
            "names",
            "or",
            "null",
            "if",
            "not",
            "found"
        ]
    },
    {
        "id": 696,
        "code": "\tprivate String findParameterName(Annotation[] parameterAnnotations) {\n\t\tfor (Annotation paramAnnotation : parameterAnnotations) {\n\t\t\tif (this.annotationClassesToUse.contains(paramAnnotation.annotationType().getName())) {\n\t\t\t\treturn (String) AnnotationUtils.getValue(paramAnnotation, \"value\");\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "finds",
            "the",
            "parameter",
            "name",
            "from",
            "the",
            "provided",
            "annotation",
            "s",
            "or",
            "null",
            "if",
            "it",
            "could",
            "not",
            "find",
            "it"
        ]
    },
    {
        "id": 697,
        "code": "\tpublic void refreshLastRequest() {\n\t\tthis.lastRequest = new Date();\n\t}",
        "summary_tokens": [
            "refreshes",
            "the",
            "internal",
            "last",
            "request",
            "to",
            "the",
            "current",
            "date",
            "and",
            "time"
        ]
    },
    {
        "id": 698,
        "code": "\tprivate String generatePseudoRandomNumber() {\n\t\tbyte[] randomBytes = new byte[this.pseudoRandomNumberBytes];\n\t\tthis.secureRandom.nextBytes(randomBytes);\n\t\treturn new String(Hex.encode(randomBytes));\n\t}",
        "summary_tokens": [
            "a",
            "pseduo",
            "random",
            "number",
            "hex",
            "encoded"
        ]
    },
    {
        "id": 699,
        "code": "\tpublic void setServerSecret(String serverSecret) {\n\t\tthis.serverSecret = serverSecret;\n\t}",
        "summary_tokens": [
            "server",
            "secret",
            "the",
            "new",
            "secret",
            "which",
            "can",
            "contain",
            "a",
            "if",
            "desired",
            "never",
            "being",
            "sent",
            "to",
            "the",
            "client"
        ]
    },
    {
        "id": 700,
        "code": "\tpublic void setPseudoRandomNumberBytes(int pseudoRandomNumberBytes) {\n\t\tAssert.isTrue(pseudoRandomNumberBytes >= 0, \"Must have a positive pseudo random number bit size\");\n\t\tthis.pseudoRandomNumberBytes = pseudoRandomNumberBytes;\n\t}",
        "summary_tokens": [
            "pseudo",
            "random",
            "number",
            "bytes",
            "changes",
            "the",
            "number",
            "of",
            "bytes",
            "issued",
            "must",
            "be",
            "gt",
            "0",
            "defaults",
            "to",
            "0"
        ]
    },
    {
        "id": 701,
        "code": "\tpublic void setAlgorithm(String algorithm) {\n\t\tAssert.hasText(algorithm, \"Algorithm required\");\n\t\tthis.algorithm = algorithm;\n\t}",
        "summary_tokens": [
            "allows",
            "the",
            "pseudo",
            "random",
            "number",
            "generator",
            "prng",
            "algorithm",
            "to",
            "be",
            "nominated"
        ]
    },
    {
        "id": 702,
        "code": "\tpublic void setSeed(Resource seed) {\n\t\tthis.seed = seed;\n\t}",
        "summary_tokens": [
            "allows",
            "the",
            "user",
            "to",
            "specify",
            "a",
            "resource",
            "which",
            "will",
            "act",
            "as",
            "a",
            "seed",
            "for",
            "the",
            "secure",
            "random",
            "instance"
        ]
    },
    {
        "id": 703,
        "code": "\tprivate static MessageDigest getSha512Digest() {\n\t\ttry {\n\t\t\treturn MessageDigest.getInstance(\"SHA-512\");\n\t\t}\n\t\tcatch (NoSuchAlgorithmException ex) {\n\t\t\tthrow new RuntimeException(ex.getMessage());\n\t\t}\n\t}",
        "summary_tokens": [
            "returns",
            "an",
            "sha",
            "digest"
        ]
    },
    {
        "id": 704,
        "code": "\tpublic static byte[] sha(String data) {\n\t\treturn sha(data.getBytes());\n\t}",
        "summary_tokens": [
            "calculates",
            "the",
            "sha",
            "digest",
            "and",
            "returns",
            "the",
            "value",
            "as",
            "a",
            "code",
            "byte",
            "code"
        ]
    },
    {
        "id": 705,
        "code": "\tpublic static String shaHex(String data) {\n\t\treturn new String(Hex.encode(sha(data)));\n\t}",
        "summary_tokens": [
            "calculates",
            "the",
            "sha",
            "digest",
            "and",
            "returns",
            "the",
            "value",
            "as",
            "a",
            "hex",
            "string"
        ]
    },
    {
        "id": 706,
        "code": "\tpublic boolean equals(Object obj) {\n\t\tif (obj instanceof User) {\n\t\t\treturn this.username.equals(((User) obj).username);\n\t\t}\n\t\treturn false;\n\t}",
        "summary_tokens": [
            "returns",
            "true",
            "if",
            "the",
            "supplied",
            "object",
            "is",
            "a",
            "user",
            "instance",
            "with",
            "the",
            "same",
            "username",
            "value"
        ]
    },
    {
        "id": 707,
        "code": "\tpublic int hashCode() {\n\t\treturn this.username.hashCode();\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "hashcode",
            "of",
            "the",
            "username"
        ]
    },
    {
        "id": 708,
        "code": "\tpublic static UserBuilder withUsername(String username) {\n\t\treturn builder().username(username);\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "user",
            "builder",
            "with",
            "a",
            "specified",
            "user",
            "name",
            "username",
            "the",
            "username",
            "to",
            "use",
            "the",
            "user",
            "builder"
        ]
    },
    {
        "id": 709,
        "code": "\tpublic static UserBuilder builder() {\n\t\treturn new UserBuilder();\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "user",
            "builder",
            "the",
            "user",
            "builder"
        ]
    },
    {
        "id": 710,
        "code": "\tpublic static UserBuilder withDefaultPasswordEncoder() {\n\t\tlogger.warn(\"User.withDefaultPasswordEncoder() is considered unsafe for production \"\n\t\t\t\t+ \"and is only intended for sample applications.\");\n\t\tPasswordEncoder encoder = PasswordEncoderFactories.createDelegatingPasswordEncoder();\n\t\treturn builder().passwordEncoder(encoder::encode);\n\t}",
        "summary_tokens": [
            "p",
            "b",
            "warning",
            "b",
            "this",
            "method",
            "is",
            "considered",
            "unsafe",
            "for",
            "production",
            "and",
            "is",
            "only",
            "intended",
            "for",
            "sample",
            "applications"
        ]
    },
    {
        "id": 711,
        "code": "\tpublic void afterPropertiesSet() {\n\t\tAssert.notNull(this.userDetailsService, \"UserDetailsService must be set\");\n\t}",
        "summary_tokens": [
            "check",
            "whether",
            "all",
            "required",
            "properties",
            "have",
            "been",
            "set"
        ]
    },
    {
        "id": 712,
        "code": "\tpublic UserDetails loadUserDetails(T authentication) throws UsernameNotFoundException {\n\t\treturn this.userDetailsService.loadUserByUsername(authentication.getName());\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "user",
            "details",
            "object",
            "from",
            "the",
            "wrapped",
            "user",
            "details",
            "service",
            "implementation"
        ]
    },
    {
        "id": 713,
        "code": "\tpublic void setUserDetailsService(UserDetailsService aUserDetailsService) {\n\t\tthis.userDetailsService = aUserDetailsService;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "wrapped",
            "user",
            "details",
            "service",
            "implementation",
            "a",
            "user",
            "details",
            "service",
            "the",
            "wrapped",
            "user",
            "details",
            "service",
            "to",
            "set"
        ]
    },
    {
        "id": 714,
        "code": "\tprotected void addCustomAuthorities(String username, List<GrantedAuthority> authorities) {\n\t}",
        "summary_tokens": [
            "allows",
            "subclasses",
            "to",
            "add",
            "their",
            "own",
            "granted",
            "authorities",
            "to",
            "the",
            "list",
            "to",
            "be",
            "returned",
            "in",
            "the",
            "tt",
            "user",
            "details",
            "tt"
        ]
    },
    {
        "id": 715,
        "code": "\tprotected List<UserDetails> loadUsersByUsername(String username) {\n\t\t\n\t\tRowMapper<UserDetails> mapper = (rs, rowNum) -> {\n\t\t\tString username1 = rs.getString(1);\n\t\t\tString password = rs.getString(2);\n\t\t\tboolean enabled = rs.getBoolean(3);\n\t\t\treturn new User(username1, password, enabled, true, true, true, AuthorityUtils.NO_AUTHORITIES);\n\t\t};\n\t\t\n\t\treturn getJdbcTemplate().query(this.usersByUsernameQuery, mapper, username);\n\t}",
        "summary_tokens": [
            "executes",
            "the",
            "sql",
            "tt",
            "users",
            "by",
            "username",
            "query",
            "tt",
            "and",
            "returns",
            "a",
            "list",
            "of",
            "user",
            "details",
            "objects"
        ]
    },
    {
        "id": 716,
        "code": "\tprotected List<GrantedAuthority> loadUserAuthorities(String username) {\n\t\treturn getJdbcTemplate().query(this.authoritiesByUsernameQuery, new String[] { username }, (rs, rowNum) -> {\n\t\t\tString roleName = JdbcDaoImpl.this.rolePrefix + rs.getString(2);\n\t\t\treturn new SimpleGrantedAuthority(roleName);\n\t\t});\n\t}",
        "summary_tokens": [
            "loads",
            "authorities",
            "by",
            "executing",
            "the",
            "sql",
            "from",
            "tt",
            "authorities",
            "by",
            "username",
            "query",
            "tt"
        ]
    },
    {
        "id": 717,
        "code": "\tprotected List<GrantedAuthority> loadGroupAuthorities(String username) {\n\t\treturn getJdbcTemplate().query(this.groupAuthoritiesByUsernameQuery, new String[] { username },\n\t\t\t\t(rs, rowNum) -> {\n\t\t\t\t\tString roleName = getRolePrefix() + rs.getString(3);\n\t\t\t\t\treturn new SimpleGrantedAuthority(roleName);\n\t\t\t\t});\n\t}",
        "summary_tokens": [
            "loads",
            "authorities",
            "by",
            "executing",
            "the",
            "sql",
            "from",
            "tt",
            "group",
            "authorities",
            "by",
            "username",
            "query",
            "tt"
        ]
    },
    {
        "id": 718,
        "code": "\tprotected UserDetails createUserDetails(String username, UserDetails userFromUserQuery,\n\t\t\tList<GrantedAuthority> combinedAuthorities) {\n\t\tString returnUsername = userFromUserQuery.getUsername();\n\t\tif (!this.usernameBasedPrimaryKey) {\n\t\t\treturnUsername = username;\n\t\t}\n\t\treturn new User(returnUsername, userFromUserQuery.getPassword(), userFromUserQuery.isEnabled(),\n\t\t\t\tuserFromUserQuery.isAccountNonExpired(), userFromUserQuery.isCredentialsNonExpired(),\n\t\t\t\tuserFromUserQuery.isAccountNonLocked(), combinedAuthorities);\n\t}",
        "summary_tokens": [
            "can",
            "be",
            "overridden",
            "to",
            "customize",
            "the",
            "creation",
            "of",
            "the",
            "final",
            "user",
            "details",
            "object",
            "which",
            "is",
            "returned",
            "by",
            "the",
            "tt",
            "load",
            "user",
            "by",
            "username",
            "tt",
            "method"
        ]
    },
    {
        "id": 719,
        "code": "\tpublic void setAuthoritiesByUsernameQuery(String queryString) {\n\t\tthis.authoritiesByUsernameQuery = queryString;\n\t}",
        "summary_tokens": [
            "allows",
            "the",
            "default",
            "query",
            "string",
            "used",
            "to",
            "retrieve",
            "authorities",
            "based",
            "on",
            "username",
            "to",
            "be",
            "overridden",
            "if",
            "default",
            "table",
            "or",
            "column",
            "names",
            "need",
            "to",
            "be",
            "changed"
        ]
    },
    {
        "id": 720,
        "code": "\tpublic void setGroupAuthoritiesByUsernameQuery(String queryString) {\n\t\tthis.groupAuthoritiesByUsernameQuery = queryString;\n\t}",
        "summary_tokens": [
            "allows",
            "the",
            "default",
            "query",
            "string",
            "used",
            "to",
            "retrieve",
            "group",
            "authorities",
            "based",
            "on",
            "username",
            "to",
            "be",
            "overridden",
            "if",
            "default",
            "table",
            "or",
            "column",
            "names",
            "need",
            "to",
            "be",
            "changed"
        ]
    },
    {
        "id": 721,
        "code": "\tpublic void setRolePrefix(String rolePrefix) {\n\t\tthis.rolePrefix = rolePrefix;\n\t}",
        "summary_tokens": [
            "allows",
            "a",
            "default",
            "role",
            "prefix",
            "to",
            "be",
            "specified"
        ]
    },
    {
        "id": 722,
        "code": "\tpublic void setUsernameBasedPrimaryKey(boolean usernameBasedPrimaryKey) {\n\t\tthis.usernameBasedPrimaryKey = usernameBasedPrimaryKey;\n\t}",
        "summary_tokens": [
            "if",
            "code",
            "true",
            "code",
            "the",
            "default",
            "indicates",
            "the",
            "get",
            "users",
            "by",
            "username",
            "query",
            "returns",
            "a",
            "username",
            "in",
            "response",
            "to",
            "a",
            "query"
        ]
    },
    {
        "id": 723,
        "code": "\tpublic void setUsersByUsernameQuery(String usersByUsernameQueryString) {\n\t\tthis.usersByUsernameQuery = usersByUsernameQueryString;\n\t}",
        "summary_tokens": [
            "allows",
            "the",
            "default",
            "query",
            "string",
            "used",
            "to",
            "retrieve",
            "users",
            "based",
            "on",
            "username",
            "to",
            "be",
            "overridden",
            "if",
            "default",
            "table",
            "or",
            "column",
            "names",
            "need",
            "to",
            "be",
            "changed"
        ]
    },
    {
        "id": 724,
        "code": "\tpublic void setEnableAuthorities(boolean enableAuthorities) {\n\t\tthis.enableAuthorities = enableAuthorities;\n\t}",
        "summary_tokens": [
            "enables",
            "loading",
            "of",
            "authorities",
            "roles",
            "from",
            "the",
            "authorities",
            "table"
        ]
    },
    {
        "id": 725,
        "code": "\tpublic void setEnableGroups(boolean enableGroups) {\n\t\tthis.enableGroups = enableGroups;\n\t}",
        "summary_tokens": [
            "enables",
            "support",
            "for",
            "group",
            "authorities"
        ]
    },
    {
        "id": 726,
        "code": "\tpublic void setAuthorities(List<GrantedAuthority> authorities) {\n\t\tthis.authorities = authorities;\n\t}",
        "summary_tokens": [
            "set",
            "all",
            "authorities",
            "for",
            "this",
            "user"
        ]
    },
    {
        "id": 727,
        "code": "\tpublic void setAuthoritiesAsString(List<String> authoritiesAsStrings) {\n\t\tsetAuthorities(new ArrayList<>(authoritiesAsStrings.size()));\n\t\tfor (String authority : authoritiesAsStrings) {\n\t\t\taddAuthority(new SimpleGrantedAuthority(authority));\n\t\t}\n\t}",
        "summary_tokens": [
            "set",
            "all",
            "authorities",
            "for",
            "this",
            "user",
            "from",
            "string",
            "values"
        ]
    },
    {
        "id": 728,
        "code": "\tpublic static List<Module> getModules(ClassLoader loader) {\n\t\tList<Module> modules = new ArrayList<>();\n\t\tfor (String className : securityJackson2ModuleClasses) {\n\t\t\taddToModulesList(loader, modules, className);\n\t\t}\n\t\tif (ClassUtils.isPresent(\"jakarta.servlet.http.Cookie\", loader)) {\n\t\t\taddToModulesList(loader, modules, webServletJackson2ModuleClass);\n\t\t}\n\t\tif (ClassUtils.isPresent(\"org.springframework.security.oauth2.client.OAuth2AuthorizedClient\", loader)) {\n\t\t\taddToModulesList(loader, modules, oauth2ClientJackson2ModuleClass);\n\t\t}\n\t\tif (ClassUtils.isPresent(javaTimeJackson2ModuleClass, loader)) {\n\t\t\taddToModulesList(loader, modules, javaTimeJackson2ModuleClass);\n\t\t}\n\t\tif (ClassUtils.isPresent(ldapJackson2ModuleClass, loader)) {\n\t\t\taddToModulesList(loader, modules, ldapJackson2ModuleClass);\n\t\t}\n\t\tif (ClassUtils.isPresent(saml2Jackson2ModuleClass, loader)) {\n\t\t\taddToModulesList(loader, modules, saml2Jackson2ModuleClass);\n\t\t}\n\t\treturn modules;\n\t}",
        "summary_tokens": [
            "loader",
            "the",
            "class",
            "loader",
            "to",
            "use",
            "list",
            "of",
            "available",
            "security",
            "modules",
            "in",
            "classpath"
        ]
    },
    {
        "id": 729,
        "code": "\tprivate static void addToModulesList(ClassLoader loader, List<Module> modules, String className) {\n\t\tModule module = loadAndGetInstance(className, loader);\n\t\tif (module != null) {\n\t\t\tmodules.add(module);\n\t\t}\n\t}",
        "summary_tokens": [
            "loader",
            "the",
            "class",
            "loader",
            "to",
            "use",
            "modules",
            "list",
            "of",
            "the",
            "modules",
            "to",
            "add",
            "class",
            "name",
            "name",
            "of",
            "the",
            "class",
            "to",
            "instantiate"
        ]
    },
    {
        "id": 730,
        "code": "\tprivate static TypeResolverBuilder<? extends TypeResolverBuilder> createAllowlistedDefaultTyping() {\n\t\tTypeResolverBuilder<? extends TypeResolverBuilder> result = new AllowlistTypeResolverBuilder(\n\t\t\t\tObjectMapper.DefaultTyping.NON_FINAL);\n\t\tresult = result.init(JsonTypeInfo.Id.CLASS, null);\n\t\tresult = result.inclusion(JsonTypeInfo.As.PROPERTY);\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "type",
            "resolver",
            "builder",
            "that",
            "restricts",
            "allowed",
            "types"
        ]
    },
    {
        "id": 731,
        "code": "\tpublic User deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n\t\tObjectMapper mapper = (ObjectMapper) jp.getCodec();\n\t\tJsonNode jsonNode = mapper.readTree(jp);\n\t\tSet<? extends GrantedAuthority> authorities = mapper.convertValue(jsonNode.get(\"authorities\"),\n\t\t\t\tSIMPLE_GRANTED_AUTHORITY_SET);\n\t\tJsonNode passwordNode = readJsonNode(jsonNode, \"password\");\n\t\tString username = readJsonNode(jsonNode, \"username\").asText();\n\t\tString password = passwordNode.asText(\"\");\n\t\tboolean enabled = readJsonNode(jsonNode, \"enabled\").asBoolean();\n\t\tboolean accountNonExpired = readJsonNode(jsonNode, \"accountNonExpired\").asBoolean();\n\t\tboolean credentialsNonExpired = readJsonNode(jsonNode, \"credentialsNonExpired\").asBoolean();\n\t\tboolean accountNonLocked = readJsonNode(jsonNode, \"accountNonLocked\").asBoolean();\n\t\tUser result = new User(username, password, enabled, accountNonExpired, credentialsNonExpired, accountNonLocked,\n\t\t\t\tauthorities);\n\t\tif (passwordNode.asText(null) == null) {\n\t\t\tresult.eraseCredentials();\n\t\t}\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "this",
            "method",
            "will",
            "create",
            "user",
            "object"
        ]
    },
    {
        "id": 732,
        "code": "\tpublic UsernamePasswordAuthenticationToken deserialize(JsonParser jp, DeserializationContext ctxt)\n\t\t\tthrows IOException, JsonProcessingException {\n\t\tObjectMapper mapper = (ObjectMapper) jp.getCodec();\n\t\tJsonNode jsonNode = mapper.readTree(jp);\n\t\tBoolean authenticated = readJsonNode(jsonNode, \"authenticated\").asBoolean();\n\t\tJsonNode principalNode = readJsonNode(jsonNode, \"principal\");\n\t\tObject principal = getPrincipal(mapper, principalNode);\n\t\tJsonNode credentialsNode = readJsonNode(jsonNode, \"credentials\");\n\t\tObject credentials = getCredentials(credentialsNode);\n\t\tList<GrantedAuthority> authorities = mapper.readValue(readJsonNode(jsonNode, \"authorities\").traverse(mapper),\n\t\t\t\tGRANTED_AUTHORITY_LIST);\n\t\tUsernamePasswordAuthenticationToken token = (!authenticated)\n\t\t\t\t? UsernamePasswordAuthenticationToken.unauthenticated(principal, credentials)\n\t\t\t\t: UsernamePasswordAuthenticationToken.authenticated(principal, credentials, authorities);\n\t\tJsonNode detailsNode = readJsonNode(jsonNode, \"details\");\n\t\tif (detailsNode.isNull() || detailsNode.isMissingNode()) {\n\t\t\ttoken.setDetails(null);\n\t\t}\n\t\telse {\n\t\t\tObject details = mapper.readValue(detailsNode.toString(), OBJECT);\n\t\t\ttoken.setDetails(details);\n\t\t}\n\t\treturn token;\n\t}",
        "summary_tokens": [
            "this",
            "method",
            "construct",
            "username",
            "password",
            "authentication",
            "token",
            "object",
            "from",
            "serialized",
            "json"
        ]
    },
    {
        "id": 733,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n\t\tAssert.notNull(securityContextHolderStrategy, \"securityContextHolderStrategy cannot be null\");\n\t\tthis.securityContextHolderStrategy = securityContextHolderStrategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 734,
        "code": "\tprotected List<UserDetails> loadUsersByUsername(String username) {\n\t\treturn getJdbcTemplate().query(getUsersByUsernameQuery(), this::mapToUser, username);\n\t}",
        "summary_tokens": [
            "executes",
            "the",
            "sql",
            "tt",
            "users",
            "by",
            "username",
            "query",
            "tt",
            "and",
            "returns",
            "a",
            "list",
            "of",
            "user",
            "details",
            "objects"
        ]
    },
    {
        "id": 735,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n\t\tAssert.notNull(securityContextHolderStrategy, \"securityContextHolderStrategy cannot be null\");\n\t\tthis.securityContextHolderStrategy = securityContextHolderStrategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 736,
        "code": "\tpublic void setUserCache(UserCache userCache) {\n\t\tAssert.notNull(userCache, \"userCache cannot be null\");\n\t\tthis.userCache = userCache;\n\t}",
        "summary_tokens": [
            "optionally",
            "sets",
            "the",
            "user",
            "cache",
            "if",
            "one",
            "is",
            "in",
            "use",
            "in",
            "the",
            "application"
        ]
    },
    {
        "id": 737,
        "code": "\tpublic static Field getField(Class<?> clazz, String fieldName) throws IllegalStateException {\n\t\tAssert.notNull(clazz, \"Class required\");\n\t\tAssert.hasText(fieldName, \"Field name required\");\n\t\ttry {\n\t\t\treturn clazz.getDeclaredField(fieldName);\n\t\t}\n\t\tcatch (NoSuchFieldException ex) {\n\t\t\t\n\t\t\tif (clazz.getSuperclass() != null) {\n\t\t\t\treturn getField(clazz.getSuperclass(), fieldName);\n\t\t\t}\n\t\t\tthrow new IllegalStateException(\"Could not locate field '\" + fieldName + \"' on class \" + clazz);\n\t\t}\n\t}",
        "summary_tokens": [
            "attempts",
            "to",
            "locate",
            "the",
            "specified",
            "field",
            "on",
            "the",
            "class"
        ]
    },
    {
        "id": 738,
        "code": "\tpublic static Object getFieldValue(Object bean, String fieldName) throws IllegalAccessException {\n\t\tAssert.notNull(bean, \"Bean cannot be null\");\n\t\tAssert.hasText(fieldName, \"Field name required\");\n\t\tString[] nestedFields = StringUtils.tokenizeToStringArray(fieldName, \".\");\n\t\tClass<?> componentClass = bean.getClass();\n\t\tObject value = bean;\n\t\tfor (String nestedField : nestedFields) {\n\t\t\tField field = getField(componentClass, nestedField);\n\t\t\tfield.setAccessible(true);\n\t\t\tvalue = field.get(value);\n\t\t\tif (value != null) {\n\t\t\t\tcomponentClass = value.getClass();\n\t\t\t}\n\t\t}\n\t\treturn value;\n\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "of",
            "a",
            "nested",
            "field",
            "on",
            "a",
            "bean"
        ]
    },
    {
        "id": 739,
        "code": "\tpublic static MethodInvocation create(Object object, String methodName, Object... args) {\n\t\tAssert.notNull(object, \"Object required\");\n\t\tClass<?>[] classArgs = null;\n\t\tif (args != null) {\n\t\t\tclassArgs = new Class<?>[args.length];\n\t\t\tfor (int i = 0; i < args.length; i++) {\n\t\t\t\tclassArgs[i] = args[i].getClass();\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\tClass<?> target = AopUtils.getTargetClass(object);\n\t\tif (object instanceof Advised) {\n\t\t\tAdvised a = (Advised) object;\n\t\t\tif (!a.isProxyTargetClass()) {\n\t\t\t\tClass<?>[] possibleInterfaces = a.getProxiedInterfaces();\n\t\t\t\tfor (Class<?> possibleInterface : possibleInterfaces) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpossibleInterface.getMethod(methodName, classArgs);\n\t\t\t\t\t\t\n\t\t\t\t\t\ttarget = possibleInterface;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception ex) {\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn createFromClass(object, target, methodName, classArgs, args);\n\t}",
        "summary_tokens": [
            "generates",
            "a",
            "code",
            "method",
            "invocation",
            "code",
            "for",
            "specified",
            "code",
            "method",
            "name",
            "code",
            "on",
            "the",
            "passed",
            "object",
            "using",
            "the",
            "code",
            "args",
            "code",
            "to",
            "locate",
            "the",
            "method"
        ]
    },
    {
        "id": 740,
        "code": "\tpublic static MethodInvocation createFromClass(Object targetObject, Class<?> clazz, String methodName,\n\t\t\tClass<?>[] classArgs, Object[] args) {\n\t\tAssert.notNull(clazz, \"Class required\");\n\t\tAssert.hasText(methodName, \"MethodName required\");\n\t\ttry {\n\t\t\tMethod method = clazz.getMethod(methodName, classArgs);\n\t\t\treturn new SimpleMethodInvocation(targetObject, method, args);\n\t\t}\n\t\tcatch (NoSuchMethodException ex) {\n\t\t\treturn null;\n\t\t}\n\t}",
        "summary_tokens": [
            "generates",
            "a",
            "code",
            "method",
            "invocation",
            "code",
            "for",
            "specified",
            "code",
            "method",
            "name",
            "code",
            "on",
            "the",
            "passed",
            "class",
            "using",
            "the",
            "code",
            "args",
            "code",
            "to",
            "locate",
            "the",
            "method"
        ]
    },
    {
        "id": 741,
        "code": "\tpublic String makeLowerCase(String input) {\n\t\tAuthentication auth = SecurityContextHolder.getContext().getAuthentication();\n\t\tif (auth == null) {\n\t\t\treturn input.toLowerCase() + \" Authentication empty\";\n\t\t}\n\t\telse {\n\t\t\treturn input.toLowerCase() + \" \" + auth.getClass().getName() + \" \" + auth.isAuthenticated();\n\t\t}\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "lowercase",
            "string",
            "followed",
            "by",
            "security",
            "environment",
            "information"
        ]
    },
    {
        "id": 742,
        "code": "\tpublic String makeUpperCase(String input) {\n\t\tAuthentication auth = SecurityContextHolder.getContext().getAuthentication();\n\t\treturn input.toUpperCase() + \" \" + auth.getClass().getName() + \" \" + auth.isAuthenticated();\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "uppercase",
            "string",
            "followed",
            "by",
            "security",
            "environment",
            "information"
        ]
    },
    {
        "id": 743,
        "code": "\tpublic String publicMakeLowerCase(String input) {\n\t\treturn this.makeLowerCase(input);\n\t}",
        "summary_tokens": [
            "delegates",
            "through",
            "to",
            "the",
            "make",
            "lower",
            "case",
            "string",
            "method"
        ]
    },
    {
        "id": 744,
        "code": "\tpublic void classLevelAnnotationsOnlyAffectTheClassTheyAnnotateAndTheirMembers() throws Exception {\n\t\tChild target = new Child();\n\t\tMockMethodInvocation mi = new MockMethodInvocation(target, target.getClass(), \"notOverriden\");\n\t\tCollection<ConfigAttribute> accessAttributes = this.mds.getAttributes(mi);\n\t\tassertThat(accessAttributes).isNull();\n\t}",
        "summary_tokens": [
            "class",
            "level",
            "annotations",
            "only",
            "affect",
            "the",
            "class",
            "they",
            "annotate",
            "and",
            "their",
            "members",
            "that",
            "is",
            "its",
            "methods",
            "and",
            "fields"
        ]
    },
    {
        "id": 745,
        "code": "\tpublic void interfacesNeverContributeAnnotationsMethodLevel() throws Exception {\n\t\tParent target = new Parent();\n\t\tMockMethodInvocation mi = new MockMethodInvocation(target, target.getClass(), \"interfaceMethod\");\n\t\tCollection<ConfigAttribute> accessAttributes = this.mds.getAttributes(mi);\n\t\tassertThat(accessAttributes).isEmpty();\n\t}",
        "summary_tokens": [
            "the",
            "interfaces",
            "implemented",
            "by",
            "a",
            "class",
            "never",
            "contribute",
            "annotations",
            "to",
            "the",
            "class",
            "itself",
            "or",
            "any",
            "of",
            "its",
            "members"
        ]
    },
    {
        "id": 746,
        "code": "\tpublic static MockMethodInvocation createSec2150MethodInvocation() throws NoSuchMethodException {\n\t\tProxyFactory factory = new ProxyFactory(new Class[] { PersonRepository.class });\n\t\tfactory.setTargetClass(CrudRepository.class);\n\t\tPersonRepository repository = (PersonRepository) factory.getProxy();\n\t\treturn new MockMethodInvocation(repository, PersonRepository.class, \"findAll\");\n\t}",
        "summary_tokens": [
            "in",
            "order",
            "to",
            "reproduce",
            "the",
            "bug",
            "for",
            "sec",
            "0",
            "we",
            "must",
            "have",
            "a",
            "proxy",
            "object",
            "that",
            "implements",
            "target",
            "source",
            "aware",
            "and",
            "implements",
            "our",
            "annotated",
            "interface"
        ]
    },
    {
        "id": 747,
        "code": "\tpublic void IGNOREtestSec2056() {\n\t\tUsernamePasswordAuthenticationToken foundUser = UsernamePasswordAuthenticationToken.unauthenticated(\"rod\",\n\t\t\t\t\"koala\");\n\t\tUsernamePasswordAuthenticationToken notFoundUser = UsernamePasswordAuthenticationToken\n\t\t\t\t.unauthenticated(\"notFound\", \"koala\");\n\t\tPasswordEncoder encoder = new BCryptPasswordEncoder(10, new SecureRandom());\n\t\tDaoAuthenticationProvider provider = new DaoAuthenticationProvider();\n\t\tprovider.setHideUserNotFoundExceptions(false);\n\t\tprovider.setPasswordEncoder(encoder);\n\t\tMockUserDetailsServiceUserRod userDetailsService = new MockUserDetailsServiceUserRod();\n\t\tuserDetailsService.password = encoder.encode((CharSequence) foundUser.getCredentials());\n\t\tprovider.setUserDetailsService(userDetailsService);\n\t\tint sampleSize = 100;\n\t\tList<Long> userFoundTimes = new ArrayList<>(sampleSize);\n\t\tfor (int i = 0; i < sampleSize; i++) {\n\t\t\tlong start = System.currentTimeMillis();\n\t\t\tprovider.authenticate(foundUser);\n\t\t\tuserFoundTimes.add(System.currentTimeMillis() - start);\n\t\t}\n\t\tList<Long> userNotFoundTimes = new ArrayList<>(sampleSize);\n\t\tfor (int i = 0; i < sampleSize; i++) {\n\t\t\tlong start = System.currentTimeMillis();\n\t\t\tassertThatExceptionOfType(UsernameNotFoundException.class)\n\t\t\t\t\t.isThrownBy(() -> provider.authenticate(notFoundUser));\n\t\t\tuserNotFoundTimes.add(System.currentTimeMillis() - start);\n\t\t}\n\t\tdouble userFoundAvg = avg(userFoundTimes);\n\t\tdouble userNotFoundAvg = avg(userNotFoundTimes);\n\t\tassertThat(Math.abs(userNotFoundAvg - userFoundAvg) <= 3).withFailMessage(\"User not found average \"\n\t\t\t\t+ userNotFoundAvg + \" should be within 3ms of user found average \" + userFoundAvg).isTrue();\n\t}",
        "summary_tokens": [
            "this",
            "is",
            "an",
            "explicit",
            "test",
            "for",
            "sec",
            "0"
        ]
    },
    {
        "id": 748,
        "code": "\tstatic void setField(final Field field, final Object newValue) {\n\t\ttry {\n\t\t\tfield.setAccessible(true);\n\t\t\tint fieldModifiersMask = field.getModifiers();\n\t\t\tboolean isFinalModifierPresent = (fieldModifiersMask & Modifier.FINAL) == Modifier.FINAL;\n\t\t\tif (isFinalModifierPresent) {\n\t\t\t\tAccessController.doPrivileged(new PrivilegedAction<Object>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object run() {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tUnsafe unsafe = UnsafeUtils.getUnsafe();\n\t\t\t\t\t\t\tlong offset = unsafe.staticFieldOffset(field);\n\t\t\t\t\t\t\tObject base = unsafe.staticFieldBase(field);\n\t\t\t\t\t\t\tsetFieldUsingUnsafe(base, field.getType(), offset, newValue, unsafe);\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (Throwable thrown) {\n\t\t\t\t\t\t\tthrow new RuntimeException(thrown);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfield.set(null, newValue);\n\t\t\t}\n\t\t}\n\t\tcatch (SecurityException ex) {\n\t\t\tthrow new RuntimeException(ex);\n\t\t}\n\t\tcatch (IllegalAccessException ex) {\n\t\t\tthrow new RuntimeException(ex);\n\t\t}\n\t\tcatch (IllegalArgumentException ex) {\n\t\t\tthrow new RuntimeException(ex);\n\t\t}\n\t}",
        "summary_tokens": [
            "used",
            "to",
            "support",
            "setting",
            "static",
            "fields",
            "that",
            "are",
            "final",
            "using",
            "java",
            "s",
            "unsafe"
        ]
    },
    {
        "id": 749,
        "code": "\tstatic String encode(byte[] hash, Argon2Parameters parameters) throws IllegalArgumentException {\n\t\tStringBuilder stringBuilder = new StringBuilder();\n\t\tswitch (parameters.getType()) {\n\t\tcase Argon2Parameters.ARGON2_d:\n\t\t\tstringBuilder.append(\"$argon2d\");\n\t\t\tbreak;\n\t\tcase Argon2Parameters.ARGON2_i:\n\t\t\tstringBuilder.append(\"$argon2i\");\n\t\t\tbreak;\n\t\tcase Argon2Parameters.ARGON2_id:\n\t\t\tstringBuilder.append(\"$argon2id\");\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new IllegalArgumentException(\"Invalid algorithm type: \" + parameters.getType());\n\t\t}\n\t\tstringBuilder.append(\"$v=\").append(parameters.getVersion()).append(\"$m=\").append(parameters.getMemory())\n\t\t\t\t.append(\",t=\").append(parameters.getIterations()).append(\",p=\").append(parameters.getLanes());\n\t\tif (parameters.getSalt() != null) {\n\t\t\tstringBuilder.append(\"$\").append(b64encoder.encodeToString(parameters.getSalt()));\n\t\t}\n\t\tstringBuilder.append(\"$\").append(b64encoder.encodeToString(hash));\n\t\treturn stringBuilder.toString();\n\t}",
        "summary_tokens": [
            "encodes",
            "a",
            "raw",
            "argon",
            "0",
            "hash",
            "and",
            "its",
            "parameters",
            "into",
            "the",
            "standard",
            "argon",
            "0",
            "hash",
            "string",
            "as",
            "specified",
            "in",
            "the",
            "reference",
            "implementation",
            "https",
            "github"
        ]
    },
    {
        "id": 750,
        "code": "\tstatic Argon2Hash decode(String encodedHash) throws IllegalArgumentException {\n\t\tArgon2Parameters.Builder paramsBuilder;\n\t\tString[] parts = encodedHash.split(\"\\\\$\");\n\t\tif (parts.length < 4) {\n\t\t\tthrow new IllegalArgumentException(\"Invalid encoded Argon2-hash\");\n\t\t}\n\t\tint currentPart = 1;\n\t\tswitch (parts[currentPart++]) {\n\t\tcase \"argon2d\":\n\t\t\tparamsBuilder = new Argon2Parameters.Builder(Argon2Parameters.ARGON2_d);\n\t\t\tbreak;\n\t\tcase \"argon2i\":\n\t\t\tparamsBuilder = new Argon2Parameters.Builder(Argon2Parameters.ARGON2_i);\n\t\t\tbreak;\n\t\tcase \"argon2id\":\n\t\t\tparamsBuilder = new Argon2Parameters.Builder(Argon2Parameters.ARGON2_id);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new IllegalArgumentException(\"Invalid algorithm type: \" + parts[0]);\n\t\t}\n\t\tif (parts[currentPart].startsWith(\"v=\")) {\n\t\t\tparamsBuilder.withVersion(Integer.parseInt(parts[currentPart].substring(2)));\n\t\t\tcurrentPart++;\n\t\t}\n\t\tString[] performanceParams = parts[currentPart++].split(\",\");\n\t\tif (performanceParams.length != 3) {\n\t\t\tthrow new IllegalArgumentException(\"Amount of performance parameters invalid\");\n\t\t}\n\t\tif (!performanceParams[0].startsWith(\"m=\")) {\n\t\t\tthrow new IllegalArgumentException(\"Invalid memory parameter\");\n\t\t}\n\t\tparamsBuilder.withMemoryAsKB(Integer.parseInt(performanceParams[0].substring(2)));\n\t\tif (!performanceParams[1].startsWith(\"t=\")) {\n\t\t\tthrow new IllegalArgumentException(\"Invalid iterations parameter\");\n\t\t}\n\t\tparamsBuilder.withIterations(Integer.parseInt(performanceParams[1].substring(2)));\n\t\tif (!performanceParams[2].startsWith(\"p=\")) {\n\t\t\tthrow new IllegalArgumentException(\"Invalid parallelity parameter\");\n\t\t}\n\t\tparamsBuilder.withParallelism(Integer.parseInt(performanceParams[2].substring(2)));\n\t\tparamsBuilder.withSalt(b64decoder.decode(parts[currentPart++]));\n\t\treturn new Argon2Hash(b64decoder.decode(parts[currentPart]), paramsBuilder.build());\n\t}",
        "summary_tokens": [
            "decodes",
            "an",
            "argon",
            "0",
            "hash",
            "string",
            "as",
            "specified",
            "in",
            "the",
            "reference",
            "implementation",
            "https",
            "github"
        ]
    },
    {
        "id": 751,
        "code": "\tstatic void encode_base64(byte d[], int len, StringBuilder rs) throws IllegalArgumentException {\n\t\tint off = 0;\n\t\tint c1, c2;\n\n\t\tif (len <= 0 || len > d.length) {\n\t\t\tthrow new IllegalArgumentException(\"Invalid len\");\n\t\t}\n\n\t\twhile (off < len) {\n\t\t\tc1 = d[off++] & 0xff;\n\t\t\trs.append(base64_code[(c1 >> 2) & 0x3f]);\n\t\t\tc1 = (c1 & 0x03) << 4;\n\t\t\tif (off >= len) {\n\t\t\t\trs.append(base64_code[c1 & 0x3f]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tc2 = d[off++] & 0xff;\n\t\t\tc1 |= (c2 >> 4) & 0x0f;\n\t\t\trs.append(base64_code[c1 & 0x3f]);\n\t\t\tc1 = (c2 & 0x0f) << 2;\n\t\t\tif (off >= len) {\n\t\t\t\trs.append(base64_code[c1 & 0x3f]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tc2 = d[off++] & 0xff;\n\t\t\tc1 |= (c2 >> 6) & 0x03;\n\t\t\trs.append(base64_code[c1 & 0x3f]);\n\t\t\trs.append(base64_code[c2 & 0x3f]);\n\t\t}\n\t}",
        "summary_tokens": [
            "encode",
            "a",
            "byte",
            "array",
            "using",
            "bcrypt",
            "s",
            "slightly",
            "modified",
            "base",
            "0",
            "encoding",
            "scheme"
        ]
    },
    {
        "id": 752,
        "code": "\tprivate static byte char64(char x) {\n\t\tif (x < 0 || x >= index_64.length) {\n\t\t\treturn -1;\n\t\t}\n\t\treturn index_64[x];\n\t}",
        "summary_tokens": [
            "look",
            "up",
            "the",
            "0",
            "bits",
            "base",
            "0",
            "encoded",
            "by",
            "the",
            "specified",
            "character",
            "range",
            "checking",
            "againt",
            "conversion",
            "table",
            "x",
            "the",
            "base",
            "0",
            "encoded",
            "value",
            "the",
            "decoded",
            "value",
            "of",
            "x"
        ]
    },
    {
        "id": 753,
        "code": "\tstatic byte[] decode_base64(String s, int maxolen) throws IllegalArgumentException {\n\t\tStringBuilder rs = new StringBuilder();\n\t\tint off = 0, slen = s.length(), olen = 0;\n\t\tbyte ret[];\n\t\tbyte c1, c2, c3, c4, o;\n\n\t\tif (maxolen <= 0) {\n\t\t\tthrow new IllegalArgumentException(\"Invalid maxolen\");\n\t\t}\n\n\t\twhile (off < slen - 1 && olen < maxolen) {\n\t\t\tc1 = char64(s.charAt(off++));\n\t\t\tc2 = char64(s.charAt(off++));\n\t\t\tif (c1 == -1 || c2 == -1) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\to = (byte) (c1 << 2);\n\t\t\to |= (c2 & 0x30) >> 4;\n\t\t\trs.append((char) o);\n\t\t\tif (++olen >= maxolen || off >= slen) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tc3 = char64(s.charAt(off++));\n\t\t\tif (c3 == -1) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\to = (byte) ((c2 & 0x0f) << 4);\n\t\t\to |= (c3 & 0x3c) >> 2;\n\t\t\trs.append((char) o);\n\t\t\tif (++olen >= maxolen || off >= slen) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tc4 = char64(s.charAt(off++));\n\t\t\to = (byte) ((c3 & 0x03) << 6);\n\t\t\to |= c4;\n\t\t\trs.append((char) o);\n\t\t\t++olen;\n\t\t}\n\n\t\tret = new byte[olen];\n\t\tfor (off = 0; off < olen; off++) {\n\t\t\tret[off] = (byte) rs.charAt(off);\n\t\t}\n\t\treturn ret;\n\t}",
        "summary_tokens": [
            "decode",
            "a",
            "string",
            "encoded",
            "using",
            "bcrypt",
            "s",
            "base",
            "0",
            "scheme",
            "to",
            "a",
            "byte",
            "array"
        ]
    },
    {
        "id": 754,
        "code": "\tprivate void encipher(int lr[], int off) {\n\t\tint i, n, l = lr[off], r = lr[off + 1];\n\n\t\tl ^= this.P[0];\n\t\tfor (i = 0; i <= BLOWFISH_NUM_ROUNDS - 2;) {\n\t\t\t\n\t\t\tn = this.S[(l >> 24) & 0xff];\n\t\t\tn += this.S[0x100 | ((l >> 16) & 0xff)];\n\t\t\tn ^= this.S[0x200 | ((l >> 8) & 0xff)];\n\t\t\tn += this.S[0x300 | (l & 0xff)];\n\t\t\tr ^= n ^ this.P[++i];\n\n\t\t\t\n\t\t\tn = this.S[(r >> 24) & 0xff];\n\t\t\tn += this.S[0x100 | ((r >> 16) & 0xff)];\n\t\t\tn ^= this.S[0x200 | ((r >> 8) & 0xff)];\n\t\t\tn += this.S[0x300 | (r & 0xff)];\n\t\t\tl ^= n ^ this.P[++i];\n\t\t}\n\t\tlr[off] = r ^ this.P[BLOWFISH_NUM_ROUNDS + 1];\n\t\tlr[off + 1] = l;\n\t}",
        "summary_tokens": [
            "blowfish",
            "encipher",
            "a",
            "single",
            "0",
            "bit",
            "block",
            "encoded",
            "as",
            "two",
            "0",
            "bit",
            "halves",
            "lr",
            "an",
            "array",
            "containing",
            "the",
            "two",
            "0",
            "bit",
            "half",
            "blocks",
            "off",
            "the",
            "position",
            "in",
            "the",
            "array",
            "of",
            "the",
            "blocks"
        ]
    },
    {
        "id": 755,
        "code": "\tprivate static int[] streamtowords(byte data[], int offp[], int signp[]) {\n\t\tint i;\n\t\tint words[] = { 0, 0 };\n\t\tint off = offp[0];\n\t\tint sign = signp[0];\n\n\t\tfor (i = 0; i < 4; i++) {\n\t\t\twords[0] = (words[0] << 8) | (data[off] & 0xff);\n\t\t\twords[1] = (words[1] << 8) | data[off]; \n\t\t\tif (i > 0) {\n\t\t\t\tsign |= words[1] & 0x80;\n\t\t\t}\n\t\t\toff = (off + 1) % data.length;\n\t\t}\n\n\t\toffp[0] = off;\n\t\tsignp[0] = sign;\n\t\treturn words;\n\t}",
        "summary_tokens": [
            "cycically",
            "extract",
            "a",
            "word",
            "of",
            "key",
            "material",
            "data",
            "the",
            "string",
            "to",
            "extract",
            "the",
            "data",
            "from",
            "offp",
            "a",
            "pointer",
            "as",
            "a",
            "one",
            "entry",
            "array",
            "to",
            "the",
            "current",
            "offset",
            "into",
            "data",
            "signp",
            "a",
            "pointer",
            "as",
            "a",
            "one",
            "entry",
            "array",
            "to",
            "the",
            "cumulative",
            "flag",
            "for",
            "non",
            "benign",
            "sign",
            "extension",
            "correct",
            "and",
            "buggy",
            "next",
            "word",
            "of",
            "material",
            "from",
            "data",
            "as",
            "int",
            "0"
        ]
    },
    {
        "id": 756,
        "code": "\tprivate static int streamtoword(byte data[], int offp[]) {\n\t\tint signp[] = { 0 };\n\t\treturn streamtowords(data, offp, signp)[0];\n\t}",
        "summary_tokens": [
            "cycically",
            "extract",
            "a",
            "word",
            "of",
            "key",
            "material",
            "data",
            "the",
            "string",
            "to",
            "extract",
            "the",
            "data",
            "from",
            "offp",
            "a",
            "pointer",
            "as",
            "a",
            "one",
            "entry",
            "array",
            "to",
            "the",
            "current",
            "offset",
            "into",
            "data",
            "the",
            "next",
            "word",
            "of",
            "material",
            "from",
            "data"
        ]
    },
    {
        "id": 757,
        "code": "\tprivate static int streamtoword_bug(byte data[], int offp[]) {\n\t\tint signp[] = { 0 };\n\t\treturn streamtowords(data, offp, signp)[1];\n\t}",
        "summary_tokens": [
            "cycically",
            "extract",
            "a",
            "word",
            "of",
            "key",
            "material",
            "with",
            "sign",
            "extension",
            "bug",
            "data",
            "the",
            "string",
            "to",
            "extract",
            "the",
            "data",
            "from",
            "offp",
            "a",
            "pointer",
            "as",
            "a",
            "one",
            "entry",
            "array",
            "to",
            "the",
            "current",
            "offset",
            "into",
            "data",
            "the",
            "next",
            "word",
            "of",
            "material",
            "from",
            "data"
        ]
    },
    {
        "id": 758,
        "code": "\tprivate void init_key() {\n\t\tthis.P = P_orig.clone();\n\t\tthis.S = S_orig.clone();\n\t}",
        "summary_tokens": [
            "initialise",
            "the",
            "blowfish",
            "key",
            "schedule"
        ]
    },
    {
        "id": 759,
        "code": "\tprivate void key(byte key[], boolean sign_ext_bug, int safety) {\n\t\tint i;\n\t\tint koffp[] = { 0 };\n\t\tint lr[] = { 0, 0 };\n\t\tint plen = this.P.length, slen = this.S.length;\n\n\t\tfor (i = 0; i < plen; i++) {\n\t\t\tif (!sign_ext_bug) {\n\t\t\t\tthis.P[i] = this.P[i] ^ streamtoword(key, koffp);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.P[i] = this.P[i] ^ streamtoword_bug(key, koffp);\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0; i < plen; i += 2) {\n\t\t\tencipher(lr, 0);\n\t\t\tthis.P[i] = lr[0];\n\t\t\tthis.P[i + 1] = lr[1];\n\t\t}\n\n\t\tfor (i = 0; i < slen; i += 2) {\n\t\t\tencipher(lr, 0);\n\t\t\tthis.S[i] = lr[0];\n\t\t\tthis.S[i + 1] = lr[1];\n\t\t}\n\t}",
        "summary_tokens": [
            "key",
            "the",
            "blowfish",
            "cipher",
            "key",
            "an",
            "array",
            "containing",
            "the",
            "key",
            "sign",
            "ext",
            "bug",
            "true",
            "to",
            "implement",
            "the",
            "0",
            "x",
            "bug",
            "safety",
            "bit",
            "0",
            "is",
            "set",
            "when",
            "the",
            "safety",
            "measure",
            "is",
            "requested"
        ]
    },
    {
        "id": 760,
        "code": "\tprivate void ekskey(byte data[], byte key[], boolean sign_ext_bug, int safety) {\n\t\tint i;\n\t\tint koffp[] = { 0 }, doffp[] = { 0 };\n\t\tint lr[] = { 0, 0 };\n\t\tint plen = this.P.length, slen = this.S.length;\n\t\tint signp[] = { 0 }; \n\t\tint diff = 0; \n\n\t\tfor (i = 0; i < plen; i++) {\n\t\t\tint words[] = streamtowords(key, koffp, signp);\n\t\t\tdiff |= words[0] ^ words[1];\n\t\t\tthis.P[i] = this.P[i] ^ words[sign_ext_bug ? 1 : 0];\n\t\t}\n\n\t\tint sign = signp[0];\n\n\t\t\n\t\tdiff |= diff >> 16; \n\t\tdiff &= 0xffff; \n\t\tdiff += 0xffff; \n\t\tsign <<= 9; \n\t\tsign &= ~diff & safety; \n\n\t\t\n\t\tthis.P[0] ^= sign;\n\n\t\tfor (i = 0; i < plen; i += 2) {\n\t\t\tlr[0] ^= streamtoword(data, doffp);\n\t\t\tlr[1] ^= streamtoword(data, doffp);\n\t\t\tencipher(lr, 0);\n\t\t\tthis.P[i] = lr[0];\n\t\t\tthis.P[i + 1] = lr[1];\n\t\t}\n\n\t\tfor (i = 0; i < slen; i += 2) {\n\t\t\tlr[0] ^= streamtoword(data, doffp);\n\t\t\tlr[1] ^= streamtoword(data, doffp);\n\t\t\tencipher(lr, 0);\n\t\t\tthis.S[i] = lr[0];\n\t\t\tthis.S[i + 1] = lr[1];\n\t\t}\n\t}",
        "summary_tokens": [
            "perform",
            "the",
            "enhanced",
            "key",
            "schedule",
            "step",
            "described",
            "by",
            "provos",
            "and",
            "mazieres",
            "in",
            "a",
            "future",
            "adaptable",
            "password",
            "scheme",
            "https",
            "www"
        ]
    },
    {
        "id": 761,
        "code": "\tprivate byte[] crypt_raw(byte password[], byte salt[], int log_rounds, boolean sign_ext_bug, int safety,\n\t\t\tboolean for_check) {\n\t\tint cdata[] = bf_crypt_ciphertext.clone();\n\t\tint clen = cdata.length;\n\n\t\tlong rounds;\n\t\tif (log_rounds < 4 || log_rounds > 31) {\n\t\t\tif (!for_check) {\n\t\t\t\tthrow new IllegalArgumentException(\"Bad number of rounds\");\n\t\t\t}\n\t\t\tif (log_rounds != 0) {\n\t\t\t\tthrow new IllegalArgumentException(\"Bad number of rounds\");\n\t\t\t}\n\t\t\trounds = 0;\n\t\t}\n\t\telse {\n\t\t\trounds = roundsForLogRounds(log_rounds);\n\t\t\tif (rounds < 16 || rounds > 2147483648L) {\n\t\t\t\tthrow new IllegalArgumentException(\"Bad number of rounds\");\n\t\t\t}\n\t\t}\n\n\t\tif (salt.length != BCRYPT_SALT_LEN) {\n\t\t\tthrow new IllegalArgumentException(\"Bad salt length\");\n\t\t}\n\n\t\tinit_key();\n\t\tekskey(salt, password, sign_ext_bug, safety);\n\t\tfor (int i = 0; i < rounds; i++) {\n\t\t\tkey(password, sign_ext_bug, safety);\n\t\t\tkey(salt, false, safety);\n\t\t}\n\n\t\tfor (int i = 0; i < 64; i++) {\n\t\t\tfor (int j = 0; j < (clen >> 1); j++) {\n\t\t\t\tencipher(cdata, j << 1);\n\t\t\t}\n\t\t}\n\n\t\tbyte[] ret = new byte[clen * 4];\n\t\tfor (int i = 0, j = 0; i < clen; i++) {\n\t\t\tret[j++] = (byte) ((cdata[i] >> 24) & 0xff);\n\t\t\tret[j++] = (byte) ((cdata[i] >> 16) & 0xff);\n\t\t\tret[j++] = (byte) ((cdata[i] >> 8) & 0xff);\n\t\t\tret[j++] = (byte) (cdata[i] & 0xff);\n\t\t}\n\t\treturn ret;\n\t}",
        "summary_tokens": [
            "perform",
            "the",
            "central",
            "password",
            "hashing",
            "step",
            "in",
            "the",
            "bcrypt",
            "scheme",
            "password",
            "the",
            "password",
            "to",
            "hash",
            "salt",
            "the",
            "binary",
            "salt",
            "to",
            "hash",
            "with",
            "the",
            "password",
            "log",
            "rounds",
            "the",
            "binary",
            "logarithm",
            "of",
            "the",
            "number",
            "of",
            "rounds",
            "of",
            "hashing",
            "to",
            "apply",
            "sign",
            "ext",
            "bug",
            "true",
            "to",
            "implement",
            "the",
            "0",
            "x",
            "bug",
            "safety",
            "bit",
            "0",
            "is",
            "set",
            "when",
            "the",
            "safety",
            "measure",
            "is",
            "requested",
            "an",
            "array",
            "containing",
            "the",
            "binary",
            "hashed",
            "password"
        ]
    },
    {
        "id": 762,
        "code": "\tpublic static String hashpw(byte passwordb[], String salt) {\n\t\treturn hashpw(passwordb, salt, false);\n\t}",
        "summary_tokens": [
            "hash",
            "a",
            "password",
            "using",
            "the",
            "open",
            "bsd",
            "bcrypt",
            "scheme",
            "passwordb",
            "the",
            "password",
            "to",
            "hash",
            "as",
            "a",
            "byte",
            "array",
            "salt",
            "the",
            "salt",
            "to",
            "hash",
            "with",
            "perhaps",
            "generated",
            "using",
            "bcrypt"
        ]
    },
    {
        "id": 763,
        "code": "\tpublic static String gensalt() {\n\t\treturn gensalt(GENSALT_DEFAULT_LOG2_ROUNDS);\n\t}",
        "summary_tokens": [
            "generate",
            "a",
            "salt",
            "for",
            "use",
            "with",
            "the",
            "bcrypt"
        ]
    },
    {
        "id": 764,
        "code": "\tpublic static boolean checkpw(byte[] passwordb, String hashed) {\n\t\treturn equalsNoEarlyReturn(hashed, hashpwforcheck(passwordb, hashed));\n\t}",
        "summary_tokens": [
            "check",
            "that",
            "a",
            "password",
            "as",
            "a",
            "byte",
            "array",
            "matches",
            "a",
            "previously",
            "hashed",
            "one",
            "passwordb",
            "the",
            "password",
            "to",
            "verify",
            "as",
            "a",
            "byte",
            "array",
            "hashed",
            "the",
            "previously",
            "hashed",
            "password",
            "true",
            "if",
            "the",
            "passwords",
            "match",
            "false",
            "otherwise",
            "0"
        ]
    },
    {
        "id": 765,
        "code": "\tprivate static byte[] getAlphabet(int options) {\n\t\tif ((options & URL_SAFE) == URL_SAFE) {\n\t\t\treturn _URL_SAFE_ALPHABET;\n\t\t}\n\t\telse if ((options & ORDERED) == ORDERED) {\n\t\t\treturn _ORDERED_ALPHABET;\n\t\t}\n\t\telse {\n\t\t\treturn _STANDARD_ALPHABET;\n\t\t}\n\t}",
        "summary_tokens": [
            "returns",
            "one",
            "of",
            "the",
            "something",
            "alphabet",
            "byte",
            "arrays",
            "depending",
            "on",
            "the",
            "options",
            "specified"
        ]
    },
    {
        "id": 766,
        "code": "\tprivate static byte[] getDecodabet(int options) {\n\t\tif ((options & URL_SAFE) == URL_SAFE) {\n\t\t\treturn _URL_SAFE_DECODABET;\n\t\t}\n\t\telse if ((options & ORDERED) == ORDERED) {\n\t\t\treturn _ORDERED_DECODABET;\n\t\t}\n\t\telse {\n\t\t\treturn _STANDARD_DECODABET;\n\t\t}\n\t}",
        "summary_tokens": [
            "returns",
            "one",
            "of",
            "the",
            "something",
            "decodabet",
            "byte",
            "arrays",
            "depending",
            "on",
            "the",
            "options",
            "specified"
        ]
    },
    {
        "id": 767,
        "code": "\tprivate static byte[] encode3to4(byte[] source, int srcOffset, int numSigBytes, byte[] destination, int destOffset,\n\t\t\tint options) {\n\n\t\tbyte[] ALPHABET = getAlphabet(options);\n\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\n\t\t\n\t\t\n\t\t\n\t\t\n\t\tint inBuff = ((numSigBytes > 0) ? ((source[srcOffset] << 24) >>> 8) : 0)\n\t\t\t\t| ((numSigBytes > 1) ? ((source[srcOffset + 1] << 24) >>> 16) : 0)\n\t\t\t\t| ((numSigBytes > 2) ? ((source[srcOffset + 2] << 24) >>> 24) : 0);\n\n\t\tswitch (numSigBytes) {\n\t\tcase 3:\n\t\t\tdestination[destOffset] = ALPHABET[(inBuff >>> 18)];\n\t\t\tdestination[destOffset + 1] = ALPHABET[(inBuff >>> 12) & 0x3f];\n\t\t\tdestination[destOffset + 2] = ALPHABET[(inBuff >>> 6) & 0x3f];\n\t\t\tdestination[destOffset + 3] = ALPHABET[(inBuff) & 0x3f];\n\t\t\treturn destination;\n\n\t\tcase 2:\n\t\t\tdestination[destOffset] = ALPHABET[(inBuff >>> 18)];\n\t\t\tdestination[destOffset + 1] = ALPHABET[(inBuff >>> 12) & 0x3f];\n\t\t\tdestination[destOffset + 2] = ALPHABET[(inBuff >>> 6) & 0x3f];\n\t\t\tdestination[destOffset + 3] = EQUALS_SIGN;\n\t\t\treturn destination;\n\n\t\tcase 1:\n\t\t\tdestination[destOffset] = ALPHABET[(inBuff >>> 18)];\n\t\t\tdestination[destOffset + 1] = ALPHABET[(inBuff >>> 12) & 0x3f];\n\t\t\tdestination[destOffset + 2] = EQUALS_SIGN;\n\t\t\tdestination[destOffset + 3] = EQUALS_SIGN;\n\t\t\treturn destination;\n\n\t\tdefault:\n\t\t\treturn destination;\n\t\t}\n\t}",
        "summary_tokens": [
            "p",
            "encodes",
            "up",
            "to",
            "three",
            "bytes",
            "of",
            "the",
            "array",
            "var",
            "source",
            "var",
            "and",
            "writes",
            "the",
            "resulting",
            "four",
            "base",
            "0",
            "bytes",
            "to",
            "var",
            "destination",
            "var"
        ]
    },
    {
        "id": 768,
        "code": "\tprivate static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) {\n\n\t\tif (source == null) {\n\t\t\tthrow new NullPointerException(\"Cannot serialize a null array.\");\n\t\t} \n\n\t\tif (off < 0) {\n\t\t\tthrow new IllegalArgumentException(\"Cannot have negative offset: \" + off);\n\t\t} \n\n\t\tif (len < 0) {\n\t\t\tthrow new IllegalArgumentException(\"Cannot have length offset: \" + len);\n\t\t} \n\n\t\tif (off + len > source.length) {\n\t\t\tthrow new IllegalArgumentException(String.format(\n\t\t\t\t\t\"Cannot have offset of %d and length of %d with array of length %d\", off, len, source.length));\n\t\t} \n\n\t\tboolean breakLines = (options & DO_BREAK_LINES) > 0;\n\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\n\t\t\n\t\tint encLen = (len / 3) * 4 + ((len % 3 > 0) ? 4 : 0);\n\n\t\tif (breakLines) {\n\t\t\tencLen += encLen / MAX_LINE_LENGTH; \n\t\t}\n\t\tbyte[] outBuff = new byte[encLen];\n\n\t\tint d = 0;\n\t\tint e = 0;\n\t\tint len2 = len - 2;\n\t\tint lineLength = 0;\n\t\tfor (; d < len2; d += 3, e += 4) {\n\t\t\tencode3to4(source, d + off, 3, outBuff, e, options);\n\n\t\t\tlineLength += 4;\n\t\t\tif (breakLines && lineLength >= MAX_LINE_LENGTH) {\n\t\t\t\toutBuff[e + 4] = NEW_LINE;\n\t\t\t\te++;\n\t\t\t\tlineLength = 0;\n\t\t\t} \n\t\t} \n\n\t\tif (d < len) {\n\t\t\tencode3to4(source, d + off, len - d, outBuff, e, options);\n\t\t\te += 4;\n\t\t} \n\n\t\t\n\t\tif (e <= outBuff.length - 1) {\n\t\t\tbyte[] finalOut = new byte[e];\n\t\t\tSystem.arraycopy(outBuff, 0, finalOut, 0, e);\n\t\t\t\n\t\t\t\n\t\t\treturn finalOut;\n\t\t}\n\t\telse {\n\t\t\t\n\t\t\treturn outBuff;\n\t\t}\n\t}",
        "summary_tokens": [
            "source",
            "the",
            "data",
            "to",
            "convert",
            "off",
            "offset",
            "in",
            "array",
            "where",
            "conversion",
            "should",
            "begin",
            "len",
            "length",
            "of",
            "data",
            "to",
            "convert",
            "options",
            "specified",
            "options",
            "the",
            "base",
            "0",
            "encoded",
            "data",
            "as",
            "a",
            "string",
            "java"
        ]
    },
    {
        "id": 769,
        "code": "\tprivate static int decode4to3(final byte[] source, final int srcOffset, final byte[] destination,\n\t\t\tfinal int destOffset, final int options) {\n\n\t\t\n\t\tif (source == null) {\n\t\t\tthrow new NullPointerException(\"Source array was null.\");\n\t\t} \n\t\tif (destination == null) {\n\t\t\tthrow new NullPointerException(\"Destination array was null.\");\n\t\t} \n\t\tif (srcOffset < 0 || srcOffset + 3 >= source.length) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\tString.format(\"Source array with length %d cannot have offset of %d and still process four bytes.\",\n\t\t\t\t\t\t\tsource.length, srcOffset));\n\t\t} \n\t\tif (destOffset < 0 || destOffset + 2 >= destination.length) {\n\t\t\tthrow new IllegalArgumentException(String.format(\n\t\t\t\t\t\"Destination array with length %d cannot have offset of %d and still store three bytes.\",\n\t\t\t\t\tdestination.length, destOffset));\n\t\t} \n\n\t\tbyte[] DECODABET = getDecodabet(options);\n\n\t\t\n\t\tif (source[srcOffset + 2] == EQUALS_SIGN) {\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tint outBuff = ((DECODABET[source[srcOffset]] & 0xFF) << 18)\n\t\t\t\t\t| ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12);\n\n\t\t\tdestination[destOffset] = (byte) (outBuff >>> 16);\n\t\t\treturn 1;\n\t\t}\n\n\t\t\n\t\telse if (source[srcOffset + 3] == EQUALS_SIGN) {\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tint outBuff = ((DECODABET[source[srcOffset]] & 0xFF) << 18)\n\t\t\t\t\t| ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12)\n\t\t\t\t\t| ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6);\n\n\t\t\tdestination[destOffset] = (byte) (outBuff >>> 16);\n\t\t\tdestination[destOffset + 1] = (byte) (outBuff >>> 8);\n\t\t\treturn 2;\n\t\t}\n\n\t\t\n\t\telse {\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tint outBuff = ((DECODABET[source[srcOffset]] & 0xFF) << 18)\n\t\t\t\t\t| ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12)\n\t\t\t\t\t| ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6) | ((DECODABET[source[srcOffset + 3]] & 0xFF));\n\n\t\t\tdestination[destOffset] = (byte) (outBuff >> 16);\n\t\t\tdestination[destOffset + 1] = (byte) (outBuff >> 8);\n\t\t\tdestination[destOffset + 2] = (byte) (outBuff);\n\n\t\t\treturn 3;\n\t\t}\n\t}",
        "summary_tokens": [
            "decodes",
            "four",
            "bytes",
            "from",
            "array",
            "var",
            "source",
            "var",
            "and",
            "writes",
            "the",
            "resulting",
            "bytes",
            "up",
            "to",
            "three",
            "of",
            "them",
            "to",
            "var",
            "destination",
            "var"
        ]
    },
    {
        "id": 770,
        "code": "\tprivate static byte[] decode(final byte[] source, final int off, final int len, final int options) {\n\n\t\t\n\t\tif (source == null) {\n\t\t\tthrow new NullPointerException(\"Cannot decode null source array.\");\n\t\t} \n\t\tif (off < 0 || off + len > source.length) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\tString.format(\"Source array with length %d cannot have offset of %d and process %d bytes.\",\n\t\t\t\t\t\t\tsource.length, off, len));\n\t\t} \n\n\t\tif (len == 0) {\n\t\t\treturn new byte[0];\n\t\t}\n\t\telse if (len < 4) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"Base64-encoded string must have at least four characters, but length specified was \" + len);\n\t\t} \n\n\t\tbyte[] DECODABET = getDecodabet(options);\n\n\t\tint len34 = len * 3 / 4; \n\t\tbyte[] outBuff = new byte[len34]; \n\t\tint outBuffPosn = 0; \n\n\t\tbyte[] b4 = new byte[4]; \n\t\tint b4Posn = 0; \n\t\tint i = 0; \n\t\tbyte sbiDecode = 0; \n\n\t\tfor (i = off; i < off + len; i++) { \n\n\t\t\tsbiDecode = DECODABET[source[i] & 0xFF];\n\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tif (sbiDecode >= WHITE_SPACE_ENC) {\n\t\t\t\tif (sbiDecode >= EQUALS_SIGN_ENC) {\n\t\t\t\t\tb4[b4Posn++] = source[i]; \n\t\t\t\t\tif (b4Posn > 3) { \n\t\t\t\t\t\toutBuffPosn += decode4to3(b4, 0, outBuff, outBuffPosn, options);\n\t\t\t\t\t\tb4Posn = 0;\n\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (source[i] == EQUALS_SIGN) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t\n\t\t\t\tthrow new InvalidBase64CharacterException(String\n\t\t\t\t\t\t.format(\"Bad Base64 input character decimal %d in array position %d\", (source[i]) & 0xFF, i));\n\t\t\t}\n\t\t}\n\n\t\tbyte[] out = new byte[outBuffPosn];\n\t\tSystem.arraycopy(outBuff, 0, out, 0, outBuffPosn);\n\t\treturn out;\n\t}",
        "summary_tokens": [
            "low",
            "level",
            "access",
            "to",
            "decoding",
            "ascii",
            "characters",
            "in",
            "the",
            "form",
            "of",
            "a",
            "byte",
            "array"
        ]
    },
    {
        "id": 771,
        "code": "\tpublic static byte[] encode(CharSequence string) {\n\t\ttry {\n\t\t\tByteBuffer bytes = CHARSET.newEncoder().encode(CharBuffer.wrap(string));\n\t\t\tbyte[] bytesCopy = new byte[bytes.limit()];\n\t\t\tSystem.arraycopy(bytes.array(), 0, bytesCopy, 0, bytes.limit());\n\t\t\treturn bytesCopy;\n\t\t}\n\t\tcatch (CharacterCodingException ex) {\n\t\t\tthrow new IllegalArgumentException(\"Encoding failed\", ex);\n\t\t}\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "bytes",
            "of",
            "the",
            "string",
            "in",
            "utf",
            "0",
            "encoded",
            "form"
        ]
    },
    {
        "id": 772,
        "code": "\tpublic static String decode(byte[] bytes) {\n\t\ttry {\n\t\t\treturn CHARSET.newDecoder().decode(ByteBuffer.wrap(bytes)).toString();\n\t\t}\n\t\tcatch (CharacterCodingException ex) {\n\t\t\tthrow new IllegalArgumentException(\"Decoding failed\", ex);\n\t\t}\n\t}",
        "summary_tokens": [
            "decode",
            "the",
            "bytes",
            "in",
            "utf",
            "0",
            "form",
            "into",
            "a",
            "string"
        ]
    },
    {
        "id": 773,
        "code": "\tstatic SecretKey newSecretKey(String algorithm, PBEKeySpec keySpec) {\n\t\ttry {\n\t\t\tSecretKeyFactory factory = SecretKeyFactory.getInstance(algorithm);\n\t\t\treturn factory.generateSecret(keySpec);\n\t\t}\n\t\tcatch (NoSuchAlgorithmException ex) {\n\t\t\tthrow new IllegalArgumentException(\"Not a valid encryption algorithm\", ex);\n\t\t}\n\t\tcatch (InvalidKeySpecException ex) {\n\t\t\tthrow new IllegalArgumentException(\"Not a valid secret key\", ex);\n\t\t}\n\t}",
        "summary_tokens": [
            "generates",
            "a",
            "secret",
            "key"
        ]
    },
    {
        "id": 774,
        "code": "\tstatic Cipher newCipher(String algorithm) {\n\t\ttry {\n\t\t\treturn Cipher.getInstance(algorithm);\n\t\t}\n\t\tcatch (NoSuchAlgorithmException ex) {\n\t\t\tthrow new IllegalArgumentException(\"Not a valid encryption algorithm\", ex);\n\t\t}\n\t\tcatch (NoSuchPaddingException ex) {\n\t\t\tthrow new IllegalStateException(\"Should not happen\", ex);\n\t\t}\n\t}",
        "summary_tokens": [
            "constructs",
            "a",
            "new",
            "cipher"
        ]
    },
    {
        "id": 775,
        "code": "\tstatic <T extends AlgorithmParameterSpec> T getParameterSpec(Cipher cipher, Class<T> parameterSpecClass) {\n\t\ttry {\n\t\t\treturn cipher.getParameters().getParameterSpec(parameterSpecClass);\n\t\t}\n\t\tcatch (InvalidParameterSpecException ex) {\n\t\t\tthrow new IllegalArgumentException(\"Unable to access parameter\", ex);\n\t\t}\n\t}",
        "summary_tokens": [
            "initializes",
            "the",
            "cipher",
            "for",
            "use"
        ]
    },
    {
        "id": 776,
        "code": "\tstatic void initCipher(Cipher cipher, int mode, SecretKey secretKey, AlgorithmParameterSpec parameterSpec) {\n\t\ttry {\n\t\t\tif (parameterSpec != null) {\n\t\t\t\tcipher.init(mode, secretKey, parameterSpec);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcipher.init(mode, secretKey);\n\t\t\t}\n\t\t}\n\t\tcatch (InvalidKeyException ex) {\n\t\t\tthrow new IllegalArgumentException(\"Unable to initialize due to invalid secret key\", ex);\n\t\t}\n\t\tcatch (InvalidAlgorithmParameterException ex) {\n\t\t\tthrow new IllegalStateException(\"Unable to initialize due to invalid decryption parameter spec\", ex);\n\t\t}\n\t}",
        "summary_tokens": [
            "initializes",
            "the",
            "cipher",
            "for",
            "use"
        ]
    },
    {
        "id": 777,
        "code": "\tstatic byte[] doFinal(Cipher cipher, byte[] input) {\n\t\ttry {\n\t\t\treturn cipher.doFinal(input);\n\t\t}\n\t\tcatch (IllegalBlockSizeException ex) {\n\t\t\tthrow new IllegalStateException(\"Unable to invoke Cipher due to illegal block size\", ex);\n\t\t}\n\t\tcatch (BadPaddingException ex) {\n\t\t\tthrow new IllegalStateException(\"Unable to invoke Cipher due to bad padding\", ex);\n\t\t}\n\t}",
        "summary_tokens": [
            "invokes",
            "the",
            "cipher",
            "to",
            "perform",
            "encryption",
            "or",
            "decryption",
            "depending",
            "on",
            "the",
            "initialized",
            "mode"
        ]
    },
    {
        "id": 778,
        "code": "\tpublic static BytesEncryptor stronger(CharSequence password, CharSequence salt) {\n\t\treturn new AesBytesEncryptor(password.toString(), salt, KeyGenerators.secureRandom(16), CipherAlgorithm.GCM);\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "standard",
            "password",
            "based",
            "bytes",
            "encryptor",
            "using",
            "0",
            "bit",
            "aes",
            "encryption",
            "with",
            "galois",
            "counter",
            "mode",
            "gcm"
        ]
    },
    {
        "id": 779,
        "code": "\tpublic static BytesEncryptor standard(CharSequence password, CharSequence salt) {\n\t\treturn new AesBytesEncryptor(password.toString(), salt, KeyGenerators.secureRandom(16));\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "standard",
            "password",
            "based",
            "bytes",
            "encryptor",
            "using",
            "0",
            "bit",
            "aes",
            "encryption"
        ]
    },
    {
        "id": 780,
        "code": "\tpublic static TextEncryptor delux(CharSequence password, CharSequence salt) {\n\t\treturn new HexEncodingTextEncryptor(stronger(password, salt));\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "text",
            "encryptor",
            "that",
            "uses",
            "stronger",
            "password",
            "based",
            "encryption"
        ]
    },
    {
        "id": 781,
        "code": "\tpublic static TextEncryptor text(CharSequence password, CharSequence salt) {\n\t\treturn new HexEncodingTextEncryptor(standard(password, salt));\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "text",
            "encryptor",
            "that",
            "uses",
            "standard",
            "password",
            "based",
            "encryption"
        ]
    },
    {
        "id": 782,
        "code": "\tpublic static TextEncryptor noOpText() {\n\t\treturn NoOpTextEncryptor.INSTANCE;\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "text",
            "encryptor",
            "that",
            "performs",
            "no",
            "encryption"
        ]
    },
    {
        "id": 783,
        "code": "\tpublic static PasswordEncoder createDelegatingPasswordEncoder() {\n\t\tString encodingId = \"bcrypt\";\n\t\tMap<String, PasswordEncoder> encoders = new HashMap<>();\n\t\tencoders.put(encodingId, new BCryptPasswordEncoder());\n\t\tencoders.put(\"ldap\", new org.springframework.security.crypto.password.LdapShaPasswordEncoder());\n\t\tencoders.put(\"MD4\", new org.springframework.security.crypto.password.Md4PasswordEncoder());\n\t\tencoders.put(\"MD5\", new org.springframework.security.crypto.password.MessageDigestPasswordEncoder(\"MD5\"));\n\t\tencoders.put(\"noop\", org.springframework.security.crypto.password.NoOpPasswordEncoder.getInstance());\n\t\tencoders.put(\"pbkdf2\", new Pbkdf2PasswordEncoder());\n\t\tencoders.put(\"scrypt\", new SCryptPasswordEncoder());\n\t\tencoders.put(\"SHA-1\", new org.springframework.security.crypto.password.MessageDigestPasswordEncoder(\"SHA-1\"));\n\t\tencoders.put(\"SHA-256\",\n\t\t\t\tnew org.springframework.security.crypto.password.MessageDigestPasswordEncoder(\"SHA-256\"));\n\t\tencoders.put(\"sha256\", new org.springframework.security.crypto.password.StandardPasswordEncoder());\n\t\tencoders.put(\"argon2\", new Argon2PasswordEncoder());\n\t\treturn new DelegatingPasswordEncoder(encodingId, encoders);\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "delegating",
            "password",
            "encoder",
            "with",
            "default",
            "mappings"
        ]
    },
    {
        "id": 784,
        "code": "\tpublic static BytesKeyGenerator secureRandom(int keyLength) {\n\t\treturn new SecureRandomBytesKeyGenerator(keyLength);\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "bytes",
            "key",
            "generator",
            "that",
            "uses",
            "a",
            "secure",
            "random",
            "to",
            "generate",
            "keys",
            "of",
            "a",
            "custom",
            "length"
        ]
    },
    {
        "id": 785,
        "code": "\tpublic static BytesKeyGenerator shared(int keyLength) {\n\t\treturn new SharedKeyGenerator(secureRandom(keyLength).generateKey());\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "bytes",
            "key",
            "generator",
            "that",
            "returns",
            "a",
            "single",
            "shared",
            "secure",
            "random",
            "key",
            "of",
            "a",
            "custom",
            "length"
        ]
    },
    {
        "id": 786,
        "code": "\tpublic static StringKeyGenerator string() {\n\t\treturn new HexEncodingStringKeyGenerator(secureRandom());\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "string",
            "key",
            "generator",
            "that",
            "hex",
            "encodes",
            "secure",
            "random",
            "keys",
            "of",
            "0",
            "bytes",
            "in",
            "length"
        ]
    },
    {
        "id": 787,
        "code": "\tprotected static boolean matches(byte[] expected, byte[] actual) {\n\t\treturn MessageDigest.isEqual(expected, actual);\n\t}",
        "summary_tokens": [
            "constant",
            "time",
            "comparison",
            "to",
            "prevent",
            "against",
            "timing",
            "attacks"
        ]
    },
    {
        "id": 788,
        "code": "\tpublic void setDefaultPasswordEncoderForMatches(PasswordEncoder defaultPasswordEncoderForMatches) {\n\t\tif (defaultPasswordEncoderForMatches == null) {\n\t\t\tthrow new IllegalArgumentException(\"defaultPasswordEncoderForMatches cannot be null\");\n\t\t}\n\t\tthis.defaultPasswordEncoderForMatches = defaultPasswordEncoderForMatches;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "password",
            "encoder",
            "to",
            "delegate",
            "to",
            "for",
            "matches",
            "char",
            "sequence",
            "string",
            "if",
            "the",
            "id",
            "is",
            "not",
            "mapped",
            "to",
            "a",
            "password",
            "encoder"
        ]
    },
    {
        "id": 789,
        "code": "\tpublic String encode(CharSequence rawPass) {\n\t\tbyte[] salt = this.saltGenerator.generateKey();\n\t\treturn encode(rawPass, salt);\n\t}",
        "summary_tokens": [
            "calculates",
            "the",
            "hash",
            "of",
            "password",
            "and",
            "salt",
            "bytes",
            "if",
            "supplied",
            "and",
            "returns",
            "a",
            "base",
            "0",
            "encoded",
            "concatenation",
            "of",
            "the",
            "hash",
            "and",
            "salt",
            "prefixed",
            "with",
            "sha",
            "or",
            "ssha",
            "if",
            "salt",
            "was",
            "used"
        ]
    },
    {
        "id": 790,
        "code": "\tpublic boolean matches(CharSequence rawPassword, String encodedPassword) {\n\t\treturn matches((rawPassword != null) ? rawPassword.toString() : null, encodedPassword);\n\t}",
        "summary_tokens": [
            "checks",
            "the",
            "validity",
            "of",
            "an",
            "unencoded",
            "password",
            "against",
            "an",
            "encoded",
            "one",
            "in",
            "the",
            "form",
            "ssha",
            "s",
            "qu",
            "qf",
            "0",
            "vj",
            "0",
            "eg",
            "0",
            "y",
            "0",
            "h",
            "pdh",
            "0",
            "bk",
            "qh",
            "ckqbgjh",
            "qi"
        ]
    },
    {
        "id": 791,
        "code": "\tprivate String extractPrefix(String encPass) {\n\t\tif (!encPass.startsWith(\"{\")) {\n\t\t\treturn null;\n\t\t}\n\t\tint secondBrace = encPass.lastIndexOf('}');\n\t\tif (secondBrace < 0) {\n\t\t\tthrow new IllegalArgumentException(\"Couldn't find closing brace for SHA prefix\");\n\t\t}\n\t\treturn encPass.substring(0, secondBrace + 1);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "hash",
            "prefix",
            "or",
            "null",
            "if",
            "there",
            "isn",
            "t",
            "one"
        ]
    },
    {
        "id": 792,
        "code": "\tpublic String encode(CharSequence rawPassword) {\n\t\tString salt = PREFIX + this.saltGenerator.generateKey() + SUFFIX;\n\t\treturn digest(salt, rawPassword);\n\t}",
        "summary_tokens": [
            "encodes",
            "the",
            "raw",
            "pass",
            "using",
            "a",
            "message",
            "digest"
        ]
    },
    {
        "id": 793,
        "code": "\tpublic boolean matches(CharSequence rawPassword, String encodedPassword) {\n\t\tString salt = extractSalt(encodedPassword);\n\t\tString rawPasswordEncoded = digest(salt, rawPassword);\n\t\treturn PasswordEncoderUtils.equals(encodedPassword.toString(), rawPasswordEncoded);\n\t}",
        "summary_tokens": [
            "takes",
            "a",
            "previously",
            "encoded",
            "password",
            "and",
            "compares",
            "it",
            "with",
            "a",
            "rawpassword",
            "after",
            "mixing",
            "in",
            "the",
            "salt",
            "and",
            "encoding",
            "that",
            "value",
            "raw",
            "password",
            "plain",
            "text",
            "password",
            "encoded",
            "password",
            "previously",
            "encoded",
            "password",
            "true",
            "or",
            "false"
        ]
    },
    {
        "id": 794,
        "code": "\tpublic String encode(CharSequence rawPassword) {\n\t\tString salt = PREFIX + this.saltGenerator.generateKey() + SUFFIX;\n\t\treturn digest(salt, rawPassword);\n\t}",
        "summary_tokens": [
            "encodes",
            "the",
            "raw",
            "pass",
            "using",
            "a",
            "message",
            "digest"
        ]
    },
    {
        "id": 795,
        "code": "\tpublic boolean matches(CharSequence rawPassword, String encodedPassword) {\n\t\tString salt = extractSalt(encodedPassword);\n\t\tString rawPasswordEncoded = digest(salt, rawPassword);\n\t\treturn PasswordEncoderUtils.equals(encodedPassword.toString(), rawPasswordEncoded);\n\t}",
        "summary_tokens": [
            "takes",
            "a",
            "previously",
            "encoded",
            "password",
            "and",
            "compares",
            "it",
            "with",
            "a",
            "rawpassword",
            "after",
            "mixing",
            "in",
            "the",
            "salt",
            "and",
            "encoding",
            "that",
            "value",
            "raw",
            "password",
            "plain",
            "text",
            "password",
            "encoded",
            "password",
            "previously",
            "encoded",
            "password",
            "true",
            "or",
            "false"
        ]
    },
    {
        "id": 796,
        "code": "\tpublic void setIterations(int iterations) {\n\t\tthis.digester.setIterations(iterations);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "number",
            "of",
            "iterations",
            "for",
            "which",
            "the",
            "calculated",
            "hash",
            "value",
            "should",
            "be",
            "stretched"
        ]
    },
    {
        "id": 797,
        "code": "\tpublic static PasswordEncoder getInstance() {\n\t\treturn INSTANCE;\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "singleton",
            "no",
            "op",
            "password",
            "encoder"
        ]
    },
    {
        "id": 798,
        "code": "\tdefault boolean upgradeEncoding(String encodedPassword) {\n\t\treturn false;\n\t}",
        "summary_tokens": [
            "returns",
            "true",
            "if",
            "the",
            "encoded",
            "password",
            "should",
            "be",
            "encoded",
            "again",
            "for",
            "better",
            "security",
            "else",
            "false"
        ]
    },
    {
        "id": 799,
        "code": "\tstatic boolean equals(String expected, String actual) {\n\t\tbyte[] expectedBytes = bytesUtf8(expected);\n\t\tbyte[] actualBytes = bytesUtf8(actual);\n\t\treturn MessageDigest.isEqual(expectedBytes, actualBytes);\n\t}",
        "summary_tokens": [
            "constant",
            "time",
            "comparison",
            "to",
            "prevent",
            "against",
            "timing",
            "attacks"
        ]
    },
    {
        "id": 800,
        "code": "\tpublic void setAlgorithm(SecretKeyFactoryAlgorithm secretKeyFactoryAlgorithm) {\n\t\tif (secretKeyFactoryAlgorithm == null) {\n\t\t\tthrow new IllegalArgumentException(\"secretKeyFactoryAlgorithm cannot be null\");\n\t\t}\n\t\tString algorithmName = secretKeyFactoryAlgorithm.name();\n\t\ttry {\n\t\t\tSecretKeyFactory.getInstance(algorithmName);\n\t\t\tthis.algorithm = algorithmName;\n\t\t}\n\t\tcatch (NoSuchAlgorithmException ex) {\n\t\t\tthrow new IllegalArgumentException(\"Invalid algorithm '\" + algorithmName + \"'.\", ex);\n\t\t}\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "algorithm",
            "to",
            "use"
        ]
    },
    {
        "id": 801,
        "code": "\tpublic void setEncodeHashAsBase64(boolean encodeHashAsBase64) {\n\t\tthis.encodeHashAsBase64 = encodeHashAsBase64;\n\t}",
        "summary_tokens": [
            "sets",
            "if",
            "the",
            "resulting",
            "hash",
            "should",
            "be",
            "encoded",
            "as",
            "base",
            "0"
        ]
    },
    {
        "id": 802,
        "code": "\tpublic static byte[] concatenate(byte[]... arrays) {\n\t\tint length = 0;\n\t\tfor (byte[] array : arrays) {\n\t\t\tlength += array.length;\n\t\t}\n\t\tbyte[] newArray = new byte[length];\n\t\tint destPos = 0;\n\t\tfor (byte[] array : arrays) {\n\t\t\tSystem.arraycopy(array, 0, newArray, destPos, array.length);\n\t\t\tdestPos += array.length;\n\t\t}\n\t\treturn newArray;\n\t}",
        "summary_tokens": [
            "combine",
            "the",
            "individual",
            "byte",
            "arrays",
            "into",
            "one",
            "array"
        ]
    },
    {
        "id": 803,
        "code": "\tpublic static byte[] subArray(byte[] array, int beginIndex, int endIndex) {\n\t\tint length = endIndex - beginIndex;\n\t\tbyte[] subarray = new byte[length];\n\t\tSystem.arraycopy(array, beginIndex, subarray, 0, length);\n\t\treturn subarray;\n\t}",
        "summary_tokens": [
            "extract",
            "a",
            "sub",
            "array",
            "of",
            "bytes",
            "out",
            "of",
            "the",
            "byte",
            "array"
        ]
    },
    {
        "id": 804,
        "code": "\tpublic void testHashpw() {\n\t\tprint(\"BCrypt.hashpw(): \");\n\t\tfor (TestObject<String> test : testObjectsString) {\n\t\t\tString hashed = BCrypt.hashpw(test.password, test.salt);\n\t\t\tassertThat(hashed).isEqualTo(test.expected);\n\t\t\tprint(\".\");\n\t\t}\n\t\tprintln(\"\");\n\t}",
        "summary_tokens": [
            "test",
            "method",
            "for",
            "bcrypt"
        ]
    },
    {
        "id": 805,
        "code": "\tpublic void testHashpwByteArray() {\n\t\tfor (TestObject<byte[]> test : testObjectsByteArray) {\n\t\t\tString hashed = BCrypt.hashpw(test.password, test.salt);\n\t\t\tassertThat(hashed).isEqualTo(test.expected);\n\t\t}\n\t}",
        "summary_tokens": [
            "test",
            "method",
            "for",
            "bcrypt"
        ]
    },
    {
        "id": 806,
        "code": "\tpublic void testGensaltInt() {\n\t\tprint(\"BCrypt.gensalt(log_rounds):\");\n\t\tfor (int i = 4; i <= 12; i++) {\n\t\t\tprint(\" \" + Integer.toString(i) + \":\");\n\t\t\tfor (int j = 0; j < testObjectsString.size(); j += 4) {\n\t\t\t\tString plain = testObjectsString.get(j).password;\n\t\t\t\tString salt = BCrypt.gensalt(i);\n\t\t\t\tString hashed1 = BCrypt.hashpw(plain, salt);\n\t\t\t\tString hashed2 = BCrypt.hashpw(plain, hashed1);\n\t\t\t\tassertThat(hashed2).isEqualTo(hashed1);\n\t\t\t\tprint(\".\");\n\t\t\t}\n\t\t}\n\t\tprintln(\"\");\n\t}",
        "summary_tokens": [
            "test",
            "method",
            "for",
            "bcrypt"
        ]
    },
    {
        "id": 807,
        "code": "\tpublic void testGensalt() {\n\t\tprint(\"BCrypt.gensalt(): \");\n\t\tfor (int i = 0; i < testObjectsString.size(); i += 4) {\n\t\t\tString plain = testObjectsString.get(i).password;\n\t\t\tString salt = BCrypt.gensalt();\n\t\t\tString hashed1 = BCrypt.hashpw(plain, salt);\n\t\t\tString hashed2 = BCrypt.hashpw(plain, hashed1);\n\t\t\tassertThat(hashed2).isEqualTo(hashed1);\n\t\t\tprint(\".\");\n\t\t}\n\t\tprintln(\"\");\n\t}",
        "summary_tokens": [
            "test",
            "method",
            "for",
            "bcrypt"
        ]
    },
    {
        "id": 808,
        "code": "\tpublic void testCheckpw_success() {\n\t\tprint(\"BCrypt.checkpw w/ good passwords: \");\n\t\tfor (TestObject<String> test : testObjectsString) {\n\t\t\tassertThat(BCrypt.checkpw(test.password, test.expected)).isTrue();\n\t\t\tprint(\".\");\n\t\t}\n\t\tprintln(\"\");\n\t}",
        "summary_tokens": [
            "test",
            "method",
            "for",
            "bcrypt"
        ]
    },
    {
        "id": 809,
        "code": "\tpublic void testCheckpwByteArray_success() {\n\t\tfor (TestObject<byte[]> test : testObjectsByteArray) {\n\t\t\tassertThat(BCrypt.checkpw(test.password, test.expected)).isTrue();\n\t\t}\n\t}",
        "summary_tokens": [
            "test",
            "method",
            "for",
            "bcrypt"
        ]
    },
    {
        "id": 810,
        "code": "\tpublic void testCheckpw_failure() {\n\t\tprint(\"BCrypt.checkpw w/ bad passwords: \");\n\t\tfor (int i = 0; i < testObjectsString.size(); i++) {\n\t\t\tint broken_index = (i + 8) % testObjectsString.size();\n\t\t\tString plain = testObjectsString.get(i).password;\n\t\t\tString expected = testObjectsString.get(broken_index).expected;\n\t\t\tassertThat(BCrypt.checkpw(plain, expected)).isFalse();\n\t\t\tprint(\".\");\n\t\t}\n\t\tprintln(\"\");\n\t}",
        "summary_tokens": [
            "test",
            "method",
            "for",
            "bcrypt"
        ]
    },
    {
        "id": 811,
        "code": "\tpublic void testCheckpwByteArray_failure() {\n\t\tfor (int i = 0; i < testObjectsByteArray.size(); i++) {\n\t\t\tint broken_index = (i + 8) % testObjectsByteArray.size();\n\t\t\tbyte[] plain = testObjectsByteArray.get(i).password;\n\t\t\tString expected = testObjectsByteArray.get(broken_index).expected;\n\t\t\tassertThat(BCrypt.checkpw(plain, expected)).isFalse();\n\t\t}\n\t}",
        "summary_tokens": [
            "test",
            "method",
            "for",
            "bcrypt"
        ]
    },
    {
        "id": 812,
        "code": "\tpublic void testInternationalChars() {\n\t\tprint(\"BCrypt.hashpw w/ international chars: \");\n\t\tString pw1 = \"\u03c0\u03c0\u03c0\u03c0\u03c0\u03c0\u03c0\u03c0\";\n\t\tString pw2 = \"????????\";\n\t\tString h1 = BCrypt.hashpw(pw1, BCrypt.gensalt());\n\t\tassertThat(BCrypt.checkpw(pw2, h1)).isFalse();\n\t\tprint(\".\");\n\t\tString h2 = BCrypt.hashpw(pw2, BCrypt.gensalt());\n\t\tassertThat(BCrypt.checkpw(pw1, h2)).isFalse();\n\t\tprint(\".\");\n\t\tprintln(\"\");\n\t}",
        "summary_tokens": [
            "test",
            "for",
            "correct",
            "hashing",
            "of",
            "non",
            "us",
            "ascii",
            "passwords"
        ]
    },
    {
        "id": 813,
        "code": "\tpublic void testBase64EncodeDecode() {\n\t\tbyte[] ba = new byte[3];\n\t\tfor (int b = 0; b <= 0xFF; b++) {\n\t\t\tfor (int i = 0; i < ba.length; i++) {\n\t\t\t\tArrays.fill(ba, (byte) 0);\n\t\t\t\tba[i] = (byte) b;\n\t\t\t\tString s = encode_base64(ba, 3);\n\t\t\t\tassertThat(s.length()).isEqualTo(4);\n\t\t\t\tbyte[] decoded = BCrypt.decode_base64(s, 3);\n\t\t\t\tassertThat(decoded).isEqualTo(ba);\n\t\t\t}\n\t\t}\n\t}",
        "summary_tokens": [
            "encode",
            "and",
            "decode",
            "each",
            "byte",
            "value",
            "in",
            "each",
            "position"
        ]
    },
    {
        "id": 814,
        "code": "\tpublic void findDefaultIterationCount() {\n\t\t\n\t\trun(180000, 10);\n\t\t\n\t\trun(165000, 10);\n\t}",
        "summary_tokens": [
            "used",
            "to",
            "find",
            "the",
            "iteration",
            "count",
            "that",
            "takes"
        ]
    },
    {
        "id": 815,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n\t\tAssert.notNull(securityContextHolderStrategy, \"securityContextHolderStrategy cannot be null\");\n\t\tthis.securityContextHolderStrategy = securityContextHolderStrategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 816,
        "code": "\tpublic void setTrustResolver(AuthenticationTrustResolver trustResolver) {\n\t\tAssert.notNull(trustResolver, \"trustResolver cannot be null\");\n\t\tthis.trustResolver = trustResolver;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "authentication",
            "trust",
            "resolver",
            "to",
            "be",
            "used"
        ]
    },
    {
        "id": 817,
        "code": "\tpublic void setRoleHierarchy(RoleHierarchy roleHierarchy) {\n\t\tAssert.notNull(roleHierarchy, \"roleHierarchy cannot be null\");\n\t\tthis.roleHierarchy = roleHierarchy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "role",
            "hierarchy",
            "to",
            "be",
            "used"
        ]
    },
    {
        "id": 818,
        "code": "\tpublic void setPermissionEvaluator(PermissionEvaluator permissionEvaluator) {\n\t\tAssert.notNull(permissionEvaluator, \"permissionEvaluator cannot be null\");\n\t\tthis.permissionEvaluator = permissionEvaluator;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "permission",
            "evaluator",
            "to",
            "be",
            "used"
        ]
    },
    {
        "id": 819,
        "code": "\tpublic void setDefaultRolePrefix(String defaultRolePrefix) {\n\t\tthis.defaultRolePrefix = defaultRolePrefix;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "default",
            "prefix",
            "to",
            "be",
            "added",
            "to",
            "org"
        ]
    },
    {
        "id": 820,
        "code": "\tpublic void provideDataOnScalingWithNumberOfAuthoritiesUserHas() throws Exception {\n\t\tStopWatch sw = new StopWatch(\"Scaling with nAuthorities\");\n\t\tfor (int user = 0; user < N_AUTHORITIES / 10; user++) {\n\t\t\tint nAuthorities = (user != 0) ? user * 10 : 1;\n\t\t\tSecurityContextHolder.getContext().setAuthentication(UsernamePasswordAuthenticationToken\n\t\t\t\t\t.authenticated(\"bob\", \"bobspassword\", createRoles(nAuthorities)));\n\t\t\tthis.session.setAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY,\n\t\t\t\t\tSecurityContextHolder.getContext());\n\t\t\tSecurityContextHolder.clearContext();\n\t\t\tsw.start(nAuthorities + \" authorities\");\n\t\t\trunWithStack(this.minimalStack);\n\t\t\tSystem.out.println(sw.shortSummary());\n\t\t\tsw.stop();\n\t\t}\n\t\tSystem.out.println(sw.prettyPrint());\n\t}",
        "summary_tokens": [
            "creates",
            "data",
            "from",
            "0",
            "to",
            "n",
            "authorities",
            "in",
            "steps",
            "of",
            "0",
            "performing",
            "n",
            "invocations",
            "for",
            "each"
        ]
    },
    {
        "id": 821,
        "code": "\tpublic void testConcurrencyOfReadAndRemoveIsSafe() {\n\t\tObject principal = \"Joe Principal\";\n\t\tSessionRegistryImpl sessionregistry = new SessionRegistryImpl();\n\t\tSet sessions = Collections.synchronizedSet(new HashSet());\n\t\t\n\t\tfor (int i = 0; i < 50; i++) {\n\t\t\tString sessionId = Integer.toString(i);\n\t\t\tsessions.add(sessionId);\n\t\t\tsessionregistry.registerNewSession(sessionId, principal);\n\t\t}\n\n\t\t\n\t\tfor (int i=0; i < 10; i++) {\n\t\t\tThread reader = new Thread(new SessionRegistryReader(principal, sessionregistry));\n\t\t\treader.start();\n\t\t}\n\n\t\tThread remover = new Thread(new SessionRemover(\"remover\", sessionregistry, sessions));\n\n\t\tremover.start();\n\n\t\twhile(remover.isAlive()) {\n\t\t\tpause(250);\n\t\t}\n\n\t\tassertThat(errorOccurred).as(\"Thread errors detected; review log output for details\").isFalse();\n\t}",
        "summary_tokens": [
            "reproduces",
            "the",
            "npe",
            "mentioned",
            "in",
            "sec",
            "0",
            "where",
            "a",
            "session",
            "id",
            "is",
            "removed",
            "from",
            "the",
            "set",
            "of",
            "sessions",
            "before",
            "it",
            "is",
            "removed",
            "from",
            "the",
            "list",
            "of",
            "sessions",
            "for",
            "a",
            "principal"
        ]
    },
    {
        "id": 822,
        "code": "\tpublic void startWithLdapOverSsl() throws Exception {\n\n\t\tfinal ClassPathResource keyStoreResource = new ClassPathResource(\n\t\t\t\t\"/org/springframework/security/ldap/server/spring.keystore\");\n\t\tfinal File temporaryKeyStoreFile = new File(this.temporaryFolder, \"spring.keystore\");\n\t\tFileCopyUtils.copy(keyStoreResource.getInputStream(), new FileOutputStream(temporaryKeyStoreFile));\n\n\t\tassertThat(temporaryKeyStoreFile).isFile();\n\n\t\tApacheDSContainer server = new ApacheDSContainer(\"dc=springframework,dc=org\", \"classpath:test-server.ldif\");\n\n\t\tList<Integer> ports = getDefaultPorts(1);\n\t\tserver.setPort(ports.get(0));\n\n\t\tserver.setLdapOverSslEnabled(true);\n\t\tserver.setKeyStoreFile(temporaryKeyStoreFile);\n\t\tserver.setCertificatePassord(\"spring\");\n\n\t\ttry {\n\t\t\tserver.afterPropertiesSet();\n\t\t}\n\t\tfinally {\n\t\t\ttry {\n\t\t\t\tserver.destroy();\n\t\t\t}\n\t\t\tcatch (Throwable ex) {\n\t\t\t}\n\t\t}\n\t}",
        "summary_tokens": [
            "this",
            "test",
            "starts",
            "an",
            "ldap",
            "server",
            "using",
            "ldaps",
            "ldap",
            "over",
            "ssl"
        ]
    },
    {
        "id": 823,
        "code": "\tpublic DistinguishedName buildDn(String username) {\n\t\tDistinguishedName dn = new DistinguishedName(this.userDnBase);\n\t\tdn.add(this.usernameAttribute, username);\n\t\treturn dn;\n\t}",
        "summary_tokens": [
            "assembles",
            "the",
            "distinguished",
            "name",
            "that",
            "should",
            "be",
            "used",
            "the",
            "given",
            "username"
        ]
    },
    {
        "id": 824,
        "code": "\tprivate static String buildProviderUrl(List<String> urls, String baseDn) {\n\t\tAssert.notNull(baseDn, \"The Base DN for the LDAP server must not be null.\");\n\t\tAssert.notEmpty(urls, \"At least one LDAP server URL must be provided.\");\n\t\tString encodedBaseDn = encodeUrl(baseDn.trim());\n\t\tStringBuilder providerUrl = new StringBuilder();\n\t\tfor (String serverUrl : urls) {\n\t\t\tString trimmedUrl = serverUrl.trim();\n\t\t\tif (\"\".equals(trimmedUrl)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tproviderUrl.append(trimmedUrl);\n\t\t\tif (!trimmedUrl.endsWith(\"/\")) {\n\t\t\t\tproviderUrl.append(\"/\");\n\t\t\t}\n\t\t\tproviderUrl.append(encodedBaseDn);\n\t\t\tproviderUrl.append(\" \");\n\t\t}\n\t\treturn providerUrl.toString();\n\n\t}",
        "summary_tokens": [
            "builds",
            "a",
            "spring",
            "ldap",
            "compliant",
            "provider",
            "url",
            "string",
            "i"
        ]
    },
    {
        "id": 825,
        "code": "\tstatic String filterEncode(String value) {\n\t\tif (value == null) {\n\t\t\treturn null;\n\t\t}\n\t\tStringBuilder encodedValue = new StringBuilder(value.length() * 2);\n\t\tint length = value.length();\n\t\tfor (int i = 0; i < length; i++) {\n\t\t\tchar ch = value.charAt(i);\n\t\t\tencodedValue.append((ch < FILTER_ESCAPE_TABLE.length) ? FILTER_ESCAPE_TABLE[ch] : ch);\n\t\t}\n\t\treturn encodedValue.toString();\n\t}",
        "summary_tokens": [
            "escape",
            "a",
            "value",
            "for",
            "use",
            "in",
            "a",
            "filter"
        ]
    },
    {
        "id": 826,
        "code": "\tstatic String nameEncode(String value) {\n\t\tif (value == null) {\n\t\t\treturn null;\n\t\t}\n\t\tStringBuilder encodedValue = new StringBuilder(value.length() * 2);\n\t\tint length = value.length();\n\t\tint last = length - 1;\n\t\tfor (int i = 0; i < length; i++) {\n\t\t\tchar c = value.charAt(i);\n\t\t\t\n\t\t\tif (c == ' ' && (i == 0 || i == last)) {\n\t\t\t\tencodedValue.append(\"\\\\ \");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tif (c < NAME_ESCAPE_TABLE.length) {\n\t\t\t\tString esc = NAME_ESCAPE_TABLE[c];\n\t\t\t\tif (esc != null) {\n\t\t\t\t\tencodedValue.append(esc);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tencodedValue.append(c);\n\t\t}\n\t\treturn encodedValue.toString();\n\t}",
        "summary_tokens": [
            "ldap",
            "encodes",
            "a",
            "value",
            "for",
            "use",
            "with",
            "a",
            "dn"
        ]
    },
    {
        "id": 827,
        "code": "\tpublic static String getRelativeName(String fullDn, Context baseCtx) throws NamingException {\n\t\tString baseDn = baseCtx.getNameInNamespace();\n\t\tif (baseDn.length() == 0) {\n\t\t\treturn fullDn;\n\t\t}\n\t\tDistinguishedName base = new DistinguishedName(baseDn);\n\t\tDistinguishedName full = new DistinguishedName(fullDn);\n\t\tif (base.equals(full)) {\n\t\t\treturn \"\";\n\t\t}\n\t\tAssert.isTrue(full.startsWith(base), \"Full DN does not start with base DN\");\n\t\tfull.removeFirst(base);\n\t\treturn full.toString();\n\t}",
        "summary_tokens": [
            "obtains",
            "the",
            "part",
            "of",
            "a",
            "dn",
            "relative",
            "to",
            "a",
            "supplied",
            "base",
            "context"
        ]
    },
    {
        "id": 828,
        "code": "\tpublic static DistinguishedName getFullDn(DistinguishedName dn, Context baseCtx) throws NamingException {\n\t\tDistinguishedName baseDn = new DistinguishedName(baseCtx.getNameInNamespace());\n\t\tif (dn.contains(baseDn)) {\n\t\t\treturn dn;\n\t\t}\n\t\tbaseDn.append(dn);\n\t\treturn baseDn;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "full",
            "dn",
            "of",
            "a",
            "name",
            "by",
            "prepending",
            "the",
            "name",
            "of",
            "the",
            "context",
            "it",
            "is",
            "relative",
            "to"
        ]
    },
    {
        "id": 829,
        "code": "\tpublic static String parseRootDnFromUrl(String url) {\n\t\tAssert.hasLength(url, \"url must have length\");\n\t\tString urlRootDn;\n\t\tif (url.startsWith(\"ldap:\") || url.startsWith(\"ldaps:\")) {\n\t\t\tURI uri = parseLdapUrl(url);\n\t\t\turlRootDn = uri.getRawPath();\n\t\t}\n\t\telse {\n\t\t\t\n\t\t\turlRootDn = url;\n\t\t}\n\t\tif (urlRootDn.startsWith(\"/\")) {\n\t\t\turlRootDn = urlRootDn.substring(1);\n\t\t}\n\t\treturn urlRootDn;\n\t}",
        "summary_tokens": [
            "works",
            "out",
            "the",
            "root",
            "dn",
            "for",
            "an",
            "ldap",
            "url"
        ]
    },
    {
        "id": 830,
        "code": "\tprivate static URI parseLdapUrl(String url) {\n\t\tAssert.hasLength(url, \"url must have length\");\n\t\ttry {\n\t\t\treturn new URI(url);\n\t\t}\n\t\tcatch (URISyntaxException ex) {\n\t\t\tthrow new IllegalArgumentException(\"Unable to parse url: \" + url, ex);\n\t\t}\n\t}",
        "summary_tokens": [
            "parses",
            "the",
            "supplied",
            "ldap",
            "url"
        ]
    },
    {
        "id": 831,
        "code": "\tpublic boolean compare(String dn, String attributeName, Object value) {\n\t\tString comparisonFilter = \"(\" + attributeName + \"={0})\";\n\t\treturn executeReadOnly((ctx) -> {\n\t\t\tSearchControls searchControls = new SearchControls();\n\t\t\tsearchControls.setReturningAttributes(NO_ATTRS);\n\t\t\tsearchControls.setSearchScope(SearchControls.OBJECT_SCOPE);\n\t\t\tObject[] params = new Object[] { value };\n\t\t\tNamingEnumeration<SearchResult> results = ctx.search(dn, comparisonFilter, params, searchControls);\n\t\t\tBoolean match = results.hasMore();\n\t\t\tLdapUtils.closeEnumeration(results);\n\t\t\treturn match;\n\t\t});\n\t}",
        "summary_tokens": [
            "performs",
            "an",
            "ldap",
            "compare",
            "operation",
            "of",
            "the",
            "value",
            "of",
            "an",
            "attribute",
            "for",
            "a",
            "particular",
            "directory",
            "entry"
        ]
    },
    {
        "id": 832,
        "code": "\tpublic DirContextOperations retrieveEntry(final String dn, final String[] attributesToRetrieve) {\n\t\treturn (DirContextOperations) executeReadOnly((ContextExecutor) (ctx) -> {\n\t\t\tAttributes attrs = ctx.getAttributes(dn, attributesToRetrieve);\n\t\t\treturn new DirContextAdapter(attrs, new DistinguishedName(dn),\n\t\t\t\t\tnew DistinguishedName(ctx.getNameInNamespace()));\n\t\t});\n\t}",
        "summary_tokens": [
            "composes",
            "an",
            "object",
            "from",
            "the",
            "attributes",
            "of",
            "the",
            "given",
            "dn"
        ]
    },
    {
        "id": 833,
        "code": "\tpublic Set<String> searchForSingleAttributeValues(final String base, final String filter, final Object[] params,\n\t\t\tfinal String attributeName) {\n\t\tString[] attributeNames = new String[] { attributeName };\n\t\tSet<Map<String, List<String>>> multipleAttributeValues = searchForMultipleAttributeValues(base, filter, params,\n\t\t\t\tattributeNames);\n\t\tSet<String> result = new HashSet<>();\n\t\tfor (Map<String, List<String>> map : multipleAttributeValues) {\n\t\t\tList<String> values = map.get(attributeName);\n\t\t\tif (values != null) {\n\t\t\t\tresult.addAll(values);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "performs",
            "a",
            "search",
            "using",
            "the",
            "supplied",
            "filter",
            "and",
            "returns",
            "the",
            "union",
            "of",
            "the",
            "values",
            "of",
            "the",
            "named",
            "attribute",
            "found",
            "in",
            "all",
            "entries",
            "matched",
            "by",
            "the",
            "search"
        ]
    },
    {
        "id": 834,
        "code": "\tpublic Set<Map<String, List<String>>> searchForMultipleAttributeValues(String base, String filter, Object[] params,\n\t\t\tString[] attributeNames) {\n\t\t\n\t\tObject[] encodedParams = new String[params.length];\n\t\tfor (int i = 0; i < params.length; i++) {\n\t\t\tencodedParams[i] = LdapEncoder.filterEncode(params[i].toString());\n\t\t}\n\t\tString formattedFilter = MessageFormat.format(filter, encodedParams);\n\t\tlogger.trace(LogMessage.format(\"Using filter: %s\", formattedFilter));\n\t\tHashSet<Map<String, List<String>>> result = new HashSet<>();\n\t\tContextMapper roleMapper = (ctx) -> {\n\t\t\tDirContextAdapter adapter = (DirContextAdapter) ctx;\n\t\t\tMap<String, List<String>> record = new HashMap<>();\n\t\t\tif (ObjectUtils.isEmpty(attributeNames)) {\n\t\t\t\ttry {\n\t\t\t\t\tfor (NamingEnumeration enumeration = adapter.getAttributes().getAll(); enumeration.hasMore();) {\n\t\t\t\t\t\tAttribute attr = (Attribute) enumeration.next();\n\t\t\t\t\t\textractStringAttributeValues(adapter, record, attr.getID());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch (NamingException ex) {\n\t\t\t\t\torg.springframework.ldap.support.LdapUtils.convertLdapException(ex);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfor (String attributeName : attributeNames) {\n\t\t\t\t\textractStringAttributeValues(adapter, record, attributeName);\n\t\t\t\t}\n\t\t\t}\n\t\t\trecord.put(DN_KEY, Arrays.asList(getAdapterDN(adapter)));\n\t\t\tresult.add(record);\n\t\t\treturn null;\n\t\t};\n\t\tSearchControls ctls = new SearchControls();\n\t\tctls.setSearchScope(this.searchControls.getSearchScope());\n\t\tctls.setReturningAttributes((attributeNames != null && attributeNames.length > 0) ? attributeNames : null);\n\t\tsearch(base, formattedFilter, ctls, roleMapper);\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "performs",
            "a",
            "search",
            "using",
            "the",
            "supplied",
            "filter",
            "and",
            "returns",
            "the",
            "values",
            "of",
            "each",
            "named",
            "attribute",
            "found",
            "in",
            "all",
            "entries",
            "matched",
            "by",
            "the",
            "search"
        ]
    },
    {
        "id": 835,
        "code": "\tprivate String getAdapterDN(DirContextAdapter adapter) {\n\t\t\n\t\treturn adapter.getNameInNamespace();\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "dn",
            "for",
            "the",
            "context",
            "representing",
            "this",
            "ldap",
            "record"
        ]
    },
    {
        "id": 836,
        "code": "\tprivate void extractStringAttributeValues(DirContextAdapter adapter, Map<String, List<String>> record,\n\t\t\tString attributeName) {\n\t\tObject[] values = adapter.getObjectAttributes(attributeName);\n\t\tif (values == null || values.length == 0) {\n\t\t\tlogger.debug(LogMessage.format(\"Did not find attribute value for %s\", attributeName));\n\t\t\treturn;\n\t\t}\n\t\tList<String> stringValues = new ArrayList<>();\n\t\tfor (Object value : values) {\n\t\t\tif (value != null) {\n\t\t\t\tif (String.class.isAssignableFrom(value.getClass())) {\n\t\t\t\t\tstringValues.add((String) value);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tstringValues.add(value.toString());\n\t\t\t\t\tlogger.debug(LogMessage.format(\"Coerced attribute value for %s of type %s to a String\",\n\t\t\t\t\t\t\tattributeName, value.getClass()));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\trecord.put(attributeName, stringValues);\n\t}",
        "summary_tokens": [
            "extracts",
            "string",
            "values",
            "for",
            "a",
            "specified",
            "attribute",
            "name",
            "and",
            "places",
            "them",
            "in",
            "the",
            "map",
            "representing",
            "the",
            "ldap",
            "record",
            "if",
            "a",
            "value",
            "is",
            "not",
            "of",
            "type",
            "string",
            "it",
            "will",
            "derive",
            "it",
            "s",
            "value",
            "from",
            "the",
            "object",
            "to",
            "string",
            "adapter",
            "the",
            "adapter",
            "that",
            "contains",
            "the",
            "values",
            "record",
            "the",
            "map",
            "holding",
            "the",
            "attribute",
            "names",
            "and",
            "values",
            "attribute",
            "name",
            "the",
            "name",
            "for",
            "which",
            "to",
            "fetch",
            "the",
            "values",
            "from"
        ]
    },
    {
        "id": 837,
        "code": "\tpublic DirContextOperations searchForSingleEntry(String base, String filter, Object[] params) {\n\t\treturn (DirContextOperations) executeReadOnly((ContextExecutor) (ctx) -> searchForSingleEntryInternal(ctx,\n\t\t\t\tthis.searchControls, base, filter, params));\n\t}",
        "summary_tokens": [
            "performs",
            "a",
            "search",
            "with",
            "the",
            "requirement",
            "that",
            "the",
            "search",
            "shall",
            "return",
            "a",
            "single",
            "directory",
            "entry",
            "and",
            "uses",
            "the",
            "supplied",
            "mapper",
            "to",
            "create",
            "the",
            "object",
            "from",
            "that",
            "entry"
        ]
    },
    {
        "id": 838,
        "code": "\tpublic static DirContextOperations searchForSingleEntryInternal(DirContext ctx, SearchControls searchControls,\n\t\t\tString base, String filter, Object[] params) throws NamingException {\n\t\tfinal DistinguishedName ctxBaseDn = new DistinguishedName(ctx.getNameInNamespace());\n\t\tfinal DistinguishedName searchBaseDn = new DistinguishedName(base);\n\t\tfinal NamingEnumeration<SearchResult> resultsEnum = ctx.search(searchBaseDn, filter, params,\n\t\t\t\tbuildControls(searchControls));\n\t\tlogger.trace(LogMessage.format(\"Searching for entry under DN '%s', base = '%s', filter = '%s'\", ctxBaseDn,\n\t\t\t\tsearchBaseDn, filter));\n\t\tSet<DirContextOperations> results = new HashSet<>();\n\t\ttry {\n\t\t\twhile (resultsEnum.hasMore()) {\n\t\t\t\tSearchResult searchResult = resultsEnum.next();\n\t\t\t\tDirContextAdapter dca = (DirContextAdapter) searchResult.getObject();\n\t\t\t\tAssert.notNull(dca, \"No object returned by search, DirContext is not correctly configured\");\n\t\t\t\tlogger.debug(LogMessage.format(\"Found DN: %s\", dca.getDn()));\n\t\t\t\tresults.add(dca);\n\t\t\t}\n\t\t}\n\t\tcatch (PartialResultException ex) {\n\t\t\tLdapUtils.closeEnumeration(resultsEnum);\n\t\t\tlogger.trace(\"Ignoring PartialResultException\");\n\t\t}\n\t\tif (results.size() != 1) {\n\t\t\tthrow new IncorrectResultSizeDataAccessException(1, results.size());\n\t\t}\n\t\treturn results.iterator().next();\n\t}",
        "summary_tokens": [
            "internal",
            "method",
            "extracted",
            "to",
            "avoid",
            "code",
            "duplication",
            "in",
            "ad",
            "search"
        ]
    },
    {
        "id": 839,
        "code": "\tprivate static SearchControls buildControls(SearchControls originalControls) {\n\t\treturn new SearchControls(originalControls.getSearchScope(), originalControls.getCountLimit(),\n\t\t\t\toriginalControls.getTimeLimit(), originalControls.getReturningAttributes(), RETURN_OBJECT,\n\t\t\t\toriginalControls.getDerefLinkFlag());\n\t}",
        "summary_tokens": [
            "we",
            "need",
            "to",
            "make",
            "sure",
            "the",
            "search",
            "controls",
            "has",
            "the",
            "return",
            "object",
            "flag",
            "set",
            "to",
            "true",
            "in",
            "order",
            "for",
            "the",
            "search",
            "to",
            "return",
            "dir",
            "context",
            "adapter",
            "instances"
        ]
    },
    {
        "id": 840,
        "code": "\tpublic void setSearchControls(SearchControls searchControls) {\n\t\tthis.searchControls = searchControls;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "search",
            "controls",
            "which",
            "will",
            "be",
            "used",
            "for",
            "search",
            "operations",
            "by",
            "the",
            "template"
        ]
    },
    {
        "id": 841,
        "code": "\tprotected Authentication createSuccessfulAuthentication(UsernamePasswordAuthenticationToken authentication,\n\t\t\tUserDetails user) {\n\t\tObject password = this.useAuthenticationRequestCredentials ? authentication.getCredentials()\n\t\t\t\t: user.getPassword();\n\t\tUsernamePasswordAuthenticationToken result = UsernamePasswordAuthenticationToken.authenticated(user, password,\n\t\t\t\tthis.authoritiesMapper.mapAuthorities(user.getAuthorities()));\n\t\tresult.setDetails(authentication.getDetails());\n\t\tthis.logger.debug(\"Authenticated user\");\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "creates",
            "the",
            "final",
            "authentication",
            "object",
            "which",
            "will",
            "be",
            "returned",
            "from",
            "the",
            "authenticate",
            "method"
        ]
    },
    {
        "id": 842,
        "code": "\tpublic void setUseAuthenticationRequestCredentials(boolean useAuthenticationRequestCredentials) {\n\t\tthis.useAuthenticationRequestCredentials = useAuthenticationRequestCredentials;\n\t}",
        "summary_tokens": [
            "determines",
            "whether",
            "the",
            "supplied",
            "password",
            "will",
            "be",
            "used",
            "as",
            "the",
            "credentials",
            "in",
            "the",
            "successful",
            "authentication",
            "token"
        ]
    },
    {
        "id": 843,
        "code": "\tpublic void setAuthoritiesMapper(GrantedAuthoritiesMapper authoritiesMapper) {\n\t\tthis.authoritiesMapper = authoritiesMapper;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "granted",
            "authorities",
            "mapper",
            "used",
            "for",
            "converting",
            "the",
            "authorities",
            "loaded",
            "from",
            "storage",
            "to",
            "a",
            "new",
            "set",
            "of",
            "authorities",
            "which",
            "will",
            "be",
            "associated",
            "to",
            "the",
            "username",
            "password",
            "authentication",
            "token"
        ]
    },
    {
        "id": 844,
        "code": "\tpublic void setUserDetailsContextMapper(UserDetailsContextMapper userDetailsContextMapper) {\n\t\tAssert.notNull(userDetailsContextMapper, \"UserDetailsContextMapper must not be null\");\n\t\tthis.userDetailsContextMapper = userDetailsContextMapper;\n\t}",
        "summary_tokens": [
            "allows",
            "a",
            "custom",
            "strategy",
            "to",
            "be",
            "used",
            "for",
            "creating",
            "the",
            "tt",
            "user",
            "details",
            "tt",
            "which",
            "will",
            "be",
            "stored",
            "as",
            "the",
            "principal",
            "in",
            "the",
            "tt",
            "authentication",
            "tt",
            "returned",
            "by",
            "the",
            "create",
            "successful",
            "authentication",
            "org"
        ]
    },
    {
        "id": 845,
        "code": "\tprotected UserDetailsContextMapper getUserDetailsContextMapper() {\n\t\treturn this.userDetailsContextMapper;\n\t}",
        "summary_tokens": [
            "provides",
            "access",
            "to",
            "the",
            "injected",
            "user",
            "details",
            "context",
            "mapper",
            "strategy",
            "for",
            "use",
            "by",
            "subclasses"
        ]
    },
    {
        "id": 846,
        "code": "\tprotected List<String> getUserDns(String username) {\n\t\tif (this.userDnFormat == null) {\n\t\t\treturn Collections.emptyList();\n\t\t}\n\t\tList<String> userDns = new ArrayList<>(this.userDnFormat.length);\n\t\tString[] args = new String[] { LdapEncoder.nameEncode(username) };\n\t\tsynchronized (this.userDnFormat) {\n\t\t\tfor (MessageFormat formatter : this.userDnFormat) {\n\t\t\t\tuserDns.add(formatter.format(args));\n\t\t\t}\n\t\t}\n\t\treturn userDns;\n\t}",
        "summary_tokens": [
            "builds",
            "list",
            "of",
            "possible",
            "dns",
            "for",
            "the",
            "user",
            "worked",
            "out",
            "from",
            "the",
            "tt",
            "user",
            "dn",
            "patterns",
            "tt",
            "property"
        ]
    },
    {
        "id": 847,
        "code": "\tpublic void setUserAttributes(String[] userAttributes) {\n\t\tAssert.notNull(userAttributes, \"The userAttributes property cannot be set to null\");\n\t\tthis.userAttributes = userAttributes;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "user",
            "attributes",
            "which",
            "will",
            "be",
            "retrieved",
            "from",
            "the",
            "directory"
        ]
    },
    {
        "id": 848,
        "code": "\tpublic void setUserDnPatterns(String[] dnPattern) {\n\t\tAssert.notNull(dnPattern, \"The array of DN patterns cannot be set to null\");\n\t\t\n\t\tthis.userDnFormat = new MessageFormat[dnPattern.length];\n\t\tfor (int i = 0; i < dnPattern.length; i++) {\n\t\t\tthis.userDnFormat[i] = new MessageFormat(dnPattern[i]);\n\t\t}\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "pattern",
            "which",
            "will",
            "be",
            "used",
            "to",
            "supply",
            "a",
            "dn",
            "for",
            "the",
            "user"
        ]
    },
    {
        "id": 849,
        "code": "\tprotected void handleBindException(String userDn, String username, Throwable cause) {\n\t\tlogger.trace(LogMessage.format(\"Failed to bind as %s\", userDn), cause);\n\t}",
        "summary_tokens": [
            "allows",
            "subclasses",
            "to",
            "inspect",
            "the",
            "exception",
            "thrown",
            "by",
            "an",
            "attempt",
            "to",
            "bind",
            "with",
            "a",
            "particular",
            "dn"
        ]
    },
    {
        "id": 850,
        "code": "\tstatic String filterEncode(String value) {\n\t\tif (value == null) {\n\t\t\treturn null;\n\t\t}\n\t\tStringBuilder encodedValue = new StringBuilder(value.length() * 2);\n\t\tint length = value.length();\n\t\tfor (int i = 0; i < length; i++) {\n\t\t\tchar ch = value.charAt(i);\n\t\t\tencodedValue.append((ch < FILTER_ESCAPE_TABLE.length) ? FILTER_ESCAPE_TABLE[ch] : ch);\n\t\t}\n\t\treturn encodedValue.toString();\n\t}",
        "summary_tokens": [
            "escape",
            "a",
            "value",
            "for",
            "use",
            "in",
            "a",
            "filter"
        ]
    },
    {
        "id": 851,
        "code": "\tstatic String nameEncode(String value) {\n\t\tif (value == null) {\n\t\t\treturn null;\n\t\t}\n\t\tStringBuilder encodedValue = new StringBuilder(value.length() * 2);\n\t\tint length = value.length();\n\t\tint last = length - 1;\n\t\tfor (int i = 0; i < length; i++) {\n\t\t\tchar c = value.charAt(i);\n\t\t\t\n\t\t\tif (c == ' ' && (i == 0 || i == last)) {\n\t\t\t\tencodedValue.append(\"\\\\ \");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tif (c < NAME_ESCAPE_TABLE.length) {\n\t\t\t\tString esc = NAME_ESCAPE_TABLE[c];\n\t\t\t\tif (esc != null) {\n\t\t\t\t\tencodedValue.append(esc);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tencodedValue.append(c);\n\t\t}\n\t\treturn encodedValue.toString();\n\t}",
        "summary_tokens": [
            "ldap",
            "encodes",
            "a",
            "value",
            "for",
            "use",
            "with",
            "a",
            "dn"
        ]
    },
    {
        "id": 852,
        "code": "\tpublic String getPrincipal() {\n\t\tAuthentication authentication = this.securityContextHolderStrategy.getContext().getAuthentication();\n\t\tif (authentication == null) {\n\t\t\tlog.debug(\"Returning empty String as Principal since authentication is null\");\n\t\t\treturn \"\";\n\t\t}\n\t\tObject principal = authentication.getPrincipal();\n\t\tif (principal instanceof LdapUserDetails) {\n\t\t\tLdapUserDetails details = (LdapUserDetails) principal;\n\t\t\treturn details.getDn();\n\t\t}\n\t\tif (authentication instanceof AnonymousAuthenticationToken) {\n\t\t\tlog.debug(\"Returning empty String as Principal since authentication is anonymous\");\n\t\t\treturn \"\";\n\t\t}\n\t\tthrow new IllegalArgumentException(\n\t\t\t\t\"The principal property of the authentication object\" + \"needs to be an LdapUserDetails.\");\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "principals",
            "of",
            "the",
            "logged",
            "in",
            "user",
            "in",
            "this",
            "case",
            "the",
            "distinguished",
            "name"
        ]
    },
    {
        "id": 853,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n\t\tAssert.notNull(securityContextHolderStrategy, \"securityContextHolderStrategy cannot be null\");\n\t\tthis.securityContextHolderStrategy = securityContextHolderStrategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 854,
        "code": "\tprotected Collection<? extends GrantedAuthority> loadUserAuthorities(DirContextOperations userData, String username,\n\t\t\tString password) {\n\t\tString[] groups = userData.getStringAttributes(\"memberOf\");\n\t\tif (groups == null) {\n\t\t\tthis.logger.debug(\"No values for 'memberOf' attribute.\");\n\t\t\treturn AuthorityUtils.NO_AUTHORITIES;\n\t\t}\n\t\tif (this.logger.isDebugEnabled()) {\n\t\t\tthis.logger.debug(\"'memberOf' attribute values: \" + Arrays.asList(groups));\n\t\t}\n\t\tList<GrantedAuthority> authorities = new ArrayList<>(groups.length);\n\t\tfor (String group : groups) {\n\t\t\tauthorities.add(new SimpleGrantedAuthority(new DistinguishedName(group).removeLast().getValue()));\n\t\t}\n\t\treturn authorities;\n\t}",
        "summary_tokens": [
            "creates",
            "the",
            "user",
            "authority",
            "list",
            "from",
            "the",
            "values",
            "of",
            "the",
            "member",
            "of",
            "attribute",
            "obtained",
            "from",
            "the",
            "user",
            "s",
            "active",
            "directory",
            "entry"
        ]
    },
    {
        "id": 855,
        "code": "\tpublic void setConvertSubErrorCodesToExceptions(boolean convertSubErrorCodesToExceptions) {\n\t\tthis.convertSubErrorCodesToExceptions = convertSubErrorCodesToExceptions;\n\t}",
        "summary_tokens": [
            "by",
            "default",
            "a",
            "failed",
            "authentication",
            "ldap",
            "error",
            "0",
            "will",
            "result",
            "in",
            "a",
            "bad",
            "credentials",
            "exception"
        ]
    },
    {
        "id": 856,
        "code": "\tpublic void setSearchFilter(String searchFilter) {\n\t\tAssert.hasText(searchFilter, \"searchFilter must have text\");\n\t\tthis.searchFilter = searchFilter;\n\t}",
        "summary_tokens": [
            "the",
            "ldap",
            "filter",
            "string",
            "to",
            "search",
            "for",
            "the",
            "user",
            "being",
            "authenticated"
        ]
    },
    {
        "id": 857,
        "code": "\tpublic void setContextEnvironmentProperties(Map<String, Object> environment) {\n\t\tAssert.notEmpty(environment, \"environment must not be empty\");\n\t\tthis.contextEnvironmentProperties = new Hashtable<>(environment);\n\t}",
        "summary_tokens": [
            "allows",
            "a",
            "custom",
            "environment",
            "properties",
            "to",
            "be",
            "used",
            "to",
            "create",
            "initial",
            "ldap",
            "context"
        ]
    },
    {
        "id": 858,
        "code": "\tpublic String getID() {\n\t\treturn OID;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "oid",
            "of",
            "the",
            "password",
            "policy",
            "control",
            "0"
        ]
    },
    {
        "id": 859,
        "code": "\tpublic boolean isCritical() {\n\t\treturn this.critical;\n\t}",
        "summary_tokens": [
            "returns",
            "whether",
            "the",
            "control",
            "is",
            "critical",
            "for",
            "the",
            "client"
        ]
    },
    {
        "id": 860,
        "code": "\tpublic Control getControlInstance(Control ctl) {\n\t\tif (ctl.getID().equals(PasswordPolicyControl.OID)) {\n\t\t\treturn new PasswordPolicyResponseControl(ctl.getEncodedValue());\n\t\t}\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "creates",
            "an",
            "instance",
            "of",
            "password",
            "policy",
            "response",
            "control",
            "if",
            "the",
            "passed",
            "control",
            "is",
            "a",
            "response",
            "control",
            "of",
            "this",
            "type"
        ]
    },
    {
        "id": 861,
        "code": "\tpublic byte[] getEncodedValue() {\n\t\treturn this.encodedValue;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "unchanged",
            "value",
            "of",
            "the",
            "response",
            "control"
        ]
    },
    {
        "id": 862,
        "code": "\tpublic int getGraceLoginsRemaining() {\n\t\treturn this.graceLoginsRemaining;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "grace",
            "logins",
            "remaining"
        ]
    },
    {
        "id": 863,
        "code": "\tpublic int getTimeBeforeExpiration() {\n\t\treturn this.timeBeforeExpiration;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "time",
            "before",
            "expiration"
        ]
    },
    {
        "id": 864,
        "code": "\tpublic boolean hasError() {\n\t\treturn this.errorStatus != null;\n\t}",
        "summary_tokens": [
            "checks",
            "whether",
            "an",
            "error",
            "is",
            "present"
        ]
    },
    {
        "id": 865,
        "code": "\tpublic boolean hasWarning() {\n\t\treturn (this.graceLoginsRemaining != Integer.MAX_VALUE) || (this.timeBeforeExpiration != Integer.MAX_VALUE);\n\t}",
        "summary_tokens": [
            "checks",
            "whether",
            "a",
            "warning",
            "is",
            "present"
        ]
    },
    {
        "id": 866,
        "code": "\tpublic boolean isLocked() {\n\t\treturn this.errorStatus == PasswordPolicyErrorStatus.ACCOUNT_LOCKED;\n\t}",
        "summary_tokens": [
            "determines",
            "whether",
            "an",
            "account",
            "locked",
            "error",
            "has",
            "been",
            "returned"
        ]
    },
    {
        "id": 867,
        "code": "\tpublic String toString() {\n\t\tStringBuilder sb = new StringBuilder();\n\t\tsb.append(getClass().getSimpleName()).append(\" [\");\n\t\tif (hasError()) {\n\t\t\tsb.append(\"error=\").append(this.errorStatus.getDefaultMessage()).append(\"; \");\n\t\t}\n\t\tif (this.graceLoginsRemaining != Integer.MAX_VALUE) {\n\t\t\tsb.append(\"warning=\").append(this.graceLoginsRemaining).append(\" grace logins remain; \");\n\t\t}\n\t\tif (this.timeBeforeExpiration != Integer.MAX_VALUE) {\n\t\t\tsb.append(\"warning=time before expiration is \").append(this.timeBeforeExpiration).append(\"; \");\n\t\t}\n\t\tif (!hasError() && !hasWarning()) {\n\t\t\tsb.append(\"(no error, no warning)\");\n\t\t}\n\t\tsb.append(\"]\");\n\t\treturn sb.toString();\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "textual",
            "representation",
            "containing",
            "error",
            "and",
            "warning",
            "messages",
            "if",
            "any",
            "are",
            "present"
        ]
    },
    {
        "id": 868,
        "code": "\tpublic DirContextOperations searchForUser(String username) {\n\t\tlogger.trace(LogMessage.of(() -> \"Searching for user '\" + username + \"', with \" + this));\n\t\tSpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate(this.contextSource);\n\t\ttemplate.setSearchControls(this.searchControls);\n\t\ttry {\n\t\t\tDirContextOperations operations = template.searchForSingleEntry(this.searchBase, this.searchFilter,\n\t\t\t\t\tnew String[] { username });\n\t\t\tlogger.debug(LogMessage.of(() -> \"Found user '\" + username + \"', with \" + this));\n\t\t\treturn operations;\n\t\t}\n\t\tcatch (IncorrectResultSizeDataAccessException ex) {\n\t\t\tif (ex.getActualSize() == 0) {\n\t\t\t\tthrow new UsernameNotFoundException(\"User \" + username + \" not found in directory.\");\n\t\t\t}\n\t\t\t\n\t\t\tthrow ex;\n\t\t}\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "ldap",
            "user",
            "details",
            "containing",
            "the",
            "user",
            "s",
            "information",
            "username",
            "the",
            "username",
            "to",
            "search",
            "for"
        ]
    },
    {
        "id": 869,
        "code": "\tpublic void setDerefLinkFlag(boolean deref) {\n\t\tthis.searchControls.setDerefLinkFlag(deref);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "corresponding",
            "property",
            "on",
            "the",
            "search",
            "controls",
            "instance",
            "used",
            "in",
            "the",
            "search"
        ]
    },
    {
        "id": 870,
        "code": "\tpublic void setSearchSubtree(boolean searchSubtree) {\n\t\tthis.searchControls\n\t\t\t\t.setSearchScope(searchSubtree ? SearchControls.SUBTREE_SCOPE : SearchControls.ONELEVEL_SCOPE);\n\t}",
        "summary_tokens": [
            "if",
            "true",
            "then",
            "searches",
            "the",
            "entire",
            "subtree",
            "as",
            "identified",
            "by",
            "context",
            "if",
            "false",
            "the",
            "default",
            "then",
            "only",
            "searches",
            "the",
            "level",
            "identified",
            "by",
            "the",
            "context"
        ]
    },
    {
        "id": 871,
        "code": "\tpublic void setSearchTimeLimit(int searchTimeLimit) {\n\t\tthis.searchControls.setTimeLimit(searchTimeLimit);\n\t}",
        "summary_tokens": [
            "the",
            "time",
            "to",
            "wait",
            "before",
            "the",
            "search",
            "fails",
            "the",
            "default",
            "is",
            "zero",
            "meaning",
            "forever"
        ]
    },
    {
        "id": 872,
        "code": "\tpublic void setReturningAttributes(String[] attrs) {\n\t\tthis.searchControls.setReturningAttributes(attrs);\n\t}",
        "summary_tokens": [
            "specifies",
            "the",
            "attributes",
            "that",
            "will",
            "be",
            "returned",
            "as",
            "part",
            "of",
            "the",
            "search"
        ]
    },
    {
        "id": 873,
        "code": "\tpublic int getLocalPort() {\n\t\treturn this.localPort;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "port",
            "that",
            "is",
            "resolved",
            "by",
            "tcp",
            "transport"
        ]
    },
    {
        "id": 874,
        "code": "\tpublic void setLdapOverSslEnabled(boolean ldapOverSslEnabled) {\n\t\tthis.ldapOverSslEnabled = ldapOverSslEnabled;\n\t}",
        "summary_tokens": [
            "if",
            "set",
            "to",
            "true",
            "will",
            "enable",
            "ldap",
            "over",
            "ssl",
            "ldaps"
        ]
    },
    {
        "id": 875,
        "code": "\tpublic void setKeyStoreFile(File keyStoreFile) {\n\t\tAssert.notNull(keyStoreFile, \"The keyStoreFile must not be null.\");\n\t\tAssert.isTrue(keyStoreFile.isFile(), \"The keyStoreFile must be a file.\");\n\t\tthis.keyStoreFile = keyStoreFile;\n\t}",
        "summary_tokens": [
            "the",
            "key",
            "store",
            "must",
            "not",
            "be",
            "null",
            "and",
            "must",
            "be",
            "a",
            "valid",
            "file"
        ]
    },
    {
        "id": 876,
        "code": "\tpublic void setCertificatePassord(String certificatePassord) {\n\t\tthis.certificatePassord = certificatePassord;\n\t}",
        "summary_tokens": [
            "will",
            "set",
            "the",
            "certificate",
            "password",
            "on",
            "the",
            "underlying",
            "ldap",
            "server"
        ]
    },
    {
        "id": 877,
        "code": "\tprotected Set<GrantedAuthority> getAdditionalRoles(DirContextOperations user, String username) {\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "this",
            "method",
            "should",
            "be",
            "overridden",
            "if",
            "required",
            "to",
            "obtain",
            "any",
            "additional",
            "roles",
            "for",
            "the",
            "given",
            "user",
            "on",
            "top",
            "of",
            "those",
            "obtained",
            "from",
            "the",
            "standard",
            "search",
            "implemented",
            "by",
            "this",
            "class"
        ]
    },
    {
        "id": 878,
        "code": "\tpublic final Collection<GrantedAuthority> getGrantedAuthorities(DirContextOperations user, String username) {\n\t\tString userDn = user.getNameInNamespace();\n\t\tSet<GrantedAuthority> roles = getGroupMembershipRoles(userDn, username);\n\t\tSet<GrantedAuthority> extraRoles = getAdditionalRoles(user, username);\n\t\tif (extraRoles != null) {\n\t\t\troles.addAll(extraRoles);\n\t\t}\n\t\tif (this.defaultRole != null) {\n\t\t\troles.add(this.defaultRole);\n\t\t}\n\t\tList<GrantedAuthority> result = new ArrayList<>(roles.size());\n\t\tresult.addAll(roles);\n\t\tlogger.debug(LogMessage.format(\"Retrieved authorities for user %s\", userDn));\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "obtains",
            "the",
            "authorities",
            "for",
            "the",
            "user",
            "who",
            "s",
            "directory",
            "entry",
            "is",
            "represented",
            "by",
            "the",
            "supplied",
            "ldap",
            "user",
            "details",
            "object"
        ]
    },
    {
        "id": 879,
        "code": "\tpublic void setConvertToUpperCase(boolean convertToUpperCase) {\n\t\tthis.convertToUpperCase = convertToUpperCase;\n\t}",
        "summary_tokens": [
            "convert",
            "the",
            "role",
            "to",
            "uppercase"
        ]
    },
    {
        "id": 880,
        "code": "\tpublic void setDefaultRole(String defaultRole) {\n\t\tAssert.notNull(defaultRole, \"The defaultRole property cannot be set to null\");\n\t\tthis.defaultRole = new SimpleGrantedAuthority(defaultRole);\n\t}",
        "summary_tokens": [
            "the",
            "default",
            "role",
            "which",
            "will",
            "be",
            "assigned",
            "to",
            "all",
            "users"
        ]
    },
    {
        "id": 881,
        "code": "\tpublic void setRolePrefix(String rolePrefix) {\n\t\tAssert.notNull(rolePrefix, \"rolePrefix must not be null\");\n\t\tthis.rolePrefix = rolePrefix;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "prefix",
            "which",
            "will",
            "be",
            "prepended",
            "to",
            "the",
            "values",
            "loaded",
            "from",
            "the",
            "directory"
        ]
    },
    {
        "id": 882,
        "code": "\tpublic void setSearchSubtree(boolean searchSubtree) {\n\t\tint searchScope = searchSubtree ? SearchControls.SUBTREE_SCOPE : SearchControls.ONELEVEL_SCOPE;\n\t\tthis.searchControls.setSearchScope(searchScope);\n\t}",
        "summary_tokens": [
            "if",
            "set",
            "to",
            "true",
            "a",
            "subtree",
            "scope",
            "search",
            "will",
            "be",
            "performed"
        ]
    },
    {
        "id": 883,
        "code": "\tpublic void setIgnorePartialResultException(boolean ignore) {\n\t\tgetLdapTemplate().setIgnorePartialResultException(ignore);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "corresponding",
            "property",
            "on",
            "the",
            "underlying",
            "template",
            "avoiding",
            "specific",
            "issues",
            "with",
            "active",
            "directory"
        ]
    },
    {
        "id": 884,
        "code": "\tpublic void setAuthorityMapper(Function<Map<String, List<String>>, GrantedAuthority> authorityMapper) {\n\t\tAssert.notNull(authorityMapper, \"authorityMapper must not be null\");\n\t\tthis.authorityMapper = authorityMapper;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "mapping",
            "function",
            "which",
            "will",
            "be",
            "used",
            "to",
            "create",
            "instances",
            "of",
            "granted",
            "authority",
            "given",
            "the",
            "context",
            "record"
        ]
    },
    {
        "id": 885,
        "code": "\tprotected SpringSecurityLdapTemplate getLdapTemplate() {\n\t\treturn this.ldapTemplate;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "current",
            "ldap",
            "template"
        ]
    },
    {
        "id": 886,
        "code": "\tprotected final boolean isConvertToUpperCase() {\n\t\treturn this.convertToUpperCase;\n\t}",
        "summary_tokens": [
            "returns",
            "true",
            "if",
            "role",
            "names",
            "are",
            "converted",
            "to",
            "uppercase",
            "method",
            "available",
            "so",
            "that",
            "classes",
            "extending",
            "this",
            "can",
            "override",
            "true",
            "if",
            "role",
            "names",
            "are",
            "converted",
            "to",
            "uppercase"
        ]
    },
    {
        "id": 887,
        "code": "\tprivate SearchControls getSearchControls() {\n\t\treturn this.searchControls;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "search",
            "controls",
            "method",
            "available",
            "so",
            "that",
            "classes",
            "extending",
            "this",
            "can",
            "override",
            "the",
            "search",
            "controls",
            "used",
            "the",
            "search",
            "controls"
        ]
    },
    {
        "id": 888,
        "code": "\tpublic Map<String, List<String>> getAttributes() {\n\t\treturn this.attributes;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "ldap",
            "attributes",
            "the",
            "ldap",
            "attributes",
            "map",
            "can",
            "be",
            "null"
        ]
    },
    {
        "id": 889,
        "code": "\tpublic String getDn() {\n\t\treturn this.dn;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "dn",
            "for",
            "this",
            "ldap",
            "authority"
        ]
    },
    {
        "id": 890,
        "code": "\tpublic List<String> getAttributeValues(String name) {\n\t\tList<String> result = null;\n\t\tif (this.attributes != null) {\n\t\t\tresult = this.attributes.get(name);\n\t\t}\n\t\treturn (result != null) ? result : Collections.emptyList();\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "values",
            "for",
            "a",
            "specific",
            "attribute",
            "name",
            "the",
            "attribute",
            "name",
            "a",
            "string",
            "array",
            "never",
            "null",
            "but",
            "may",
            "be",
            "zero",
            "length"
        ]
    },
    {
        "id": 891,
        "code": "\tpublic String getFirstAttributeValue(String name) {\n\t\tList<String> result = getAttributeValues(name);\n\t\treturn (!result.isEmpty()) ? result.get(0) : null;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "first",
            "attribute",
            "value",
            "for",
            "a",
            "specified",
            "attribute",
            "name",
            "the",
            "first",
            "attribute",
            "value",
            "for",
            "a",
            "specified",
            "attribute",
            "may",
            "be",
            "null"
        ]
    },
    {
        "id": 892,
        "code": "\tpublic boolean equals(Object obj) {\n\t\tif (this == obj) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!(obj instanceof LdapAuthority)) {\n\t\t\treturn false;\n\t\t}\n\t\tLdapAuthority other = (LdapAuthority) obj;\n\t\tif (!this.dn.equals(other.dn)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.role.equals(other.role);\n\t}",
        "summary_tokens": [
            "compares",
            "the",
            "ldap",
            "authority",
            "based",
            "on",
            "get",
            "authority",
            "and",
            "get",
            "dn",
            "values"
        ]
    },
    {
        "id": 893,
        "code": "\tpublic void changePassword(final String oldPassword, final String newPassword) {\n\t\tAuthentication authentication = this.securityContextHolderStrategy.getContext().getAuthentication();\n\t\tAssert.notNull(authentication,\n\t\t\t\t\"No authentication object found in security context. Can't change current user's password!\");\n\t\tString username = authentication.getName();\n\t\tthis.logger.debug(LogMessage.format(\"Changing password for user '%s'\", username));\n\t\tDistinguishedName userDn = this.usernameMapper.buildDn(username);\n\t\tif (this.usePasswordModifyExtensionOperation) {\n\t\t\tchangePasswordUsingExtensionOperation(userDn, oldPassword, newPassword);\n\t\t}\n\t\telse {\n\t\t\tchangePasswordUsingAttributeModification(userDn, oldPassword, newPassword);\n\t\t}\n\t}",
        "summary_tokens": [
            "changes",
            "the",
            "password",
            "for",
            "the",
            "current",
            "user"
        ]
    },
    {
        "id": 894,
        "code": "\tList<GrantedAuthority> getUserAuthorities(final DistinguishedName dn, final String username) {\n\t\tSearchExecutor se = (ctx) -> {\n\t\t\tDistinguishedName fullDn = LdapUtils.getFullDn(dn, ctx);\n\t\t\tSearchControls ctrls = new SearchControls();\n\t\t\tctrls.setReturningAttributes(new String[] { this.groupRoleAttributeName });\n\t\t\treturn ctx.search(this.groupSearchBase, this.groupSearchFilter, new String[] { fullDn.toUrl(), username },\n\t\t\t\t\tctrls);\n\t\t};\n\t\tAttributesMapperCallbackHandler roleCollector = new AttributesMapperCallbackHandler(this.roleMapper);\n\t\tthis.template.search(se, roleCollector);\n\t\treturn roleCollector.getList();\n\t}",
        "summary_tokens": [
            "dn",
            "the",
            "distinguished",
            "name",
            "of",
            "the",
            "entry",
            "may",
            "be",
            "either",
            "relative",
            "to",
            "the",
            "base",
            "context",
            "or",
            "a",
            "complete",
            "dn",
            "including",
            "the",
            "name",
            "of",
            "the",
            "context",
            "either",
            "is",
            "supported"
        ]
    },
    {
        "id": 895,
        "code": "\tprotected DistinguishedName buildGroupDn(String group) {\n\t\tDistinguishedName dn = new DistinguishedName(this.groupSearchBase);\n\t\tdn.add(this.groupRoleAttributeName, group.toLowerCase());\n\t\treturn dn;\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "dn",
            "from",
            "a",
            "group",
            "name"
        ]
    },
    {
        "id": 896,
        "code": "\tpublic void setGroupMemberAttributeName(String groupMemberAttributeName) {\n\t\tAssert.hasText(groupMemberAttributeName, \"groupMemberAttributeName should have text\");\n\t\tthis.groupMemberAttributeName = groupMemberAttributeName;\n\t\tthis.groupSearchFilter = \"(\" + groupMemberAttributeName + \"={0})\";\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "name",
            "of",
            "the",
            "multi",
            "valued",
            "attribute",
            "which",
            "holds",
            "the",
            "dns",
            "of",
            "users",
            "who",
            "are",
            "members",
            "of",
            "a",
            "group"
        ]
    },
    {
        "id": 897,
        "code": "\tpublic void setUsePasswordModifyExtensionOperation(boolean usePasswordModifyExtensionOperation) {\n\t\tthis.usePasswordModifyExtensionOperation = usePasswordModifyExtensionOperation;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "method",
            "by",
            "which",
            "a",
            "user",
            "s",
            "password",
            "gets",
            "modified"
        ]
    },
    {
        "id": 898,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n\t\tAssert.notNull(securityContextHolderStrategy, \"securityContextHolderStrategy cannot be null\");\n\t\tthis.securityContextHolderStrategy = securityContextHolderStrategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 899,
        "code": "\tprotected String mapPassword(Object passwordValue) {\n\t\tif (!(passwordValue instanceof String)) {\n\t\t\t\n\t\t\tpasswordValue = new String((byte[]) passwordValue);\n\t\t}\n\t\treturn (String) passwordValue;\n\n\t}",
        "summary_tokens": [
            "extension",
            "point",
            "to",
            "allow",
            "customized",
            "creation",
            "of",
            "the",
            "user",
            "s",
            "password",
            "from",
            "the",
            "attribute",
            "stored",
            "in",
            "the",
            "directory"
        ]
    },
    {
        "id": 900,
        "code": "\tprotected GrantedAuthority createAuthority(Object role) {\n\t\tif (role instanceof String) {\n\t\t\tif (this.convertToUpperCase) {\n\t\t\t\trole = ((String) role).toUpperCase();\n\t\t\t}\n\t\t\treturn new SimpleGrantedAuthority(this.rolePrefix + role);\n\t\t}\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "granted",
            "authority",
            "from",
            "a",
            "role",
            "attribute"
        ]
    },
    {
        "id": 901,
        "code": "\tpublic void setConvertToUpperCase(boolean convertToUpperCase) {\n\t\tthis.convertToUpperCase = convertToUpperCase;\n\t}",
        "summary_tokens": [
            "determines",
            "whether",
            "role",
            "field",
            "values",
            "will",
            "be",
            "converted",
            "to",
            "upper",
            "case",
            "when",
            "loaded"
        ]
    },
    {
        "id": 902,
        "code": "\tpublic void setPasswordAttributeName(String passwordAttributeName) {\n\t\tthis.passwordAttributeName = passwordAttributeName;\n\t}",
        "summary_tokens": [
            "the",
            "name",
            "of",
            "the",
            "attribute",
            "which",
            "contains",
            "the",
            "user",
            "s",
            "password"
        ]
    },
    {
        "id": 903,
        "code": "\tpublic void setRoleAttributes(String[] roleAttributes) {\n\t\tAssert.notNull(roleAttributes, \"roleAttributes array cannot be null\");\n\t\tthis.roleAttributes = roleAttributes;\n\t}",
        "summary_tokens": [
            "the",
            "names",
            "of",
            "any",
            "attributes",
            "in",
            "the",
            "user",
            "s",
            "entry",
            "which",
            "represent",
            "application",
            "roles"
        ]
    },
    {
        "id": 904,
        "code": "\tpublic void setRolePrefix(String rolePrefix) {\n\t\tthis.rolePrefix = rolePrefix;\n\t}",
        "summary_tokens": [
            "the",
            "prefix",
            "that",
            "should",
            "be",
            "applied",
            "to",
            "the",
            "role",
            "names",
            "role",
            "prefix",
            "the",
            "prefix",
            "defaults",
            "to",
            "role"
        ]
    },
    {
        "id": 905,
        "code": "\tprivate void performNestedSearch(String userDn, String username, Set<GrantedAuthority> authorities, int depth) {\n\t\tif (depth == 0) {\n\t\t\t\n\t\t\tlogger.debug(LogMessage.of(() -> \"Aborted search since max depth reached,\" + \" for roles for user '\"\n\t\t\t\t\t+ username + \" with DN = \" + userDn + \" and filter \" + getGroupSearchFilter() + \" in search base '\"\n\t\t\t\t\t+ getGroupSearchBase() + \"'\"));\n\t\t\treturn;\n\t\t}\n\t\tlogger.trace(LogMessage.of(() -> \"Searching for roles for user \" + username + \" with DN \" + userDn\n\t\t\t\t+ \" and filter \" + getGroupSearchFilter() + \" in search base \" + getGroupSearchBase()));\n\t\tif (getAttributeNames() == null) {\n\t\t\tsetAttributeNames(new HashSet<>());\n\t\t}\n\t\tif (StringUtils.hasText(getGroupRoleAttribute()) && !getAttributeNames().contains(getGroupRoleAttribute())) {\n\t\t\tgetAttributeNames().add(getGroupRoleAttribute());\n\t\t}\n\t\tSet<Map<String, List<String>>> userRoles = getLdapTemplate().searchForMultipleAttributeValues(\n\t\t\t\tgetGroupSearchBase(), getGroupSearchFilter(), new String[] { userDn, username },\n\t\t\t\tgetAttributeNames().toArray(new String[0]));\n\t\tlogger.debug(LogMessage.format(\"Found roles from search %s\", userRoles));\n\t\tfor (Map<String, List<String>> record : userRoles) {\n\t\t\tboolean circular = false;\n\t\t\tString dn = record.get(SpringSecurityLdapTemplate.DN_KEY).get(0);\n\t\t\tList<String> roleValues = record.get(getGroupRoleAttribute());\n\t\t\tSet<String> roles = new HashSet<>();\n\t\t\tif (roleValues != null) {\n\t\t\t\troles.addAll(roleValues);\n\t\t\t}\n\t\t\tfor (String role : roles) {\n\t\t\t\tif (isConvertToUpperCase()) {\n\t\t\t\t\trole = role.toUpperCase();\n\t\t\t\t}\n\t\t\t\trole = getRolePrefix() + role;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tcircular = circular | (!authorities.add(new LdapAuthority(role, dn, record)));\n\t\t\t}\n\t\t\tString roleName = (roles.size() > 0) ? roles.iterator().next() : dn;\n\t\t\tif (!circular) {\n\t\t\t\tperformNestedSearch(dn, roleName, authorities, (depth - 1));\n\t\t\t}\n\t\t}\n\t}",
        "summary_tokens": [
            "performs",
            "the",
            "nested",
            "group",
            "search",
            "user",
            "dn",
            "the",
            "user",
            "dn",
            "to",
            "search",
            "for",
            "will",
            "become",
            "the",
            "group",
            "dn",
            "for",
            "subsequent",
            "searches",
            "username",
            "the",
            "username",
            "of",
            "the",
            "user",
            "authorities",
            "the",
            "authorities",
            "set",
            "that",
            "will",
            "be",
            "populated",
            "must",
            "not",
            "be",
            "null",
            "depth",
            "the",
            "depth",
            "remaining",
            "when",
            "0",
            "recursion",
            "will",
            "end"
        ]
    },
    {
        "id": 906,
        "code": "\tprivate Set<String> getAttributeNames() {\n\t\treturn this.attributeNames;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "attribute",
            "names",
            "that",
            "this",
            "populator",
            "has",
            "been",
            "configured",
            "to",
            "retrieve",
            "value",
            "can",
            "be",
            "null",
            "represents",
            "fetch",
            "all",
            "attributes",
            "the",
            "attribute",
            "names",
            "or",
            "null",
            "for",
            "all"
        ]
    },
    {
        "id": 907,
        "code": "\tpublic void setAttributeNames(Set<String> attributeNames) {\n\t\tthis.attributeNames = attributeNames;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "attribute",
            "names",
            "to",
            "retrieve",
            "for",
            "each",
            "ldap",
            "groups"
        ]
    },
    {
        "id": 908,
        "code": "\tprivate int getMaxSearchDepth() {\n\t\treturn this.maxSearchDepth;\n\t}",
        "summary_tokens": [
            "how",
            "far",
            "should",
            "a",
            "nested",
            "search",
            "go"
        ]
    },
    {
        "id": 909,
        "code": "\tpublic void setMaxSearchDepth(int maxSearchDepth) {\n\t\tthis.maxSearchDepth = maxSearchDepth;\n\t}",
        "summary_tokens": [
            "how",
            "far",
            "should",
            "a",
            "nested",
            "search",
            "go"
        ]
    },
    {
        "id": 910,
        "code": "\tpublic byte[] serialize(ArrayTree<E> tree) {\n\t\tif ((tree == null) || (tree.size() == 0)) {\n\t\t\treturn EMPTY_TREE;\n\t\t}\n\n\t\tByteArrayOutputStream byteStream = new ByteArrayOutputStream();\n\t\tDataOutputStream out = new DataOutputStream(byteStream);\n\t\tbyte[] data = null;\n\n\t\ttry {\n\t\t\tout.writeByte(0); \n\t\t\tout.writeInt(tree.size());\n\n\t\t\tfor (int position = 0; position < tree.size(); position++) {\n\t\t\t\tE value = tree.get(position);\n\t\t\t\tbyte[] bytes = this.keyMarshaller.serialize(value);\n\n\t\t\t\t\n\t\t\t\tout.writeInt(bytes.length);\n\n\t\t\t\t\n\t\t\t\tif (bytes.length != 0) {\n\t\t\t\t\tout.write(bytes);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tout.flush();\n\t\t\tdata = byteStream.toByteArray();\n\n\t\t\t\n\t\t\ttry {\n\t\t\t\tdeserialize(data);\n\t\t\t}\n\t\t\tcatch (NullPointerException npe) {\n\t\t\t\tSystem.out.println(\"Bad serialization, tree : [\" + StringTools.dumpBytes(data) + \"]\");\n\t\t\t\tthrow npe;\n\t\t\t}\n\n\t\t\tout.close();\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tex.printStackTrace();\n\t\t}\n\n\t\treturn data;\n\t}",
        "summary_tokens": [
            "marshals",
            "the",
            "given",
            "tree",
            "to",
            "bytes",
            "tree",
            "the",
            "tree",
            "to",
            "be",
            "marshalled"
        ]
    },
    {
        "id": 911,
        "code": "\tpublic ArrayTree<E> deserialize(byte[] data) throws IOException {\n\t\ttry {\n\t\t\tif ((data == null) || (data.length == 0)) {\n\t\t\t\tthrow new IOException(\"Null or empty data array is invalid.\");\n\t\t\t}\n\n\t\t\tif ((data.length == 1) && (data[0] == 0)) {\n\t\t\t\tE[] array = (E[]) new Object[] {};\n\t\t\t\tArrayTree<E> tree = new ArrayTree<E>(this.comparator, array);\n\t\t\t\treturn tree;\n\t\t\t}\n\n\t\t\tByteArrayInputStream bin = new ByteArrayInputStream(data);\n\t\t\tDataInputStream din = new DataInputStream(bin);\n\n\t\t\tbyte startByte = din.readByte();\n\n\t\t\tif (startByte != 0) {\n\t\t\t\tthrow new IOException(\"wrong array serialized data format\");\n\t\t\t}\n\n\t\t\tint size = din.readInt();\n\t\t\tE[] nodes = (E[]) new Object[size];\n\n\t\t\tfor (int i = 0; i < size; i++) {\n\t\t\t\t\n\t\t\t\tint dataSize = din.readInt();\n\n\t\t\t\tif (dataSize != 0) {\n\t\t\t\t\tbyte[] bytes = new byte[dataSize];\n\n\t\t\t\t\tdin.read(bytes);\n\t\t\t\t\tE key = this.keyMarshaller.deserialize(bytes);\n\t\t\t\t\tnodes[i] = key;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tArrayTree<E> arrayTree = new ArrayTree<E>(this.comparator, nodes);\n\n\t\t\treturn arrayTree;\n\t\t}\n\t\tcatch (NullPointerException npe) {\n\t\t\tSystem.out.println(\"Bad tree : [\" + StringTools.dumpBytes(data) + \"]\");\n\t\t\tthrow npe;\n\t\t}\n\t}",
        "summary_tokens": [
            "creates",
            "an",
            "array",
            "from",
            "given",
            "bytes",
            "of",
            "data"
        ]
    },
    {
        "id": 912,
        "code": "\tpublic void openLDAP33SecondsTillPasswordExpiryCtrlIsParsedCorrectly() {\n\t\tbyte[] ctrlBytes = { 0x30, 0x05, (byte) 0xA0, 0x03, (byte) 0xA0, 0x1, 0x21 };\n\t\tPasswordPolicyResponseControl ctrl = new PasswordPolicyResponseControl(ctrlBytes);\n\t\tassertThat(ctrl.hasWarning()).isTrue();\n\t\tassertThat(ctrl.getTimeBeforeExpiration()).isEqualTo(33);\n\t}",
        "summary_tokens": [
            "useful",
            "method",
            "for",
            "obtaining",
            "data",
            "from",
            "a",
            "server",
            "for",
            "use",
            "in",
            "tests"
        ]
    },
    {
        "id": 913,
        "code": "\tpublic static MessageSecurityMetadataSource createExpressionMessageMetadataSource(\n\t\t\tLinkedHashMap<MessageMatcher<?>, String> matcherToExpression,\n\t\t\tSecurityExpressionHandler<Message<Object>> handler) {\n\t\tLinkedHashMap<MessageMatcher<?>, Collection<ConfigAttribute>> matcherToAttrs = new LinkedHashMap<>();\n\t\tfor (Map.Entry<MessageMatcher<?>, String> entry : matcherToExpression.entrySet()) {\n\t\t\tMessageMatcher<?> matcher = entry.getKey();\n\t\t\tString rawExpression = entry.getValue();\n\t\t\tExpression expression = handler.getExpressionParser().parseExpression(rawExpression);\n\t\t\tConfigAttribute attribute = new MessageExpressionConfigAttribute(expression, matcher);\n\t\t\tmatcherToAttrs.put(matcher, Arrays.asList(attribute));\n\t\t}\n\t\treturn new DefaultMessageSecurityMetadataSource(matcherToAttrs);\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "message",
            "security",
            "metadata",
            "source",
            "that",
            "uses",
            "message",
            "matcher",
            "mapped",
            "to",
            "spring",
            "expressions"
        ]
    },
    {
        "id": 914,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n\t\tthis.authentication = getAuthentication(securityContextHolderStrategy);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 915,
        "code": "\tpublic void setAuthorizationEventPublisher(AuthorizationEventPublisher eventPublisher) {\n\t\tAssert.notNull(eventPublisher, \"eventPublisher cannot be null\");\n\t\tthis.eventPublisher = eventPublisher;\n\t}",
        "summary_tokens": [
            "use",
            "this",
            "authorization",
            "event",
            "publisher",
            "to",
            "publish",
            "the",
            "authorization",
            "manager",
            "result"
        ]
    },
    {
        "id": 916,
        "code": "\tpublic Message<T> getMessage() {\n\t\treturn this.message;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "http",
            "servlet",
            "request"
        ]
    },
    {
        "id": 917,
        "code": "\tpublic Map<String, String> getVariables() {\n\t\treturn this.variables;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "extracted",
            "variable",
            "values",
            "where",
            "the",
            "key",
            "is",
            "the",
            "variable",
            "name",
            "and",
            "the",
            "value",
            "is",
            "the",
            "variable",
            "value"
        ]
    },
    {
        "id": 918,
        "code": "\tpublic AuthorizationDecision check(Supplier<Authentication> authentication, Message<?> message) {\n\t\tif (this.logger.isTraceEnabled()) {\n\t\t\tthis.logger.trace(LogMessage.format(\"Authorizing message\"));\n\t\t}\n\t\tfor (Entry<AuthorizationManager<MessageAuthorizationContext<?>>> mapping : this.mappings) {\n\t\t\tMessageMatcher<?> matcher = mapping.getMessageMatcher();\n\t\t\tMessageAuthorizationContext<?> authorizationContext = authorizationContext(matcher, message);\n\t\t\tif (authorizationContext != null) {\n\t\t\t\tAuthorizationManager<MessageAuthorizationContext<?>> manager = mapping.getEntry();\n\t\t\t\tif (this.logger.isTraceEnabled()) {\n\t\t\t\t\tthis.logger.trace(LogMessage.format(\"Checking authorization on message using %s\", manager));\n\t\t\t\t}\n\t\t\t\treturn manager.check(authentication, authorizationContext);\n\t\t\t}\n\t\t}\n\t\tthis.logger.trace(\"Abstaining since did not find matching MessageMatcher\");\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "delegates",
            "to",
            "a",
            "specific",
            "authorization",
            "manager",
            "based",
            "on",
            "a",
            "message",
            "matcher",
            "evaluation"
        ]
    },
    {
        "id": 919,
        "code": "\tpublic static Builder builder() {\n\t\treturn new Builder();\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "builder",
            "for",
            "message",
            "matcher",
            "delegating",
            "authorization",
            "manager"
        ]
    },
    {
        "id": 920,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n\t\tAssert.notNull(securityContextHolderStrategy, \"securityContextHolderStrategy cannot be null\");\n\t\tthis.securityContextHolderStrategy = securityContextHolderStrategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 921,
        "code": "\tprivate <T extends Annotation> T findMethodAnnotation(Class<T> annotationClass, MethodParameter parameter) {\n\t\tT annotation = parameter.getParameterAnnotation(annotationClass);\n\t\tif (annotation != null) {\n\t\t\treturn annotation;\n\t\t}\n\t\tAnnotation[] annotationsToSearch = parameter.getParameterAnnotations();\n\t\tfor (Annotation toSearch : annotationsToSearch) {\n\t\t\tannotation = AnnotationUtils.findAnnotation(toSearch.annotationType(), annotationClass);\n\t\t\tif (annotation != null) {\n\t\t\t\treturn annotation;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "obtains",
            "the",
            "specified",
            "annotation",
            "on",
            "the",
            "specified",
            "method",
            "parameter"
        ]
    },
    {
        "id": 922,
        "code": "\tpublic void setAnonymousAuthentication(Authentication authentication) {\n\t\tAssert.notNull(authentication, \"authentication cannot be null\");\n\t\tthis.anonymous = authentication;\n\t}",
        "summary_tokens": [
            "allows",
            "setting",
            "the",
            "authentication",
            "used",
            "for",
            "anonymous",
            "authentication"
        ]
    },
    {
        "id": 923,
        "code": "\tpublic void setBeanResolver(BeanResolver beanResolver) {\n\t\tthis.beanResolver = beanResolver;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "bean",
            "resolver",
            "to",
            "be",
            "used",
            "on",
            "the",
            "expressions",
            "bean",
            "resolver",
            "the",
            "bean",
            "resolver",
            "to",
            "use"
        ]
    },
    {
        "id": 924,
        "code": "\tpublic void setAdapterRegistry(ReactiveAdapterRegistry adapterRegistry) {\n\t\tAssert.notNull(adapterRegistry, \"adapterRegistry cannot be null\");\n\t\tthis.adapterRegistry = adapterRegistry;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "reactive",
            "adapter",
            "registry",
            "to",
            "be",
            "used"
        ]
    },
    {
        "id": 925,
        "code": "\tprivate <T extends Annotation> T findMethodAnnotation(Class<T> annotationClass, MethodParameter parameter) {\n\t\tT annotation = parameter.getParameterAnnotation(annotationClass);\n\t\tif (annotation != null) {\n\t\t\treturn annotation;\n\t\t}\n\t\tAnnotation[] annotationsToSearch = parameter.getParameterAnnotations();\n\t\tfor (Annotation toSearch : annotationsToSearch) {\n\t\t\tannotation = AnnotationUtils.findAnnotation(toSearch.annotationType(), annotationClass);\n\t\t\tif (annotation != null) {\n\t\t\t\treturn annotation;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "obtains",
            "the",
            "specified",
            "annotation",
            "on",
            "the",
            "specified",
            "method",
            "parameter"
        ]
    },
    {
        "id": 926,
        "code": "\tpublic void setBeanResolver(BeanResolver beanResolver) {\n\t\tthis.beanResolver = beanResolver;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "bean",
            "resolver",
            "to",
            "be",
            "used",
            "on",
            "the",
            "expressions",
            "bean",
            "resolver",
            "the",
            "bean",
            "resolver",
            "to",
            "use"
        ]
    },
    {
        "id": 927,
        "code": "\tpublic void setAdapterRegistry(ReactiveAdapterRegistry adapterRegistry) {\n\t\tAssert.notNull(adapterRegistry, \"adapterRegistry cannot be null\");\n\t\tthis.adapterRegistry = adapterRegistry;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "reactive",
            "adapter",
            "registry",
            "to",
            "be",
            "used"
        ]
    },
    {
        "id": 928,
        "code": "\tprivate <T extends Annotation> T findMethodAnnotation(Class<T> annotationClass, MethodParameter parameter) {\n\t\tT annotation = parameter.getParameterAnnotation(annotationClass);\n\t\tif (annotation != null) {\n\t\t\treturn annotation;\n\t\t}\n\t\tAnnotation[] annotationsToSearch = parameter.getParameterAnnotations();\n\t\tfor (Annotation toSearch : annotationsToSearch) {\n\t\t\tannotation = AnnotationUtils.findAnnotation(toSearch.annotationType(), annotationClass);\n\t\t\tif (annotation != null) {\n\t\t\t\treturn annotation;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "obtains",
            "the",
            "specified",
            "annotation",
            "on",
            "the",
            "specified",
            "method",
            "parameter"
        ]
    },
    {
        "id": 929,
        "code": "\tpublic static SimpDestinationMessageMatcher createSubscribeMatcher(String pattern, PathMatcher matcher) {\n\t\treturn new SimpDestinationMessageMatcher(pattern, SimpMessageType.SUBSCRIBE, matcher);\n\t}",
        "summary_tokens": [
            "p",
            "creates",
            "a",
            "new",
            "instance",
            "with",
            "the",
            "specified",
            "pattern",
            "simp",
            "message",
            "type"
        ]
    },
    {
        "id": 930,
        "code": "\tpublic static SimpDestinationMessageMatcher createMessageMatcher(String pattern, PathMatcher matcher) {\n\t\treturn new SimpDestinationMessageMatcher(pattern, SimpMessageType.MESSAGE, matcher);\n\t}",
        "summary_tokens": [
            "p",
            "creates",
            "a",
            "new",
            "instance",
            "with",
            "the",
            "specified",
            "pattern",
            "simp",
            "message",
            "type"
        ]
    },
    {
        "id": 931,
        "code": "\tpublic void restoresOriginalContextNestedThreeDeep() {\n\t\tAnonymousAuthenticationToken anonymous = new AnonymousAuthenticationToken(\"key\", \"anonymous\",\n\t\t\t\tAuthorityUtils.createAuthorityList(\"ROLE_USER\"));\n\t\tTestingAuthenticationToken origional = new TestingAuthenticationToken(\"original\", \"origional\", \"ROLE_USER\");\n\t\tSecurityContextHolder.getContext().setAuthentication(origional);\n\t\tthis.messageBuilder.setHeader(SimpMessageHeaderAccessor.USER_HEADER, this.authentication);\n\t\tthis.interceptor.beforeHandle(this.messageBuilder.build(), this.channel, this.handler);\n\t\tassertThat(SecurityContextHolder.getContext().getAuthentication()).isSameAs(this.authentication);\n\t\t\n\t\tthis.messageBuilder.setHeader(SimpMessageHeaderAccessor.USER_HEADER, null);\n\t\tthis.interceptor.beforeHandle(this.messageBuilder.build(), this.channel, this.handler);\n\t\tassertThat(SecurityContextHolder.getContext().getAuthentication().getName()).isEqualTo(anonymous.getName());\n\t\tthis.interceptor.afterMessageHandled(this.messageBuilder.build(), this.channel, this.handler, null);\n\t\tassertThat(SecurityContextHolder.getContext().getAuthentication()).isSameAs(this.authentication);\n\t\t\n\t\tthis.interceptor.afterMessageHandled(this.messageBuilder.build(), this.channel, this.handler, null);\n\t\tassertThat(SecurityContextHolder.getContext().getAuthentication()).isSameAs(origional);\n\t}",
        "summary_tokens": [
            "if",
            "a",
            "user",
            "sends",
            "a",
            "websocket",
            "when",
            "processing",
            "another",
            "websocket"
        ]
    },
    {
        "id": 932,
        "code": "\tpublic Method method() {\n\t\treturn this.method;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "resolved",
            "method"
        ]
    },
    {
        "id": 933,
        "code": "\tpublic MethodParameter returnType() {\n\t\treturn new SynthesizingMethodParameter(this.method, -1);\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "declared",
            "return",
            "type",
            "of",
            "the",
            "resolved",
            "method"
        ]
    },
    {
        "id": 934,
        "code": "\tpublic MethodParameter arg(ResolvableType type) {\n\t\treturn new ArgResolver().arg(type);\n\t}",
        "summary_tokens": [
            "find",
            "a",
            "unique",
            "argument",
            "matching",
            "the",
            "given",
            "type"
        ]
    },
    {
        "id": 935,
        "code": "\tpublic final ArgResolver annot(Predicate<MethodParameter>... filter) {\n\t\treturn new ArgResolver(filter);\n\t}",
        "summary_tokens": [
            "filter",
            "on",
            "method",
            "arguments",
            "with",
            "annotation"
        ]
    },
    {
        "id": 936,
        "code": "\tpublic final ArgResolver annotNotPresent(Class<? extends Annotation>... annotationTypes) {\n\t\treturn new ArgResolver().annotNotPresent(annotationTypes);\n\t}",
        "summary_tokens": [
            "filter",
            "on",
            "method",
            "arguments",
            "that",
            "don",
            "t",
            "have",
            "the",
            "given",
            "annotation",
            "type",
            "s"
        ]
    },
    {
        "id": 937,
        "code": "\tpublic static <T> Builder<T> on(Class<T> objectClass) {\n\t\treturn new Builder<>(objectClass);\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "resolvable",
            "method",
            "builder",
            "for",
            "the",
            "given",
            "handler",
            "class"
        ]
    },
    {
        "id": 938,
        "code": "\tpublic OAuth2AuthorizedClient authorize(OAuth2AuthorizationContext context) {\n\t\tAssert.notNull(context, \"context cannot be null\");\n\t\tif (AuthorizationGrantType.AUTHORIZATION_CODE.equals(\n\t\t\t\tcontext.getClientRegistration().getAuthorizationGrantType()) && context.getAuthorizedClient() == null) {\n\t\t\t\n\t\t\t\n\t\t\tthrow new ClientAuthorizationRequiredException(context.getClientRegistration().getRegistrationId());\n\t\t}\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "attempt",
            "to",
            "authorize",
            "the",
            "oauth",
            "0",
            "authorization",
            "context",
            "get",
            "client",
            "registration",
            "client",
            "in",
            "the",
            "provided",
            "context"
        ]
    },
    {
        "id": 939,
        "code": "\tpublic Mono<OAuth2AuthorizedClient> authorize(OAuth2AuthorizationContext context) {\n\t\tAssert.notNull(context, \"context cannot be null\");\n\t\tif (AuthorizationGrantType.AUTHORIZATION_CODE.equals(\n\t\t\t\tcontext.getClientRegistration().getAuthorizationGrantType()) && context.getAuthorizedClient() == null) {\n\t\t\t\n\t\t\t\n\t\t\treturn Mono.error(() -> new ClientAuthorizationRequiredException(\n\t\t\t\t\tcontext.getClientRegistration().getRegistrationId()));\n\t\t}\n\t\treturn Mono.empty();\n\t}",
        "summary_tokens": [
            "attempt",
            "to",
            "authorize",
            "the",
            "oauth",
            "0",
            "authorization",
            "context",
            "get",
            "client",
            "registration",
            "client",
            "in",
            "the",
            "provided",
            "context"
        ]
    },
    {
        "id": 940,
        "code": "\tpublic void setAuthorizedClientProvider(OAuth2AuthorizedClientProvider authorizedClientProvider) {\n\t\tAssert.notNull(authorizedClientProvider, \"authorizedClientProvider cannot be null\");\n\t\tthis.authorizedClientProvider = authorizedClientProvider;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "oauth",
            "0",
            "authorized",
            "client",
            "provider",
            "used",
            "for",
            "authorizing",
            "or",
            "re",
            "authorizing",
            "an",
            "oauth",
            "0"
        ]
    },
    {
        "id": 941,
        "code": "\tpublic void setContextAttributesMapper(\n\t\t\tFunction<OAuth2AuthorizeRequest, Map<String, Object>> contextAttributesMapper) {\n\t\tAssert.notNull(contextAttributesMapper, \"contextAttributesMapper cannot be null\");\n\t\tthis.contextAttributesMapper = contextAttributesMapper;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "function",
            "used",
            "for",
            "mapping",
            "attribute",
            "s",
            "from",
            "the",
            "oauth",
            "0",
            "authorize",
            "request",
            "to",
            "a",
            "map",
            "of",
            "attributes",
            "to",
            "be",
            "associated",
            "to",
            "the",
            "oauth",
            "0",
            "authorization",
            "context",
            "get",
            "attributes",
            "authorization",
            "context"
        ]
    },
    {
        "id": 942,
        "code": "\tpublic void setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler authorizationSuccessHandler) {\n\t\tAssert.notNull(authorizationSuccessHandler, \"authorizationSuccessHandler cannot be null\");\n\t\tthis.authorizationSuccessHandler = authorizationSuccessHandler;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "oauth",
            "0",
            "authorization",
            "success",
            "handler",
            "that",
            "handles",
            "successful",
            "authorizations"
        ]
    },
    {
        "id": 943,
        "code": "\tpublic void setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler authorizationFailureHandler) {\n\t\tAssert.notNull(authorizationFailureHandler, \"authorizationFailureHandler cannot be null\");\n\t\tthis.authorizationFailureHandler = authorizationFailureHandler;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "oauth",
            "0",
            "authorization",
            "failure",
            "handler",
            "that",
            "handles",
            "authorization",
            "failures"
        ]
    },
    {
        "id": 944,
        "code": "\tprivate Mono<OAuth2AuthorizedClient> authorize(OAuth2AuthorizationContext authorizationContext,\n\t\t\tAuthentication principal) {\n\t\treturn this.authorizedClientProvider.authorize(authorizationContext)\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t.flatMap((authorizedClient) -> this.authorizationSuccessHandler\n\t\t\t\t\t\t.onAuthorizationSuccess(authorizedClient, principal, Collections.emptyMap())\n\t\t\t\t\t\t.thenReturn(authorizedClient))\n\t\t\t\t\n\t\t\t\t.onErrorResume(OAuth2AuthorizationException.class,\n\t\t\t\t\t\t(authorizationException) -> this.authorizationFailureHandler\n\t\t\t\t\t\t\t\t.onAuthorizationFailure(authorizationException, principal, Collections.emptyMap())\n\t\t\t\t\t\t\t\t.then(Mono.error(authorizationException)))\n\t\t\t\t.switchIfEmpty(Mono.defer(() -> Mono.justOrEmpty(authorizationContext.getAuthorizedClient())));\n\t}",
        "summary_tokens": [
            "performs",
            "authorization",
            "and",
            "then",
            "delegates",
            "to",
            "either",
            "the",
            "authorization",
            "success",
            "handler",
            "or",
            "authorization",
            "failure",
            "handler",
            "depending",
            "on",
            "the",
            "authorization",
            "result"
        ]
    },
    {
        "id": 945,
        "code": "\tpublic void setAuthorizedClientProvider(ReactiveOAuth2AuthorizedClientProvider authorizedClientProvider) {\n\t\tAssert.notNull(authorizedClientProvider, \"authorizedClientProvider cannot be null\");\n\t\tthis.authorizedClientProvider = authorizedClientProvider;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "reactive",
            "oauth",
            "0",
            "authorized",
            "client",
            "provider",
            "used",
            "for",
            "authorizing",
            "or",
            "re",
            "authorizing",
            "an",
            "oauth",
            "0"
        ]
    },
    {
        "id": 946,
        "code": "\tpublic void setContextAttributesMapper(\n\t\t\tFunction<OAuth2AuthorizeRequest, Mono<Map<String, Object>>> contextAttributesMapper) {\n\t\tAssert.notNull(contextAttributesMapper, \"contextAttributesMapper cannot be null\");\n\t\tthis.contextAttributesMapper = contextAttributesMapper;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "function",
            "used",
            "for",
            "mapping",
            "attribute",
            "s",
            "from",
            "the",
            "oauth",
            "0",
            "authorize",
            "request",
            "to",
            "a",
            "map",
            "of",
            "attributes",
            "to",
            "be",
            "associated",
            "to",
            "the",
            "oauth",
            "0",
            "authorization",
            "context",
            "get",
            "attributes",
            "authorization",
            "context"
        ]
    },
    {
        "id": 947,
        "code": "\tpublic void setAuthorizationSuccessHandler(ReactiveOAuth2AuthorizationSuccessHandler authorizationSuccessHandler) {\n\t\tAssert.notNull(authorizationSuccessHandler, \"authorizationSuccessHandler cannot be null\");\n\t\tthis.authorizationSuccessHandler = authorizationSuccessHandler;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "handler",
            "that",
            "handles",
            "successful",
            "authorizations"
        ]
    },
    {
        "id": 948,
        "code": "\tpublic void setAuthorizationFailureHandler(ReactiveOAuth2AuthorizationFailureHandler authorizationFailureHandler) {\n\t\tAssert.notNull(authorizationFailureHandler, \"authorizationFailureHandler cannot be null\");\n\t\tthis.authorizationFailureHandler = authorizationFailureHandler;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "handler",
            "that",
            "handles",
            "authorization",
            "failures"
        ]
    },
    {
        "id": 949,
        "code": "\tpublic String getClientRegistrationId() {\n\t\treturn this.clientRegistrationId;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "identifier",
            "for",
            "the",
            "client",
            "s",
            "registration"
        ]
    },
    {
        "id": 950,
        "code": "\tpublic OAuth2AuthorizedClient authorize(OAuth2AuthorizationContext context) {\n\t\tAssert.notNull(context, \"context cannot be null\");\n\t\tClientRegistration clientRegistration = context.getClientRegistration();\n\t\tif (!AuthorizationGrantType.CLIENT_CREDENTIALS.equals(clientRegistration.getAuthorizationGrantType())) {\n\t\t\treturn null;\n\t\t}\n\t\tOAuth2AuthorizedClient authorizedClient = context.getAuthorizedClient();\n\t\tif (authorizedClient != null && !hasTokenExpired(authorizedClient.getAccessToken())) {\n\t\t\t\n\t\t\t\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\tOAuth2ClientCredentialsGrantRequest clientCredentialsGrantRequest = new OAuth2ClientCredentialsGrantRequest(\n\t\t\t\tclientRegistration);\n\t\tOAuth2AccessTokenResponse tokenResponse = getTokenResponse(clientRegistration, clientCredentialsGrantRequest);\n\t\treturn new OAuth2AuthorizedClient(clientRegistration, context.getPrincipal().getName(),\n\t\t\t\ttokenResponse.getAccessToken());\n\t}",
        "summary_tokens": [
            "attempt",
            "to",
            "authorize",
            "or",
            "re",
            "authorize",
            "the",
            "oauth",
            "0",
            "authorization",
            "context",
            "get",
            "client",
            "registration",
            "client",
            "in",
            "the",
            "provided",
            "context"
        ]
    },
    {
        "id": 951,
        "code": "\tpublic void setAccessTokenResponseClient(\n\t\t\tOAuth2AccessTokenResponseClient<OAuth2ClientCredentialsGrantRequest> accessTokenResponseClient) {\n\t\tAssert.notNull(accessTokenResponseClient, \"accessTokenResponseClient cannot be null\");\n\t\tthis.accessTokenResponseClient = accessTokenResponseClient;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "client",
            "used",
            "when",
            "requesting",
            "an",
            "access",
            "token",
            "credential",
            "at",
            "the",
            "token",
            "endpoint",
            "for",
            "the",
            "client",
            "credentials",
            "grant"
        ]
    },
    {
        "id": 952,
        "code": "\tpublic void setClockSkew(Duration clockSkew) {\n\t\tAssert.notNull(clockSkew, \"clockSkew cannot be null\");\n\t\tAssert.isTrue(clockSkew.getSeconds() >= 0, \"clockSkew must be >= 0\");\n\t\tthis.clockSkew = clockSkew;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "maximum",
            "acceptable",
            "clock",
            "skew",
            "which",
            "is",
            "used",
            "when",
            "checking",
            "the",
            "oauth",
            "0",
            "authorized",
            "client",
            "get",
            "access",
            "token",
            "access",
            "token",
            "expiry"
        ]
    },
    {
        "id": 953,
        "code": "\tpublic void setClock(Clock clock) {\n\t\tAssert.notNull(clock, \"clock cannot be null\");\n\t\tthis.clock = clock;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "clock",
            "used",
            "in",
            "instant",
            "now",
            "clock",
            "when",
            "checking",
            "the",
            "access",
            "token",
            "expiry"
        ]
    },
    {
        "id": 954,
        "code": "\tpublic Mono<OAuth2AuthorizedClient> authorize(OAuth2AuthorizationContext context) {\n\t\tAssert.notNull(context, \"context cannot be null\");\n\t\tClientRegistration clientRegistration = context.getClientRegistration();\n\t\tif (!AuthorizationGrantType.CLIENT_CREDENTIALS.equals(clientRegistration.getAuthorizationGrantType())) {\n\t\t\treturn Mono.empty();\n\t\t}\n\t\tOAuth2AuthorizedClient authorizedClient = context.getAuthorizedClient();\n\t\tif (authorizedClient != null && !hasTokenExpired(authorizedClient.getAccessToken())) {\n\t\t\t\n\t\t\t\n\t\t\treturn Mono.empty();\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\treturn Mono.just(new OAuth2ClientCredentialsGrantRequest(clientRegistration))\n\t\t\t\t.flatMap(this.accessTokenResponseClient::getTokenResponse)\n\t\t\t\t.onErrorMap(OAuth2AuthorizationException.class,\n\t\t\t\t\t\t(ex) -> new ClientAuthorizationException(ex.getError(), clientRegistration.getRegistrationId(),\n\t\t\t\t\t\t\t\tex))\n\t\t\t\t.map((tokenResponse) -> new OAuth2AuthorizedClient(clientRegistration, context.getPrincipal().getName(),\n\t\t\t\t\t\ttokenResponse.getAccessToken()));\n\t}",
        "summary_tokens": [
            "attempt",
            "to",
            "authorize",
            "or",
            "re",
            "authorize",
            "the",
            "oauth",
            "0",
            "authorization",
            "context",
            "get",
            "client",
            "registration",
            "client",
            "in",
            "the",
            "provided",
            "context"
        ]
    },
    {
        "id": 955,
        "code": "\tpublic void setAccessTokenResponseClient(\n\t\t\tReactiveOAuth2AccessTokenResponseClient<OAuth2ClientCredentialsGrantRequest> accessTokenResponseClient) {\n\t\tAssert.notNull(accessTokenResponseClient, \"accessTokenResponseClient cannot be null\");\n\t\tthis.accessTokenResponseClient = accessTokenResponseClient;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "client",
            "used",
            "when",
            "requesting",
            "an",
            "access",
            "token",
            "credential",
            "at",
            "the",
            "token",
            "endpoint",
            "for",
            "the",
            "client",
            "credentials",
            "grant"
        ]
    },
    {
        "id": 956,
        "code": "\tpublic void setClockSkew(Duration clockSkew) {\n\t\tAssert.notNull(clockSkew, \"clockSkew cannot be null\");\n\t\tAssert.isTrue(clockSkew.getSeconds() >= 0, \"clockSkew must be >= 0\");\n\t\tthis.clockSkew = clockSkew;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "maximum",
            "acceptable",
            "clock",
            "skew",
            "which",
            "is",
            "used",
            "when",
            "checking",
            "the",
            "oauth",
            "0",
            "authorized",
            "client",
            "get",
            "access",
            "token",
            "access",
            "token",
            "expiry"
        ]
    },
    {
        "id": 957,
        "code": "\tpublic void setClock(Clock clock) {\n\t\tAssert.notNull(clock, \"clock cannot be null\");\n\t\tthis.clock = clock;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "clock",
            "used",
            "in",
            "instant",
            "now",
            "clock",
            "when",
            "checking",
            "the",
            "access",
            "token",
            "expiry"
        ]
    },
    {
        "id": 958,
        "code": "\tpublic final void setAuthorizedClientRowMapper(RowMapper<OAuth2AuthorizedClient> authorizedClientRowMapper) {\n\t\tAssert.notNull(authorizedClientRowMapper, \"authorizedClientRowMapper cannot be null\");\n\t\tthis.authorizedClientRowMapper = authorizedClientRowMapper;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "row",
            "mapper",
            "used",
            "for",
            "mapping",
            "the",
            "current",
            "row",
            "in",
            "java"
        ]
    },
    {
        "id": 959,
        "code": "\tpublic final void setAuthorizedClientParametersMapper(\n\t\t\tFunction<OAuth2AuthorizedClientHolder, List<SqlParameterValue>> authorizedClientParametersMapper) {\n\t\tAssert.notNull(authorizedClientParametersMapper, \"authorizedClientParametersMapper cannot be null\");\n\t\tthis.authorizedClientParametersMapper = authorizedClientParametersMapper;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "function",
            "used",
            "for",
            "mapping",
            "oauth",
            "0",
            "authorized",
            "client",
            "holder",
            "to",
            "a",
            "list",
            "of",
            "sql",
            "parameter",
            "value"
        ]
    },
    {
        "id": 960,
        "code": "\tpublic OAuth2AuthorizedClient authorize(OAuth2AuthorizationContext context) {\n\t\tAssert.notNull(context, \"context cannot be null\");\n\t\tClientRegistration clientRegistration = context.getClientRegistration();\n\t\tif (!AuthorizationGrantType.JWT_BEARER.equals(clientRegistration.getAuthorizationGrantType())) {\n\t\t\treturn null;\n\t\t}\n\t\tOAuth2AuthorizedClient authorizedClient = context.getAuthorizedClient();\n\t\tif (authorizedClient != null && !hasTokenExpired(authorizedClient.getAccessToken())) {\n\t\t\t\n\t\t\t\n\t\t\treturn null;\n\t\t}\n\t\tJwt jwt = this.jwtAssertionResolver.apply(context);\n\t\tif (jwt == null) {\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\tJwtBearerGrantRequest jwtBearerGrantRequest = new JwtBearerGrantRequest(clientRegistration, jwt);\n\t\tOAuth2AccessTokenResponse tokenResponse = getTokenResponse(clientRegistration, jwtBearerGrantRequest);\n\t\treturn new OAuth2AuthorizedClient(clientRegistration, context.getPrincipal().getName(),\n\t\t\t\ttokenResponse.getAccessToken());\n\t}",
        "summary_tokens": [
            "attempt",
            "to",
            "authorize",
            "or",
            "re",
            "authorize",
            "the",
            "oauth",
            "0",
            "authorization",
            "context",
            "get",
            "client",
            "registration",
            "client",
            "in",
            "the",
            "provided",
            "context"
        ]
    },
    {
        "id": 961,
        "code": "\tpublic void setAccessTokenResponseClient(\n\t\t\tOAuth2AccessTokenResponseClient<JwtBearerGrantRequest> accessTokenResponseClient) {\n\t\tAssert.notNull(accessTokenResponseClient, \"accessTokenResponseClient cannot be null\");\n\t\tthis.accessTokenResponseClient = accessTokenResponseClient;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "client",
            "used",
            "when",
            "requesting",
            "an",
            "access",
            "token",
            "credential",
            "at",
            "the",
            "token",
            "endpoint",
            "for",
            "the",
            "jwt",
            "bearer",
            "grant"
        ]
    },
    {
        "id": 962,
        "code": "\tpublic void setJwtAssertionResolver(Function<OAuth2AuthorizationContext, Jwt> jwtAssertionResolver) {\n\t\tAssert.notNull(jwtAssertionResolver, \"jwtAssertionResolver cannot be null\");\n\t\tthis.jwtAssertionResolver = jwtAssertionResolver;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "resolver",
            "used",
            "for",
            "resolving",
            "the",
            "jwt",
            "assertion"
        ]
    },
    {
        "id": 963,
        "code": "\tpublic void setClockSkew(Duration clockSkew) {\n\t\tAssert.notNull(clockSkew, \"clockSkew cannot be null\");\n\t\tAssert.isTrue(clockSkew.getSeconds() >= 0, \"clockSkew must be >= 0\");\n\t\tthis.clockSkew = clockSkew;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "maximum",
            "acceptable",
            "clock",
            "skew",
            "which",
            "is",
            "used",
            "when",
            "checking",
            "the",
            "oauth",
            "0",
            "authorized",
            "client",
            "get",
            "access",
            "token",
            "access",
            "token",
            "expiry"
        ]
    },
    {
        "id": 964,
        "code": "\tpublic void setClock(Clock clock) {\n\t\tAssert.notNull(clock, \"clock cannot be null\");\n\t\tthis.clock = clock;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "clock",
            "used",
            "in",
            "instant",
            "now",
            "clock",
            "when",
            "checking",
            "the",
            "access",
            "token",
            "expiry"
        ]
    },
    {
        "id": 965,
        "code": "\tpublic Mono<OAuth2AuthorizedClient> authorize(OAuth2AuthorizationContext context) {\n\t\tAssert.notNull(context, \"context cannot be null\");\n\t\tClientRegistration clientRegistration = context.getClientRegistration();\n\t\tif (!AuthorizationGrantType.JWT_BEARER.equals(clientRegistration.getAuthorizationGrantType())) {\n\t\t\treturn Mono.empty();\n\t\t}\n\t\tOAuth2AuthorizedClient authorizedClient = context.getAuthorizedClient();\n\t\tif (authorizedClient != null && !hasTokenExpired(authorizedClient.getAccessToken())) {\n\t\t\t\n\t\t\t\n\t\t\treturn Mono.empty();\n\t\t}\n\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\n\t\t\n\t\treturn this.jwtAssertionResolver.apply(context)\n\t\t\t\t.map((jwt) -> new JwtBearerGrantRequest(clientRegistration, jwt))\n\t\t\t\t.flatMap(this.accessTokenResponseClient::getTokenResponse)\n\t\t\t\t.onErrorMap(OAuth2AuthorizationException.class,\n\t\t\t\t\t\t(ex) -> new ClientAuthorizationException(ex.getError(), clientRegistration.getRegistrationId(),\n\t\t\t\t\t\t\t\tex))\n\t\t\t\t.map((tokenResponse) -> new OAuth2AuthorizedClient(clientRegistration, context.getPrincipal().getName(),\n\t\t\t\t\t\ttokenResponse.getAccessToken()));\n\t\t\n\t}",
        "summary_tokens": [
            "attempt",
            "to",
            "authorize",
            "or",
            "re",
            "authorize",
            "the",
            "oauth",
            "0",
            "authorization",
            "context",
            "get",
            "client",
            "registration",
            "client",
            "in",
            "the",
            "provided",
            "context"
        ]
    },
    {
        "id": 966,
        "code": "\tpublic void setAccessTokenResponseClient(\n\t\t\tReactiveOAuth2AccessTokenResponseClient<JwtBearerGrantRequest> accessTokenResponseClient) {\n\t\tAssert.notNull(accessTokenResponseClient, \"accessTokenResponseClient cannot be null\");\n\t\tthis.accessTokenResponseClient = accessTokenResponseClient;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "client",
            "used",
            "when",
            "requesting",
            "an",
            "access",
            "token",
            "credential",
            "at",
            "the",
            "token",
            "endpoint",
            "for",
            "the",
            "jwt",
            "bearer",
            "grant"
        ]
    },
    {
        "id": 967,
        "code": "\tpublic void setJwtAssertionResolver(Function<OAuth2AuthorizationContext, Mono<Jwt>> jwtAssertionResolver) {\n\t\tAssert.notNull(jwtAssertionResolver, \"jwtAssertionResolver cannot be null\");\n\t\tthis.jwtAssertionResolver = jwtAssertionResolver;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "resolver",
            "used",
            "for",
            "resolving",
            "the",
            "jwt",
            "assertion"
        ]
    },
    {
        "id": 968,
        "code": "\tpublic void setClockSkew(Duration clockSkew) {\n\t\tAssert.notNull(clockSkew, \"clockSkew cannot be null\");\n\t\tAssert.isTrue(clockSkew.getSeconds() >= 0, \"clockSkew must be >= 0\");\n\t\tthis.clockSkew = clockSkew;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "maximum",
            "acceptable",
            "clock",
            "skew",
            "which",
            "is",
            "used",
            "when",
            "checking",
            "the",
            "oauth",
            "0",
            "authorized",
            "client",
            "get",
            "access",
            "token",
            "access",
            "token",
            "expiry"
        ]
    },
    {
        "id": 969,
        "code": "\tpublic void setClock(Clock clock) {\n\t\tAssert.notNull(clock, \"clock cannot be null\");\n\t\tthis.clock = clock;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "clock",
            "used",
            "in",
            "instant",
            "now",
            "clock",
            "when",
            "checking",
            "the",
            "access",
            "token",
            "expiry"
        ]
    },
    {
        "id": 970,
        "code": "\tpublic ClientRegistration getClientRegistration() {\n\t\treturn this.clientRegistration;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "client",
            "registration",
            "client",
            "registration"
        ]
    },
    {
        "id": 971,
        "code": "\tpublic OAuth2AuthorizedClient getAuthorizedClient() {\n\t\treturn this.authorizedClient;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "oauth",
            "0",
            "authorized",
            "client",
            "authorized",
            "client",
            "or",
            "null",
            "if",
            "the",
            "with",
            "client",
            "registration",
            "client",
            "registration",
            "client",
            "registration",
            "was",
            "supplied"
        ]
    },
    {
        "id": 972,
        "code": "\tpublic Authentication getPrincipal() {\n\t\treturn this.principal;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "principal",
            "to",
            "be",
            "associated",
            "to",
            "the",
            "authorized",
            "client"
        ]
    },
    {
        "id": 973,
        "code": "\tpublic Map<String, Object> getAttributes() {\n\t\treturn this.attributes;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "attributes",
            "associated",
            "to",
            "the",
            "context"
        ]
    },
    {
        "id": 974,
        "code": "\tpublic <T> T getAttribute(String name) {\n\t\treturn (T) this.getAttributes().get(name);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "of",
            "an",
            "attribute",
            "associated",
            "to",
            "the",
            "context",
            "or",
            "null",
            "if",
            "not",
            "available"
        ]
    },
    {
        "id": 975,
        "code": "\tpublic static Builder withClientRegistration(ClientRegistration clientRegistration) {\n\t\treturn new Builder(clientRegistration);\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "new",
            "builder",
            "initialized",
            "with",
            "the",
            "client",
            "registration"
        ]
    },
    {
        "id": 976,
        "code": "\tpublic static Builder withAuthorizedClient(OAuth2AuthorizedClient authorizedClient) {\n\t\treturn new Builder(authorizedClient);\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "new",
            "builder",
            "initialized",
            "with",
            "the",
            "oauth",
            "0",
            "authorized",
            "client"
        ]
    },
    {
        "id": 977,
        "code": "\tpublic String getClientRegistrationId() {\n\t\treturn this.clientRegistrationId;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "identifier",
            "for",
            "the",
            "client",
            "registration",
            "client",
            "registration"
        ]
    },
    {
        "id": 978,
        "code": "\tpublic OAuth2AuthorizedClient getAuthorizedClient() {\n\t\treturn this.authorizedClient;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "oauth",
            "0",
            "authorized",
            "client",
            "authorized",
            "client",
            "or",
            "null",
            "if",
            "it",
            "was",
            "not",
            "provided"
        ]
    },
    {
        "id": 979,
        "code": "\tpublic Authentication getPrincipal() {\n\t\treturn this.principal;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "principal",
            "to",
            "be",
            "associated",
            "to",
            "the",
            "authorized",
            "client"
        ]
    },
    {
        "id": 980,
        "code": "\tpublic Map<String, Object> getAttributes() {\n\t\treturn this.attributes;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "attributes",
            "associated",
            "to",
            "the",
            "request"
        ]
    },
    {
        "id": 981,
        "code": "\tpublic <T> T getAttribute(String name) {\n\t\treturn (T) this.getAttributes().get(name);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "of",
            "an",
            "attribute",
            "associated",
            "to",
            "the",
            "request",
            "or",
            "null",
            "if",
            "not",
            "available"
        ]
    },
    {
        "id": 982,
        "code": "\tpublic static Builder withClientRegistrationId(String clientRegistrationId) {\n\t\treturn new Builder(clientRegistrationId);\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "new",
            "builder",
            "initialized",
            "with",
            "the",
            "identifier",
            "for",
            "the",
            "client",
            "registration",
            "client",
            "registration"
        ]
    },
    {
        "id": 983,
        "code": "\tpublic static Builder withAuthorizedClient(OAuth2AuthorizedClient authorizedClient) {\n\t\treturn new Builder(authorizedClient);\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "new",
            "builder",
            "initialized",
            "with",
            "the",
            "oauth",
            "0",
            "authorized",
            "client",
            "authorized",
            "client"
        ]
    },
    {
        "id": 984,
        "code": "\tpublic ClientRegistration getClientRegistration() {\n\t\treturn this.clientRegistration;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "authorized",
            "client",
            "s",
            "client",
            "registration",
            "registration"
        ]
    },
    {
        "id": 985,
        "code": "\tpublic String getPrincipalName() {\n\t\treturn this.principalName;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "end",
            "user",
            "s",
            "principal",
            "name"
        ]
    },
    {
        "id": 986,
        "code": "\tpublic OAuth2AccessToken getAccessToken() {\n\t\treturn this.accessToken;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "oauth",
            "0",
            "access",
            "token",
            "access",
            "token",
            "credential",
            "granted"
        ]
    },
    {
        "id": 987,
        "code": "\tpublic @Nullable OAuth2RefreshToken getRefreshToken() {\n\t\treturn this.refreshToken;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "oauth",
            "0",
            "refresh",
            "token",
            "refresh",
            "token",
            "credential",
            "granted"
        ]
    },
    {
        "id": 988,
        "code": "\tpublic static OAuth2AuthorizedClientProviderBuilder builder() {\n\t\treturn new OAuth2AuthorizedClientProviderBuilder();\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "new",
            "oauth",
            "0",
            "authorized",
            "client",
            "provider",
            "builder",
            "for",
            "configuring",
            "the",
            "supported",
            "authorization",
            "grant",
            "s"
        ]
    },
    {
        "id": 989,
        "code": "\tpublic OAuth2AuthorizedClientProviderBuilder provider(OAuth2AuthorizedClientProvider provider) {\n\t\tAssert.notNull(provider, \"provider cannot be null\");\n\t\tthis.builders.computeIfAbsent(provider.getClass(), (k) -> () -> provider);\n\t\treturn OAuth2AuthorizedClientProviderBuilder.this;\n\t}",
        "summary_tokens": [
            "configures",
            "an",
            "oauth",
            "0",
            "authorized",
            "client",
            "provider",
            "to",
            "be",
            "composed",
            "with",
            "the",
            "delegating",
            "oauth",
            "0",
            "authorized",
            "client",
            "provider"
        ]
    },
    {
        "id": 990,
        "code": "\tpublic OAuth2AuthorizedClientProviderBuilder authorizationCode() {\n\t\tthis.builders.computeIfAbsent(AuthorizationCodeOAuth2AuthorizedClientProvider.class,\n\t\t\t\t(k) -> new AuthorizationCodeGrantBuilder());\n\t\treturn OAuth2AuthorizedClientProviderBuilder.this;\n\t}",
        "summary_tokens": [
            "configures",
            "support",
            "for",
            "the",
            "authorization",
            "code",
            "grant"
        ]
    },
    {
        "id": 991,
        "code": "\tpublic OAuth2AuthorizedClientProviderBuilder refreshToken(Consumer<RefreshTokenGrantBuilder> builderConsumer) {\n\t\tRefreshTokenGrantBuilder builder = (RefreshTokenGrantBuilder) this.builders.computeIfAbsent(\n\t\t\t\tRefreshTokenOAuth2AuthorizedClientProvider.class, (k) -> new RefreshTokenGrantBuilder());\n\t\tbuilderConsumer.accept(builder);\n\t\treturn OAuth2AuthorizedClientProviderBuilder.this;\n\t}",
        "summary_tokens": [
            "configures",
            "support",
            "for",
            "the",
            "refresh",
            "token",
            "grant"
        ]
    },
    {
        "id": 992,
        "code": "\tpublic OAuth2AuthorizedClientProviderBuilder clientCredentials(\n\t\t\tConsumer<ClientCredentialsGrantBuilder> builderConsumer) {\n\t\tClientCredentialsGrantBuilder builder = (ClientCredentialsGrantBuilder) this.builders.computeIfAbsent(\n\t\t\t\tClientCredentialsOAuth2AuthorizedClientProvider.class, (k) -> new ClientCredentialsGrantBuilder());\n\t\tbuilderConsumer.accept(builder);\n\t\treturn OAuth2AuthorizedClientProviderBuilder.this;\n\t}",
        "summary_tokens": [
            "configures",
            "support",
            "for",
            "the",
            "client",
            "credentials",
            "grant"
        ]
    },
    {
        "id": 993,
        "code": "\tpublic OAuth2AuthorizedClientProviderBuilder password(Consumer<PasswordGrantBuilder> builderConsumer) {\n\t\tPasswordGrantBuilder builder = (PasswordGrantBuilder) this.builders\n\t\t\t\t.computeIfAbsent(PasswordOAuth2AuthorizedClientProvider.class, (k) -> new PasswordGrantBuilder());\n\t\tbuilderConsumer.accept(builder);\n\t\treturn OAuth2AuthorizedClientProviderBuilder.this;\n\t}",
        "summary_tokens": [
            "configures",
            "support",
            "for",
            "the",
            "password",
            "grant"
        ]
    },
    {
        "id": 994,
        "code": "\tpublic OAuth2AuthorizedClientProvider build() {\n\t\tList<OAuth2AuthorizedClientProvider> authorizedClientProviders = new ArrayList<>();\n\t\tfor (Builder builder : this.builders.values()) {\n\t\t\tauthorizedClientProviders.add(builder.build());\n\t\t}\n\t\treturn new DelegatingOAuth2AuthorizedClientProvider(authorizedClientProviders);\n\t}",
        "summary_tokens": [
            "builds",
            "an",
            "instance",
            "of",
            "delegating",
            "oauth",
            "0",
            "authorized",
            "client",
            "provider",
            "composed",
            "of",
            "one",
            "or",
            "more",
            "oauth",
            "0",
            "authorized",
            "client",
            "provider",
            "s"
        ]
    },
    {
        "id": 995,
        "code": "\tpublic OAuth2AuthorizedClient authorize(OAuth2AuthorizationContext context) {\n\t\tAssert.notNull(context, \"context cannot be null\");\n\t\tClientRegistration clientRegistration = context.getClientRegistration();\n\t\tOAuth2AuthorizedClient authorizedClient = context.getAuthorizedClient();\n\t\tif (!AuthorizationGrantType.PASSWORD.equals(clientRegistration.getAuthorizationGrantType())) {\n\t\t\treturn null;\n\t\t}\n\t\tString username = context.getAttribute(OAuth2AuthorizationContext.USERNAME_ATTRIBUTE_NAME);\n\t\tString password = context.getAttribute(OAuth2AuthorizationContext.PASSWORD_ATTRIBUTE_NAME);\n\t\tif (!StringUtils.hasText(username) || !StringUtils.hasText(password)) {\n\t\t\treturn null;\n\t\t}\n\t\tif (authorizedClient != null && !hasTokenExpired(authorizedClient.getAccessToken())) {\n\t\t\t\n\t\t\t\n\t\t\treturn null;\n\t\t}\n\t\tif (authorizedClient != null && hasTokenExpired(authorizedClient.getAccessToken())\n\t\t\t\t&& authorizedClient.getRefreshToken() != null) {\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\treturn null;\n\t\t}\n\t\tOAuth2PasswordGrantRequest passwordGrantRequest = new OAuth2PasswordGrantRequest(clientRegistration, username,\n\t\t\t\tpassword);\n\t\tOAuth2AccessTokenResponse tokenResponse = getTokenResponse(clientRegistration, passwordGrantRequest);\n\t\treturn new OAuth2AuthorizedClient(clientRegistration, context.getPrincipal().getName(),\n\t\t\t\ttokenResponse.getAccessToken(), tokenResponse.getRefreshToken());\n\t}",
        "summary_tokens": [
            "attempt",
            "to",
            "authorize",
            "or",
            "re",
            "authorize",
            "the",
            "oauth",
            "0",
            "authorization",
            "context",
            "get",
            "client",
            "registration",
            "client",
            "in",
            "the",
            "provided",
            "context"
        ]
    },
    {
        "id": 996,
        "code": "\tpublic void setAccessTokenResponseClient(\n\t\t\tOAuth2AccessTokenResponseClient<OAuth2PasswordGrantRequest> accessTokenResponseClient) {\n\t\tAssert.notNull(accessTokenResponseClient, \"accessTokenResponseClient cannot be null\");\n\t\tthis.accessTokenResponseClient = accessTokenResponseClient;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "client",
            "used",
            "when",
            "requesting",
            "an",
            "access",
            "token",
            "credential",
            "at",
            "the",
            "token",
            "endpoint",
            "for",
            "the",
            "password",
            "grant"
        ]
    },
    {
        "id": 997,
        "code": "\tpublic void setClockSkew(Duration clockSkew) {\n\t\tAssert.notNull(clockSkew, \"clockSkew cannot be null\");\n\t\tAssert.isTrue(clockSkew.getSeconds() >= 0, \"clockSkew must be >= 0\");\n\t\tthis.clockSkew = clockSkew;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "maximum",
            "acceptable",
            "clock",
            "skew",
            "which",
            "is",
            "used",
            "when",
            "checking",
            "the",
            "oauth",
            "0",
            "authorized",
            "client",
            "get",
            "access",
            "token",
            "access",
            "token",
            "expiry"
        ]
    },
    {
        "id": 998,
        "code": "\tpublic void setClock(Clock clock) {\n\t\tAssert.notNull(clock, \"clock cannot be null\");\n\t\tthis.clock = clock;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "clock",
            "used",
            "in",
            "instant",
            "now",
            "clock",
            "when",
            "checking",
            "the",
            "access",
            "token",
            "expiry"
        ]
    },
    {
        "id": 999,
        "code": "\tpublic Mono<OAuth2AuthorizedClient> authorize(OAuth2AuthorizationContext context) {\n\t\tAssert.notNull(context, \"context cannot be null\");\n\t\tClientRegistration clientRegistration = context.getClientRegistration();\n\t\tOAuth2AuthorizedClient authorizedClient = context.getAuthorizedClient();\n\t\tif (!AuthorizationGrantType.PASSWORD.equals(clientRegistration.getAuthorizationGrantType())) {\n\t\t\treturn Mono.empty();\n\t\t}\n\t\tString username = context.getAttribute(OAuth2AuthorizationContext.USERNAME_ATTRIBUTE_NAME);\n\t\tString password = context.getAttribute(OAuth2AuthorizationContext.PASSWORD_ATTRIBUTE_NAME);\n\t\tif (!StringUtils.hasText(username) || !StringUtils.hasText(password)) {\n\t\t\treturn Mono.empty();\n\t\t}\n\t\tif (authorizedClient != null && !hasTokenExpired(authorizedClient.getAccessToken())) {\n\t\t\t\n\t\t\t\n\t\t\treturn Mono.empty();\n\t\t}\n\t\tif (authorizedClient != null && hasTokenExpired(authorizedClient.getAccessToken())\n\t\t\t\t&& authorizedClient.getRefreshToken() != null) {\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\treturn Mono.empty();\n\t\t}\n\t\tOAuth2PasswordGrantRequest passwordGrantRequest = new OAuth2PasswordGrantRequest(clientRegistration, username,\n\t\t\t\tpassword);\n\t\treturn Mono.just(passwordGrantRequest).flatMap(this.accessTokenResponseClient::getTokenResponse)\n\t\t\t\t.onErrorMap(OAuth2AuthorizationException.class,\n\t\t\t\t\t\t(e) -> new ClientAuthorizationException(e.getError(), clientRegistration.getRegistrationId(),\n\t\t\t\t\t\t\t\te))\n\t\t\t\t.map((tokenResponse) -> new OAuth2AuthorizedClient(clientRegistration, context.getPrincipal().getName(),\n\t\t\t\t\t\ttokenResponse.getAccessToken(), tokenResponse.getRefreshToken()));\n\t}",
        "summary_tokens": [
            "attempt",
            "to",
            "authorize",
            "or",
            "re",
            "authorize",
            "the",
            "oauth",
            "0",
            "authorization",
            "context",
            "get",
            "client",
            "registration",
            "client",
            "in",
            "the",
            "provided",
            "context"
        ]
    },
    {
        "id": 1000,
        "code": "\tpublic void setAccessTokenResponseClient(\n\t\t\tReactiveOAuth2AccessTokenResponseClient<OAuth2PasswordGrantRequest> accessTokenResponseClient) {\n\t\tAssert.notNull(accessTokenResponseClient, \"accessTokenResponseClient cannot be null\");\n\t\tthis.accessTokenResponseClient = accessTokenResponseClient;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "client",
            "used",
            "when",
            "requesting",
            "an",
            "access",
            "token",
            "credential",
            "at",
            "the",
            "token",
            "endpoint",
            "for",
            "the",
            "password",
            "grant"
        ]
    },
    {
        "id": 1001,
        "code": "\tpublic void setClockSkew(Duration clockSkew) {\n\t\tAssert.notNull(clockSkew, \"clockSkew cannot be null\");\n\t\tAssert.isTrue(clockSkew.getSeconds() >= 0, \"clockSkew must be >= 0\");\n\t\tthis.clockSkew = clockSkew;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "maximum",
            "acceptable",
            "clock",
            "skew",
            "which",
            "is",
            "used",
            "when",
            "checking",
            "the",
            "oauth",
            "0",
            "authorized",
            "client",
            "get",
            "access",
            "token",
            "access",
            "token",
            "expiry"
        ]
    },
    {
        "id": 1002,
        "code": "\tpublic void setClock(Clock clock) {\n\t\tAssert.notNull(clock, \"clock cannot be null\");\n\t\tthis.clock = clock;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "clock",
            "used",
            "in",
            "instant",
            "now",
            "clock",
            "when",
            "checking",
            "the",
            "access",
            "token",
            "expiry"
        ]
    },
    {
        "id": 1003,
        "code": "\tpublic final void setAuthorizedClientParametersMapper(\n\t\t\tFunction<OAuth2AuthorizedClientHolder, Map<String, Parameter>> authorizedClientParametersMapper) {\n\t\tAssert.notNull(authorizedClientParametersMapper, \"authorizedClientParametersMapper cannot be null\");\n\t\tthis.authorizedClientParametersMapper = authorizedClientParametersMapper;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "function",
            "used",
            "for",
            "mapping",
            "oauth",
            "0",
            "authorized",
            "client",
            "holder",
            "to",
            "a",
            "map",
            "of",
            "string",
            "and",
            "parameter"
        ]
    },
    {
        "id": 1004,
        "code": "\tpublic final void setAuthorizedClientRowMapper(\n\t\t\tBiFunction<Row, RowMetadata, OAuth2AuthorizedClientHolder> authorizedClientRowMapper) {\n\t\tAssert.notNull(authorizedClientRowMapper, \"authorizedClientRowMapper cannot be null\");\n\t\tthis.authorizedClientRowMapper = authorizedClientRowMapper;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "bi",
            "function",
            "used",
            "for",
            "mapping",
            "the",
            "current",
            "io"
        ]
    },
    {
        "id": 1005,
        "code": "\tpublic static ReactiveOAuth2AuthorizedClientProviderBuilder builder() {\n\t\treturn new ReactiveOAuth2AuthorizedClientProviderBuilder();\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "new",
            "reactive",
            "oauth",
            "0",
            "authorized",
            "client",
            "provider",
            "builder",
            "for",
            "configuring",
            "the",
            "supported",
            "authorization",
            "grant",
            "s"
        ]
    },
    {
        "id": 1006,
        "code": "\tpublic ReactiveOAuth2AuthorizedClientProviderBuilder provider(ReactiveOAuth2AuthorizedClientProvider provider) {\n\t\tAssert.notNull(provider, \"provider cannot be null\");\n\t\tthis.builders.computeIfAbsent(provider.getClass(), (k) -> () -> provider);\n\t\treturn ReactiveOAuth2AuthorizedClientProviderBuilder.this;\n\t}",
        "summary_tokens": [
            "configures",
            "a",
            "reactive",
            "oauth",
            "0",
            "authorized",
            "client",
            "provider",
            "to",
            "be",
            "composed",
            "with",
            "the",
            "delegating",
            "reactive",
            "oauth",
            "0",
            "authorized",
            "client",
            "provider"
        ]
    },
    {
        "id": 1007,
        "code": "\tpublic ReactiveOAuth2AuthorizedClientProviderBuilder authorizationCode() {\n\t\tthis.builders.computeIfAbsent(AuthorizationCodeReactiveOAuth2AuthorizedClientProvider.class,\n\t\t\t\t(k) -> new AuthorizationCodeGrantBuilder());\n\t\treturn ReactiveOAuth2AuthorizedClientProviderBuilder.this;\n\t}",
        "summary_tokens": [
            "configures",
            "support",
            "for",
            "the",
            "authorization",
            "code",
            "grant"
        ]
    },
    {
        "id": 1008,
        "code": "\tpublic ReactiveOAuth2AuthorizedClientProviderBuilder refreshToken(\n\t\t\tConsumer<RefreshTokenGrantBuilder> builderConsumer) {\n\t\tRefreshTokenGrantBuilder builder = (RefreshTokenGrantBuilder) this.builders.computeIfAbsent(\n\t\t\t\tRefreshTokenReactiveOAuth2AuthorizedClientProvider.class, (k) -> new RefreshTokenGrantBuilder());\n\t\tbuilderConsumer.accept(builder);\n\t\treturn ReactiveOAuth2AuthorizedClientProviderBuilder.this;\n\t}",
        "summary_tokens": [
            "configures",
            "support",
            "for",
            "the",
            "refresh",
            "token",
            "grant"
        ]
    },
    {
        "id": 1009,
        "code": "\tpublic ReactiveOAuth2AuthorizedClientProviderBuilder clientCredentials(\n\t\t\tConsumer<ClientCredentialsGrantBuilder> builderConsumer) {\n\t\tClientCredentialsGrantBuilder builder = (ClientCredentialsGrantBuilder) this.builders.computeIfAbsent(\n\t\t\t\tClientCredentialsReactiveOAuth2AuthorizedClientProvider.class,\n\t\t\t\t(k) -> new ClientCredentialsGrantBuilder());\n\t\tbuilderConsumer.accept(builder);\n\t\treturn ReactiveOAuth2AuthorizedClientProviderBuilder.this;\n\t}",
        "summary_tokens": [
            "configures",
            "support",
            "for",
            "the",
            "client",
            "credentials",
            "grant"
        ]
    },
    {
        "id": 1010,
        "code": "\tpublic ReactiveOAuth2AuthorizedClientProviderBuilder password(Consumer<PasswordGrantBuilder> builderConsumer) {\n\t\tPasswordGrantBuilder builder = (PasswordGrantBuilder) this.builders.computeIfAbsent(\n\t\t\t\tPasswordReactiveOAuth2AuthorizedClientProvider.class, (k) -> new PasswordGrantBuilder());\n\t\tbuilderConsumer.accept(builder);\n\t\treturn ReactiveOAuth2AuthorizedClientProviderBuilder.this;\n\t}",
        "summary_tokens": [
            "configures",
            "support",
            "for",
            "the",
            "password",
            "grant"
        ]
    },
    {
        "id": 1011,
        "code": "\tpublic ReactiveOAuth2AuthorizedClientProvider build() {\n\t\tList<ReactiveOAuth2AuthorizedClientProvider> authorizedClientProviders = this.builders.values().stream()\n\t\t\t\t.map(Builder::build).collect(Collectors.toList());\n\t\treturn new DelegatingReactiveOAuth2AuthorizedClientProvider(authorizedClientProviders);\n\t}",
        "summary_tokens": [
            "builds",
            "an",
            "instance",
            "of",
            "delegating",
            "reactive",
            "oauth",
            "0",
            "authorized",
            "client",
            "provider",
            "composed",
            "of",
            "one",
            "or",
            "more",
            "reactive",
            "oauth",
            "0",
            "authorized",
            "client",
            "provider",
            "s"
        ]
    },
    {
        "id": 1012,
        "code": "\tpublic OAuth2AuthorizedClient authorize(OAuth2AuthorizationContext context) {\n\t\tAssert.notNull(context, \"context cannot be null\");\n\t\tOAuth2AuthorizedClient authorizedClient = context.getAuthorizedClient();\n\t\tif (authorizedClient == null || authorizedClient.getRefreshToken() == null\n\t\t\t\t|| !hasTokenExpired(authorizedClient.getAccessToken())) {\n\t\t\treturn null;\n\t\t}\n\t\tObject requestScope = context.getAttribute(OAuth2AuthorizationContext.REQUEST_SCOPE_ATTRIBUTE_NAME);\n\t\tSet<String> scopes = Collections.emptySet();\n\t\tif (requestScope != null) {\n\t\t\tAssert.isInstanceOf(String[].class, requestScope, \"The context attribute must be of type String[] '\"\n\t\t\t\t\t+ OAuth2AuthorizationContext.REQUEST_SCOPE_ATTRIBUTE_NAME + \"'\");\n\t\t\tscopes = new HashSet<>(Arrays.asList((String[]) requestScope));\n\t\t}\n\t\tOAuth2RefreshTokenGrantRequest refreshTokenGrantRequest = new OAuth2RefreshTokenGrantRequest(\n\t\t\t\tauthorizedClient.getClientRegistration(), authorizedClient.getAccessToken(),\n\t\t\t\tauthorizedClient.getRefreshToken(), scopes);\n\t\tOAuth2AccessTokenResponse tokenResponse = getTokenResponse(authorizedClient, refreshTokenGrantRequest);\n\t\treturn new OAuth2AuthorizedClient(context.getAuthorizedClient().getClientRegistration(),\n\t\t\t\tcontext.getPrincipal().getName(), tokenResponse.getAccessToken(), tokenResponse.getRefreshToken());\n\t}",
        "summary_tokens": [
            "attempt",
            "to",
            "re",
            "authorize",
            "the",
            "oauth",
            "0",
            "authorization",
            "context",
            "get",
            "client",
            "registration",
            "client",
            "in",
            "the",
            "provided",
            "context"
        ]
    },
    {
        "id": 1013,
        "code": "\tpublic void setAccessTokenResponseClient(\n\t\t\tOAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest> accessTokenResponseClient) {\n\t\tAssert.notNull(accessTokenResponseClient, \"accessTokenResponseClient cannot be null\");\n\t\tthis.accessTokenResponseClient = accessTokenResponseClient;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "client",
            "used",
            "when",
            "requesting",
            "an",
            "access",
            "token",
            "credential",
            "at",
            "the",
            "token",
            "endpoint",
            "for",
            "the",
            "refresh",
            "token",
            "grant"
        ]
    },
    {
        "id": 1014,
        "code": "\tpublic void setClockSkew(Duration clockSkew) {\n\t\tAssert.notNull(clockSkew, \"clockSkew cannot be null\");\n\t\tAssert.isTrue(clockSkew.getSeconds() >= 0, \"clockSkew must be >= 0\");\n\t\tthis.clockSkew = clockSkew;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "maximum",
            "acceptable",
            "clock",
            "skew",
            "which",
            "is",
            "used",
            "when",
            "checking",
            "the",
            "oauth",
            "0",
            "authorized",
            "client",
            "get",
            "access",
            "token",
            "access",
            "token",
            "expiry"
        ]
    },
    {
        "id": 1015,
        "code": "\tpublic void setClock(Clock clock) {\n\t\tAssert.notNull(clock, \"clock cannot be null\");\n\t\tthis.clock = clock;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "clock",
            "used",
            "in",
            "instant",
            "now",
            "clock",
            "when",
            "checking",
            "the",
            "access",
            "token",
            "expiry"
        ]
    },
    {
        "id": 1016,
        "code": "\tpublic Mono<OAuth2AuthorizedClient> authorize(OAuth2AuthorizationContext context) {\n\t\tAssert.notNull(context, \"context cannot be null\");\n\t\tOAuth2AuthorizedClient authorizedClient = context.getAuthorizedClient();\n\t\tif (authorizedClient == null || authorizedClient.getRefreshToken() == null\n\t\t\t\t|| !hasTokenExpired(authorizedClient.getAccessToken())) {\n\t\t\treturn Mono.empty();\n\t\t}\n\t\tObject requestScope = context.getAttribute(OAuth2AuthorizationContext.REQUEST_SCOPE_ATTRIBUTE_NAME);\n\t\tSet<String> scopes = Collections.emptySet();\n\t\tif (requestScope != null) {\n\t\t\tAssert.isInstanceOf(String[].class, requestScope, \"The context attribute must be of type String[] '\"\n\t\t\t\t\t+ OAuth2AuthorizationContext.REQUEST_SCOPE_ATTRIBUTE_NAME + \"'\");\n\t\t\tscopes = new HashSet<>(Arrays.asList((String[]) requestScope));\n\t\t}\n\t\tClientRegistration clientRegistration = context.getClientRegistration();\n\t\tOAuth2RefreshTokenGrantRequest refreshTokenGrantRequest = new OAuth2RefreshTokenGrantRequest(clientRegistration,\n\t\t\t\tauthorizedClient.getAccessToken(), authorizedClient.getRefreshToken(), scopes);\n\t\treturn Mono.just(refreshTokenGrantRequest).flatMap(this.accessTokenResponseClient::getTokenResponse)\n\t\t\t\t.onErrorMap(OAuth2AuthorizationException.class,\n\t\t\t\t\t\t(e) -> new ClientAuthorizationException(e.getError(), clientRegistration.getRegistrationId(),\n\t\t\t\t\t\t\t\te))\n\t\t\t\t.map((tokenResponse) -> new OAuth2AuthorizedClient(clientRegistration, context.getPrincipal().getName(),\n\t\t\t\t\t\ttokenResponse.getAccessToken(), tokenResponse.getRefreshToken()));\n\t}",
        "summary_tokens": [
            "attempt",
            "to",
            "re",
            "authorize",
            "the",
            "oauth",
            "0",
            "authorization",
            "context",
            "get",
            "client",
            "registration",
            "client",
            "in",
            "the",
            "provided",
            "context"
        ]
    },
    {
        "id": 1017,
        "code": "\tpublic void setAccessTokenResponseClient(\n\t\t\tReactiveOAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest> accessTokenResponseClient) {\n\t\tAssert.notNull(accessTokenResponseClient, \"accessTokenResponseClient cannot be null\");\n\t\tthis.accessTokenResponseClient = accessTokenResponseClient;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "client",
            "used",
            "when",
            "requesting",
            "an",
            "access",
            "token",
            "credential",
            "at",
            "the",
            "token",
            "endpoint",
            "for",
            "the",
            "refresh",
            "token",
            "grant"
        ]
    },
    {
        "id": 1018,
        "code": "\tpublic void setClockSkew(Duration clockSkew) {\n\t\tAssert.notNull(clockSkew, \"clockSkew cannot be null\");\n\t\tAssert.isTrue(clockSkew.getSeconds() >= 0, \"clockSkew must be >= 0\");\n\t\tthis.clockSkew = clockSkew;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "maximum",
            "acceptable",
            "clock",
            "skew",
            "which",
            "is",
            "used",
            "when",
            "checking",
            "the",
            "oauth",
            "0",
            "authorized",
            "client",
            "get",
            "access",
            "token",
            "access",
            "token",
            "expiry"
        ]
    },
    {
        "id": 1019,
        "code": "\tpublic void setClock(Clock clock) {\n\t\tAssert.notNull(clock, \"clock cannot be null\");\n\t\tthis.clock = clock;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "clock",
            "used",
            "in",
            "instant",
            "now",
            "clock",
            "when",
            "checking",
            "the",
            "access",
            "token",
            "expiry"
        ]
    },
    {
        "id": 1020,
        "code": "\tprivate boolean hasRemovalErrorCode(OAuth2AuthorizationException authorizationException) {\n\t\treturn this.removeAuthorizedClientErrorCodes.contains(authorizationException.getError().getErrorCode());\n\t}",
        "summary_tokens": [
            "returns",
            "true",
            "if",
            "the",
            "given",
            "exception",
            "has",
            "an",
            "error",
            "code",
            "that",
            "indicates",
            "that",
            "the",
            "authorized",
            "client",
            "should",
            "be",
            "removed"
        ]
    },
    {
        "id": 1021,
        "code": "\tprivate boolean hasRemovalErrorCode(OAuth2AuthorizationException authorizationException) {\n\t\treturn this.removeAuthorizedClientErrorCodes.contains(authorizationException.getError().getErrorCode());\n\t}",
        "summary_tokens": [
            "returns",
            "true",
            "if",
            "the",
            "given",
            "exception",
            "has",
            "an",
            "error",
            "code",
            "that",
            "indicates",
            "that",
            "the",
            "authorized",
            "client",
            "should",
            "be",
            "removed"
        ]
    },
    {
        "id": 1022,
        "code": "\tpublic String getAuthorizedClientRegistrationId() {\n\t\treturn this.authorizedClientRegistrationId;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "registration",
            "identifier",
            "of",
            "the",
            "oauth",
            "0",
            "authorized",
            "client",
            "authorized",
            "client"
        ]
    },
    {
        "id": 1023,
        "code": "\tpublic ClientRegistration getClientRegistration() {\n\t\treturn this.clientRegistration;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "client",
            "registration",
            "client",
            "registration"
        ]
    },
    {
        "id": 1024,
        "code": "\tpublic OAuth2AuthorizationExchange getAuthorizationExchange() {\n\t\treturn this.authorizationExchange;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "oauth",
            "0",
            "authorization",
            "exchange",
            "authorization",
            "exchange"
        ]
    },
    {
        "id": 1025,
        "code": "\tpublic OAuth2AccessToken getAccessToken() {\n\t\treturn this.accessToken;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "oauth",
            "0",
            "access",
            "token",
            "access",
            "token"
        ]
    },
    {
        "id": 1026,
        "code": "\tpublic @Nullable OAuth2RefreshToken getRefreshToken() {\n\t\treturn this.refreshToken;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "oauth",
            "0",
            "refresh",
            "token",
            "refresh",
            "token"
        ]
    },
    {
        "id": 1027,
        "code": "\tpublic Map<String, Object> getAdditionalParameters() {\n\t\treturn this.additionalParameters;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "additional",
            "parameters",
            "the",
            "additional",
            "parameters"
        ]
    },
    {
        "id": 1028,
        "code": "\tpublic final void setAuthoritiesMapper(GrantedAuthoritiesMapper authoritiesMapper) {\n\t\tAssert.notNull(authoritiesMapper, \"authoritiesMapper cannot be null\");\n\t\tthis.authoritiesMapper = authoritiesMapper;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "granted",
            "authorities",
            "mapper",
            "used",
            "for",
            "mapping",
            "oauth",
            "0",
            "user",
            "get",
            "authorities",
            "to",
            "a",
            "new",
            "set",
            "of",
            "authorities",
            "which",
            "will",
            "be",
            "associated",
            "to",
            "the",
            "oauth",
            "0",
            "login",
            "authentication",
            "token"
        ]
    },
    {
        "id": 1029,
        "code": "\tpublic ClientRegistration getClientRegistration() {\n\t\treturn this.clientRegistration;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "client",
            "registration",
            "client",
            "registration"
        ]
    },
    {
        "id": 1030,
        "code": "\tpublic OAuth2AuthorizationExchange getAuthorizationExchange() {\n\t\treturn this.authorizationExchange;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "oauth",
            "0",
            "authorization",
            "exchange",
            "authorization",
            "exchange"
        ]
    },
    {
        "id": 1031,
        "code": "\tpublic OAuth2AccessToken getAccessToken() {\n\t\treturn this.accessToken;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "oauth",
            "0",
            "access",
            "token",
            "access",
            "token"
        ]
    },
    {
        "id": 1032,
        "code": "\tpublic @Nullable OAuth2RefreshToken getRefreshToken() {\n\t\treturn this.refreshToken;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "oauth",
            "0",
            "refresh",
            "token",
            "refresh",
            "token"
        ]
    },
    {
        "id": 1033,
        "code": "\tpublic final void setAuthoritiesMapper(GrantedAuthoritiesMapper authoritiesMapper) {\n\t\tAssert.notNull(authoritiesMapper, \"authoritiesMapper cannot be null\");\n\t\tthis.authoritiesMapper = authoritiesMapper;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "granted",
            "authorities",
            "mapper",
            "used",
            "for",
            "mapping",
            "oauth",
            "0",
            "user",
            "get",
            "authorities",
            "to",
            "a",
            "new",
            "set",
            "of",
            "authorities",
            "which",
            "will",
            "be",
            "associated",
            "to",
            "the",
            "oauth",
            "0",
            "login",
            "authentication",
            "token"
        ]
    },
    {
        "id": 1034,
        "code": "\tpublic AuthorizationGrantType getGrantType() {\n\t\treturn this.authorizationGrantType;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "authorization",
            "grant",
            "type"
        ]
    },
    {
        "id": 1035,
        "code": "\tpublic ClientRegistration getClientRegistration() {\n\t\treturn this.clientRegistration;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "client",
            "registration",
            "client",
            "registration"
        ]
    },
    {
        "id": 1036,
        "code": "\tfinal Converter<T, HttpHeaders> getHeadersConverter() {\n\t\treturn this.headersConverter;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "converter",
            "used",
            "for",
            "converting",
            "the",
            "abstract",
            "oauth",
            "0",
            "authorization",
            "grant",
            "request",
            "instance",
            "to",
            "a",
            "http",
            "headers",
            "used",
            "in",
            "the",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1037,
        "code": "\tpublic final void setHeadersConverter(Converter<T, HttpHeaders> headersConverter) {\n\t\tAssert.notNull(headersConverter, \"headersConverter cannot be null\");\n\t\tthis.headersConverter = headersConverter;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "converter",
            "used",
            "for",
            "converting",
            "the",
            "abstract",
            "oauth",
            "0",
            "authorization",
            "grant",
            "request",
            "instance",
            "to",
            "a",
            "http",
            "headers",
            "used",
            "in",
            "the",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1038,
        "code": "\tpublic final void addHeadersConverter(Converter<T, HttpHeaders> headersConverter) {\n\t\tAssert.notNull(headersConverter, \"headersConverter cannot be null\");\n\t\tConverter<T, HttpHeaders> currentHeadersConverter = this.headersConverter;\n\t\tthis.headersConverter = (authorizationGrantRequest) -> {\n\t\t\t\n\t\t\tHttpHeaders headers = currentHeadersConverter.convert(authorizationGrantRequest);\n\t\t\tif (headers == null) {\n\t\t\t\theaders = new HttpHeaders();\n\t\t\t}\n\t\t\tHttpHeaders headersToAdd = headersConverter.convert(authorizationGrantRequest);\n\t\t\tif (headersToAdd != null) {\n\t\t\t\theaders.addAll(headersToAdd);\n\t\t\t}\n\t\t\treturn headers;\n\t\t};\n\t}",
        "summary_tokens": [
            "add",
            "compose",
            "the",
            "provided",
            "headers",
            "converter",
            "to",
            "the",
            "current",
            "converter",
            "used",
            "for",
            "converting",
            "the",
            "abstract",
            "oauth",
            "0",
            "authorization",
            "grant",
            "request",
            "instance",
            "to",
            "a",
            "http",
            "headers",
            "used",
            "in",
            "the",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1039,
        "code": "\tfinal Converter<T, MultiValueMap<String, String>> getParametersConverter() {\n\t\treturn this.parametersConverter;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "converter",
            "used",
            "for",
            "converting",
            "the",
            "abstract",
            "oauth",
            "0",
            "authorization",
            "grant",
            "request",
            "instance",
            "to",
            "a",
            "multi",
            "value",
            "map",
            "of",
            "the",
            "parameters",
            "used",
            "in",
            "the",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1040,
        "code": "\tpublic final void setParametersConverter(Converter<T, MultiValueMap<String, String>> parametersConverter) {\n\t\tAssert.notNull(parametersConverter, \"parametersConverter cannot be null\");\n\t\tthis.parametersConverter = parametersConverter;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "converter",
            "used",
            "for",
            "converting",
            "the",
            "abstract",
            "oauth",
            "0",
            "authorization",
            "grant",
            "request",
            "instance",
            "to",
            "a",
            "multi",
            "value",
            "map",
            "of",
            "the",
            "parameters",
            "used",
            "in",
            "the",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1041,
        "code": "\tpublic final void addParametersConverter(Converter<T, MultiValueMap<String, String>> parametersConverter) {\n\t\tAssert.notNull(parametersConverter, \"parametersConverter cannot be null\");\n\t\tConverter<T, MultiValueMap<String, String>> currentParametersConverter = this.parametersConverter;\n\t\tthis.parametersConverter = (authorizationGrantRequest) -> {\n\t\t\t\n\t\t\tMultiValueMap<String, String> parameters = currentParametersConverter.convert(authorizationGrantRequest);\n\t\t\tif (parameters == null) {\n\t\t\t\tparameters = new LinkedMultiValueMap<>();\n\t\t\t}\n\t\t\tMultiValueMap<String, String> parametersToAdd = parametersConverter.convert(authorizationGrantRequest);\n\t\t\tif (parametersToAdd != null) {\n\t\t\t\tparameters.addAll(parametersToAdd);\n\t\t\t}\n\t\t\treturn parameters;\n\t\t};\n\t}",
        "summary_tokens": [
            "add",
            "compose",
            "the",
            "provided",
            "parameters",
            "converter",
            "to",
            "the",
            "current",
            "converter",
            "used",
            "for",
            "converting",
            "the",
            "abstract",
            "oauth",
            "0",
            "authorization",
            "grant",
            "request",
            "instance",
            "to",
            "a",
            "multi",
            "value",
            "map",
            "of",
            "the",
            "parameters",
            "used",
            "in",
            "the",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1042,
        "code": "\tprivate HttpHeaders populateTokenRequestHeaders(T grantRequest) {\n\t\tHttpHeaders headers = new HttpHeaders();\n\t\tClientRegistration clientRegistration = clientRegistration(grantRequest);\n\t\theaders.setContentType(MediaType.APPLICATION_FORM_URLENCODED);\n\t\theaders.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n\t\tif (ClientAuthenticationMethod.CLIENT_SECRET_BASIC.equals(clientRegistration.getClientAuthenticationMethod())) {\n\t\t\tString clientId = encodeClientCredential(clientRegistration.getClientId());\n\t\t\tString clientSecret = encodeClientCredential(clientRegistration.getClientSecret());\n\t\t\theaders.setBasicAuth(clientId, clientSecret);\n\t\t}\n\t\treturn headers;\n\t}",
        "summary_tokens": [
            "populates",
            "the",
            "headers",
            "for",
            "the",
            "token",
            "request"
        ]
    },
    {
        "id": 1043,
        "code": "\tprivate MultiValueMap<String, String> populateTokenRequestParameters(T grantRequest) {\n\t\tMultiValueMap<String, String> parameters = new LinkedMultiValueMap<>();\n\t\tparameters.add(OAuth2ParameterNames.GRANT_TYPE, grantRequest.getGrantType().getValue());\n\t\treturn parameters;\n\t}",
        "summary_tokens": [
            "populates",
            "default",
            "parameters",
            "for",
            "the",
            "token",
            "request"
        ]
    },
    {
        "id": 1044,
        "code": "\tprivate BodyInserters.FormInserter<String> createTokenRequestBody(T grantRequest) {\n\t\tMultiValueMap<String, String> parameters = getParametersConverter().convert(grantRequest);\n\t\treturn populateTokenRequestBody(grantRequest, BodyInserters.fromFormData(parameters));\n\t}",
        "summary_tokens": [
            "combine",
            "the",
            "results",
            "of",
            "parameters",
            "converter",
            "and",
            "populate",
            "token",
            "request",
            "body"
        ]
    },
    {
        "id": 1045,
        "code": "\tBodyInserters.FormInserter<String> populateTokenRequestBody(T grantRequest,\n\t\t\tBodyInserters.FormInserter<String> body) {\n\t\tClientRegistration clientRegistration = clientRegistration(grantRequest);\n\t\tif (!ClientAuthenticationMethod.CLIENT_SECRET_BASIC\n\t\t\t\t.equals(clientRegistration.getClientAuthenticationMethod())) {\n\t\t\tbody.with(OAuth2ParameterNames.CLIENT_ID, clientRegistration.getClientId());\n\t\t}\n\t\tif (ClientAuthenticationMethod.CLIENT_SECRET_POST.equals(clientRegistration.getClientAuthenticationMethod())) {\n\t\t\tbody.with(OAuth2ParameterNames.CLIENT_SECRET, clientRegistration.getClientSecret());\n\t\t}\n\t\tSet<String> scopes = scopes(grantRequest);\n\t\tif (!CollectionUtils.isEmpty(scopes)) {\n\t\t\tbody.with(OAuth2ParameterNames.SCOPE, StringUtils.collectionToDelimitedString(scopes, \" \"));\n\t\t}\n\t\treturn body;\n\t}",
        "summary_tokens": [
            "populates",
            "the",
            "body",
            "of",
            "the",
            "token",
            "request"
        ]
    },
    {
        "id": 1046,
        "code": "\tSet<String> defaultScopes(T grantRequest) {\n\t\treturn scopes(grantRequest);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "scopes",
            "to",
            "include",
            "in",
            "the",
            "response",
            "if",
            "the",
            "authorization",
            "server",
            "returned",
            "no",
            "scopes",
            "in",
            "the",
            "response"
        ]
    },
    {
        "id": 1047,
        "code": "\tprivate Mono<OAuth2AccessTokenResponse> readTokenResponse(T grantRequest, ClientResponse response) {\n\t\treturn response.body(this.bodyExtractor)\n\t\t\t\t.map((tokenResponse) -> populateTokenResponse(grantRequest, tokenResponse));\n\t}",
        "summary_tokens": [
            "reads",
            "the",
            "token",
            "response",
            "from",
            "the",
            "response",
            "body"
        ]
    },
    {
        "id": 1048,
        "code": "\tOAuth2AccessTokenResponse populateTokenResponse(T grantRequest, OAuth2AccessTokenResponse tokenResponse) {\n\t\tif (CollectionUtils.isEmpty(tokenResponse.getAccessToken().getScopes())) {\n\t\t\tSet<String> defaultScopes = defaultScopes(grantRequest);\n\t\t\t\n\t\t\ttokenResponse = OAuth2AccessTokenResponse\n\t\t\t\t\t.withResponse(tokenResponse)\n\t\t\t\t\t.scopes(defaultScopes)\n\t\t\t\t\t.build();\n\t\t\t\n\t\t}\n\t\treturn tokenResponse;\n\t}",
        "summary_tokens": [
            "populates",
            "the",
            "given",
            "oauth",
            "0",
            "access",
            "token",
            "response",
            "with",
            "additional",
            "details",
            "from",
            "the",
            "grant",
            "request"
        ]
    },
    {
        "id": 1049,
        "code": "\tpublic void setWebClient(WebClient webClient) {\n\t\tAssert.notNull(webClient, \"webClient cannot be null\");\n\t\tthis.webClient = webClient;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "web",
            "client",
            "used",
            "when",
            "requesting",
            "the",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1050,
        "code": "\tfinal Converter<T, HttpHeaders> getHeadersConverter() {\n\t\treturn this.headersConverter;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "converter",
            "used",
            "for",
            "converting",
            "the",
            "abstract",
            "oauth",
            "0",
            "authorization",
            "grant",
            "request",
            "instance",
            "to",
            "a",
            "http",
            "headers",
            "used",
            "in",
            "the",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1051,
        "code": "\tpublic final void setHeadersConverter(Converter<T, HttpHeaders> headersConverter) {\n\t\tAssert.notNull(headersConverter, \"headersConverter cannot be null\");\n\t\tthis.headersConverter = headersConverter;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "converter",
            "used",
            "for",
            "converting",
            "the",
            "abstract",
            "oauth",
            "0",
            "authorization",
            "grant",
            "request",
            "instance",
            "to",
            "a",
            "http",
            "headers",
            "used",
            "in",
            "the",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1052,
        "code": "\tpublic final void addHeadersConverter(Converter<T, HttpHeaders> headersConverter) {\n\t\tAssert.notNull(headersConverter, \"headersConverter cannot be null\");\n\t\tConverter<T, HttpHeaders> currentHeadersConverter = this.headersConverter;\n\t\tthis.headersConverter = (authorizationGrantRequest) -> {\n\t\t\t\n\t\t\tHttpHeaders headers = currentHeadersConverter.convert(authorizationGrantRequest);\n\t\t\tif (headers == null) {\n\t\t\t\theaders = new HttpHeaders();\n\t\t\t}\n\t\t\tHttpHeaders headersToAdd = headersConverter.convert(authorizationGrantRequest);\n\t\t\tif (headersToAdd != null) {\n\t\t\t\theaders.addAll(headersToAdd);\n\t\t\t}\n\t\t\treturn headers;\n\t\t};\n\t}",
        "summary_tokens": [
            "add",
            "compose",
            "the",
            "provided",
            "headers",
            "converter",
            "to",
            "the",
            "current",
            "converter",
            "used",
            "for",
            "converting",
            "the",
            "abstract",
            "oauth",
            "0",
            "authorization",
            "grant",
            "request",
            "instance",
            "to",
            "a",
            "http",
            "headers",
            "used",
            "in",
            "the",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1053,
        "code": "\tfinal Converter<T, MultiValueMap<String, String>> getParametersConverter() {\n\t\treturn this.parametersConverter;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "converter",
            "used",
            "for",
            "converting",
            "the",
            "abstract",
            "oauth",
            "0",
            "authorization",
            "grant",
            "request",
            "instance",
            "to",
            "a",
            "multi",
            "value",
            "map",
            "used",
            "in",
            "the",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1054,
        "code": "\tpublic final void setParametersConverter(Converter<T, MultiValueMap<String, String>> parametersConverter) {\n\t\tAssert.notNull(parametersConverter, \"parametersConverter cannot be null\");\n\t\tthis.parametersConverter = parametersConverter;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "converter",
            "used",
            "for",
            "converting",
            "the",
            "abstract",
            "oauth",
            "0",
            "authorization",
            "grant",
            "request",
            "instance",
            "to",
            "a",
            "multi",
            "value",
            "map",
            "used",
            "in",
            "the",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1055,
        "code": "\tpublic final void addParametersConverter(Converter<T, MultiValueMap<String, String>> parametersConverter) {\n\t\tAssert.notNull(parametersConverter, \"parametersConverter cannot be null\");\n\t\tConverter<T, MultiValueMap<String, String>> currentParametersConverter = this.parametersConverter;\n\t\tthis.parametersConverter = (authorizationGrantRequest) -> {\n\t\t\tMultiValueMap<String, String> parameters = currentParametersConverter.convert(authorizationGrantRequest);\n\t\t\tif (parameters == null) {\n\t\t\t\tparameters = new LinkedMultiValueMap<>();\n\t\t\t}\n\t\t\tMultiValueMap<String, String> parametersToAdd = parametersConverter.convert(authorizationGrantRequest);\n\t\t\tif (parametersToAdd != null) {\n\t\t\t\tparameters.addAll(parametersToAdd);\n\t\t\t}\n\t\t\treturn parameters;\n\t\t};\n\t}",
        "summary_tokens": [
            "add",
            "compose",
            "the",
            "provided",
            "parameters",
            "converter",
            "to",
            "the",
            "current",
            "converter",
            "used",
            "for",
            "converting",
            "the",
            "abstract",
            "oauth",
            "0",
            "authorization",
            "grant",
            "request",
            "instance",
            "to",
            "a",
            "multi",
            "value",
            "map",
            "used",
            "in",
            "the",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1056,
        "code": "\tpublic final void setBodyExtractor(\n\t\t\tBodyExtractor<Mono<OAuth2AccessTokenResponse>, ReactiveHttpInputMessage> bodyExtractor) {\n\t\tAssert.notNull(bodyExtractor, \"bodyExtractor cannot be null\");\n\t\tthis.bodyExtractor = bodyExtractor;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "body",
            "extractor",
            "that",
            "will",
            "be",
            "used",
            "to",
            "decode",
            "the",
            "oauth",
            "0",
            "access",
            "token",
            "response",
            "body",
            "extractor",
            "the",
            "body",
            "extractor",
            "that",
            "will",
            "be",
            "used",
            "to",
            "decode",
            "the",
            "oauth",
            "0",
            "access",
            "token",
            "response",
            "0"
        ]
    },
    {
        "id": 1057,
        "code": "\tpublic void setRequestEntityConverter(\n\t\t\tConverter<OAuth2AuthorizationCodeGrantRequest, RequestEntity<?>> requestEntityConverter) {\n\t\tAssert.notNull(requestEntityConverter, \"requestEntityConverter cannot be null\");\n\t\tthis.requestEntityConverter = requestEntityConverter;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "converter",
            "used",
            "for",
            "converting",
            "the",
            "oauth",
            "0",
            "authorization",
            "code",
            "grant",
            "request",
            "to",
            "a",
            "request",
            "entity",
            "representation",
            "of",
            "the",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1058,
        "code": "\tpublic void setRestOperations(RestOperations restOperations) {\n\t\tAssert.notNull(restOperations, \"restOperations cannot be null\");\n\t\tthis.restOperations = restOperations;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "rest",
            "operations",
            "used",
            "when",
            "requesting",
            "the",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1059,
        "code": "\tpublic void setRequestEntityConverter(\n\t\t\tConverter<OAuth2ClientCredentialsGrantRequest, RequestEntity<?>> requestEntityConverter) {\n\t\tAssert.notNull(requestEntityConverter, \"requestEntityConverter cannot be null\");\n\t\tthis.requestEntityConverter = requestEntityConverter;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "converter",
            "used",
            "for",
            "converting",
            "the",
            "oauth",
            "0",
            "client",
            "credentials",
            "grant",
            "request",
            "to",
            "a",
            "request",
            "entity",
            "representation",
            "of",
            "the",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1060,
        "code": "\tpublic void setRestOperations(RestOperations restOperations) {\n\t\tAssert.notNull(restOperations, \"restOperations cannot be null\");\n\t\tthis.restOperations = restOperations;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "rest",
            "operations",
            "used",
            "when",
            "requesting",
            "the",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1061,
        "code": "\tpublic void setRequestEntityConverter(Converter<JwtBearerGrantRequest, RequestEntity<?>> requestEntityConverter) {\n\t\tAssert.notNull(requestEntityConverter, \"requestEntityConverter cannot be null\");\n\t\tthis.requestEntityConverter = requestEntityConverter;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "converter",
            "used",
            "for",
            "converting",
            "the",
            "jwt",
            "bearer",
            "grant",
            "request",
            "to",
            "a",
            "request",
            "entity",
            "representation",
            "of",
            "the",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1062,
        "code": "\tpublic void setRestOperations(RestOperations restOperations) {\n\t\tAssert.notNull(restOperations, \"restOperations cannot be null\");\n\t\tthis.restOperations = restOperations;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "rest",
            "operations",
            "used",
            "when",
            "requesting",
            "the",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1063,
        "code": "\tpublic void setRequestEntityConverter(\n\t\t\tConverter<OAuth2PasswordGrantRequest, RequestEntity<?>> requestEntityConverter) {\n\t\tAssert.notNull(requestEntityConverter, \"requestEntityConverter cannot be null\");\n\t\tthis.requestEntityConverter = requestEntityConverter;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "converter",
            "used",
            "for",
            "converting",
            "the",
            "oauth",
            "0",
            "password",
            "grant",
            "request",
            "to",
            "a",
            "request",
            "entity",
            "representation",
            "of",
            "the",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1064,
        "code": "\tpublic void setRestOperations(RestOperations restOperations) {\n\t\tAssert.notNull(restOperations, \"restOperations cannot be null\");\n\t\tthis.restOperations = restOperations;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "rest",
            "operations",
            "used",
            "when",
            "requesting",
            "the",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1065,
        "code": "\tpublic void setRequestEntityConverter(\n\t\t\tConverter<OAuth2RefreshTokenGrantRequest, RequestEntity<?>> requestEntityConverter) {\n\t\tAssert.notNull(requestEntityConverter, \"requestEntityConverter cannot be null\");\n\t\tthis.requestEntityConverter = requestEntityConverter;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "converter",
            "used",
            "for",
            "converting",
            "the",
            "oauth",
            "0",
            "refresh",
            "token",
            "grant",
            "request",
            "to",
            "a",
            "request",
            "entity",
            "representation",
            "of",
            "the",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1066,
        "code": "\tpublic void setRestOperations(RestOperations restOperations) {\n\t\tAssert.notNull(restOperations, \"restOperations cannot be null\");\n\t\tthis.restOperations = restOperations;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "rest",
            "operations",
            "used",
            "when",
            "requesting",
            "the",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1067,
        "code": "\tpublic Jwt getJwt() {\n\t\treturn this.jwt;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "jwt",
            "jwt",
            "assertion"
        ]
    },
    {
        "id": 1068,
        "code": "\tpublic void setJwtClientAssertionCustomizer(\n\t\t\tConsumer<JwtClientAuthenticationContext<T>> jwtClientAssertionCustomizer) {\n\t\tAssert.notNull(jwtClientAssertionCustomizer, \"jwtClientAssertionCustomizer cannot be null\");\n\t\tthis.jwtClientAssertionCustomizer = jwtClientAssertionCustomizer;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "consumer",
            "to",
            "be",
            "provided",
            "the",
            "jwt",
            "client",
            "authentication",
            "context",
            "which",
            "contains",
            "the",
            "jws",
            "header"
        ]
    },
    {
        "id": 1069,
        "code": "\tpublic OAuth2AuthorizationExchange getAuthorizationExchange() {\n\t\treturn this.authorizationExchange;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "oauth",
            "0",
            "authorization",
            "exchange",
            "authorization",
            "exchange"
        ]
    },
    {
        "id": 1070,
        "code": "\tpublic String getUsername() {\n\t\treturn this.username;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "resource",
            "owner",
            "s",
            "username"
        ]
    },
    {
        "id": 1071,
        "code": "\tpublic String getPassword() {\n\t\treturn this.password;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "resource",
            "owner",
            "s",
            "password"
        ]
    },
    {
        "id": 1072,
        "code": "\tpublic OAuth2AccessToken getAccessToken() {\n\t\treturn this.accessToken;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "oauth",
            "0",
            "access",
            "token",
            "access",
            "token",
            "credential",
            "granted"
        ]
    },
    {
        "id": 1073,
        "code": "\tpublic OAuth2RefreshToken getRefreshToken() {\n\t\treturn this.refreshToken;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "oauth",
            "0",
            "refresh",
            "token",
            "refresh",
            "token",
            "credential",
            "granted"
        ]
    },
    {
        "id": 1074,
        "code": "\tpublic Set<String> getScopes() {\n\t\treturn this.scopes;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "scope",
            "s",
            "to",
            "request"
        ]
    },
    {
        "id": 1075,
        "code": "\tpublic final void setErrorConverter(HttpMessageConverter<OAuth2Error> oauth2ErrorConverter) {\n\t\tAssert.notNull(oauth2ErrorConverter, \"oauth2ErrorConverter cannot be null\");\n\t\tthis.oauth2ErrorConverter = oauth2ErrorConverter;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "http",
            "message",
            "converter",
            "for",
            "an",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1076,
        "code": "\tpublic final void setJwtDecoderFactory(JwtDecoderFactory<ClientRegistration> jwtDecoderFactory) {\n\t\tAssert.notNull(jwtDecoderFactory, \"jwtDecoderFactory cannot be null\");\n\t\tthis.jwtDecoderFactory = jwtDecoderFactory;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "jwt",
            "decoder",
            "factory",
            "used",
            "for",
            "oidc",
            "id",
            "token",
            "signature",
            "verification"
        ]
    },
    {
        "id": 1077,
        "code": "\tpublic final void setAuthoritiesMapper(GrantedAuthoritiesMapper authoritiesMapper) {\n\t\tAssert.notNull(authoritiesMapper, \"authoritiesMapper cannot be null\");\n\t\tthis.authoritiesMapper = authoritiesMapper;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "granted",
            "authorities",
            "mapper",
            "used",
            "for",
            "mapping",
            "oidc",
            "user",
            "get",
            "authorities",
            "to",
            "a",
            "new",
            "set",
            "of",
            "authorities",
            "which",
            "will",
            "be",
            "associated",
            "to",
            "the",
            "oauth",
            "0",
            "login",
            "authentication",
            "token"
        ]
    },
    {
        "id": 1078,
        "code": "\tpublic final void setJwtDecoderFactory(ReactiveJwtDecoderFactory<ClientRegistration> jwtDecoderFactory) {\n\t\tAssert.notNull(jwtDecoderFactory, \"jwtDecoderFactory cannot be null\");\n\t\tthis.jwtDecoderFactory = jwtDecoderFactory;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "reactive",
            "jwt",
            "decoder",
            "factory",
            "used",
            "for",
            "oidc",
            "id",
            "token",
            "signature",
            "verification"
        ]
    },
    {
        "id": 1079,
        "code": "\tpublic final void setAuthoritiesMapper(GrantedAuthoritiesMapper authoritiesMapper) {\n\t\tAssert.notNull(authoritiesMapper, \"authoritiesMapper cannot be null\");\n\t\tthis.authoritiesMapper = authoritiesMapper;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "granted",
            "authorities",
            "mapper",
            "used",
            "for",
            "mapping",
            "oidc",
            "user",
            "get",
            "authorities",
            "to",
            "a",
            "new",
            "set",
            "of",
            "authorities",
            "which",
            "will",
            "be",
            "associated",
            "to",
            "the",
            "oauth",
            "0",
            "login",
            "authentication",
            "token"
        ]
    },
    {
        "id": 1080,
        "code": "\tpublic static Map<String, Converter<Object, ?>> createDefaultClaimTypeConverters() {\n\t\tConverter<Object, ?> booleanConverter = getConverter(TypeDescriptor.valueOf(Boolean.class));\n\t\tConverter<Object, ?> instantConverter = getConverter(TypeDescriptor.valueOf(Instant.class));\n\t\tConverter<Object, ?> urlConverter = getConverter(TypeDescriptor.valueOf(URL.class));\n\t\tConverter<Object, ?> stringConverter = getConverter(TypeDescriptor.valueOf(String.class));\n\t\tConverter<Object, ?> collectionStringConverter = getConverter(\n\t\t\t\tTypeDescriptor.collection(Collection.class, TypeDescriptor.valueOf(String.class)));\n\t\tMap<String, Converter<Object, ?>> converters = new HashMap<>();\n\t\tconverters.put(IdTokenClaimNames.ISS, urlConverter);\n\t\tconverters.put(IdTokenClaimNames.AUD, collectionStringConverter);\n\t\tconverters.put(IdTokenClaimNames.NONCE, stringConverter);\n\t\tconverters.put(IdTokenClaimNames.EXP, instantConverter);\n\t\tconverters.put(IdTokenClaimNames.IAT, instantConverter);\n\t\tconverters.put(IdTokenClaimNames.AUTH_TIME, instantConverter);\n\t\tconverters.put(IdTokenClaimNames.AMR, collectionStringConverter);\n\t\tconverters.put(StandardClaimNames.EMAIL_VERIFIED, booleanConverter);\n\t\tconverters.put(StandardClaimNames.PHONE_NUMBER_VERIFIED, booleanConverter);\n\t\tconverters.put(StandardClaimNames.UPDATED_AT, instantConverter);\n\t\treturn converters;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "default",
            "converter",
            "s",
            "used",
            "for",
            "type",
            "conversion",
            "of",
            "claim",
            "values",
            "for",
            "an",
            "oidc",
            "id",
            "token"
        ]
    },
    {
        "id": 1081,
        "code": "\tpublic void setJwtValidatorFactory(Function<ClientRegistration, OAuth2TokenValidator<Jwt>> jwtValidatorFactory) {\n\t\tAssert.notNull(jwtValidatorFactory, \"jwtValidatorFactory cannot be null\");\n\t\tthis.jwtValidatorFactory = jwtValidatorFactory;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "factory",
            "that",
            "provides",
            "an",
            "oauth",
            "0",
            "token",
            "validator",
            "which",
            "is",
            "used",
            "by",
            "the",
            "jwt",
            "decoder"
        ]
    },
    {
        "id": 1082,
        "code": "\tpublic void setJwsAlgorithmResolver(Function<ClientRegistration, JwsAlgorithm> jwsAlgorithmResolver) {\n\t\tAssert.notNull(jwsAlgorithmResolver, \"jwsAlgorithmResolver cannot be null\");\n\t\tthis.jwsAlgorithmResolver = jwsAlgorithmResolver;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "resolver",
            "that",
            "provides",
            "the",
            "expected",
            "jws",
            "algorithm",
            "jws",
            "algorithm",
            "used",
            "for",
            "the",
            "signature",
            "or",
            "mac",
            "on",
            "the",
            "oidc",
            "id",
            "token",
            "id",
            "token"
        ]
    },
    {
        "id": 1083,
        "code": "\tpublic void setClaimTypeConverterFactory(\n\t\t\tFunction<ClientRegistration, Converter<Map<String, Object>, Map<String, Object>>> claimTypeConverterFactory) {\n\t\tAssert.notNull(claimTypeConverterFactory, \"claimTypeConverterFactory cannot be null\");\n\t\tthis.claimTypeConverterFactory = claimTypeConverterFactory;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "factory",
            "that",
            "provides",
            "a",
            "converter",
            "used",
            "for",
            "type",
            "conversion",
            "of",
            "claim",
            "values",
            "for",
            "an",
            "oidc",
            "id",
            "token"
        ]
    },
    {
        "id": 1084,
        "code": "\tpublic void setClockSkew(Duration clockSkew) {\n\t\tAssert.notNull(clockSkew, \"clockSkew cannot be null\");\n\t\tAssert.isTrue(clockSkew.getSeconds() >= 0, \"clockSkew must be >= 0\");\n\t\tthis.clockSkew = clockSkew;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "maximum",
            "acceptable",
            "clock",
            "skew"
        ]
    },
    {
        "id": 1085,
        "code": "\tpublic void setClock(Clock clock) {\n\t\tAssert.notNull(clock, \"clock cannot be null\");\n\t\tthis.clock = clock;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "clock",
            "used",
            "in",
            "instant",
            "now",
            "clock",
            "when",
            "validating",
            "the",
            "jwt",
            "claim",
            "names",
            "exp",
            "exp",
            "and",
            "jwt",
            "claim",
            "names",
            "iat",
            "iat",
            "claims"
        ]
    },
    {
        "id": 1086,
        "code": "\tpublic static Map<String, Converter<Object, ?>> createDefaultClaimTypeConverters() {\n\t\tConverter<Object, ?> booleanConverter = getConverter(TypeDescriptor.valueOf(Boolean.class));\n\t\tConverter<Object, ?> instantConverter = getConverter(TypeDescriptor.valueOf(Instant.class));\n\t\tConverter<Object, ?> urlConverter = getConverter(TypeDescriptor.valueOf(URL.class));\n\t\tConverter<Object, ?> stringConverter = getConverter(TypeDescriptor.valueOf(String.class));\n\t\tConverter<Object, ?> collectionStringConverter = getConverter(\n\t\t\t\tTypeDescriptor.collection(Collection.class, TypeDescriptor.valueOf(String.class)));\n\t\tMap<String, Converter<Object, ?>> converters = new HashMap<>();\n\t\tconverters.put(IdTokenClaimNames.ISS, urlConverter);\n\t\tconverters.put(IdTokenClaimNames.AUD, collectionStringConverter);\n\t\tconverters.put(IdTokenClaimNames.NONCE, stringConverter);\n\t\tconverters.put(IdTokenClaimNames.EXP, instantConverter);\n\t\tconverters.put(IdTokenClaimNames.IAT, instantConverter);\n\t\tconverters.put(IdTokenClaimNames.AUTH_TIME, instantConverter);\n\t\tconverters.put(IdTokenClaimNames.AMR, collectionStringConverter);\n\t\tconverters.put(StandardClaimNames.EMAIL_VERIFIED, booleanConverter);\n\t\tconverters.put(StandardClaimNames.PHONE_NUMBER_VERIFIED, booleanConverter);\n\t\tconverters.put(StandardClaimNames.UPDATED_AT, instantConverter);\n\t\treturn converters;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "default",
            "converter",
            "s",
            "used",
            "for",
            "type",
            "conversion",
            "of",
            "claim",
            "values",
            "for",
            "an",
            "oidc",
            "id",
            "token"
        ]
    },
    {
        "id": 1087,
        "code": "\tpublic void setJwtValidatorFactory(Function<ClientRegistration, OAuth2TokenValidator<Jwt>> jwtValidatorFactory) {\n\t\tAssert.notNull(jwtValidatorFactory, \"jwtValidatorFactory cannot be null\");\n\t\tthis.jwtValidatorFactory = jwtValidatorFactory;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "factory",
            "that",
            "provides",
            "an",
            "oauth",
            "0",
            "token",
            "validator",
            "which",
            "is",
            "used",
            "by",
            "the",
            "reactive",
            "jwt",
            "decoder"
        ]
    },
    {
        "id": 1088,
        "code": "\tpublic void setJwsAlgorithmResolver(Function<ClientRegistration, JwsAlgorithm> jwsAlgorithmResolver) {\n\t\tAssert.notNull(jwsAlgorithmResolver, \"jwsAlgorithmResolver cannot be null\");\n\t\tthis.jwsAlgorithmResolver = jwsAlgorithmResolver;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "resolver",
            "that",
            "provides",
            "the",
            "expected",
            "jws",
            "algorithm",
            "jws",
            "algorithm",
            "used",
            "for",
            "the",
            "signature",
            "or",
            "mac",
            "on",
            "the",
            "oidc",
            "id",
            "token",
            "id",
            "token"
        ]
    },
    {
        "id": 1089,
        "code": "\tpublic void setClaimTypeConverterFactory(\n\t\t\tFunction<ClientRegistration, Converter<Map<String, Object>, Map<String, Object>>> claimTypeConverterFactory) {\n\t\tAssert.notNull(claimTypeConverterFactory, \"claimTypeConverterFactory cannot be null\");\n\t\tthis.claimTypeConverterFactory = claimTypeConverterFactory;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "factory",
            "that",
            "provides",
            "a",
            "converter",
            "used",
            "for",
            "type",
            "conversion",
            "of",
            "claim",
            "values",
            "for",
            "an",
            "oidc",
            "id",
            "token"
        ]
    },
    {
        "id": 1090,
        "code": "\tpublic static Map<String, Converter<Object, ?>> createDefaultClaimTypeConverters() {\n\t\tConverter<Object, ?> booleanConverter = getConverter(TypeDescriptor.valueOf(Boolean.class));\n\t\tConverter<Object, ?> instantConverter = getConverter(TypeDescriptor.valueOf(Instant.class));\n\t\tMap<String, Converter<Object, ?>> claimTypeConverters = new HashMap<>();\n\t\tclaimTypeConverters.put(StandardClaimNames.EMAIL_VERIFIED, booleanConverter);\n\t\tclaimTypeConverters.put(StandardClaimNames.PHONE_NUMBER_VERIFIED, booleanConverter);\n\t\tclaimTypeConverters.put(StandardClaimNames.UPDATED_AT, instantConverter);\n\t\treturn claimTypeConverters;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "default",
            "converter",
            "s",
            "used",
            "for",
            "type",
            "conversion",
            "of",
            "claim",
            "values",
            "for",
            "an",
            "oidc",
            "user",
            "info"
        ]
    },
    {
        "id": 1091,
        "code": "\tpublic final void setClaimTypeConverterFactory(\n\t\t\tFunction<ClientRegistration, Converter<Map<String, Object>, Map<String, Object>>> claimTypeConverterFactory) {\n\t\tAssert.notNull(claimTypeConverterFactory, \"claimTypeConverterFactory cannot be null\");\n\t\tthis.claimTypeConverterFactory = claimTypeConverterFactory;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "factory",
            "that",
            "provides",
            "a",
            "converter",
            "used",
            "for",
            "type",
            "conversion",
            "of",
            "claim",
            "values",
            "for",
            "an",
            "oidc",
            "user",
            "info"
        ]
    },
    {
        "id": 1092,
        "code": "\tpublic OidcIdToken getIdToken() {\n\t\treturn this.idToken;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "oidc",
            "id",
            "token",
            "id",
            "token",
            "containing",
            "claims",
            "about",
            "the",
            "user"
        ]
    },
    {
        "id": 1093,
        "code": "\tstatic boolean shouldRetrieveUserInfo(OidcUserRequest userRequest) {\n\t\t\n\t\tClientRegistration clientRegistration = userRequest.getClientRegistration();\n\t\tif (StringUtils.isEmpty(clientRegistration.getProviderDetails().getUserInfoEndpoint().getUri())) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\tif (AuthorizationGrantType.AUTHORIZATION_CODE.equals(clientRegistration.getAuthorizationGrantType())) {\n\t\t\t\n\t\t\t\n\t\t\treturn CollectionUtils.containsAny(userRequest.getAccessToken().getScopes(),\n\t\t\t\t\tuserRequest.getClientRegistration().getScopes());\n\t\t}\n\t\treturn false;\n\t}",
        "summary_tokens": [
            "determines",
            "if",
            "an",
            "oidc",
            "user",
            "request",
            "should",
            "attempt",
            "to",
            "retrieve",
            "the",
            "user",
            "info",
            "endpoint"
        ]
    },
    {
        "id": 1094,
        "code": "\tpublic static Map<String, Converter<Object, ?>> createDefaultClaimTypeConverters() {\n\t\tConverter<Object, ?> booleanConverter = getConverter(TypeDescriptor.valueOf(Boolean.class));\n\t\tConverter<Object, ?> instantConverter = getConverter(TypeDescriptor.valueOf(Instant.class));\n\t\tMap<String, Converter<Object, ?>> claimTypeConverters = new HashMap<>();\n\t\tclaimTypeConverters.put(StandardClaimNames.EMAIL_VERIFIED, booleanConverter);\n\t\tclaimTypeConverters.put(StandardClaimNames.PHONE_NUMBER_VERIFIED, booleanConverter);\n\t\tclaimTypeConverters.put(StandardClaimNames.UPDATED_AT, instantConverter);\n\t\treturn claimTypeConverters;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "default",
            "converter",
            "s",
            "used",
            "for",
            "type",
            "conversion",
            "of",
            "claim",
            "values",
            "for",
            "an",
            "oidc",
            "user",
            "info"
        ]
    },
    {
        "id": 1095,
        "code": "\tpublic final void setOauth2UserService(OAuth2UserService<OAuth2UserRequest, OAuth2User> oauth2UserService) {\n\t\tAssert.notNull(oauth2UserService, \"oauth2UserService cannot be null\");\n\t\tthis.oauth2UserService = oauth2UserService;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "oauth",
            "0",
            "user",
            "service",
            "used",
            "when",
            "requesting",
            "the",
            "user",
            "info",
            "resource"
        ]
    },
    {
        "id": 1096,
        "code": "\tpublic final void setClaimTypeConverterFactory(\n\t\t\tFunction<ClientRegistration, Converter<Map<String, Object>, Map<String, Object>>> claimTypeConverterFactory) {\n\t\tAssert.notNull(claimTypeConverterFactory, \"claimTypeConverterFactory cannot be null\");\n\t\tthis.claimTypeConverterFactory = claimTypeConverterFactory;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "factory",
            "that",
            "provides",
            "a",
            "converter",
            "used",
            "for",
            "type",
            "conversion",
            "of",
            "claim",
            "values",
            "for",
            "an",
            "oidc",
            "user",
            "info"
        ]
    },
    {
        "id": 1097,
        "code": "\tpublic final void setAccessibleScopes(Set<String> accessibleScopes) {\n\t\tAssert.notNull(accessibleScopes, \"accessibleScopes cannot be null\");\n\t\tthis.accessibleScopes = accessibleScopes;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "scope",
            "s",
            "that",
            "allow",
            "access",
            "to",
            "the",
            "user",
            "info",
            "resource"
        ]
    },
    {
        "id": 1098,
        "code": "\tpublic void setPostLogoutRedirectUri(String postLogoutRedirectUri) {\n\t\tAssert.notNull(postLogoutRedirectUri, \"postLogoutRedirectUri cannot be null\");\n\t\tthis.postLogoutRedirectUri = postLogoutRedirectUri;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "post",
            "logout",
            "redirect",
            "uri",
            "template"
        ]
    },
    {
        "id": 1099,
        "code": "\tpublic void setPostLogoutRedirectUri(String postLogoutRedirectUri) {\n\t\tAssert.notNull(postLogoutRedirectUri, \"postLogoutRedirectUri cannot be null\");\n\t\tthis.postLogoutRedirectUri = postLogoutRedirectUri;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "post",
            "logout",
            "redirect",
            "uri",
            "template"
        ]
    },
    {
        "id": 1100,
        "code": "\tpublic void setLogoutSuccessUrl(URI logoutSuccessUrl) {\n\t\tAssert.notNull(logoutSuccessUrl, \"logoutSuccessUrl cannot be null\");\n\t\tthis.serverLogoutSuccessHandler.setLogoutSuccessUrl(logoutSuccessUrl);\n\t}",
        "summary_tokens": [
            "the",
            "url",
            "to",
            "redirect",
            "to",
            "after",
            "successfully",
            "logging",
            "out",
            "when",
            "not",
            "originally",
            "an",
            "oidc",
            "login",
            "logout",
            "success",
            "url",
            "the",
            "url",
            "to",
            "redirect",
            "to"
        ]
    },
    {
        "id": 1101,
        "code": "\tpublic String getRegistrationId() {\n\t\treturn this.registrationId;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "identifier",
            "for",
            "the",
            "registration"
        ]
    },
    {
        "id": 1102,
        "code": "\tpublic String getClientId() {\n\t\treturn this.clientId;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "client",
            "identifier"
        ]
    },
    {
        "id": 1103,
        "code": "\tpublic String getClientSecret() {\n\t\treturn this.clientSecret;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "client",
            "secret"
        ]
    },
    {
        "id": 1104,
        "code": "\tpublic ClientAuthenticationMethod getClientAuthenticationMethod() {\n\t\treturn this.clientAuthenticationMethod;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "client",
            "authentication",
            "method",
            "authentication",
            "method",
            "used",
            "when",
            "authenticating",
            "the",
            "client",
            "with",
            "the",
            "authorization",
            "server"
        ]
    },
    {
        "id": 1105,
        "code": "\tpublic AuthorizationGrantType getAuthorizationGrantType() {\n\t\treturn this.authorizationGrantType;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "authorization",
            "grant",
            "type",
            "authorization",
            "grant",
            "type",
            "used",
            "for",
            "the",
            "client"
        ]
    },
    {
        "id": 1106,
        "code": "\tpublic String getRedirectUri() {\n\t\treturn this.redirectUri;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "uri",
            "or",
            "uri",
            "template",
            "for",
            "the",
            "redirection",
            "endpoint"
        ]
    },
    {
        "id": 1107,
        "code": "\tpublic Set<String> getScopes() {\n\t\treturn this.scopes;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "scope",
            "s",
            "used",
            "for",
            "the",
            "client"
        ]
    },
    {
        "id": 1108,
        "code": "\tpublic ProviderDetails getProviderDetails() {\n\t\treturn this.providerDetails;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "details",
            "of",
            "the",
            "provider"
        ]
    },
    {
        "id": 1109,
        "code": "\tpublic String getClientName() {\n\t\treturn this.clientName;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "logical",
            "name",
            "of",
            "the",
            "client",
            "or",
            "registration"
        ]
    },
    {
        "id": 1110,
        "code": "\tpublic static Builder withRegistrationId(String registrationId) {\n\t\tAssert.hasText(registrationId, \"registrationId cannot be empty\");\n\t\treturn new Builder(registrationId);\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "new",
            "builder",
            "initialized",
            "with",
            "the",
            "provided",
            "registration",
            "identifier"
        ]
    },
    {
        "id": 1111,
        "code": "\tpublic static Builder withClientRegistration(ClientRegistration clientRegistration) {\n\t\tAssert.notNull(clientRegistration, \"clientRegistration cannot be null\");\n\t\treturn new Builder(clientRegistration);\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "new",
            "builder",
            "initialized",
            "with",
            "the",
            "provided",
            "client",
            "registration"
        ]
    },
    {
        "id": 1112,
        "code": "\tpublic static ClientRegistration.Builder fromOidcIssuerLocation(String issuer) {\n\t\tAssert.hasText(issuer, \"issuer cannot be empty\");\n\t\treturn getBuilder(issuer, oidc(URI.create(issuer)));\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "client",
            "registration"
        ]
    },
    {
        "id": 1113,
        "code": "\tpublic static ClientRegistration.Builder fromIssuerLocation(String issuer) {\n\t\tAssert.hasText(issuer, \"issuer cannot be empty\");\n\t\tURI uri = URI.create(issuer);\n\t\treturn getBuilder(issuer, oidc(uri), oidcRfc8414(uri), oauth(uri));\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "client",
            "registration"
        ]
    },
    {
        "id": 1114,
        "code": "\tpublic Iterator<ClientRegistration> iterator() {\n\t\treturn this.registrations.values().iterator();\n\t}",
        "summary_tokens": [
            "returns",
            "an",
            "iterator",
            "of",
            "client",
            "registration"
        ]
    },
    {
        "id": 1115,
        "code": "\tpublic Iterator<ClientRegistration> iterator() {\n\t\treturn this.clientIdToClientRegistration.values().iterator();\n\t}",
        "summary_tokens": [
            "returns",
            "an",
            "iterator",
            "of",
            "client",
            "registration"
        ]
    },
    {
        "id": 1116,
        "code": "\tpublic final void setRequestEntityConverter(Converter<OAuth2UserRequest, RequestEntity<?>> requestEntityConverter) {\n\t\tAssert.notNull(requestEntityConverter, \"requestEntityConverter cannot be null\");\n\t\tthis.requestEntityConverter = requestEntityConverter;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "converter",
            "used",
            "for",
            "converting",
            "the",
            "oauth",
            "0",
            "user",
            "request",
            "to",
            "a",
            "request",
            "entity",
            "representation",
            "of",
            "the",
            "user",
            "info",
            "request"
        ]
    },
    {
        "id": 1117,
        "code": "\tpublic final void setRestOperations(RestOperations restOperations) {\n\t\tAssert.notNull(restOperations, \"restOperations cannot be null\");\n\t\tthis.restOperations = restOperations;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "rest",
            "operations",
            "used",
            "when",
            "requesting",
            "the",
            "user",
            "info",
            "resource"
        ]
    },
    {
        "id": 1118,
        "code": "\tpublic void setWebClient(WebClient webClient) {\n\t\tAssert.notNull(webClient, \"webClient cannot be null\");\n\t\tthis.webClient = webClient;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "web",
            "client",
            "used",
            "for",
            "retrieving",
            "the",
            "user",
            "endpoint",
            "web",
            "client",
            "the",
            "client",
            "to",
            "use"
        ]
    },
    {
        "id": 1119,
        "code": "\tpublic ClientRegistration getClientRegistration() {\n\t\treturn this.clientRegistration;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "client",
            "registration",
            "client",
            "registration"
        ]
    },
    {
        "id": 1120,
        "code": "\tpublic OAuth2AccessToken getAccessToken() {\n\t\treturn this.accessToken;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "oauth",
            "0",
            "access",
            "token",
            "access",
            "token"
        ]
    },
    {
        "id": 1121,
        "code": "\tpublic Map<String, Object> getAdditionalParameters() {\n\t\treturn this.additionalParameters;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "additional",
            "parameters",
            "that",
            "may",
            "be",
            "used",
            "in",
            "the",
            "request"
        ]
    },
    {
        "id": 1122,
        "code": "\tpublic RequestEntity<?> convert(OAuth2UserRequest userRequest) {\n\t\tClientRegistration clientRegistration = userRequest.getClientRegistration();\n\t\tHttpMethod httpMethod = getHttpMethod(clientRegistration);\n\t\tHttpHeaders headers = new HttpHeaders();\n\t\theaders.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n\t\tURI uri = UriComponentsBuilder\n\t\t\t\t.fromUriString(clientRegistration.getProviderDetails().getUserInfoEndpoint().getUri()).build().toUri();\n\n\t\tRequestEntity<?> request;\n\t\tif (HttpMethod.POST.equals(httpMethod)) {\n\t\t\theaders.setContentType(DEFAULT_CONTENT_TYPE);\n\t\t\tMultiValueMap<String, String> formParameters = new LinkedMultiValueMap<>();\n\t\t\tformParameters.add(OAuth2ParameterNames.ACCESS_TOKEN, userRequest.getAccessToken().getTokenValue());\n\t\t\trequest = new RequestEntity<>(formParameters, headers, httpMethod, uri);\n\t\t}\n\t\telse {\n\t\t\theaders.setBearerAuth(userRequest.getAccessToken().getTokenValue());\n\t\t\trequest = new RequestEntity<>(headers, httpMethod, uri);\n\t\t}\n\n\t\treturn request;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "request",
            "entity",
            "used",
            "for",
            "the",
            "user",
            "info",
            "request"
        ]
    },
    {
        "id": 1123,
        "code": "\tpublic void setAnonymousAuthorizedClientRepository(\n\t\t\tOAuth2AuthorizedClientRepository anonymousAuthorizedClientRepository) {\n\t\tAssert.notNull(anonymousAuthorizedClientRepository, \"anonymousAuthorizedClientRepository cannot be null\");\n\t\tthis.anonymousAuthorizedClientRepository = anonymousAuthorizedClientRepository;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "oauth",
            "0",
            "authorized",
            "client",
            "repository",
            "used",
            "for",
            "requests",
            "that",
            "are",
            "unauthenticated",
            "or",
            "anonymous"
        ]
    },
    {
        "id": 1124,
        "code": "\tpublic void setAuthorizationRequestCustomizer(\n\t\t\tConsumer<OAuth2AuthorizationRequest.Builder> authorizationRequestCustomizer) {\n\t\tAssert.notNull(authorizationRequestCustomizer, \"authorizationRequestCustomizer cannot be null\");\n\t\tthis.authorizationRequestCustomizer = authorizationRequestCustomizer;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "consumer",
            "to",
            "be",
            "provided",
            "the",
            "oauth",
            "0",
            "authorization",
            "request"
        ]
    },
    {
        "id": 1125,
        "code": "\tprivate static String expandRedirectUri(HttpServletRequest request, ClientRegistration clientRegistration,\n\t\t\tString action) {\n\t\tMap<String, String> uriVariables = new HashMap<>();\n\t\turiVariables.put(\"registrationId\", clientRegistration.getRegistrationId());\n\t\t\n\t\tUriComponents uriComponents = UriComponentsBuilder.fromHttpUrl(UrlUtils.buildFullRequestUrl(request))\n\t\t\t\t.replacePath(request.getContextPath())\n\t\t\t\t.replaceQuery(null)\n\t\t\t\t.fragment(null)\n\t\t\t\t.build();\n\t\t\n\t\tString scheme = uriComponents.getScheme();\n\t\turiVariables.put(\"baseScheme\", (scheme != null) ? scheme : \"\");\n\t\tString host = uriComponents.getHost();\n\t\turiVariables.put(\"baseHost\", (host != null) ? host : \"\");\n\t\t\n\t\tint port = uriComponents.getPort();\n\t\turiVariables.put(\"basePort\", (port == -1) ? \"\" : \":\" + port);\n\t\tString path = uriComponents.getPath();\n\t\tif (StringUtils.hasLength(path)) {\n\t\t\tif (path.charAt(0) != PATH_DELIMITER) {\n\t\t\t\tpath = PATH_DELIMITER + path;\n\t\t\t}\n\t\t}\n\t\turiVariables.put(\"basePath\", (path != null) ? path : \"\");\n\t\turiVariables.put(\"baseUrl\", uriComponents.toUriString());\n\t\turiVariables.put(\"action\", (action != null) ? action : \"\");\n\t\treturn UriComponentsBuilder.fromUriString(clientRegistration.getRedirectUri()).buildAndExpand(uriVariables)\n\t\t\t\t.toUriString();\n\t}",
        "summary_tokens": [
            "expands",
            "the",
            "client",
            "registration",
            "get",
            "redirect",
            "uri",
            "with",
            "following",
            "provided",
            "variables",
            "br",
            "base",
            "url",
            "e"
        ]
    },
    {
        "id": 1126,
        "code": "\tprivate static void applyNonce(OAuth2AuthorizationRequest.Builder builder) {\n\t\ttry {\n\t\t\tString nonce = DEFAULT_SECURE_KEY_GENERATOR.generateKey();\n\t\t\tString nonceHash = createHash(nonce);\n\t\t\tbuilder.attributes((attrs) -> attrs.put(OidcParameterNames.NONCE, nonce));\n\t\t\tbuilder.additionalParameters((params) -> params.put(OidcParameterNames.NONCE, nonceHash));\n\t\t}\n\t\tcatch (NoSuchAlgorithmException ex) {\n\t\t}\n\t}",
        "summary_tokens": [
            "creates",
            "nonce",
            "and",
            "its",
            "hash",
            "for",
            "use",
            "in",
            "open",
            "id",
            "connect",
            "0"
        ]
    },
    {
        "id": 1127,
        "code": "\tpublic void setAuthorizedClientProvider(OAuth2AuthorizedClientProvider authorizedClientProvider) {\n\t\tAssert.notNull(authorizedClientProvider, \"authorizedClientProvider cannot be null\");\n\t\tthis.authorizedClientProvider = authorizedClientProvider;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "oauth",
            "0",
            "authorized",
            "client",
            "provider",
            "used",
            "for",
            "authorizing",
            "or",
            "re",
            "authorizing",
            "an",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1128,
        "code": "\tpublic void setContextAttributesMapper(\n\t\t\tFunction<OAuth2AuthorizeRequest, Map<String, Object>> contextAttributesMapper) {\n\t\tAssert.notNull(contextAttributesMapper, \"contextAttributesMapper cannot be null\");\n\t\tthis.contextAttributesMapper = contextAttributesMapper;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "function",
            "used",
            "for",
            "mapping",
            "attribute",
            "s",
            "from",
            "the",
            "oauth",
            "0",
            "authorize",
            "request",
            "to",
            "a",
            "map",
            "of",
            "attributes",
            "to",
            "be",
            "associated",
            "to",
            "the",
            "oauth",
            "0",
            "authorization",
            "context",
            "get",
            "attributes",
            "authorization",
            "context"
        ]
    },
    {
        "id": 1129,
        "code": "\tpublic void setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler authorizationSuccessHandler) {\n\t\tAssert.notNull(authorizationSuccessHandler, \"authorizationSuccessHandler cannot be null\");\n\t\tthis.authorizationSuccessHandler = authorizationSuccessHandler;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "oauth",
            "0",
            "authorization",
            "success",
            "handler",
            "that",
            "handles",
            "successful",
            "authorizations"
        ]
    },
    {
        "id": 1130,
        "code": "\tpublic void setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler authorizationFailureHandler) {\n\t\tAssert.notNull(authorizationFailureHandler, \"authorizationFailureHandler cannot be null\");\n\t\tthis.authorizationFailureHandler = authorizationFailureHandler;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "oauth",
            "0",
            "authorization",
            "failure",
            "handler",
            "that",
            "handles",
            "authorization",
            "failures"
        ]
    },
    {
        "id": 1131,
        "code": "\tprivate Mono<OAuth2AuthorizedClient> authorize(OAuth2AuthorizationContext authorizationContext,\n\t\t\tAuthentication principal, ServerWebExchange serverWebExchange) {\n\t\t\n\t\treturn this.authorizedClientProvider.authorize(authorizationContext)\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t.flatMap((authorizedClient) ->\n\t\t\t\t\t\tthis.authorizationSuccessHandler\n\t\t\t\t\t\t\t.onAuthorizationSuccess(authorizedClient, principal, createAttributes(serverWebExchange))\n\t\t\t\t\t\t\t.thenReturn(authorizedClient)\n\t\t\t\t)\n\t\t\t\t\n\t\t\t\t.onErrorResume(OAuth2AuthorizationException.class, (authorizationException) ->\n\t\t\t\t\t\tthis.authorizationFailureHandler\n\t\t\t\t\t\t\t\t.onAuthorizationFailure(authorizationException, principal, createAttributes(serverWebExchange))\n\t\t\t\t\t\t\t\t.then(Mono.error(authorizationException))\n\t\t\t\t);\n\t\t\n\t}",
        "summary_tokens": [
            "performs",
            "authorization",
            "and",
            "then",
            "delegates",
            "to",
            "either",
            "the",
            "authorization",
            "success",
            "handler",
            "or",
            "authorization",
            "failure",
            "handler",
            "depending",
            "on",
            "the",
            "authorization",
            "result"
        ]
    },
    {
        "id": 1132,
        "code": "\tpublic void setAuthorizedClientProvider(ReactiveOAuth2AuthorizedClientProvider authorizedClientProvider) {\n\t\tAssert.notNull(authorizedClientProvider, \"authorizedClientProvider cannot be null\");\n\t\tthis.authorizedClientProvider = authorizedClientProvider;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "reactive",
            "oauth",
            "0",
            "authorized",
            "client",
            "provider",
            "used",
            "for",
            "authorizing",
            "or",
            "re",
            "authorizing",
            "an",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1133,
        "code": "\tpublic void setContextAttributesMapper(\n\t\t\tFunction<OAuth2AuthorizeRequest, Mono<Map<String, Object>>> contextAttributesMapper) {\n\t\tAssert.notNull(contextAttributesMapper, \"contextAttributesMapper cannot be null\");\n\t\tthis.contextAttributesMapper = contextAttributesMapper;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "function",
            "used",
            "for",
            "mapping",
            "attribute",
            "s",
            "from",
            "the",
            "oauth",
            "0",
            "authorize",
            "request",
            "to",
            "a",
            "map",
            "of",
            "attributes",
            "to",
            "be",
            "associated",
            "to",
            "the",
            "oauth",
            "0",
            "authorization",
            "context",
            "get",
            "attributes",
            "authorization",
            "context"
        ]
    },
    {
        "id": 1134,
        "code": "\tpublic void setAuthorizationSuccessHandler(ReactiveOAuth2AuthorizationSuccessHandler authorizationSuccessHandler) {\n\t\tAssert.notNull(authorizationSuccessHandler, \"authorizationSuccessHandler cannot be null\");\n\t\tthis.authorizationSuccessHandler = authorizationSuccessHandler;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "handler",
            "that",
            "handles",
            "successful",
            "authorizations"
        ]
    },
    {
        "id": 1135,
        "code": "\tpublic void setAuthorizationFailureHandler(ReactiveOAuth2AuthorizationFailureHandler authorizationFailureHandler) {\n\t\tAssert.notNull(authorizationFailureHandler, \"authorizationFailureHandler cannot be null\");\n\t\tthis.authorizationFailureHandler = authorizationFailureHandler;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "handler",
            "that",
            "handles",
            "authorization",
            "failures"
        ]
    },
    {
        "id": 1136,
        "code": "\tprivate String getStateParameter(HttpServletRequest request) {\n\t\treturn request.getParameter(OAuth2ParameterNames.STATE);\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "state",
            "parameter",
            "from",
            "the",
            "http",
            "servlet",
            "request",
            "request",
            "the",
            "request",
            "to",
            "use",
            "the",
            "state",
            "parameter",
            "or",
            "null",
            "if",
            "not",
            "found"
        ]
    },
    {
        "id": 1137,
        "code": "\tpublic final void setAuthorizationRequestRepository(\n\t\t\tAuthorizationRequestRepository<OAuth2AuthorizationRequest> authorizationRequestRepository) {\n\t\tAssert.notNull(authorizationRequestRepository, \"authorizationRequestRepository cannot be null\");\n\t\tthis.authorizationRequestRepository = authorizationRequestRepository;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "repository",
            "for",
            "stored",
            "oauth",
            "0",
            "authorization",
            "request",
            "s"
        ]
    },
    {
        "id": 1138,
        "code": "\tpublic final void setRequestCache(RequestCache requestCache) {\n\t\tAssert.notNull(requestCache, \"requestCache cannot be null\");\n\t\tthis.requestCache = requestCache;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "request",
            "cache",
            "used",
            "for",
            "loading",
            "a",
            "previously",
            "saved",
            "request",
            "if",
            "available",
            "and",
            "replaying",
            "it",
            "after",
            "completing",
            "the",
            "processing",
            "of",
            "the",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1139,
        "code": "\tpublic static Consumer<OAuth2AuthorizationRequest.Builder> withPkce() {\n\t\treturn OAuth2AuthorizationRequestCustomizers::applyPkce;\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "consumer",
            "to",
            "be",
            "provided",
            "the",
            "oauth",
            "0",
            "authorization",
            "request"
        ]
    },
    {
        "id": 1140,
        "code": "\tpublic void setAuthorizationRedirectStrategy(RedirectStrategy authorizationRedirectStrategy) {\n\t\tAssert.notNull(authorizationRedirectStrategy, \"authorizationRedirectStrategy cannot be null\");\n\t\tthis.authorizationRedirectStrategy = authorizationRedirectStrategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "redirect",
            "strategy",
            "for",
            "authorization",
            "endpoint",
            "redirect",
            "uri"
        ]
    },
    {
        "id": 1141,
        "code": "\tpublic final void setAuthorizationRequestRepository(\n\t\t\tAuthorizationRequestRepository<OAuth2AuthorizationRequest> authorizationRequestRepository) {\n\t\tAssert.notNull(authorizationRequestRepository, \"authorizationRequestRepository cannot be null\");\n\t\tthis.authorizationRequestRepository = authorizationRequestRepository;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "repository",
            "used",
            "for",
            "storing",
            "oauth",
            "0",
            "authorization",
            "request",
            "s"
        ]
    },
    {
        "id": 1142,
        "code": "\tpublic final void setRequestCache(RequestCache requestCache) {\n\t\tAssert.notNull(requestCache, \"requestCache cannot be null\");\n\t\tthis.requestCache = requestCache;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "request",
            "cache",
            "used",
            "for",
            "storing",
            "the",
            "current",
            "request",
            "before",
            "redirecting",
            "the",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1143,
        "code": "\tpublic final void setAuthorizationRequestRepository(\n\t\t\tAuthorizationRequestRepository<OAuth2AuthorizationRequest> authorizationRequestRepository) {\n\t\tAssert.notNull(authorizationRequestRepository, \"authorizationRequestRepository cannot be null\");\n\t\tthis.authorizationRequestRepository = authorizationRequestRepository;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "repository",
            "for",
            "stored",
            "oauth",
            "0",
            "authorization",
            "request",
            "s"
        ]
    },
    {
        "id": 1144,
        "code": "\tpublic final void setAuthenticationResultConverter(\n\t\t\tConverter<OAuth2LoginAuthenticationToken, OAuth2AuthenticationToken> authenticationResultConverter) {\n\t\tAssert.notNull(authenticationResultConverter, \"authenticationResultConverter cannot be null\");\n\t\tthis.authenticationResultConverter = authenticationResultConverter;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "converter",
            "responsible",
            "for",
            "converting",
            "from",
            "oauth",
            "0",
            "login",
            "authentication",
            "token",
            "to",
            "oauth",
            "0",
            "authentication",
            "token",
            "authentication",
            "result"
        ]
    },
    {
        "id": 1145,
        "code": "\tpublic static Consumer<Map<String, Object>> oauth2AuthorizedClient(OAuth2AuthorizedClient authorizedClient) {\n\t\treturn (attributes) -> attributes.put(OAUTH2_AUTHORIZED_CLIENT_ATTR_NAME, authorizedClient);\n\t}",
        "summary_tokens": [
            "modifies",
            "the",
            "client",
            "request",
            "attributes",
            "to",
            "include",
            "the",
            "oauth",
            "0",
            "authorized",
            "client",
            "to",
            "be",
            "used",
            "for",
            "providing",
            "the",
            "bearer",
            "token"
        ]
    },
    {
        "id": 1146,
        "code": "\tpublic static Consumer<Map<String, Object>> serverWebExchange(ServerWebExchange serverWebExchange) {\n\t\treturn (attributes) -> attributes.put(SERVER_WEB_EXCHANGE_ATTR_NAME, serverWebExchange);\n\t}",
        "summary_tokens": [
            "modifies",
            "the",
            "client",
            "request",
            "attributes",
            "to",
            "include",
            "the",
            "server",
            "web",
            "exchange",
            "to",
            "be",
            "used",
            "for",
            "providing",
            "the",
            "bearer",
            "token"
        ]
    },
    {
        "id": 1147,
        "code": "\tpublic static Consumer<Map<String, Object>> clientRegistrationId(String clientRegistrationId) {\n\t\treturn (attributes) -> attributes.put(CLIENT_REGISTRATION_ID_ATTR_NAME, clientRegistrationId);\n\t}",
        "summary_tokens": [
            "modifies",
            "the",
            "client",
            "request",
            "attributes",
            "to",
            "include",
            "the",
            "client",
            "registration",
            "get",
            "registration",
            "id",
            "to",
            "be",
            "used",
            "to",
            "look",
            "up",
            "the",
            "oauth",
            "0",
            "authorized",
            "client"
        ]
    },
    {
        "id": 1148,
        "code": "\tpublic void setDefaultOAuth2AuthorizedClient(boolean defaultOAuth2AuthorizedClient) {\n\t\tthis.defaultOAuth2AuthorizedClient = defaultOAuth2AuthorizedClient;\n\t}",
        "summary_tokens": [
            "if",
            "true",
            "a",
            "default",
            "oauth",
            "0",
            "authorized",
            "client",
            "can",
            "be",
            "discovered",
            "from",
            "the",
            "current",
            "authentication"
        ]
    },
    {
        "id": 1149,
        "code": "\tpublic void setDefaultClientRegistrationId(String clientRegistrationId) {\n\t\tthis.defaultClientRegistrationId = clientRegistrationId;\n\t}",
        "summary_tokens": [
            "if",
            "set",
            "will",
            "be",
            "used",
            "as",
            "the",
            "default",
            "client",
            "registration",
            "get",
            "registration",
            "id"
        ]
    },
    {
        "id": 1150,
        "code": "\tprivate Mono<String> effectiveClientRegistrationId(ClientRequest request) {\n\t\t\n\t\treturn Mono.justOrEmpty(clientRegistrationId(request))\n\t\t\t\t.switchIfEmpty(Mono.justOrEmpty(this.defaultClientRegistrationId))\n\t\t\t\t.switchIfEmpty(this.clientRegistrationIdMono);\n\t\t\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "mono",
            "the",
            "emits",
            "the",
            "client",
            "registration",
            "id",
            "that",
            "is",
            "active",
            "for",
            "the",
            "given",
            "request"
        ]
    },
    {
        "id": 1151,
        "code": "\tprivate Mono<Optional<ServerWebExchange>> effectiveServerWebExchange(ClientRequest request) {\n\t\t\n\t\treturn Mono.justOrEmpty(serverWebExchange(request))\n\t\t\t\t.switchIfEmpty(this.currentServerWebExchangeMono)\n\t\t\t\t.map(Optional::of)\n\t\t\t\t.defaultIfEmpty(Optional.empty());\n\t\t\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "mono",
            "that",
            "emits",
            "an",
            "optional",
            "for",
            "the",
            "server",
            "web",
            "exchange",
            "that",
            "is",
            "active",
            "for",
            "the",
            "given",
            "request"
        ]
    },
    {
        "id": 1152,
        "code": "\tpublic void setAuthorizationFailureHandler(ReactiveOAuth2AuthorizationFailureHandler authorizationFailureHandler) {\n\t\tAssert.notNull(authorizationFailureHandler, \"authorizationFailureHandler cannot be null\");\n\t\tthis.clientResponseHandler = new AuthorizationFailureForwarder(authorizationFailureHandler);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "handler",
            "that",
            "handles",
            "authentication",
            "and",
            "authorization",
            "failures",
            "when",
            "communicating",
            "to",
            "the",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1153,
        "code": "\tpublic void setDefaultOAuth2AuthorizedClient(boolean defaultOAuth2AuthorizedClient) {\n\t\tthis.defaultOAuth2AuthorizedClient = defaultOAuth2AuthorizedClient;\n\t}",
        "summary_tokens": [
            "if",
            "true",
            "a",
            "default",
            "oauth",
            "0",
            "authorized",
            "client",
            "can",
            "be",
            "discovered",
            "from",
            "the",
            "current",
            "authentication"
        ]
    },
    {
        "id": 1154,
        "code": "\tpublic void setDefaultClientRegistrationId(String clientRegistrationId) {\n\t\tthis.defaultClientRegistrationId = clientRegistrationId;\n\t}",
        "summary_tokens": [
            "if",
            "set",
            "will",
            "be",
            "used",
            "as",
            "the",
            "default",
            "client",
            "registration",
            "get",
            "registration",
            "id"
        ]
    },
    {
        "id": 1155,
        "code": "\tpublic Consumer<WebClient.Builder> oauth2Configuration() {\n\t\treturn (builder) -> builder.defaultRequest(defaultRequest()).filter(this);\n\t}",
        "summary_tokens": [
            "configures",
            "the",
            "builder",
            "with",
            "default",
            "request",
            "and",
            "adds",
            "this",
            "as",
            "a",
            "exchange",
            "filter",
            "function",
            "the",
            "consumer",
            "to",
            "configure",
            "the",
            "builder"
        ]
    },
    {
        "id": 1156,
        "code": "\tpublic Consumer<WebClient.RequestHeadersSpec<?>> defaultRequest() {\n\t\treturn (spec) -> spec.attributes((attrs) -> {\n\t\t\tpopulateDefaultRequestResponse(attrs);\n\t\t\tpopulateDefaultAuthentication(attrs);\n\t\t});\n\t}",
        "summary_tokens": [
            "provides",
            "defaults",
            "for",
            "the",
            "http",
            "servlet",
            "request",
            "and",
            "the",
            "http",
            "servlet",
            "response",
            "using",
            "request",
            "context",
            "holder"
        ]
    },
    {
        "id": 1157,
        "code": "\tpublic static Consumer<Map<String, Object>> oauth2AuthorizedClient(OAuth2AuthorizedClient authorizedClient) {\n\t\treturn (attributes) -> {\n\t\t\tif (authorizedClient == null) {\n\t\t\t\tattributes.remove(OAUTH2_AUTHORIZED_CLIENT_ATTR_NAME);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tattributes.put(OAUTH2_AUTHORIZED_CLIENT_ATTR_NAME, authorizedClient);\n\t\t\t}\n\t\t};\n\t}",
        "summary_tokens": [
            "modifies",
            "the",
            "client",
            "request",
            "attributes",
            "to",
            "include",
            "the",
            "oauth",
            "0",
            "authorized",
            "client",
            "to",
            "be",
            "used",
            "for",
            "providing",
            "the",
            "bearer",
            "token"
        ]
    },
    {
        "id": 1158,
        "code": "\tpublic static Consumer<Map<String, Object>> clientRegistrationId(String clientRegistrationId) {\n\t\treturn (attributes) -> attributes.put(CLIENT_REGISTRATION_ID_ATTR_NAME, clientRegistrationId);\n\t}",
        "summary_tokens": [
            "modifies",
            "the",
            "client",
            "request",
            "attributes",
            "to",
            "include",
            "the",
            "client",
            "registration",
            "get",
            "registration",
            "id",
            "to",
            "be",
            "used",
            "to",
            "look",
            "up",
            "the",
            "oauth",
            "0",
            "authorized",
            "client"
        ]
    },
    {
        "id": 1159,
        "code": "\tpublic static Consumer<Map<String, Object>> authentication(Authentication authentication) {\n\t\treturn (attributes) -> attributes.put(AUTHENTICATION_ATTR_NAME, authentication);\n\t}",
        "summary_tokens": [
            "modifies",
            "the",
            "client",
            "request",
            "attributes",
            "to",
            "include",
            "the",
            "authentication",
            "used",
            "to",
            "look",
            "up",
            "and",
            "save",
            "the",
            "oauth",
            "0",
            "authorized",
            "client"
        ]
    },
    {
        "id": 1160,
        "code": "\tpublic static Consumer<Map<String, Object>> httpServletRequest(HttpServletRequest request) {\n\t\treturn (attributes) -> attributes.put(HTTP_SERVLET_REQUEST_ATTR_NAME, request);\n\t}",
        "summary_tokens": [
            "modifies",
            "the",
            "client",
            "request",
            "attributes",
            "to",
            "include",
            "the",
            "http",
            "servlet",
            "request",
            "used",
            "to",
            "look",
            "up",
            "and",
            "save",
            "the",
            "oauth",
            "0",
            "authorized",
            "client"
        ]
    },
    {
        "id": 1161,
        "code": "\tpublic static Consumer<Map<String, Object>> httpServletResponse(HttpServletResponse response) {\n\t\treturn (attributes) -> attributes.put(HTTP_SERVLET_RESPONSE_ATTR_NAME, response);\n\t}",
        "summary_tokens": [
            "modifies",
            "the",
            "client",
            "request",
            "attributes",
            "to",
            "include",
            "the",
            "http",
            "servlet",
            "response",
            "used",
            "to",
            "save",
            "the",
            "oauth",
            "0",
            "authorized",
            "client"
        ]
    },
    {
        "id": 1162,
        "code": "\tpublic void setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler authorizationFailureHandler) {\n\t\tAssert.notNull(authorizationFailureHandler, \"authorizationFailureHandler cannot be null\");\n\t\tthis.clientResponseHandler = new AuthorizationFailureForwarder(authorizationFailureHandler);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "oauth",
            "0",
            "authorization",
            "failure",
            "handler",
            "that",
            "handles",
            "authentication",
            "and",
            "authorization",
            "failures",
            "when",
            "communicating",
            "to",
            "the",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1163,
        "code": "\tpublic void setAnonymousAuthorizedClientRepository(\n\t\t\tServerOAuth2AuthorizedClientRepository anonymousAuthorizedClientRepository) {\n\t\tAssert.notNull(anonymousAuthorizedClientRepository, \"anonymousAuthorizedClientRepository cannot be null\");\n\t\tthis.anonymousAuthorizedClientRepository = anonymousAuthorizedClientRepository;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "server",
            "oauth",
            "0",
            "authorized",
            "client",
            "repository",
            "used",
            "for",
            "requests",
            "that",
            "are",
            "unauthenticated",
            "or",
            "anonymous"
        ]
    },
    {
        "id": 1164,
        "code": "\tpublic final void setAuthorizationRequestCustomizer(\n\t\t\tConsumer<OAuth2AuthorizationRequest.Builder> authorizationRequestCustomizer) {\n\t\tAssert.notNull(authorizationRequestCustomizer, \"authorizationRequestCustomizer cannot be null\");\n\t\tthis.authorizationRequestCustomizer = authorizationRequestCustomizer;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "consumer",
            "to",
            "be",
            "provided",
            "the",
            "oauth",
            "0",
            "authorization",
            "request"
        ]
    },
    {
        "id": 1165,
        "code": "\tprivate static String expandRedirectUri(ServerHttpRequest request, ClientRegistration clientRegistration) {\n\t\tMap<String, String> uriVariables = new HashMap<>();\n\t\turiVariables.put(\"registrationId\", clientRegistration.getRegistrationId());\n\t\t\n\t\tUriComponents uriComponents = UriComponentsBuilder.fromUri(request.getURI())\n\t\t\t\t.replacePath(request.getPath().contextPath().value())\n\t\t\t\t.replaceQuery(null)\n\t\t\t\t.fragment(null)\n\t\t\t\t.build();\n\t\t\n\t\tString scheme = uriComponents.getScheme();\n\t\turiVariables.put(\"baseScheme\", (scheme != null) ? scheme : \"\");\n\t\tString host = uriComponents.getHost();\n\t\turiVariables.put(\"baseHost\", (host != null) ? host : \"\");\n\t\t\n\t\tint port = uriComponents.getPort();\n\t\turiVariables.put(\"basePort\", (port == -1) ? \"\" : \":\" + port);\n\t\tString path = uriComponents.getPath();\n\t\tif (StringUtils.hasLength(path)) {\n\t\t\tif (path.charAt(0) != PATH_DELIMITER) {\n\t\t\t\tpath = PATH_DELIMITER + path;\n\t\t\t}\n\t\t}\n\t\turiVariables.put(\"basePath\", (path != null) ? path : \"\");\n\t\turiVariables.put(\"baseUrl\", uriComponents.toUriString());\n\t\tString action = \"\";\n\t\tif (AuthorizationGrantType.AUTHORIZATION_CODE.equals(clientRegistration.getAuthorizationGrantType())) {\n\t\t\taction = \"login\";\n\t\t}\n\t\turiVariables.put(\"action\", action);\n\t\t\n\t\treturn UriComponentsBuilder.fromUriString(clientRegistration.getRedirectUri())\n\t\t\t\t.buildAndExpand(uriVariables)\n\t\t\t\t.toUriString();\n\t\t\n\t}",
        "summary_tokens": [
            "expands",
            "the",
            "client",
            "registration",
            "get",
            "redirect",
            "uri",
            "with",
            "following",
            "provided",
            "variables",
            "br",
            "base",
            "url",
            "e"
        ]
    },
    {
        "id": 1166,
        "code": "\tprivate static void applyNonce(OAuth2AuthorizationRequest.Builder builder) {\n\t\ttry {\n\t\t\tString nonce = DEFAULT_SECURE_KEY_GENERATOR.generateKey();\n\t\t\tString nonceHash = createHash(nonce);\n\t\t\tbuilder.attributes((attrs) -> attrs.put(OidcParameterNames.NONCE, nonce));\n\t\t\tbuilder.additionalParameters((params) -> params.put(OidcParameterNames.NONCE, nonceHash));\n\t\t}\n\t\tcatch (NoSuchAlgorithmException ex) {\n\t\t}\n\t}",
        "summary_tokens": [
            "creates",
            "nonce",
            "and",
            "its",
            "hash",
            "for",
            "use",
            "in",
            "open",
            "id",
            "connect",
            "0"
        ]
    },
    {
        "id": 1167,
        "code": "\tpublic final void setAuthorizationRequestRepository(\n\t\t\tServerAuthorizationRequestRepository<OAuth2AuthorizationRequest> authorizationRequestRepository) {\n\t\tAssert.notNull(authorizationRequestRepository, \"authorizationRequestRepository cannot be null\");\n\t\tthis.authorizationRequestRepository = authorizationRequestRepository;\n\t\tupdateDefaultAuthenticationConverter();\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "repository",
            "used",
            "for",
            "storing",
            "oauth",
            "0",
            "authorization",
            "request",
            "s"
        ]
    },
    {
        "id": 1168,
        "code": "\tpublic final void setRequestCache(ServerRequestCache requestCache) {\n\t\tAssert.notNull(requestCache, \"requestCache cannot be null\");\n\t\tthis.requestCache = requestCache;\n\t\tupdateDefaultAuthenticationSuccessHandler();\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "server",
            "request",
            "cache",
            "used",
            "for",
            "loading",
            "a",
            "previously",
            "saved",
            "request",
            "if",
            "available",
            "and",
            "replaying",
            "it",
            "after",
            "completing",
            "the",
            "processing",
            "of",
            "the",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1169,
        "code": "\tpublic void setAuthorizationRedirectStrategy(ServerRedirectStrategy authorizationRedirectStrategy) {\n\t\tAssert.notNull(authorizationRedirectStrategy, \"authorizationRedirectStrategy cannot be null\");\n\t\tthis.authorizationRedirectStrategy = authorizationRedirectStrategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "redirect",
            "strategy",
            "for",
            "authorization",
            "endpoint",
            "redirect",
            "uri"
        ]
    },
    {
        "id": 1170,
        "code": "\tpublic final void setAuthorizationRequestRepository(\n\t\t\tServerAuthorizationRequestRepository<OAuth2AuthorizationRequest> authorizationRequestRepository) {\n\t\tAssert.notNull(authorizationRequestRepository, \"authorizationRequestRepository cannot be null\");\n\t\tthis.authorizationRequestRepository = authorizationRequestRepository;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "repository",
            "used",
            "for",
            "storing",
            "oauth",
            "0",
            "authorization",
            "request",
            "s"
        ]
    },
    {
        "id": 1171,
        "code": "\tpublic void setRequestCache(ServerRequestCache requestCache) {\n\t\tAssert.notNull(requestCache, \"requestCache cannot be null\");\n\t\tthis.requestCache = requestCache;\n\t}",
        "summary_tokens": [
            "the",
            "request",
            "cache",
            "to",
            "use",
            "to",
            "save",
            "the",
            "request",
            "before",
            "sending",
            "a",
            "redirect"
        ]
    },
    {
        "id": 1172,
        "code": "\tpublic void setAuthorizationRequestRepository(\n\t\t\tServerAuthorizationRequestRepository<OAuth2AuthorizationRequest> authorizationRequestRepository) {\n\t\tAssert.notNull(authorizationRequestRepository, \"authorizationRequestRepository cannot be null\");\n\t\tthis.authorizationRequestRepository = authorizationRequestRepository;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "server",
            "authorization",
            "request",
            "repository",
            "to",
            "be",
            "used"
        ]
    },
    {
        "id": 1173,
        "code": "\tprivate String getStateParameter(ServerWebExchange exchange) {\n\t\tAssert.notNull(exchange, \"exchange cannot be null\");\n\t\treturn exchange.getRequest().getQueryParams().getFirst(OAuth2ParameterNames.STATE);\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "state",
            "parameter",
            "from",
            "the",
            "server",
            "http",
            "request",
            "exchange",
            "the",
            "exchange",
            "to",
            "use",
            "the",
            "state",
            "parameter",
            "or",
            "null",
            "if",
            "not",
            "found"
        ]
    },
    {
        "id": 1174,
        "code": "\tpublic void issuerWhenOidcFallbackAllInformationThenSuccess() throws Exception {\n\t\tClientRegistration registration = registrationOidcFallback(\"issuer1\", null).build();\n\t\tClientRegistration.ProviderDetails provider = registration.getProviderDetails();\n\t\tassertIssuerMetadata(registration, provider);\n\t\tassertThat(provider.getUserInfoEndpoint().getUri()).isEqualTo(\"https://example.com/oauth2/v3/userinfo\");\n\t}",
        "summary_tokens": [
            "test",
            "compatibility",
            "with",
            "open",
            "id",
            "v",
            "0",
            "discovery",
            "endpoint",
            "by",
            "making",
            "a",
            "a",
            "href",
            "https",
            "openid"
        ]
    },
    {
        "id": 1175,
        "code": "\tprivate ClientRegistration.Builder registrationOidcFallback(String path, String body) throws Exception {\n\t\tthis.issuer = createIssuerFromServer(path);\n\t\tthis.response.put(\"issuer\", this.issuer);\n\t\tString responseBody = (body != null) ? body : this.mapper.writeValueAsString(this.response);\n\t\tfinal Dispatcher dispatcher = new Dispatcher() {\n\t\t\t@Override\n\t\t\tpublic MockResponse dispatch(RecordedRequest request) {\n\t\t\t\tswitch (request.getPath()) {\n\t\t\t\tcase \"/issuer1/.well-known/openid-configuration\":\n\t\t\t\tcase \"/.well-known/openid-configuration/\":\n\t\t\t\t\treturn buildSuccessMockResponse(responseBody);\n\t\t\t\t}\n\t\t\t\treturn new MockResponse().setResponseCode(404);\n\t\t\t}\n\t\t};\n\t\tthis.server.setDispatcher(dispatcher);\n\t\treturn ClientRegistrations.fromIssuerLocation(this.issuer).clientId(\"client-id\").clientSecret(\"client-secret\");\n\t}",
        "summary_tokens": [
            "simulates",
            "a",
            "situation",
            "when",
            "the",
            "client",
            "registration",
            "is",
            "used",
            "with",
            "a",
            "legacy",
            "application",
            "where",
            "the",
            "oidc",
            "discovery",
            "endpoint",
            "is",
            "issuer",
            "0"
        ]
    },
    {
        "id": 1176,
        "code": "\tpublic void requestWhenUnauthorizedThenReAuthorize() {\n\t\t\n\t\tString accessTokenResponse = \"{\\n\"\n\t\t\t+ \"   \\\"access_token\\\": \\\"access-token-1234\\\",\\n\"\n\t\t\t+ \"   \\\"token_type\\\": \\\"bearer\\\",\\n\"\n\t\t\t+ \"   \\\"expires_in\\\": \\\"3600\\\",\\n\"\n\t\t\t+ \"   \\\"scope\\\": \\\"read write\\\"\\n\"\n\t\t\t+ \"}\\n\";\n\t\tString clientResponse = \"{\\n\"\n\t\t\t+ \"   \\\"attribute1\\\": \\\"value1\\\",\\n\"\n\t\t\t+ \"   \\\"attribute2\\\": \\\"value2\\\"\\n\"\n\t\t\t+ \"}\\n\";\n\t\t\n\t\tthis.server.enqueue(new MockResponse().setResponseCode(HttpStatus.UNAUTHORIZED.value()));\n\t\tthis.server.enqueue(jsonResponse(accessTokenResponse));\n\t\tthis.server.enqueue(jsonResponse(clientResponse));\n\t\tClientRegistration clientRegistration = TestClientRegistrations.clientCredentials().tokenUri(this.serverUrl)\n\t\t\t\t.build();\n\t\tgiven(this.clientRegistrationRepository.findByRegistrationId(eq(clientRegistration.getRegistrationId())))\n\t\t\t\t.willReturn(Mono.just(clientRegistration));\n\t\tOAuth2AccessToken accessToken = TestOAuth2AccessTokens.scopes(\"read\", \"write\");\n\t\tOAuth2RefreshToken refreshToken = TestOAuth2RefreshTokens.refreshToken();\n\t\tOAuth2AuthorizedClient authorizedClient = new OAuth2AuthorizedClient(clientRegistration,\n\t\t\t\tthis.authentication.getName(), accessToken, refreshToken);\n\t\tdoReturn(Mono.just(authorizedClient)).doReturn(Mono.empty()).when(this.authorizedClientRepository)\n\t\t\t\t.loadAuthorizedClient(eq(clientRegistration.getRegistrationId()), eq(this.authentication),\n\t\t\t\t\t\teq(this.exchange));\n\t\t\n\t\tMono<String> requestMono = this.webClient.get()\n\t\t\t\t.uri(this.serverUrl)\n\t\t\t\t.attributes(ServletOAuth2AuthorizedClientExchangeFilterFunction\n\t\t\t\t\t\t.clientRegistrationId(clientRegistration.getRegistrationId()))\n\t\t\t\t.retrieve()\n\t\t\t\t.bodyToMono(String.class)\n\t\t\t\t.contextWrite(Context.of(ServerWebExchange.class, this.exchange))\n\t\t\t\t.contextWrite(ReactiveSecurityContextHolder.withAuthentication(this.authentication));\n\t\t\n\t\t\n\t\t\n\t\tassertThatExceptionOfType(WebClientResponseException.class)\n\t\t\t\t.isThrownBy(requestMono::block)\n\t\t\t\t.satisfies((ex) -> assertThat(ex.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED));\n\t\t\n\t\tassertThat(this.server.getRequestCount()).isEqualTo(1);\n\t\tverify(this.authorizedClientRepository, never()).saveAuthorizedClient(any(), any(), any());\n\t\tverify(this.authorizedClientRepository).removeAuthorizedClient(eq(clientRegistration.getRegistrationId()),\n\t\t\t\teq(this.authentication), eq(this.exchange));\n\t\t\n\t\trequestMono.block();\n\t\tassertThat(this.server.getRequestCount()).isEqualTo(3);\n\t\tArgumentCaptor<OAuth2AuthorizedClient> authorizedClientCaptor = ArgumentCaptor\n\t\t\t\t.forClass(OAuth2AuthorizedClient.class);\n\t\tverify(this.authorizedClientRepository).saveAuthorizedClient(authorizedClientCaptor.capture(),\n\t\t\t\teq(this.authentication), eq(this.exchange));\n\t\tassertThat(authorizedClientCaptor.getValue().getClientRegistration()).isSameAs(clientRegistration);\n\t}",
        "summary_tokens": [
            "when",
            "a",
            "non",
            "expired",
            "oauth",
            "0",
            "authorized",
            "client",
            "exists",
            "but",
            "the",
            "resource",
            "server",
            "returns",
            "0",
            "then",
            "remove",
            "the",
            "oauth",
            "0",
            "authorized",
            "client",
            "from",
            "the",
            "repository"
        ]
    },
    {
        "id": 1177,
        "code": "\tpublic String getTokenValue() {\n\t\treturn this.tokenValue;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "token",
            "value"
        ]
    },
    {
        "id": 1178,
        "code": "\tpublic Instant getIssuedAt() {\n\t\treturn this.issuedAt;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "time",
            "at",
            "which",
            "the",
            "token",
            "was",
            "issued"
        ]
    },
    {
        "id": 1179,
        "code": "\tpublic Instant getExpiresAt() {\n\t\treturn this.expiresAt;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "expiration",
            "time",
            "on",
            "or",
            "after",
            "which",
            "the",
            "token",
            "must",
            "not",
            "be",
            "accepted"
        ]
    },
    {
        "id": 1180,
        "code": "\tpublic String getValue() {\n\t\treturn this.value;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "of",
            "the",
            "authentication",
            "method",
            "type"
        ]
    },
    {
        "id": 1181,
        "code": "\tpublic String getValue() {\n\t\treturn this.value;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "of",
            "the",
            "authorization",
            "grant",
            "type"
        ]
    },
    {
        "id": 1182,
        "code": "\tdefault <T> T getClaim(String claim) {\n\t\treturn !hasClaim(claim) ? null : (T) getClaims().get(claim);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "claim",
            "value",
            "as",
            "a",
            "t",
            "type"
        ]
    },
    {
        "id": 1183,
        "code": "\tdefault boolean hasClaim(String claim) {\n\t\tAssert.notNull(claim, \"claim cannot be null\");\n\t\treturn getClaims().containsKey(claim);\n\t}",
        "summary_tokens": [
            "returns",
            "true",
            "if",
            "the",
            "claim",
            "exists",
            "in",
            "get",
            "claims",
            "otherwise",
            "false"
        ]
    },
    {
        "id": 1184,
        "code": "\tdefault String getClaimAsString(String claim) {\n\t\treturn !hasClaim(claim) ? null\n\t\t\t\t: ClaimConversionService.getSharedInstance().convert(getClaims().get(claim), String.class);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "claim",
            "value",
            "as",
            "a",
            "string",
            "or",
            "null",
            "if",
            "it",
            "does",
            "not",
            "exist",
            "or",
            "is",
            "equal",
            "to",
            "null"
        ]
    },
    {
        "id": 1185,
        "code": "\tdefault Boolean getClaimAsBoolean(String claim) {\n\t\tif (!hasClaim(claim)) {\n\t\t\treturn null;\n\t\t}\n\t\tObject claimValue = getClaims().get(claim);\n\t\tBoolean convertedValue = ClaimConversionService.getSharedInstance().convert(claimValue, Boolean.class);\n\t\tAssert.notNull(convertedValue,\n\t\t\t\t() -> \"Unable to convert claim '\" + claim + \"' of type '\" + claimValue.getClass() + \"' to Boolean.\");\n\t\treturn convertedValue;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "claim",
            "value",
            "as",
            "a",
            "boolean",
            "or",
            "null",
            "if",
            "the",
            "claim",
            "does",
            "not",
            "exist"
        ]
    },
    {
        "id": 1186,
        "code": "\tdefault Instant getClaimAsInstant(String claim) {\n\t\tif (!hasClaim(claim)) {\n\t\t\treturn null;\n\t\t}\n\t\tObject claimValue = getClaims().get(claim);\n\t\tInstant convertedValue = ClaimConversionService.getSharedInstance().convert(claimValue, Instant.class);\n\t\tAssert.isTrue(convertedValue != null,\n\t\t\t\t() -> \"Unable to convert claim '\" + claim + \"' of type '\" + claimValue.getClass() + \"' to Instant.\");\n\t\treturn convertedValue;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "claim",
            "value",
            "as",
            "an",
            "instant",
            "or",
            "null",
            "if",
            "it",
            "does",
            "not",
            "exist"
        ]
    },
    {
        "id": 1187,
        "code": "\tdefault URL getClaimAsURL(String claim) {\n\t\tif (!hasClaim(claim)) {\n\t\t\treturn null;\n\t\t}\n\t\tObject claimValue = getClaims().get(claim);\n\t\tURL convertedValue = ClaimConversionService.getSharedInstance().convert(claimValue, URL.class);\n\t\tAssert.isTrue(convertedValue != null,\n\t\t\t\t() -> \"Unable to convert claim '\" + claim + \"' of type '\" + claimValue.getClass() + \"' to URL.\");\n\t\treturn convertedValue;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "claim",
            "value",
            "as",
            "an",
            "url",
            "or",
            "null",
            "if",
            "it",
            "does",
            "not",
            "exist"
        ]
    },
    {
        "id": 1188,
        "code": "\tdefault Map<String, Object> getClaimAsMap(String claim) {\n\t\tif (!hasClaim(claim)) {\n\t\t\treturn null;\n\t\t}\n\t\tfinal TypeDescriptor sourceDescriptor = TypeDescriptor.valueOf(Object.class);\n\t\tfinal TypeDescriptor targetDescriptor = TypeDescriptor.map(Map.class, TypeDescriptor.valueOf(String.class),\n\t\t\t\tTypeDescriptor.valueOf(Object.class));\n\t\tObject claimValue = getClaims().get(claim);\n\t\tMap<String, Object> convertedValue = (Map<String, Object>) ClaimConversionService.getSharedInstance()\n\t\t\t\t.convert(claimValue, sourceDescriptor, targetDescriptor);\n\t\tAssert.isTrue(convertedValue != null,\n\t\t\t\t() -> \"Unable to convert claim '\" + claim + \"' of type '\" + claimValue.getClass() + \"' to Map.\");\n\t\treturn convertedValue;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "claim",
            "value",
            "as",
            "a",
            "map",
            "string",
            "object",
            "or",
            "null",
            "if",
            "the",
            "claim",
            "does",
            "not",
            "exist"
        ]
    },
    {
        "id": 1189,
        "code": "\tdefault List<String> getClaimAsStringList(String claim) {\n\t\tif (!hasClaim(claim)) {\n\t\t\treturn null;\n\t\t}\n\t\tfinal TypeDescriptor sourceDescriptor = TypeDescriptor.valueOf(Object.class);\n\t\tfinal TypeDescriptor targetDescriptor = TypeDescriptor.collection(List.class,\n\t\t\t\tTypeDescriptor.valueOf(String.class));\n\t\tObject claimValue = getClaims().get(claim);\n\t\tList<String> convertedValue = (List<String>) ClaimConversionService.getSharedInstance().convert(claimValue,\n\t\t\t\tsourceDescriptor, targetDescriptor);\n\t\tAssert.isTrue(convertedValue != null,\n\t\t\t\t() -> \"Unable to convert claim '\" + claim + \"' of type '\" + claimValue.getClass() + \"' to List.\");\n\t\treturn convertedValue;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "claim",
            "value",
            "as",
            "a",
            "list",
            "string",
            "or",
            "null",
            "if",
            "the",
            "claim",
            "does",
            "not",
            "exist"
        ]
    },
    {
        "id": 1190,
        "code": "\tpublic String getValue() {\n\t\treturn this.value;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "of",
            "the",
            "client",
            "authentication",
            "method"
        ]
    },
    {
        "id": 1191,
        "code": "\tpublic Map<String, Object> getAttributes() {\n\t\treturn this.attributes;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "attributes",
            "of",
            "the",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1192,
        "code": "\tpublic TokenType getTokenType() {\n\t\treturn this.tokenType;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "token",
            "type",
            "token",
            "type"
        ]
    },
    {
        "id": 1193,
        "code": "\tpublic Set<String> getScopes() {\n\t\treturn this.scopes;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "scope",
            "s",
            "associated",
            "to",
            "the",
            "token"
        ]
    },
    {
        "id": 1194,
        "code": "\tdefault <A> A getAttribute(String name) {\n\t\treturn (A) getAttributes().get(name);\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1195,
        "code": "\tpublic OAuth2Error getError() {\n\t\treturn this.error;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "oauth",
            "0",
            "error",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1196,
        "code": "\tpublic OAuth2Error getError() {\n\t\treturn this.error;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "oauth",
            "0",
            "error",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1197,
        "code": "\tpublic final String getErrorCode() {\n\t\treturn this.errorCode;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "error",
            "code"
        ]
    },
    {
        "id": 1198,
        "code": "\tpublic final String getDescription() {\n\t\treturn this.description;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "error",
            "description"
        ]
    },
    {
        "id": 1199,
        "code": "\tpublic final String getUri() {\n\t\treturn this.uri;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "error",
            "uri"
        ]
    },
    {
        "id": 1200,
        "code": "\tdefault Instant getIssuedAt() {\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "time",
            "at",
            "which",
            "the",
            "token",
            "was",
            "issued"
        ]
    },
    {
        "id": 1201,
        "code": "\tdefault Instant getExpiresAt() {\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "expiration",
            "time",
            "on",
            "or",
            "after",
            "which",
            "the",
            "token",
            "must",
            "not",
            "be",
            "accepted"
        ]
    },
    {
        "id": 1202,
        "code": "\tdefault boolean isActive() {\n\t\treturn Boolean.TRUE.equals(getClaimAsBoolean(OAuth2TokenIntrospectionClaimNames.ACTIVE));\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "indicator",
            "active",
            "whether",
            "or",
            "not",
            "the",
            "token",
            "is",
            "currently",
            "active",
            "the",
            "indicator",
            "whether",
            "or",
            "not",
            "the",
            "token",
            "is",
            "currently",
            "active"
        ]
    },
    {
        "id": 1203,
        "code": "\tdefault String getUsername() {\n\t\treturn getClaimAsString(OAuth2TokenIntrospectionClaimNames.USERNAME);\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "human",
            "readable",
            "identifier",
            "username",
            "for",
            "the",
            "resource",
            "owner",
            "that",
            "authorized",
            "the",
            "token",
            "a",
            "human",
            "readable",
            "identifier",
            "for",
            "the",
            "resource",
            "owner",
            "that",
            "authorized",
            "the",
            "token"
        ]
    },
    {
        "id": 1204,
        "code": "\tdefault String getClientId() {\n\t\treturn getClaimAsString(OAuth2TokenIntrospectionClaimNames.CLIENT_ID);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "client",
            "identifier",
            "client",
            "id",
            "for",
            "the",
            "token",
            "the",
            "client",
            "identifier",
            "for",
            "the",
            "token"
        ]
    },
    {
        "id": 1205,
        "code": "\tdefault List<String> getScopes() {\n\t\treturn getClaimAsStringList(OAuth2TokenIntrospectionClaimNames.SCOPE);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "scopes",
            "scope",
            "associated",
            "with",
            "the",
            "token",
            "the",
            "scopes",
            "associated",
            "with",
            "the",
            "token"
        ]
    },
    {
        "id": 1206,
        "code": "\tdefault String getTokenType() {\n\t\treturn getClaimAsString(OAuth2TokenIntrospectionClaimNames.TOKEN_TYPE);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "type",
            "of",
            "the",
            "token",
            "token",
            "type",
            "for",
            "example",
            "bearer"
        ]
    },
    {
        "id": 1207,
        "code": "\tdefault Instant getExpiresAt() {\n\t\treturn getClaimAsInstant(OAuth2TokenIntrospectionClaimNames.EXP);\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "timestamp",
            "exp",
            "indicating",
            "when",
            "the",
            "token",
            "expires",
            "a",
            "timestamp",
            "indicating",
            "when",
            "the",
            "token",
            "expires"
        ]
    },
    {
        "id": 1208,
        "code": "\tdefault Instant getIssuedAt() {\n\t\treturn getClaimAsInstant(OAuth2TokenIntrospectionClaimNames.IAT);\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "timestamp",
            "iat",
            "indicating",
            "when",
            "the",
            "token",
            "was",
            "issued",
            "a",
            "timestamp",
            "indicating",
            "when",
            "the",
            "token",
            "was",
            "issued"
        ]
    },
    {
        "id": 1209,
        "code": "\tdefault Instant getNotBefore() {\n\t\treturn getClaimAsInstant(OAuth2TokenIntrospectionClaimNames.NBF);\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "timestamp",
            "nbf",
            "indicating",
            "when",
            "the",
            "token",
            "is",
            "not",
            "to",
            "be",
            "used",
            "before",
            "a",
            "timestamp",
            "indicating",
            "when",
            "the",
            "token",
            "is",
            "not",
            "to",
            "be",
            "used",
            "before"
        ]
    },
    {
        "id": 1210,
        "code": "\tdefault String getSubject() {\n\t\treturn getClaimAsString(OAuth2TokenIntrospectionClaimNames.SUB);\n\t}",
        "summary_tokens": [
            "returns",
            "usually",
            "a",
            "machine",
            "readable",
            "identifier",
            "sub",
            "of",
            "the",
            "resource",
            "owner",
            "who",
            "authorized",
            "the",
            "token",
            "usually",
            "a",
            "machine",
            "readable",
            "identifier",
            "of",
            "the",
            "resource",
            "owner",
            "who",
            "authorized",
            "the",
            "token"
        ]
    },
    {
        "id": 1211,
        "code": "\tdefault List<String> getAudience() {\n\t\treturn getClaimAsStringList(OAuth2TokenIntrospectionClaimNames.AUD);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "intended",
            "audience",
            "aud",
            "for",
            "the",
            "token",
            "the",
            "intended",
            "audience",
            "for",
            "the",
            "token"
        ]
    },
    {
        "id": 1212,
        "code": "\tdefault URL getIssuer() {\n\t\treturn getClaimAsURL(OAuth2TokenIntrospectionClaimNames.ISS);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "issuer",
            "iss",
            "of",
            "the",
            "token",
            "the",
            "issuer",
            "of",
            "the",
            "token"
        ]
    },
    {
        "id": 1213,
        "code": "\tdefault String getId() {\n\t\treturn getClaimAsString(OAuth2TokenIntrospectionClaimNames.JTI);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "identifier",
            "jti",
            "for",
            "the",
            "token",
            "the",
            "identifier",
            "for",
            "the",
            "token"
        ]
    },
    {
        "id": 1214,
        "code": "\tpublic boolean hasErrors() {\n\t\treturn !this.errors.isEmpty();\n\t}",
        "summary_tokens": [
            "say",
            "whether",
            "this",
            "result",
            "indicates",
            "success",
            "whether",
            "this",
            "result",
            "has",
            "errors"
        ]
    },
    {
        "id": 1215,
        "code": "\tpublic Collection<OAuth2Error> getErrors() {\n\t\treturn this.errors;\n\t}",
        "summary_tokens": [
            "return",
            "error",
            "details",
            "regarding",
            "the",
            "validation",
            "attempt",
            "the",
            "collection",
            "of",
            "results",
            "in",
            "this",
            "result",
            "if",
            "any",
            "returns",
            "an",
            "empty",
            "list",
            "otherwise"
        ]
    },
    {
        "id": 1216,
        "code": "\tpublic static OAuth2TokenValidatorResult success() {\n\t\treturn NO_ERRORS;\n\t}",
        "summary_tokens": [
            "construct",
            "a",
            "successful",
            "oauth",
            "0",
            "token",
            "validator",
            "result",
            "an",
            "oauth",
            "0",
            "token",
            "validator",
            "result",
            "with",
            "no",
            "errors"
        ]
    },
    {
        "id": 1217,
        "code": "\tpublic static OAuth2TokenValidatorResult failure(Collection<OAuth2Error> errors) {\n\t\treturn (errors.isEmpty()) ? NO_ERRORS : new OAuth2TokenValidatorResult(errors);\n\t}",
        "summary_tokens": [
            "construct",
            "a",
            "failure",
            "oauth",
            "0",
            "token",
            "validator",
            "result",
            "with",
            "the",
            "provided",
            "detail",
            "errors",
            "the",
            "list",
            "of",
            "errors",
            "an",
            "oauth",
            "0",
            "token",
            "validator",
            "result",
            "with",
            "the",
            "errors",
            "specified"
        ]
    },
    {
        "id": 1218,
        "code": "\tpublic static ClaimConversionService getSharedInstance() {\n\t\tClaimConversionService sharedInstance = ClaimConversionService.sharedInstance;\n\t\tif (sharedInstance == null) {\n\t\t\tsynchronized (ClaimConversionService.class) {\n\t\t\t\tsharedInstance = ClaimConversionService.sharedInstance;\n\t\t\t\tif (sharedInstance == null) {\n\t\t\t\t\tsharedInstance = new ClaimConversionService();\n\t\t\t\t\tClaimConversionService.sharedInstance = sharedInstance;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn sharedInstance;\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "shared",
            "instance",
            "of",
            "claim",
            "conversion",
            "service"
        ]
    },
    {
        "id": 1219,
        "code": "\tpublic static void addConverters(ConverterRegistry converterRegistry) {\n\t\tconverterRegistry.addConverter(new ObjectToStringConverter());\n\t\tconverterRegistry.addConverter(new ObjectToBooleanConverter());\n\t\tconverterRegistry.addConverter(new ObjectToInstantConverter());\n\t\tconverterRegistry.addConverter(new ObjectToURLConverter());\n\t\tconverterRegistry.addConverter(new ObjectToListStringConverter());\n\t\tconverterRegistry.addConverter(new ObjectToMapStringObjectConverter());\n\t}",
        "summary_tokens": [
            "adds",
            "the",
            "converters",
            "that",
            "provide",
            "type",
            "conversion",
            "for",
            "claim",
            "values",
            "to",
            "the",
            "provided",
            "converter",
            "registry"
        ]
    },
    {
        "id": 1220,
        "code": "\tpublic OAuth2AccessToken getAccessToken() {\n\t\treturn this.accessToken;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "oauth",
            "0",
            "access",
            "token",
            "access",
            "token"
        ]
    },
    {
        "id": 1221,
        "code": "\tpublic @Nullable OAuth2RefreshToken getRefreshToken() {\n\t\treturn this.refreshToken;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "oauth",
            "0",
            "refresh",
            "token",
            "refresh",
            "token"
        ]
    },
    {
        "id": 1222,
        "code": "\tpublic Map<String, Object> getAdditionalParameters() {\n\t\treturn this.additionalParameters;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "additional",
            "parameters",
            "returned",
            "in",
            "the",
            "response"
        ]
    },
    {
        "id": 1223,
        "code": "\tpublic static Builder withToken(String tokenValue) {\n\t\treturn new Builder(tokenValue);\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "new",
            "builder",
            "initialized",
            "with",
            "the",
            "provided",
            "access",
            "token",
            "value"
        ]
    },
    {
        "id": 1224,
        "code": "\tpublic static Builder withResponse(OAuth2AccessTokenResponse response) {\n\t\treturn new Builder(response);\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "new",
            "builder",
            "initialized",
            "with",
            "the",
            "provided",
            "response"
        ]
    },
    {
        "id": 1225,
        "code": "\tpublic OAuth2AuthorizationRequest getAuthorizationRequest() {\n\t\treturn this.authorizationRequest;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "oauth",
            "0",
            "authorization",
            "request",
            "authorization",
            "request"
        ]
    },
    {
        "id": 1226,
        "code": "\tpublic OAuth2AuthorizationResponse getAuthorizationResponse() {\n\t\treturn this.authorizationResponse;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "oauth",
            "0",
            "authorization",
            "response",
            "authorization",
            "response"
        ]
    },
    {
        "id": 1227,
        "code": "\tpublic String getAuthorizationUri() {\n\t\treturn this.authorizationUri;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "uri",
            "for",
            "the",
            "authorization",
            "endpoint"
        ]
    },
    {
        "id": 1228,
        "code": "\tpublic AuthorizationGrantType getGrantType() {\n\t\treturn this.authorizationGrantType;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "authorization",
            "grant",
            "type",
            "grant",
            "type"
        ]
    },
    {
        "id": 1229,
        "code": "\tpublic OAuth2AuthorizationResponseType getResponseType() {\n\t\treturn this.responseType;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "oauth",
            "0",
            "authorization",
            "response",
            "type",
            "response",
            "type"
        ]
    },
    {
        "id": 1230,
        "code": "\tpublic String getClientId() {\n\t\treturn this.clientId;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "client",
            "identifier"
        ]
    },
    {
        "id": 1231,
        "code": "\tpublic String getRedirectUri() {\n\t\treturn this.redirectUri;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "uri",
            "for",
            "the",
            "redirection",
            "endpoint"
        ]
    },
    {
        "id": 1232,
        "code": "\tpublic Set<String> getScopes() {\n\t\treturn this.scopes;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "scope",
            "s"
        ]
    },
    {
        "id": 1233,
        "code": "\tpublic Map<String, Object> getAdditionalParameters() {\n\t\treturn this.additionalParameters;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "additional",
            "parameter",
            "s",
            "used",
            "in",
            "the",
            "request"
        ]
    },
    {
        "id": 1234,
        "code": "\tpublic Map<String, Object> getAttributes() {\n\t\treturn this.attributes;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "attribute",
            "s",
            "associated",
            "to",
            "the",
            "request"
        ]
    },
    {
        "id": 1235,
        "code": "\tpublic <T> T getAttribute(String name) {\n\t\treturn (T) this.getAttributes().get(name);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "of",
            "an",
            "attribute",
            "associated",
            "to",
            "the",
            "request"
        ]
    },
    {
        "id": 1236,
        "code": "\tpublic String getAuthorizationRequestUri() {\n\t\treturn this.authorizationRequestUri;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "uri",
            "string",
            "representation",
            "of",
            "the",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1237,
        "code": "\tpublic static Builder authorizationCode() {\n\t\treturn new Builder(AuthorizationGrantType.AUTHORIZATION_CODE);\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "new",
            "builder",
            "initialized",
            "with",
            "the",
            "authorization",
            "code",
            "grant",
            "type"
        ]
    },
    {
        "id": 1238,
        "code": "\tpublic static Builder from(OAuth2AuthorizationRequest authorizationRequest) {\n\t\tAssert.notNull(authorizationRequest, \"authorizationRequest cannot be null\");\n\t\t\n\t\treturn new Builder(authorizationRequest.getGrantType())\n\t\t\t\t.authorizationUri(authorizationRequest.getAuthorizationUri())\n\t\t\t\t.clientId(authorizationRequest.getClientId())\n\t\t\t\t.redirectUri(authorizationRequest.getRedirectUri())\n\t\t\t\t.scopes(authorizationRequest.getScopes())\n\t\t\t\t.state(authorizationRequest.getState())\n\t\t\t\t.additionalParameters(authorizationRequest.getAdditionalParameters())\n\t\t\t\t.attributes(authorizationRequest.getAttributes());\n\t\t\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "new",
            "builder",
            "initialized",
            "with",
            "the",
            "values",
            "from",
            "the",
            "provided",
            "authorization",
            "request"
        ]
    },
    {
        "id": 1239,
        "code": "\tpublic String getRedirectUri() {\n\t\treturn this.redirectUri;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "uri",
            "where",
            "the",
            "response",
            "was",
            "redirected",
            "to"
        ]
    },
    {
        "id": 1240,
        "code": "\tpublic String getCode() {\n\t\treturn this.code;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "authorization",
            "code"
        ]
    },
    {
        "id": 1241,
        "code": "\tpublic OAuth2Error getError() {\n\t\treturn this.error;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "oauth",
            "0",
            "error",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1242,
        "code": "\tpublic boolean statusOk() {\n\t\treturn !this.statusError();\n\t}",
        "summary_tokens": [
            "returns",
            "true",
            "if",
            "the",
            "authorization",
            "request",
            "succeeded",
            "otherwise",
            "false"
        ]
    },
    {
        "id": 1243,
        "code": "\tpublic boolean statusError() {\n\t\treturn (this.error != null && this.error.getErrorCode() != null);\n\t}",
        "summary_tokens": [
            "returns",
            "true",
            "if",
            "the",
            "authorization",
            "request",
            "failed",
            "otherwise",
            "false"
        ]
    },
    {
        "id": 1244,
        "code": "\tpublic static Builder success(String code) {\n\t\tAssert.hasText(code, \"code cannot be empty\");\n\t\treturn new Builder().code(code);\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "new",
            "builder",
            "initialized",
            "with",
            "the",
            "authorization",
            "code"
        ]
    },
    {
        "id": 1245,
        "code": "\tpublic static Builder error(String errorCode) {\n\t\tAssert.hasText(errorCode, \"errorCode cannot be empty\");\n\t\treturn new Builder().errorCode(errorCode);\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "new",
            "builder",
            "initialized",
            "with",
            "the",
            "error",
            "code"
        ]
    },
    {
        "id": 1246,
        "code": "\tpublic String getValue() {\n\t\treturn this.value;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "of",
            "the",
            "authorization",
            "response",
            "type"
        ]
    },
    {
        "id": 1247,
        "code": "\tpublic final void setAccessTokenResponseConverter(\n\t\t\tConverter<Map<String, Object>, OAuth2AccessTokenResponse> accessTokenResponseConverter) {\n\t\tAssert.notNull(accessTokenResponseConverter, \"accessTokenResponseConverter cannot be null\");\n\t\tthis.accessTokenResponseConverter = accessTokenResponseConverter;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "converter",
            "used",
            "for",
            "converting",
            "the",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1248,
        "code": "\tpublic final void setAccessTokenResponseParametersConverter(\n\t\t\tConverter<OAuth2AccessTokenResponse, Map<String, Object>> accessTokenResponseParametersConverter) {\n\t\tAssert.notNull(accessTokenResponseParametersConverter, \"accessTokenResponseParametersConverter cannot be null\");\n\t\tthis.accessTokenResponseParametersConverter = accessTokenResponseParametersConverter;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "converter",
            "used",
            "for",
            "converting",
            "the",
            "oauth",
            "0",
            "access",
            "token",
            "response",
            "to",
            "a",
            "map",
            "representation",
            "of",
            "the",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1249,
        "code": "\tpublic final void setErrorConverter(Converter<Map<String, String>, OAuth2Error> errorConverter) {\n\t\tAssert.notNull(errorConverter, \"errorConverter cannot be null\");\n\t\tthis.errorConverter = errorConverter;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "converter",
            "used",
            "for",
            "converting",
            "the",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1250,
        "code": "\tpublic final void setErrorParametersConverter(\n\t\t\tConverter<OAuth2Error, Map<String, String>> errorParametersConverter) {\n\t\tAssert.notNull(errorParametersConverter, \"errorParametersConverter cannot be null\");\n\t\tthis.errorParametersConverter = errorParametersConverter;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "converter",
            "used",
            "for",
            "converting",
            "the",
            "oauth",
            "0",
            "error",
            "to",
            "a",
            "map",
            "representation",
            "of",
            "the",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1251,
        "code": "\tdefault URL getIssuer() {\n\t\treturn this.getClaimAsURL(IdTokenClaimNames.ISS);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "issuer",
            "identifier",
            "iss"
        ]
    },
    {
        "id": 1252,
        "code": "\tdefault String getSubject() {\n\t\treturn this.getClaimAsString(IdTokenClaimNames.SUB);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "subject",
            "identifier",
            "sub"
        ]
    },
    {
        "id": 1253,
        "code": "\tdefault List<String> getAudience() {\n\t\treturn this.getClaimAsStringList(IdTokenClaimNames.AUD);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "audience",
            "s",
            "aud",
            "that",
            "this",
            "id",
            "token",
            "is",
            "intended",
            "for"
        ]
    },
    {
        "id": 1254,
        "code": "\tdefault Instant getExpiresAt() {\n\t\treturn this.getClaimAsInstant(IdTokenClaimNames.EXP);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "expiration",
            "time",
            "exp",
            "on",
            "or",
            "after",
            "which",
            "the",
            "id",
            "token",
            "must",
            "not",
            "be",
            "accepted"
        ]
    },
    {
        "id": 1255,
        "code": "\tdefault Instant getIssuedAt() {\n\t\treturn this.getClaimAsInstant(IdTokenClaimNames.IAT);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "time",
            "at",
            "which",
            "the",
            "id",
            "token",
            "was",
            "issued",
            "iat"
        ]
    },
    {
        "id": 1256,
        "code": "\tdefault Instant getAuthenticatedAt() {\n\t\treturn this.getClaimAsInstant(IdTokenClaimNames.AUTH_TIME);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "time",
            "when",
            "the",
            "end",
            "user",
            "authentication",
            "occurred",
            "auth",
            "time"
        ]
    },
    {
        "id": 1257,
        "code": "\tdefault String getNonce() {\n\t\treturn this.getClaimAsString(IdTokenClaimNames.NONCE);\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "string",
            "value",
            "nonce",
            "used",
            "to",
            "associate",
            "a",
            "client",
            "session",
            "with",
            "an",
            "id",
            "token",
            "and",
            "to",
            "mitigate",
            "replay",
            "attacks"
        ]
    },
    {
        "id": 1258,
        "code": "\tdefault String getAuthenticationContextClass() {\n\t\treturn this.getClaimAsString(IdTokenClaimNames.ACR);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "authentication",
            "context",
            "class",
            "reference",
            "acr"
        ]
    },
    {
        "id": 1259,
        "code": "\tdefault List<String> getAuthenticationMethods() {\n\t\treturn this.getClaimAsStringList(IdTokenClaimNames.AMR);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "authentication",
            "methods",
            "references",
            "amr"
        ]
    },
    {
        "id": 1260,
        "code": "\tdefault String getAuthorizedParty() {\n\t\treturn this.getClaimAsString(IdTokenClaimNames.AZP);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "authorized",
            "party",
            "azp",
            "to",
            "which",
            "the",
            "id",
            "token",
            "was",
            "issued"
        ]
    },
    {
        "id": 1261,
        "code": "\tdefault String getAccessTokenHash() {\n\t\treturn this.getClaimAsString(IdTokenClaimNames.AT_HASH);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "access",
            "token",
            "hash",
            "value",
            "at",
            "hash"
        ]
    },
    {
        "id": 1262,
        "code": "\tdefault String getAuthorizationCodeHash() {\n\t\treturn this.getClaimAsString(IdTokenClaimNames.C_HASH);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "authorization",
            "code",
            "hash",
            "value",
            "c",
            "hash"
        ]
    },
    {
        "id": 1263,
        "code": "\tpublic static Builder withTokenValue(String tokenValue) {\n\t\treturn new Builder(tokenValue);\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "builder",
            "based",
            "on",
            "the",
            "given",
            "token",
            "value",
            "token",
            "value",
            "the",
            "token",
            "value",
            "to",
            "use",
            "the",
            "builder",
            "for",
            "further",
            "configuration",
            "0"
        ]
    },
    {
        "id": 1264,
        "code": "\tpublic static Builder builder() {\n\t\treturn new Builder();\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "builder",
            "the",
            "builder",
            "for",
            "further",
            "configuration",
            "0"
        ]
    },
    {
        "id": 1265,
        "code": "\tdefault String getSubject() {\n\t\treturn this.getClaimAsString(StandardClaimNames.SUB);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "subject",
            "identifier",
            "sub"
        ]
    },
    {
        "id": 1266,
        "code": "\tdefault String getFullName() {\n\t\treturn this.getClaimAsString(StandardClaimNames.NAME);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "user",
            "s",
            "full",
            "name",
            "name",
            "in",
            "displayable",
            "form"
        ]
    },
    {
        "id": 1267,
        "code": "\tdefault String getGivenName() {\n\t\treturn this.getClaimAsString(StandardClaimNames.GIVEN_NAME);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "user",
            "s",
            "given",
            "name",
            "s",
            "or",
            "first",
            "name",
            "s",
            "given",
            "name"
        ]
    },
    {
        "id": 1268,
        "code": "\tdefault String getFamilyName() {\n\t\treturn this.getClaimAsString(StandardClaimNames.FAMILY_NAME);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "user",
            "s",
            "surname",
            "s",
            "or",
            "last",
            "name",
            "s",
            "family",
            "name"
        ]
    },
    {
        "id": 1269,
        "code": "\tdefault String getMiddleName() {\n\t\treturn this.getClaimAsString(StandardClaimNames.MIDDLE_NAME);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "user",
            "s",
            "middle",
            "name",
            "s",
            "middle",
            "name"
        ]
    },
    {
        "id": 1270,
        "code": "\tdefault String getNickName() {\n\t\treturn this.getClaimAsString(StandardClaimNames.NICKNAME);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "user",
            "s",
            "nick",
            "name",
            "nickname",
            "that",
            "may",
            "or",
            "may",
            "not",
            "be",
            "the",
            "same",
            "as",
            "the",
            "given",
            "name"
        ]
    },
    {
        "id": 1271,
        "code": "\tdefault String getPreferredUsername() {\n\t\treturn this.getClaimAsString(StandardClaimNames.PREFERRED_USERNAME);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "preferred",
            "username",
            "preferred",
            "username",
            "that",
            "the",
            "user",
            "wishes",
            "to",
            "be",
            "referred",
            "to"
        ]
    },
    {
        "id": 1272,
        "code": "\tdefault String getProfile() {\n\t\treturn this.getClaimAsString(StandardClaimNames.PROFILE);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "url",
            "of",
            "the",
            "user",
            "s",
            "profile",
            "page",
            "profile"
        ]
    },
    {
        "id": 1273,
        "code": "\tdefault String getPicture() {\n\t\treturn this.getClaimAsString(StandardClaimNames.PICTURE);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "url",
            "of",
            "the",
            "user",
            "s",
            "profile",
            "picture",
            "picture"
        ]
    },
    {
        "id": 1274,
        "code": "\tdefault String getWebsite() {\n\t\treturn this.getClaimAsString(StandardClaimNames.WEBSITE);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "url",
            "of",
            "the",
            "user",
            "s",
            "web",
            "page",
            "or",
            "blog",
            "website"
        ]
    },
    {
        "id": 1275,
        "code": "\tdefault String getEmail() {\n\t\treturn this.getClaimAsString(StandardClaimNames.EMAIL);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "user",
            "s",
            "preferred",
            "e",
            "mail",
            "address",
            "email"
        ]
    },
    {
        "id": 1276,
        "code": "\tdefault Boolean getEmailVerified() {\n\t\treturn this.getClaimAsBoolean(StandardClaimNames.EMAIL_VERIFIED);\n\t}",
        "summary_tokens": [
            "returns",
            "true",
            "if",
            "the",
            "user",
            "s",
            "e",
            "mail",
            "address",
            "has",
            "been",
            "verified",
            "email",
            "verified",
            "otherwise",
            "false"
        ]
    },
    {
        "id": 1277,
        "code": "\tdefault String getGender() {\n\t\treturn this.getClaimAsString(StandardClaimNames.GENDER);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "user",
            "s",
            "gender",
            "gender"
        ]
    },
    {
        "id": 1278,
        "code": "\tdefault String getBirthdate() {\n\t\treturn this.getClaimAsString(StandardClaimNames.BIRTHDATE);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "user",
            "s",
            "birth",
            "date",
            "birthdate"
        ]
    },
    {
        "id": 1279,
        "code": "\tdefault String getZoneInfo() {\n\t\treturn this.getClaimAsString(StandardClaimNames.ZONEINFO);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "user",
            "s",
            "time",
            "zone",
            "zoneinfo"
        ]
    },
    {
        "id": 1280,
        "code": "\tdefault String getLocale() {\n\t\treturn this.getClaimAsString(StandardClaimNames.LOCALE);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "user",
            "s",
            "locale",
            "locale"
        ]
    },
    {
        "id": 1281,
        "code": "\tdefault String getPhoneNumber() {\n\t\treturn this.getClaimAsString(StandardClaimNames.PHONE_NUMBER);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "user",
            "s",
            "preferred",
            "phone",
            "number",
            "phone",
            "number"
        ]
    },
    {
        "id": 1282,
        "code": "\tdefault Boolean getPhoneNumberVerified() {\n\t\treturn this.getClaimAsBoolean(StandardClaimNames.PHONE_NUMBER_VERIFIED);\n\t}",
        "summary_tokens": [
            "returns",
            "true",
            "if",
            "the",
            "user",
            "s",
            "phone",
            "number",
            "has",
            "been",
            "verified",
            "phone",
            "number",
            "verified",
            "otherwise",
            "false"
        ]
    },
    {
        "id": 1283,
        "code": "\tdefault AddressStandardClaim getAddress() {\n\t\tMap<String, Object> addressFields = this.getClaimAsMap(StandardClaimNames.ADDRESS);\n\t\treturn (!CollectionUtils.isEmpty(addressFields) ? new DefaultAddressStandardClaim.Builder(addressFields).build()\n\t\t\t\t: new DefaultAddressStandardClaim.Builder().build());\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "user",
            "s",
            "preferred",
            "postal",
            "address",
            "address"
        ]
    },
    {
        "id": 1284,
        "code": "\tdefault Instant getUpdatedAt() {\n\t\treturn this.getClaimAsInstant(StandardClaimNames.UPDATED_AT);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "time",
            "the",
            "user",
            "s",
            "information",
            "was",
            "last",
            "updated",
            "updated",
            "at"
        ]
    },
    {
        "id": 1285,
        "code": "\tpublic OidcIdToken getIdToken() {\n\t\treturn this.idToken;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "oidc",
            "id",
            "token",
            "id",
            "token",
            "containing",
            "claims",
            "about",
            "the",
            "user"
        ]
    },
    {
        "id": 1286,
        "code": "\tpublic OidcUserInfo getUserInfo() {\n\t\treturn this.userInfo;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "oidc",
            "user",
            "info",
            "user",
            "info",
            "containing",
            "claims",
            "about",
            "the",
            "user",
            "may",
            "be",
            "null"
        ]
    },
    {
        "id": 1287,
        "code": "\tpublic Map<String, Object> getAttributes() {\n\t\treturn this.attributes;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "attributes",
            "about",
            "the",
            "user"
        ]
    },
    {
        "id": 1288,
        "code": "\tprivate static Object convertURLIfNecessary(Object value) {\n\t\treturn (value instanceof URL) ? ((URL) value).toExternalForm() : value;\n\t}",
        "summary_tokens": [
            "url",
            "converted",
            "to",
            "a",
            "string",
            "since",
            "url",
            "shouldn",
            "t",
            "be",
            "used",
            "for",
            "equality",
            "hash",
            "code"
        ]
    },
    {
        "id": 1289,
        "code": "\tpublic static BodyExtractor<Mono<OAuth2AccessTokenResponse>, ReactiveHttpInputMessage> oauth2AccessTokenResponse() {\n\t\treturn new OAuth2AccessTokenResponseBodyExtractor();\n\t}",
        "summary_tokens": [
            "extractor",
            "to",
            "decode",
            "an",
            "oauth",
            "0",
            "access",
            "token",
            "response",
            "a",
            "body",
            "extractor",
            "for",
            "oauth",
            "0",
            "access",
            "token",
            "response"
        ]
    },
    {
        "id": 1290,
        "code": "\tpublic <T extends JwaAlgorithm> T getAlgorithm() {\n\t\treturn (T) getHeader(JoseHeaderNames.ALG);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "jwa",
            "algorithm",
            "jwa",
            "algorithm",
            "used",
            "to",
            "digitally",
            "sign",
            "the",
            "jws",
            "or",
            "encrypt",
            "the",
            "jwe"
        ]
    },
    {
        "id": 1291,
        "code": "\tpublic URL getJwkSetUrl() {\n\t\treturn getHeader(JoseHeaderNames.JKU);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "jwk",
            "set",
            "url",
            "that",
            "refers",
            "to",
            "the",
            "resource",
            "of",
            "a",
            "set",
            "of",
            "json",
            "encoded",
            "public",
            "keys",
            "one",
            "of",
            "which",
            "corresponds",
            "to",
            "the",
            "key",
            "used",
            "to",
            "digitally",
            "sign",
            "the",
            "jws",
            "or",
            "encrypt",
            "the",
            "jwe"
        ]
    },
    {
        "id": 1292,
        "code": "\tpublic Map<String, Object> getJwk() {\n\t\treturn getHeader(JoseHeaderNames.JWK);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "json",
            "web",
            "key",
            "which",
            "is",
            "the",
            "public",
            "key",
            "that",
            "corresponds",
            "to",
            "the",
            "key",
            "used",
            "to",
            "digitally",
            "sign",
            "the",
            "jws",
            "or",
            "encrypt",
            "the",
            "jwe"
        ]
    },
    {
        "id": 1293,
        "code": "\tpublic String getKeyId() {\n\t\treturn getHeader(JoseHeaderNames.KID);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "key",
            "id",
            "that",
            "is",
            "a",
            "hint",
            "indicating",
            "which",
            "key",
            "was",
            "used",
            "to",
            "secure",
            "the",
            "jws",
            "or",
            "jwe"
        ]
    },
    {
        "id": 1294,
        "code": "\tpublic String getType() {\n\t\treturn getHeader(JoseHeaderNames.TYP);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "type",
            "header",
            "that",
            "declares",
            "the",
            "media",
            "type",
            "of",
            "the",
            "jws",
            "jwe"
        ]
    },
    {
        "id": 1295,
        "code": "\tpublic String getContentType() {\n\t\treturn getHeader(JoseHeaderNames.CTY);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "content",
            "type",
            "header",
            "that",
            "declares",
            "the",
            "media",
            "type",
            "of",
            "the",
            "secured",
            "content",
            "the",
            "payload"
        ]
    },
    {
        "id": 1296,
        "code": "\tpublic Set<String> getCritical() {\n\t\treturn getHeader(JoseHeaderNames.CRIT);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "critical",
            "headers",
            "that",
            "indicates",
            "which",
            "extensions",
            "to",
            "the",
            "jws",
            "jwe",
            "jwa",
            "specifications",
            "are",
            "being",
            "used",
            "that",
            "must",
            "be",
            "understood",
            "and",
            "processed"
        ]
    },
    {
        "id": 1297,
        "code": "\tpublic <T> T getHeader(String name) {\n\t\tAssert.hasText(name, \"name cannot be empty\");\n\t\treturn (T) getHeaders().get(name);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "header",
            "value"
        ]
    },
    {
        "id": 1298,
        "code": "\tpublic static Builder with(JwsAlgorithm jwsAlgorithm) {\n\t\treturn new Builder(jwsAlgorithm);\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "new",
            "builder",
            "initialized",
            "with",
            "the",
            "provided",
            "jws",
            "algorithm"
        ]
    },
    {
        "id": 1299,
        "code": "\tpublic static Builder from(JwsHeader headers) {\n\t\treturn new Builder(headers);\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "new",
            "builder",
            "initialized",
            "with",
            "the",
            "provided",
            "headers"
        ]
    },
    {
        "id": 1300,
        "code": "\tpublic Map<String, Object> getHeaders() {\n\t\treturn this.headers;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "jose",
            "header",
            "s"
        ]
    },
    {
        "id": 1301,
        "code": "\tpublic Map<String, Object> getClaims() {\n\t\treturn this.claims;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "jwt",
            "claims",
            "set"
        ]
    },
    {
        "id": 1302,
        "code": "\tdefault URL getIssuer() {\n\t\treturn this.getClaimAsURL(JwtClaimNames.ISS);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "issuer",
            "iss",
            "claim",
            "which",
            "identifies",
            "the",
            "principal",
            "that",
            "issued",
            "the",
            "jwt"
        ]
    },
    {
        "id": 1303,
        "code": "\tdefault String getSubject() {\n\t\treturn this.getClaimAsString(JwtClaimNames.SUB);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "subject",
            "sub",
            "claim",
            "which",
            "identifies",
            "the",
            "principal",
            "that",
            "is",
            "the",
            "subject",
            "of",
            "the",
            "jwt"
        ]
    },
    {
        "id": 1304,
        "code": "\tdefault List<String> getAudience() {\n\t\treturn this.getClaimAsStringList(JwtClaimNames.AUD);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "audience",
            "aud",
            "claim",
            "which",
            "identifies",
            "the",
            "recipient",
            "s",
            "that",
            "the",
            "jwt",
            "is",
            "intended",
            "for"
        ]
    },
    {
        "id": 1305,
        "code": "\tdefault Instant getExpiresAt() {\n\t\treturn this.getClaimAsInstant(JwtClaimNames.EXP);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "expiration",
            "time",
            "exp",
            "claim",
            "which",
            "identifies",
            "the",
            "expiration",
            "time",
            "on",
            "or",
            "after",
            "which",
            "the",
            "jwt",
            "must",
            "not",
            "be",
            "accepted",
            "for",
            "processing"
        ]
    },
    {
        "id": 1306,
        "code": "\tdefault Instant getNotBefore() {\n\t\treturn this.getClaimAsInstant(JwtClaimNames.NBF);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "not",
            "before",
            "nbf",
            "claim",
            "which",
            "identifies",
            "the",
            "time",
            "before",
            "which",
            "the",
            "jwt",
            "must",
            "not",
            "be",
            "accepted",
            "for",
            "processing"
        ]
    },
    {
        "id": 1307,
        "code": "\tdefault Instant getIssuedAt() {\n\t\treturn this.getClaimAsInstant(JwtClaimNames.IAT);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "issued",
            "at",
            "iat",
            "claim",
            "which",
            "identifies",
            "the",
            "time",
            "at",
            "which",
            "the",
            "jwt",
            "was",
            "issued"
        ]
    },
    {
        "id": 1308,
        "code": "\tdefault String getId() {\n\t\treturn this.getClaimAsString(JwtClaimNames.JTI);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "jwt",
            "id",
            "jti",
            "claim",
            "which",
            "provides",
            "a",
            "unique",
            "identifier",
            "for",
            "the",
            "jwt"
        ]
    },
    {
        "id": 1309,
        "code": "\tpublic static Builder builder() {\n\t\treturn new Builder();\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "new",
            "builder"
        ]
    },
    {
        "id": 1310,
        "code": "\tpublic static Builder from(JwtClaimsSet claims) {\n\t\treturn new Builder(claims);\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "new",
            "builder",
            "initialized",
            "with",
            "the",
            "provided",
            "claims"
        ]
    },
    {
        "id": 1311,
        "code": "\tpublic static <T extends JwtDecoder> T fromOidcIssuerLocation(String oidcIssuerLocation) {\n\t\tAssert.hasText(oidcIssuerLocation, \"oidcIssuerLocation cannot be empty\");\n\t\tMap<String, Object> configuration = JwtDecoderProviderConfigurationUtils\n\t\t\t\t.getConfigurationForOidcIssuerLocation(oidcIssuerLocation);\n\t\treturn (T) withProviderConfiguration(configuration, oidcIssuerLocation);\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "jwt",
            "decoder",
            "using",
            "the",
            "provided",
            "a",
            "href",
            "https",
            "openid"
        ]
    },
    {
        "id": 1312,
        "code": "\tpublic static <T extends JwtDecoder> T fromIssuerLocation(String issuer) {\n\t\tAssert.hasText(issuer, \"issuer cannot be empty\");\n\t\tMap<String, Object> configuration = JwtDecoderProviderConfigurationUtils\n\t\t\t\t.getConfigurationForIssuerLocation(issuer);\n\t\treturn (T) withProviderConfiguration(configuration, issuer);\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "jwt",
            "decoder",
            "using",
            "the",
            "provided",
            "a",
            "href",
            "https",
            "openid"
        ]
    },
    {
        "id": 1313,
        "code": "\tprivate static JwtDecoder withProviderConfiguration(Map<String, Object> configuration, String issuer) {\n\t\tJwtDecoderProviderConfigurationUtils.validateIssuer(configuration, issuer);\n\t\tOAuth2TokenValidator<Jwt> jwtValidator = JwtValidators.createDefaultWithIssuer(issuer);\n\t\tString jwkSetUri = configuration.get(\"jwks_uri\").toString();\n\t\tNimbusJwtDecoder jwtDecoder = NimbusJwtDecoder.withJwkSetUri(jwkSetUri)\n\t\t\t\t.jwtProcessorCustomizer(JwtDecoderProviderConfigurationUtils::addJWSAlgorithms).build();\n\t\tjwtDecoder.setJwtValidator(jwtValidator);\n\t\treturn jwtDecoder;\n\t}",
        "summary_tokens": [
            "validate",
            "provided",
            "issuer",
            "and",
            "build",
            "jwt",
            "decoder",
            "from",
            "a",
            "href",
            "https",
            "openid"
        ]
    },
    {
        "id": 1314,
        "code": "\tpublic static JwtEncoderParameters from(JwsHeader jwsHeader, JwtClaimsSet claims) {\n\t\tAssert.notNull(jwsHeader, \"jwsHeader cannot be null\");\n\t\tAssert.notNull(claims, \"claims cannot be null\");\n\t\treturn new JwtEncoderParameters(jwsHeader, claims);\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "new",
            "jwt",
            "encoder",
            "parameters",
            "initialized",
            "with",
            "the",
            "provided",
            "jws",
            "header",
            "and",
            "jwt",
            "claims",
            "set"
        ]
    },
    {
        "id": 1315,
        "code": "\tpublic JwsHeader getJwsHeader() {\n\t\treturn this.jwsHeader;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "jws",
            "header",
            "jws",
            "headers"
        ]
    },
    {
        "id": 1316,
        "code": "\tpublic JwtClaimsSet getClaims() {\n\t\treturn this.claims;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "jwt",
            "claims",
            "set",
            "claims"
        ]
    },
    {
        "id": 1317,
        "code": "\tpublic void setClock(Clock clock) {\n\t\tAssert.notNull(clock, \"clock cannot be null\");\n\t\tthis.clock = clock;\n\t}",
        "summary_tokens": [
            "use",
            "this",
            "clock",
            "with",
            "instant",
            "now",
            "for",
            "assessing",
            "timestamp",
            "validity",
            "clock"
        ]
    },
    {
        "id": 1318,
        "code": "\tpublic Collection<OAuth2Error> getErrors() {\n\t\treturn this.errors;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "list",
            "of",
            "oauth",
            "0",
            "error",
            "s",
            "associated",
            "with",
            "this",
            "exception",
            "the",
            "list",
            "of",
            "oauth",
            "0",
            "error",
            "s",
            "associated",
            "with",
            "this",
            "exception"
        ]
    },
    {
        "id": 1319,
        "code": "\tpublic static OAuth2TokenValidator<Jwt> createDefaultWithIssuer(String issuer) {\n\t\tList<OAuth2TokenValidator<Jwt>> validators = new ArrayList<>();\n\t\tvalidators.add(new JwtTimestampValidator());\n\t\tvalidators.add(new JwtIssuerValidator(issuer));\n\t\treturn new DelegatingOAuth2TokenValidator<>(validators);\n\t}",
        "summary_tokens": [
            "p",
            "create",
            "a",
            "jwt",
            "validator",
            "that",
            "contains",
            "all",
            "standard",
            "validators",
            "when",
            "an",
            "issuer",
            "is",
            "known"
        ]
    },
    {
        "id": 1320,
        "code": "\tpublic static OAuth2TokenValidator<Jwt> createDefault() {\n\t\treturn new DelegatingOAuth2TokenValidator<>(Arrays.asList(new JwtTimestampValidator()));\n\t}",
        "summary_tokens": [
            "p",
            "create",
            "a",
            "jwt",
            "validator",
            "that",
            "contains",
            "all",
            "standard",
            "validators"
        ]
    },
    {
        "id": 1321,
        "code": "\tpublic static MappedJwtClaimSetConverter withDefaults(Map<String, Converter<Object, ?>> claimTypeConverters) {\n\t\tAssert.notNull(claimTypeConverters, \"claimTypeConverters cannot be null\");\n\t\tConverter<Object, ?> stringConverter = getConverter(STRING_TYPE_DESCRIPTOR);\n\t\tConverter<Object, ?> collectionStringConverter = getConverter(\n\t\t\t\tTypeDescriptor.collection(Collection.class, STRING_TYPE_DESCRIPTOR));\n\t\tMap<String, Converter<Object, ?>> claimNameToConverter = new HashMap<>();\n\t\tclaimNameToConverter.put(JwtClaimNames.AUD, collectionStringConverter);\n\t\tclaimNameToConverter.put(JwtClaimNames.EXP, MappedJwtClaimSetConverter::convertInstant);\n\t\tclaimNameToConverter.put(JwtClaimNames.IAT, MappedJwtClaimSetConverter::convertInstant);\n\t\tclaimNameToConverter.put(JwtClaimNames.ISS, MappedJwtClaimSetConverter::convertIssuer);\n\t\tclaimNameToConverter.put(JwtClaimNames.JTI, stringConverter);\n\t\tclaimNameToConverter.put(JwtClaimNames.NBF, MappedJwtClaimSetConverter::convertInstant);\n\t\tclaimNameToConverter.put(JwtClaimNames.SUB, stringConverter);\n\t\tclaimNameToConverter.putAll(claimTypeConverters);\n\t\treturn new MappedJwtClaimSetConverter(claimNameToConverter);\n\t}",
        "summary_tokens": [
            "construct",
            "a",
            "mapped",
            "jwt",
            "claim",
            "set",
            "converter",
            "overriding",
            "individual",
            "claim",
            "converters",
            "with",
            "the",
            "provided",
            "map",
            "of",
            "converter",
            "s"
        ]
    },
    {
        "id": 1322,
        "code": "\tpublic void setJwtValidator(OAuth2TokenValidator<Jwt> jwtValidator) {\n\t\tAssert.notNull(jwtValidator, \"jwtValidator cannot be null\");\n\t\tthis.jwtValidator = jwtValidator;\n\t}",
        "summary_tokens": [
            "use",
            "this",
            "jwt",
            "validator",
            "jwt",
            "validator",
            "the",
            "jwt",
            "validator",
            "to",
            "use"
        ]
    },
    {
        "id": 1323,
        "code": "\tpublic void setClaimSetConverter(Converter<Map<String, Object>, Map<String, Object>> claimSetConverter) {\n\t\tAssert.notNull(claimSetConverter, \"claimSetConverter cannot be null\");\n\t\tthis.claimSetConverter = claimSetConverter;\n\t}",
        "summary_tokens": [
            "use",
            "the",
            "following",
            "converter",
            "for",
            "manipulating",
            "the",
            "jwt",
            "s",
            "claim",
            "set",
            "claim",
            "set",
            "converter",
            "the",
            "converter",
            "to",
            "use"
        ]
    },
    {
        "id": 1324,
        "code": "\tpublic Jwt decode(String token) throws JwtException {\n\t\tJWT jwt = parse(token);\n\t\tif (jwt instanceof PlainJWT) {\n\t\t\tthis.logger.trace(\"Failed to decode unsigned token\");\n\t\t\tthrow new BadJwtException(\"Unsupported algorithm of \" + jwt.getHeader().getAlgorithm());\n\t\t}\n\t\tJwt createdJwt = createJwt(token, jwt);\n\t\treturn validateJwt(createdJwt);\n\t}",
        "summary_tokens": [
            "decode",
            "and",
            "validate",
            "the",
            "jwt",
            "from",
            "its",
            "compact",
            "claims",
            "representation",
            "format",
            "token",
            "the",
            "jwt",
            "value",
            "a",
            "validated",
            "jwt",
            "jwt",
            "exception"
        ]
    },
    {
        "id": 1325,
        "code": "\tpublic static JwkSetUriJwtDecoderBuilder withJwkSetUri(String jwkSetUri) {\n\t\treturn new JwkSetUriJwtDecoderBuilder(jwkSetUri);\n\t}",
        "summary_tokens": [
            "use",
            "the",
            "given",
            "a",
            "href",
            "https",
            "tools"
        ]
    },
    {
        "id": 1326,
        "code": "\tpublic static PublicKeyJwtDecoderBuilder withPublicKey(RSAPublicKey key) {\n\t\treturn new PublicKeyJwtDecoderBuilder(key);\n\t}",
        "summary_tokens": [
            "use",
            "the",
            "given",
            "public",
            "key",
            "to",
            "validate",
            "jwts",
            "key",
            "the",
            "public",
            "key",
            "to",
            "use",
            "a",
            "public",
            "key",
            "jwt",
            "decoder",
            "builder",
            "for",
            "further",
            "configurations"
        ]
    },
    {
        "id": 1327,
        "code": "\tpublic static SecretKeyJwtDecoderBuilder withSecretKey(SecretKey secretKey) {\n\t\treturn new SecretKeyJwtDecoderBuilder(secretKey);\n\t}",
        "summary_tokens": [
            "use",
            "the",
            "given",
            "secret",
            "key",
            "to",
            "validate",
            "the",
            "mac",
            "on",
            "a",
            "json",
            "web",
            "signature",
            "jws"
        ]
    },
    {
        "id": 1328,
        "code": "\tpublic void setJwtValidator(OAuth2TokenValidator<Jwt> jwtValidator) {\n\t\tAssert.notNull(jwtValidator, \"jwtValidator cannot be null\");\n\t\tthis.jwtValidator = jwtValidator;\n\t}",
        "summary_tokens": [
            "use",
            "the",
            "provided",
            "oauth",
            "0",
            "token",
            "validator",
            "to",
            "validate",
            "incoming",
            "jwt",
            "s"
        ]
    },
    {
        "id": 1329,
        "code": "\tpublic void setClaimSetConverter(Converter<Map<String, Object>, Map<String, Object>> claimSetConverter) {\n\t\tAssert.notNull(claimSetConverter, \"claimSetConverter cannot be null\");\n\t\tthis.claimSetConverter = claimSetConverter;\n\t}",
        "summary_tokens": [
            "use",
            "the",
            "following",
            "converter",
            "for",
            "manipulating",
            "the",
            "jwt",
            "s",
            "claim",
            "set",
            "claim",
            "set",
            "converter",
            "the",
            "converter",
            "to",
            "use"
        ]
    },
    {
        "id": 1330,
        "code": "\tpublic static JwkSetUriReactiveJwtDecoderBuilder withJwkSetUri(String jwkSetUri) {\n\t\treturn new JwkSetUriReactiveJwtDecoderBuilder(jwkSetUri);\n\t}",
        "summary_tokens": [
            "use",
            "the",
            "given",
            "a",
            "href",
            "https",
            "tools"
        ]
    },
    {
        "id": 1331,
        "code": "\tpublic static PublicKeyReactiveJwtDecoderBuilder withPublicKey(RSAPublicKey key) {\n\t\treturn new PublicKeyReactiveJwtDecoderBuilder(key);\n\t}",
        "summary_tokens": [
            "use",
            "the",
            "given",
            "public",
            "key",
            "to",
            "validate",
            "jwts",
            "key",
            "the",
            "public",
            "key",
            "to",
            "use",
            "a",
            "public",
            "key",
            "reactive",
            "jwt",
            "decoder",
            "builder",
            "for",
            "further",
            "configurations"
        ]
    },
    {
        "id": 1332,
        "code": "\tpublic static SecretKeyReactiveJwtDecoderBuilder withSecretKey(SecretKey secretKey) {\n\t\treturn new SecretKeyReactiveJwtDecoderBuilder(secretKey);\n\t}",
        "summary_tokens": [
            "use",
            "the",
            "given",
            "secret",
            "key",
            "to",
            "validate",
            "the",
            "mac",
            "on",
            "a",
            "json",
            "web",
            "signature",
            "jws"
        ]
    },
    {
        "id": 1333,
        "code": "\tpublic static JwkSourceReactiveJwtDecoderBuilder withJwkSource(Function<SignedJWT, Flux<JWK>> source) {\n\t\treturn new JwkSourceReactiveJwtDecoderBuilder(source);\n\t}",
        "summary_tokens": [
            "use",
            "the",
            "given",
            "function",
            "to",
            "validate",
            "jwts",
            "source",
            "the",
            "function",
            "a",
            "jwk",
            "source",
            "reactive",
            "jwt",
            "decoder",
            "builder",
            "for",
            "further",
            "configurations"
        ]
    },
    {
        "id": 1334,
        "code": "\tpublic static ReactiveJwtDecoder fromOidcIssuerLocation(String oidcIssuerLocation) {\n\t\tAssert.hasText(oidcIssuerLocation, \"oidcIssuerLocation cannot be empty\");\n\t\tMap<String, Object> configuration = JwtDecoderProviderConfigurationUtils\n\t\t\t\t.getConfigurationForOidcIssuerLocation(oidcIssuerLocation);\n\t\treturn withProviderConfiguration(configuration, oidcIssuerLocation);\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "reactive",
            "jwt",
            "decoder",
            "using",
            "the",
            "provided",
            "a",
            "href",
            "https",
            "openid"
        ]
    },
    {
        "id": 1335,
        "code": "\tpublic static ReactiveJwtDecoder fromIssuerLocation(String issuer) {\n\t\tAssert.hasText(issuer, \"issuer cannot be empty\");\n\t\tMap<String, Object> configuration = JwtDecoderProviderConfigurationUtils\n\t\t\t\t.getConfigurationForIssuerLocation(issuer);\n\t\treturn withProviderConfiguration(configuration, issuer);\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "reactive",
            "jwt",
            "decoder",
            "using",
            "the",
            "provided",
            "a",
            "href",
            "https",
            "openid"
        ]
    },
    {
        "id": 1336,
        "code": "\tprivate static ReactiveJwtDecoder withProviderConfiguration(Map<String, Object> configuration, String issuer) {\n\t\tJwtDecoderProviderConfigurationUtils.validateIssuer(configuration, issuer);\n\t\tOAuth2TokenValidator<Jwt> jwtValidator = JwtValidators.createDefaultWithIssuer(issuer);\n\t\tString jwkSetUri = configuration.get(\"jwks_uri\").toString();\n\t\tNimbusReactiveJwtDecoder jwtDecoder = NimbusReactiveJwtDecoder.withJwkSetUri(jwkSetUri)\n\t\t\t\t.jwtProcessorCustomizer(ReactiveJwtDecoderProviderConfigurationUtils::addJWSAlgorithms).build();\n\t\tjwtDecoder.setJwtValidator(jwtValidator);\n\t\treturn jwtDecoder;\n\t}",
        "summary_tokens": [
            "build",
            "reactive",
            "jwt",
            "decoder",
            "from",
            "a",
            "href",
            "https",
            "openid"
        ]
    },
    {
        "id": 1337,
        "code": "\tprivate Mono<JWKSet> getJWKSet() {\n\t\t\n\t\treturn this.webClient.get()\n\t\t\t\t.uri(this.jwkSetURL)\n\t\t\t\t.retrieve()\n\t\t\t\t.bodyToMono(String.class)\n\t\t\t\t.map(this::parse)\n\t\t\t\t.doOnNext((jwkSet) -> this.cachedJWKSet\n\t\t\t\t\t\t.set(Mono.just(jwkSet))\n\t\t\t\t)\n\t\t\t\t.cache();\n\t\t\n\t}",
        "summary_tokens": [
            "updates",
            "the",
            "cached",
            "jwk",
            "set",
            "from",
            "the",
            "configured",
            "url"
        ]
    },
    {
        "id": 1338,
        "code": "\tprotected static String getFirstSpecifiedKeyID(final JWKMatcher jwkMatcher) {\n\t\tSet<String> keyIDs = jwkMatcher.getKeyIDs();\n\t\tif (keyIDs == null || keyIDs.isEmpty()) {\n\t\t\treturn null;\n\t\t}\n\t\tfor (String id : keyIDs) {\n\t\t\tif (id != null) {\n\t\t\t\treturn id;\n\t\t\t}\n\t\t}\n\t\treturn null; \n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "first",
            "specified",
            "key",
            "id",
            "kid",
            "for",
            "a",
            "jwk",
            "matcher"
        ]
    },
    {
        "id": 1339,
        "code": "\tpublic String getToken() {\n\t\treturn this.token;\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "a",
            "href",
            "https",
            "tools"
        ]
    },
    {
        "id": 1340,
        "code": "\tpublic HttpStatus getHttpStatus() {\n\t\treturn this.httpStatus;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "http",
            "status"
        ]
    },
    {
        "id": 1341,
        "code": "\tpublic static BearerTokenError invalidRequest(String message) {\n\t\ttry {\n\t\t\treturn new BearerTokenError(BearerTokenErrorCodes.INVALID_REQUEST, HttpStatus.BAD_REQUEST, message,\n\t\t\t\t\tDEFAULT_URI);\n\t\t}\n\t\tcatch (IllegalArgumentException ex) {\n\t\t\t\n\t\t\t\n\t\t\treturn DEFAULT_INVALID_REQUEST;\n\t\t}\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "bearer",
            "token",
            "error",
            "caused",
            "by",
            "an",
            "invalid",
            "request",
            "message",
            "a",
            "description",
            "of",
            "the",
            "error",
            "a",
            "bearer",
            "token",
            "error"
        ]
    },
    {
        "id": 1342,
        "code": "\tpublic static BearerTokenError invalidToken(String message) {\n\t\ttry {\n\t\t\treturn new BearerTokenError(BearerTokenErrorCodes.INVALID_TOKEN, HttpStatus.UNAUTHORIZED, message,\n\t\t\t\t\tDEFAULT_URI);\n\t\t}\n\t\tcatch (IllegalArgumentException ex) {\n\t\t\t\n\t\t\t\n\t\t\treturn DEFAULT_INVALID_TOKEN;\n\t\t}\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "bearer",
            "token",
            "error",
            "caused",
            "by",
            "an",
            "invalid",
            "token",
            "message",
            "a",
            "description",
            "of",
            "the",
            "error",
            "a",
            "bearer",
            "token",
            "error"
        ]
    },
    {
        "id": 1343,
        "code": "\tpublic static BearerTokenError insufficientScope(String message, String scope) {\n\t\ttry {\n\t\t\treturn new BearerTokenError(BearerTokenErrorCodes.INSUFFICIENT_SCOPE, HttpStatus.FORBIDDEN, message,\n\t\t\t\t\tDEFAULT_URI, scope);\n\t\t}\n\t\tcatch (IllegalArgumentException ex) {\n\t\t\t\n\t\t\t\n\t\t\treturn DEFAULT_INSUFFICIENT_SCOPE;\n\t\t}\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "bearer",
            "token",
            "error",
            "caused",
            "by",
            "an",
            "invalid",
            "token",
            "scope",
            "the",
            "scope",
            "attribute",
            "to",
            "use",
            "in",
            "the",
            "error",
            "a",
            "bearer",
            "token",
            "error"
        ]
    },
    {
        "id": 1344,
        "code": "\tpublic final T getToken() {\n\t\treturn this.token;\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "token",
            "bound",
            "to",
            "this",
            "authentication"
        ]
    },
    {
        "id": 1345,
        "code": "\tpublic Collection<GrantedAuthority> convert(Jwt jwt) {\n\t\tCollection<GrantedAuthority> result = new LinkedHashSet<>();\n\n\t\tfor (Converter<Jwt, Collection<GrantedAuthority>> authoritiesConverter : this.authoritiesConverters) {\n\t\t\tCollection<GrantedAuthority> authorities = authoritiesConverter.convert(jwt);\n\t\t\tif (authorities != null) {\n\t\t\t\tresult.addAll(authorities);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "extract",
            "granted",
            "authority",
            "s",
            "from",
            "the",
            "given",
            "jwt"
        ]
    },
    {
        "id": 1346,
        "code": "\tpublic void setJwtGrantedAuthoritiesConverter(\n\t\t\tConverter<Jwt, Collection<GrantedAuthority>> jwtGrantedAuthoritiesConverter) {\n\t\tAssert.notNull(jwtGrantedAuthoritiesConverter, \"jwtGrantedAuthoritiesConverter cannot be null\");\n\t\tthis.jwtGrantedAuthoritiesConverter = jwtGrantedAuthoritiesConverter;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "converter",
            "converter",
            "lt",
            "jwt",
            "collection",
            "lt",
            "granted",
            "authority",
            "gt",
            "gt",
            "to",
            "use"
        ]
    },
    {
        "id": 1347,
        "code": "\tpublic void setPrincipalClaimName(String principalClaimName) {\n\t\tAssert.hasText(principalClaimName, \"principalClaimName cannot be empty\");\n\t\tthis.principalClaimName = principalClaimName;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "principal",
            "claim",
            "name"
        ]
    },
    {
        "id": 1348,
        "code": "\tpublic Authentication authenticate(Authentication authentication) throws AuthenticationException {\n\t\tBearerTokenAuthenticationToken bearer = (BearerTokenAuthenticationToken) authentication;\n\t\tJwt jwt = getJwt(bearer);\n\t\tAbstractAuthenticationToken token = this.jwtAuthenticationConverter.convert(jwt);\n\t\ttoken.setDetails(bearer.getDetails());\n\t\tthis.logger.debug(\"Authenticated token\");\n\t\treturn token;\n\t}",
        "summary_tokens": [
            "decode",
            "and",
            "validate",
            "the",
            "a",
            "href",
            "https",
            "tools"
        ]
    },
    {
        "id": 1349,
        "code": "\tpublic String getName() {\n\t\treturn this.name;\n\t}",
        "summary_tokens": [
            "the",
            "principal",
            "name",
            "which",
            "is",
            "by",
            "default",
            "the",
            "jwt",
            "s",
            "subject"
        ]
    },
    {
        "id": 1350,
        "code": "\tpublic Collection<GrantedAuthority> convert(Jwt jwt) {\n\t\tCollection<GrantedAuthority> grantedAuthorities = new ArrayList<>();\n\t\tfor (String authority : getAuthorities(jwt)) {\n\t\t\tgrantedAuthorities.add(new SimpleGrantedAuthority(this.authorityPrefix + authority));\n\t\t}\n\t\treturn grantedAuthorities;\n\t}",
        "summary_tokens": [
            "extract",
            "granted",
            "authority",
            "s",
            "from",
            "the",
            "given",
            "jwt"
        ]
    },
    {
        "id": 1351,
        "code": "\tpublic void setAuthorityPrefix(String authorityPrefix) {\n\t\tAssert.notNull(authorityPrefix, \"authorityPrefix cannot be null\");\n\t\tthis.authorityPrefix = authorityPrefix;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "prefix",
            "to",
            "use",
            "for",
            "granted",
            "authority",
            "authorities",
            "mapped",
            "by",
            "this",
            "converter"
        ]
    },
    {
        "id": 1352,
        "code": "\tpublic void setAuthoritiesClaimName(String authoritiesClaimName) {\n\t\tAssert.hasText(authoritiesClaimName, \"authoritiesClaimName cannot be empty\");\n\t\tthis.authoritiesClaimName = authoritiesClaimName;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "name",
            "of",
            "token",
            "claim",
            "to",
            "use",
            "for",
            "mapping",
            "granted",
            "authority",
            "authorities",
            "by",
            "this",
            "converter"
        ]
    },
    {
        "id": 1353,
        "code": "\tpublic AuthenticationManager resolve(HttpServletRequest request) {\n\t\treturn this.authenticationManager;\n\t}",
        "summary_tokens": [
            "return",
            "an",
            "authentication",
            "manager",
            "based",
            "off",
            "of",
            "the",
            "iss",
            "claim",
            "found",
            "in",
            "the",
            "request",
            "s",
            "bearer",
            "token",
            "oauth",
            "0",
            "authentication",
            "exception",
            "if",
            "the",
            "bearer",
            "token",
            "is",
            "malformed",
            "or",
            "an",
            "authentication",
            "manager",
            "can",
            "t",
            "be",
            "derived",
            "from",
            "the",
            "issuer"
        ]
    },
    {
        "id": 1354,
        "code": "\tpublic Mono<ReactiveAuthenticationManager> resolve(ServerWebExchange exchange) {\n\t\treturn Mono.just(this.authenticationManager);\n\t}",
        "summary_tokens": [
            "return",
            "an",
            "authentication",
            "manager",
            "based",
            "off",
            "of",
            "the",
            "iss",
            "claim",
            "found",
            "in",
            "the",
            "request",
            "s",
            "bearer",
            "token",
            "oauth",
            "0",
            "authentication",
            "exception",
            "if",
            "the",
            "bearer",
            "token",
            "is",
            "malformed",
            "or",
            "an",
            "reactive",
            "authentication",
            "manager",
            "can",
            "t",
            "be",
            "derived",
            "from",
            "the",
            "issuer"
        ]
    },
    {
        "id": 1355,
        "code": "\tpublic void setJwtAuthenticationConverter(\n\t\t\tConverter<Jwt, ? extends Mono<? extends AbstractAuthenticationToken>> jwtAuthenticationConverter) {\n\t\tAssert.notNull(jwtAuthenticationConverter, \"jwtAuthenticationConverter cannot be null\");\n\t\tthis.jwtAuthenticationConverter = jwtAuthenticationConverter;\n\t}",
        "summary_tokens": [
            "use",
            "the",
            "given",
            "converter",
            "for",
            "converting",
            "a",
            "jwt",
            "into",
            "an",
            "abstract",
            "authentication",
            "token"
        ]
    },
    {
        "id": 1356,
        "code": "\tpublic Authentication authenticate(Authentication authentication) throws AuthenticationException {\n\t\tif (!(authentication instanceof BearerTokenAuthenticationToken)) {\n\t\t\treturn null;\n\t\t}\n\t\tBearerTokenAuthenticationToken bearer = (BearerTokenAuthenticationToken) authentication;\n\t\tOAuth2AuthenticatedPrincipal principal = getOAuth2AuthenticatedPrincipal(bearer);\n\t\tAbstractAuthenticationToken result = convert(principal, bearer.getToken());\n\t\tresult.setDetails(bearer.getDetails());\n\t\tthis.logger.debug(\"Authenticated token\");\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "introspect",
            "and",
            "validate",
            "the",
            "opaque",
            "a",
            "href",
            "https",
            "tools"
        ]
    },
    {
        "id": 1357,
        "code": "\tpublic void setJwtGrantedAuthoritiesConverter(\n\t\t\tConverter<Jwt, Flux<GrantedAuthority>> jwtGrantedAuthoritiesConverter) {\n\t\tAssert.notNull(jwtGrantedAuthoritiesConverter, \"jwtGrantedAuthoritiesConverter cannot be null\");\n\t\tthis.jwtGrantedAuthoritiesConverter = jwtGrantedAuthoritiesConverter;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "converter",
            "converter",
            "lt",
            "jwt",
            "flux",
            "lt",
            "granted",
            "authority",
            "gt",
            "gt",
            "to",
            "use"
        ]
    },
    {
        "id": 1358,
        "code": "\tpublic void setRequestEntityConverter(Converter<String, RequestEntity<?>> requestEntityConverter) {\n\t\tAssert.notNull(requestEntityConverter, \"requestEntityConverter cannot be null\");\n\t\tthis.requestEntityConverter = requestEntityConverter;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "converter",
            "used",
            "for",
            "converting",
            "the",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1359,
        "code": "\tpublic Map<String, Object> getAttributes() {\n\t\treturn this.delegate.getAttributes();\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "attributes",
            "of",
            "the",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1360,
        "code": "\tpublic Collection<? extends GrantedAuthority> getAuthorities() {\n\t\treturn this.delegate.getAuthorities();\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "collection",
            "of",
            "granted",
            "authority",
            "s",
            "associated",
            "with",
            "this",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1361,
        "code": "\tpublic void setRequestEntityConverter(Converter<String, RequestEntity<?>> requestEntityConverter) {\n\t\tAssert.notNull(requestEntityConverter, \"requestEntityConverter cannot be null\");\n\t\tthis.requestEntityConverter = requestEntityConverter;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "converter",
            "used",
            "for",
            "converting",
            "the",
            "oauth",
            "0"
        ]
    },
    {
        "id": 1362,
        "code": "\tpublic void commence(HttpServletRequest request, HttpServletResponse response,\n\t\t\tAuthenticationException authException) {\n\t\tHttpStatus status = HttpStatus.UNAUTHORIZED;\n\t\tMap<String, String> parameters = new LinkedHashMap<>();\n\t\tif (this.realmName != null) {\n\t\t\tparameters.put(\"realm\", this.realmName);\n\t\t}\n\t\tif (authException instanceof OAuth2AuthenticationException) {\n\t\t\tOAuth2Error error = ((OAuth2AuthenticationException) authException).getError();\n\t\t\tparameters.put(\"error\", error.getErrorCode());\n\t\t\tif (StringUtils.hasText(error.getDescription())) {\n\t\t\t\tparameters.put(\"error_description\", error.getDescription());\n\t\t\t}\n\t\t\tif (StringUtils.hasText(error.getUri())) {\n\t\t\t\tparameters.put(\"error_uri\", error.getUri());\n\t\t\t}\n\t\t\tif (error instanceof BearerTokenError) {\n\t\t\t\tBearerTokenError bearerTokenError = (BearerTokenError) error;\n\t\t\t\tif (StringUtils.hasText(bearerTokenError.getScope())) {\n\t\t\t\t\tparameters.put(\"scope\", bearerTokenError.getScope());\n\t\t\t\t}\n\t\t\t\tstatus = ((BearerTokenError) error).getHttpStatus();\n\t\t\t}\n\t\t}\n\t\tString wwwAuthenticate = computeWWWAuthenticateHeaderValue(parameters);\n\t\tresponse.addHeader(HttpHeaders.WWW_AUTHENTICATE, wwwAuthenticate);\n\t\tresponse.setStatus(status.value());\n\t}",
        "summary_tokens": [
            "collect",
            "error",
            "details",
            "from",
            "the",
            "provided",
            "parameters",
            "and",
            "format",
            "according",
            "to",
            "rfc",
            "0",
            "specifically",
            "error",
            "error",
            "description",
            "error",
            "uri",
            "and",
            "scope"
        ]
    },
    {
        "id": 1363,
        "code": "\tpublic void setRealmName(String realmName) {\n\t\tthis.realmName = realmName;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "default",
            "realm",
            "name",
            "to",
            "use",
            "in",
            "the",
            "bearer",
            "token",
            "error",
            "response",
            "realm",
            "name"
        ]
    },
    {
        "id": 1364,
        "code": "\tprotected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n\t\t\tthrows ServletException, IOException {\n\t\tString token;\n\t\ttry {\n\t\t\ttoken = this.bearerTokenResolver.resolve(request);\n\t\t}\n\t\tcatch (OAuth2AuthenticationException invalid) {\n\t\t\tthis.logger.trace(\"Sending to authentication entry point since failed to resolve bearer token\", invalid);\n\t\t\tthis.authenticationEntryPoint.commence(request, response, invalid);\n\t\t\treturn;\n\t\t}\n\t\tif (token == null) {\n\t\t\tthis.logger.trace(\"Did not process request since did not find bearer token\");\n\t\t\tfilterChain.doFilter(request, response);\n\t\t\treturn;\n\t\t}\n\n\t\tBearerTokenAuthenticationToken authenticationRequest = new BearerTokenAuthenticationToken(token);\n\t\tauthenticationRequest.setDetails(this.authenticationDetailsSource.buildDetails(request));\n\n\t\ttry {\n\t\t\tAuthenticationManager authenticationManager = this.authenticationManagerResolver.resolve(request);\n\t\t\tAuthentication authenticationResult = authenticationManager.authenticate(authenticationRequest);\n\t\t\tSecurityContext context = SecurityContextHolder.createEmptyContext();\n\t\t\tcontext.setAuthentication(authenticationResult);\n\t\t\tSecurityContextHolder.setContext(context);\n\t\t\tthis.securityContextRepository.saveContext(context, request, response);\n\t\t\tif (this.logger.isDebugEnabled()) {\n\t\t\t\tthis.logger.debug(LogMessage.format(\"Set SecurityContextHolder to %s\", authenticationResult));\n\t\t\t}\n\t\t\tfilterChain.doFilter(request, response);\n\t\t}\n\t\tcatch (AuthenticationException failed) {\n\t\t\tSecurityContextHolder.clearContext();\n\t\t\tthis.logger.trace(\"Failed to process authentication request\", failed);\n\t\t\tthis.authenticationFailureHandler.onAuthenticationFailure(request, response, failed);\n\t\t}\n\t}",
        "summary_tokens": [
            "extract",
            "any",
            "a",
            "href",
            "https",
            "tools"
        ]
    },
    {
        "id": 1365,
        "code": "\tpublic void setSecurityContextRepository(SecurityContextRepository securityContextRepository) {\n\t\tAssert.notNull(securityContextRepository, \"securityContextRepository cannot be null\");\n\t\tthis.securityContextRepository = securityContextRepository;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "repository",
            "to",
            "save",
            "the",
            "security",
            "context",
            "on",
            "authentication",
            "success"
        ]
    },
    {
        "id": 1366,
        "code": "\tpublic void setBearerTokenResolver(BearerTokenResolver bearerTokenResolver) {\n\t\tAssert.notNull(bearerTokenResolver, \"bearerTokenResolver cannot be null\");\n\t\tthis.bearerTokenResolver = bearerTokenResolver;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "bearer",
            "token",
            "resolver",
            "to",
            "use"
        ]
    },
    {
        "id": 1367,
        "code": "\tpublic void setAuthenticationEntryPoint(final AuthenticationEntryPoint authenticationEntryPoint) {\n\t\tAssert.notNull(authenticationEntryPoint, \"authenticationEntryPoint cannot be null\");\n\t\tthis.authenticationEntryPoint = authenticationEntryPoint;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "authentication",
            "entry",
            "point",
            "to",
            "use"
        ]
    },
    {
        "id": 1368,
        "code": "\tpublic void setAuthenticationFailureHandler(final AuthenticationFailureHandler authenticationFailureHandler) {\n\t\tAssert.notNull(authenticationFailureHandler, \"authenticationFailureHandler cannot be null\");\n\t\tthis.authenticationFailureHandler = authenticationFailureHandler;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "authentication",
            "failure",
            "handler",
            "to",
            "use"
        ]
    },
    {
        "id": 1369,
        "code": "\tpublic void setAuthenticationDetailsSource(\n\t\t\tAuthenticationDetailsSource<HttpServletRequest, ?> authenticationDetailsSource) {\n\t\tAssert.notNull(authenticationDetailsSource, \"authenticationDetailsSource cannot be null\");\n\t\tthis.authenticationDetailsSource = authenticationDetailsSource;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "authentication",
            "details",
            "source",
            "to",
            "use"
        ]
    },
    {
        "id": 1370,
        "code": "\tpublic void setAllowFormEncodedBodyParameter(boolean allowFormEncodedBodyParameter) {\n\t\tthis.allowFormEncodedBodyParameter = allowFormEncodedBodyParameter;\n\t}",
        "summary_tokens": [
            "set",
            "if",
            "transport",
            "of",
            "access",
            "token",
            "using",
            "form",
            "encoded",
            "body",
            "parameter",
            "is",
            "supported"
        ]
    },
    {
        "id": 1371,
        "code": "\tpublic void setAllowUriQueryParameter(boolean allowUriQueryParameter) {\n\t\tthis.allowUriQueryParameter = allowUriQueryParameter;\n\t}",
        "summary_tokens": [
            "set",
            "if",
            "transport",
            "of",
            "access",
            "token",
            "using",
            "uri",
            "query",
            "parameter",
            "is",
            "supported"
        ]
    },
    {
        "id": 1372,
        "code": "\tpublic void setBearerTokenHeaderName(String bearerTokenHeaderName) {\n\t\tthis.bearerTokenHeaderName = bearerTokenHeaderName;\n\t}",
        "summary_tokens": [
            "set",
            "this",
            "value",
            "to",
            "configure",
            "what",
            "header",
            "is",
            "checked",
            "when",
            "resolving",
            "a",
            "bearer",
            "token"
        ]
    },
    {
        "id": 1373,
        "code": "\tpublic void handle(HttpServletRequest request, HttpServletResponse response,\n\t\t\tAccessDeniedException accessDeniedException) {\n\t\tMap<String, String> parameters = new LinkedHashMap<>();\n\t\tif (this.realmName != null) {\n\t\t\tparameters.put(\"realm\", this.realmName);\n\t\t}\n\t\tif (request.getUserPrincipal() instanceof AbstractOAuth2TokenAuthenticationToken) {\n\t\t\tparameters.put(\"error\", BearerTokenErrorCodes.INSUFFICIENT_SCOPE);\n\t\t\tparameters.put(\"error_description\",\n\t\t\t\t\t\"The request requires higher privileges than provided by the access token.\");\n\t\t\tparameters.put(\"error_uri\", \"https://tools.ietf.org/html/rfc6750#section-3.1\");\n\t\t}\n\t\tString wwwAuthenticate = computeWWWAuthenticateHeaderValue(parameters);\n\t\tresponse.addHeader(HttpHeaders.WWW_AUTHENTICATE, wwwAuthenticate);\n\t\tresponse.setStatus(HttpStatus.FORBIDDEN.value());\n\t}",
        "summary_tokens": [
            "collect",
            "error",
            "details",
            "from",
            "the",
            "provided",
            "parameters",
            "and",
            "format",
            "according",
            "to",
            "rfc",
            "0",
            "specifically",
            "error",
            "error",
            "description",
            "error",
            "uri",
            "and",
            "scope"
        ]
    },
    {
        "id": 1374,
        "code": "\tpublic void setRealmName(String realmName) {\n\t\tthis.realmName = realmName;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "default",
            "realm",
            "name",
            "to",
            "use",
            "in",
            "the",
            "bearer",
            "token",
            "error",
            "response",
            "realm",
            "name"
        ]
    },
    {
        "id": 1375,
        "code": "\tpublic final void setRealmName(String realmName) {\n\t\tthis.realmName = realmName;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "default",
            "realm",
            "name",
            "to",
            "use",
            "in",
            "the",
            "bearer",
            "token",
            "error",
            "response",
            "realm",
            "name"
        ]
    },
    {
        "id": 1376,
        "code": "\tpublic void setAllowUriQueryParameter(boolean allowUriQueryParameter) {\n\t\tthis.allowUriQueryParameter = allowUriQueryParameter;\n\t}",
        "summary_tokens": [
            "set",
            "if",
            "transport",
            "of",
            "access",
            "token",
            "using",
            "uri",
            "query",
            "parameter",
            "is",
            "supported"
        ]
    },
    {
        "id": 1377,
        "code": "\tpublic void setBearerTokenHeaderName(String bearerTokenHeaderName) {\n\t\tthis.bearerTokenHeaderName = bearerTokenHeaderName;\n\t}",
        "summary_tokens": [
            "set",
            "this",
            "value",
            "to",
            "configure",
            "what",
            "header",
            "is",
            "checked",
            "when",
            "resolving",
            "a",
            "bearer",
            "token"
        ]
    },
    {
        "id": 1378,
        "code": "\tpublic void setAuthenticationConverter(PayloadExchangeAuthenticationConverter authenticationConverter) {\n\t\tAssert.notNull(authenticationConverter, \"authenticationConverter cannot be null\");\n\t\tthis.authenticationConverter = authenticationConverter;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "convert",
            "to",
            "be",
            "used",
            "authentication",
            "converter"
        ]
    },
    {
        "id": 1379,
        "code": "\tpublic static boolean initialize() {\n\t\treturn initialize((registry) -> {\n\t\t});\n\t}",
        "summary_tokens": [
            "ready",
            "open",
            "saml",
            "for",
            "use",
            "and",
            "configure",
            "it",
            "with",
            "reasonable",
            "defaults"
        ]
    },
    {
        "id": 1380,
        "code": "\tpublic static void requireInitialize(Consumer<XMLObjectProviderRegistry> registryConsumer) {\n\t\tif (!initialize(registryConsumer)) {\n\t\t\tthrow new Saml2Exception(\"OpenSAML was already initialized previously\");\n\t\t}\n\t}",
        "summary_tokens": [
            "ready",
            "open",
            "saml",
            "for",
            "use",
            "configure",
            "it",
            "with",
            "reasonable",
            "defaults",
            "and",
            "modify",
            "the",
            "xmlobject",
            "provider",
            "registry",
            "using",
            "the",
            "provided",
            "consumer"
        ]
    },
    {
        "id": 1381,
        "code": "\tpublic final String getErrorCode() {\n\t\treturn this.errorCode;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "error",
            "code"
        ]
    },
    {
        "id": 1382,
        "code": "\tpublic final String getDescription() {\n\t\treturn this.description;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "error",
            "description"
        ]
    },
    {
        "id": 1383,
        "code": "\tpublic boolean hasErrors() {\n\t\treturn !this.errors.isEmpty();\n\t}",
        "summary_tokens": [
            "say",
            "whether",
            "this",
            "result",
            "indicates",
            "success",
            "whether",
            "this",
            "result",
            "has",
            "errors"
        ]
    },
    {
        "id": 1384,
        "code": "\tpublic Collection<Saml2Error> getErrors() {\n\t\treturn Collections.unmodifiableCollection(this.errors);\n\t}",
        "summary_tokens": [
            "return",
            "error",
            "details",
            "regarding",
            "the",
            "validation",
            "attempt",
            "the",
            "collection",
            "of",
            "results",
            "in",
            "this",
            "result",
            "if",
            "any",
            "returns",
            "an",
            "empty",
            "list",
            "otherwise"
        ]
    },
    {
        "id": 1385,
        "code": "\tpublic Saml2ResponseValidatorResult concat(Saml2ResponseValidatorResult result) {\n\t\tAssert.notNull(result, \"result cannot be null\");\n\t\tCollection<Saml2Error> errors = new ArrayList<>(this.errors);\n\t\terrors.addAll(result.getErrors());\n\t\treturn failure(errors);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "new",
            "saml",
            "0",
            "response",
            "validator",
            "result",
            "that",
            "contains",
            "the",
            "errors",
            "from",
            "the",
            "given",
            "saml",
            "0",
            "response",
            "validator",
            "result",
            "as",
            "well",
            "as",
            "this",
            "result"
        ]
    },
    {
        "id": 1386,
        "code": "\tpublic static Saml2ResponseValidatorResult success() {\n\t\treturn NO_ERRORS;\n\t}",
        "summary_tokens": [
            "construct",
            "a",
            "successful",
            "saml",
            "0",
            "response",
            "validator",
            "result",
            "an",
            "saml",
            "0",
            "response",
            "validator",
            "result",
            "with",
            "no",
            "errors"
        ]
    },
    {
        "id": 1387,
        "code": "\tpublic static Saml2ResponseValidatorResult failure(Collection<Saml2Error> errors) {\n\t\tif (errors.isEmpty()) {\n\t\t\treturn NO_ERRORS;\n\t\t}\n\n\t\treturn new Saml2ResponseValidatorResult(errors);\n\t}",
        "summary_tokens": [
            "construct",
            "a",
            "failure",
            "saml",
            "0",
            "response",
            "validator",
            "result",
            "with",
            "the",
            "provided",
            "detail",
            "errors",
            "the",
            "list",
            "of",
            "errors",
            "an",
            "saml",
            "0",
            "response",
            "validator",
            "result",
            "with",
            "the",
            "errors",
            "specified"
        ]
    },
    {
        "id": 1388,
        "code": "\tpublic static Saml2X509Credential encryption(X509Certificate certificate) {\n\t\treturn new Saml2X509Credential(certificate, Saml2X509Credential.Saml2X509CredentialType.ENCRYPTION);\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "saml",
            "0",
            "x",
            "0",
            "credential",
            "that",
            "can",
            "be",
            "used",
            "for",
            "encryption"
        ]
    },
    {
        "id": 1389,
        "code": "\tpublic static Saml2X509Credential verification(X509Certificate certificate) {\n\t\treturn new Saml2X509Credential(certificate, Saml2X509Credential.Saml2X509CredentialType.VERIFICATION);\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "saml",
            "0",
            "x",
            "0",
            "credential",
            "that",
            "can",
            "be",
            "used",
            "for",
            "verification"
        ]
    },
    {
        "id": 1390,
        "code": "\tpublic static Saml2X509Credential decryption(PrivateKey privateKey, X509Certificate certificate) {\n\t\treturn new Saml2X509Credential(privateKey, certificate, Saml2X509Credential.Saml2X509CredentialType.DECRYPTION);\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "saml",
            "0",
            "x",
            "0",
            "credential",
            "that",
            "can",
            "be",
            "used",
            "for",
            "decryption"
        ]
    },
    {
        "id": 1391,
        "code": "\tpublic static Saml2X509Credential signing(PrivateKey privateKey, X509Certificate certificate) {\n\t\treturn new Saml2X509Credential(privateKey, certificate, Saml2X509Credential.Saml2X509CredentialType.SIGNING);\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "saml",
            "0",
            "x",
            "0",
            "credential",
            "that",
            "can",
            "be",
            "used",
            "for",
            "signing"
        ]
    },
    {
        "id": 1392,
        "code": "\tpublic X509Certificate getCertificate() {\n\t\treturn this.certificate;\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "public",
            "certificate",
            "for",
            "this",
            "credential",
            "the",
            "public",
            "certificate"
        ]
    },
    {
        "id": 1393,
        "code": "\tpublic boolean isSigningCredential() {\n\t\treturn getCredentialTypes().contains(Saml2X509CredentialType.SIGNING);\n\t}",
        "summary_tokens": [
            "indicate",
            "whether",
            "this",
            "credential",
            "can",
            "be",
            "used",
            "for",
            "signing",
            "true",
            "if",
            "the",
            "credential",
            "has",
            "a",
            "saml",
            "0",
            "x",
            "0",
            "credential",
            "type",
            "signing",
            "type"
        ]
    },
    {
        "id": 1394,
        "code": "\tpublic boolean isDecryptionCredential() {\n\t\treturn getCredentialTypes().contains(Saml2X509CredentialType.DECRYPTION);\n\t}",
        "summary_tokens": [
            "indicate",
            "whether",
            "this",
            "credential",
            "can",
            "be",
            "used",
            "for",
            "decryption",
            "true",
            "if",
            "the",
            "credential",
            "has",
            "a",
            "saml",
            "0",
            "x",
            "0",
            "credential",
            "type",
            "decryption",
            "type"
        ]
    },
    {
        "id": 1395,
        "code": "\tpublic boolean isVerificationCredential() {\n\t\treturn getCredentialTypes().contains(Saml2X509CredentialType.VERIFICATION);\n\t}",
        "summary_tokens": [
            "indicate",
            "whether",
            "this",
            "credential",
            "can",
            "be",
            "used",
            "for",
            "verification",
            "true",
            "if",
            "the",
            "credential",
            "has",
            "a",
            "saml",
            "0",
            "x",
            "0",
            "credential",
            "type",
            "verification",
            "type"
        ]
    },
    {
        "id": 1396,
        "code": "\tpublic boolean isEncryptionCredential() {\n\t\treturn getCredentialTypes().contains(Saml2X509CredentialType.ENCRYPTION);\n\t}",
        "summary_tokens": [
            "indicate",
            "whether",
            "this",
            "credential",
            "can",
            "be",
            "used",
            "for",
            "encryption",
            "true",
            "if",
            "the",
            "credential",
            "has",
            "a",
            "saml",
            "0",
            "x",
            "0",
            "credential",
            "type",
            "encryption",
            "type"
        ]
    },
    {
        "id": 1397,
        "code": "\tpublic Set<Saml2X509CredentialType> getCredentialTypes() {\n\t\treturn this.credentialTypes;\n\t}",
        "summary_tokens": [
            "list",
            "all",
            "this",
            "credential",
            "s",
            "intended",
            "usages",
            "the",
            "set",
            "of",
            "this",
            "credential",
            "s",
            "intended",
            "usages"
        ]
    },
    {
        "id": 1398,
        "code": "\tpublic String getSamlRequest() {\n\t\treturn this.samlRequest;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "auth",
            "nrequest",
            "xml",
            "value",
            "to",
            "be",
            "sent"
        ]
    },
    {
        "id": 1399,
        "code": "\tpublic String getRelayState() {\n\t\treturn this.relayState;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "relay",
            "state",
            "value",
            "if",
            "present",
            "in",
            "the",
            "parameters",
            "the",
            "relay",
            "state",
            "value",
            "or",
            "null",
            "if",
            "not",
            "available"
        ]
    },
    {
        "id": 1400,
        "code": "\tpublic String getAuthenticationRequestUri() {\n\t\treturn this.authenticationRequestUri;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "uri",
            "endpoint",
            "that",
            "this",
            "auth",
            "nrequest",
            "should",
            "be",
            "sent",
            "to"
        ]
    },
    {
        "id": 1401,
        "code": "\tpublic String getRelyingPartyRegistrationId() {\n\t\treturn this.relyingPartyRegistrationId;\n\t}",
        "summary_tokens": [
            "the",
            "identifier",
            "for",
            "the",
            "relying",
            "party",
            "registration",
            "associated",
            "with",
            "this",
            "request",
            "the",
            "relying",
            "party",
            "registration",
            "id",
            "0"
        ]
    },
    {
        "id": 1402,
        "code": "\tpublic String getId() {\n\t\treturn this.id;\n\t}",
        "summary_tokens": [
            "the",
            "unique",
            "identifier",
            "for",
            "this",
            "authentication",
            "request",
            "the",
            "authentication",
            "request",
            "identifier",
            "0"
        ]
    },
    {
        "id": 1403,
        "code": "\tdefault <A> A getFirstAttribute(String name) {\n\t\tList<A> values = getAttribute(name);\n\t\treturn CollectionUtils.firstElement(values);\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "first",
            "value",
            "of",
            "saml",
            "0",
            "token",
            "attribute",
            "by",
            "name",
            "name",
            "the",
            "name",
            "of",
            "the",
            "attribute",
            "a",
            "the",
            "type",
            "of",
            "the",
            "attribute",
            "the",
            "first",
            "attribute",
            "value",
            "or",
            "null",
            "otherwise",
            "0"
        ]
    },
    {
        "id": 1404,
        "code": "\tdefault <A> List<A> getAttribute(String name) {\n\t\treturn (List<A>) getAttributes().get(name);\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "saml",
            "0",
            "token",
            "attribute",
            "by",
            "name",
            "name",
            "the",
            "name",
            "of",
            "the",
            "attribute",
            "a",
            "the",
            "type",
            "of",
            "the",
            "attribute",
            "the",
            "attribute",
            "or",
            "null",
            "otherwise",
            "0"
        ]
    },
    {
        "id": 1405,
        "code": "\tdefault Map<String, List<Object>> getAttributes() {\n\t\treturn Collections.emptyMap();\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "saml",
            "0",
            "token",
            "attributes",
            "the",
            "saml",
            "0",
            "token",
            "attributes",
            "0"
        ]
    },
    {
        "id": 1406,
        "code": "\tdefault String getRelyingPartyRegistrationId() {\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "relying",
            "party",
            "registration",
            "identifier",
            "the",
            "relying",
            "party",
            "registration",
            "identifier",
            "0"
        ]
    },
    {
        "id": 1407,
        "code": "\tpublic String getSaml2Response() {\n\t\treturn this.saml2Response;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "saml",
            "response",
            "object",
            "as",
            "decoded",
            "xml"
        ]
    },
    {
        "id": 1408,
        "code": "\tpublic Saml2Error getSaml2Error() {\n\t\treturn this.error;\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "associated",
            "saml",
            "0",
            "error",
            "the",
            "associated",
            "saml",
            "0",
            "error"
        ]
    },
    {
        "id": 1409,
        "code": "\tpublic Object getCredentials() {\n\t\treturn getSaml2Response();\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "decoded",
            "and",
            "inflated",
            "saml",
            "0"
        ]
    },
    {
        "id": 1410,
        "code": "\tpublic RelyingPartyRegistration getRelyingPartyRegistration() {\n\t\treturn this.relyingPartyRegistration;\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "resolved",
            "relying",
            "party",
            "registration",
            "associated",
            "with",
            "the",
            "request",
            "the",
            "resolved",
            "relying",
            "party",
            "registration",
            "0"
        ]
    },
    {
        "id": 1411,
        "code": "\tpublic String getSaml2Response() {\n\t\treturn this.saml2Response;\n\t}",
        "summary_tokens": [
            "returns",
            "inflated",
            "and",
            "decoded",
            "xml",
            "representation",
            "of",
            "the",
            "saml",
            "0",
            "response",
            "inflated",
            "and",
            "decoded",
            "xml",
            "representation",
            "of",
            "the",
            "saml",
            "0",
            "response"
        ]
    },
    {
        "id": 1412,
        "code": "\tpublic void setAuthenticated(boolean authenticated) {\n\t\tthrow new IllegalArgumentException();\n\t}",
        "summary_tokens": [
            "the",
            "state",
            "of",
            "this",
            "object",
            "cannot",
            "be",
            "changed"
        ]
    },
    {
        "id": 1413,
        "code": "\tpublic AbstractSaml2AuthenticationRequest getAuthenticationRequest() {\n\t\treturn this.authenticationRequest;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "authentication",
            "request",
            "sent",
            "to",
            "the",
            "assertion",
            "party",
            "or",
            "null",
            "if",
            "no",
            "authentication",
            "request",
            "is",
            "present",
            "the",
            "authentication",
            "request",
            "sent",
            "to",
            "the",
            "assertion",
            "party",
            "0"
        ]
    },
    {
        "id": 1414,
        "code": "\tpublic Saml2MessageBinding getBinding() {\n\t\treturn Saml2MessageBinding.POST;\n\t}",
        "summary_tokens": [
            "saml",
            "0",
            "message",
            "binding",
            "post"
        ]
    },
    {
        "id": 1415,
        "code": "\tpublic static Builder withRelyingPartyRegistration(RelyingPartyRegistration registration) {\n\t\tString location = registration.getAssertingPartyDetails().getSingleSignOnServiceLocation();\n\t\treturn new Builder(registration).authenticationRequestUri(location);\n\t}",
        "summary_tokens": [
            "constructs",
            "a",
            "builder",
            "from",
            "a",
            "relying",
            "party",
            "registration",
            "object"
        ]
    },
    {
        "id": 1416,
        "code": "\tpublic String getSigAlg() {\n\t\treturn this.sigAlg;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "sig",
            "alg",
            "value",
            "for",
            "saml",
            "0",
            "message",
            "binding",
            "redirect",
            "requests",
            "the",
            "sig",
            "alg",
            "value"
        ]
    },
    {
        "id": 1417,
        "code": "\tpublic String getSignature() {\n\t\treturn this.signature;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "signature",
            "value",
            "for",
            "saml",
            "0",
            "message",
            "binding",
            "redirect",
            "requests",
            "the",
            "signature",
            "value"
        ]
    },
    {
        "id": 1418,
        "code": "\tpublic Saml2MessageBinding getBinding() {\n\t\treturn Saml2MessageBinding.REDIRECT;\n\t}",
        "summary_tokens": [
            "saml",
            "0",
            "message",
            "binding",
            "redirect"
        ]
    },
    {
        "id": 1419,
        "code": "\tpublic static Builder withRelyingPartyRegistration(RelyingPartyRegistration registration) {\n\t\tString location = registration.getAssertingPartyDetails().getSingleSignOnServiceLocation();\n\t\treturn new Builder(registration).authenticationRequestUri(location);\n\t}",
        "summary_tokens": [
            "constructs",
            "a",
            "saml",
            "0",
            "post",
            "authentication",
            "request"
        ]
    },
    {
        "id": 1420,
        "code": "\tpublic String getId() {\n\t\treturn this.id;\n\t}",
        "summary_tokens": [
            "the",
            "unique",
            "identifier",
            "for",
            "this",
            "logout",
            "request",
            "the",
            "logout",
            "request",
            "identifier"
        ]
    },
    {
        "id": 1421,
        "code": "\tpublic String getLocation() {\n\t\treturn this.location;\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "location",
            "of",
            "the",
            "asserting",
            "party",
            "s",
            "a",
            "href",
            "https",
            "docs"
        ]
    },
    {
        "id": 1422,
        "code": "\tpublic Saml2MessageBinding getBinding() {\n\t\treturn this.binding;\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "binding",
            "for",
            "the",
            "asserting",
            "party",
            "s",
            "a",
            "href",
            "https",
            "docs"
        ]
    },
    {
        "id": 1423,
        "code": "\tpublic String getSamlRequest() {\n\t\treturn this.parameters.get(Saml2ParameterNames.SAML_REQUEST);\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "signed",
            "and",
            "serialized",
            "lt",
            "saml",
            "0",
            "logout",
            "request",
            "gt",
            "payload",
            "the",
            "signed",
            "and",
            "serialized",
            "lt",
            "saml",
            "0",
            "logout",
            "request",
            "gt",
            "payload"
        ]
    },
    {
        "id": 1424,
        "code": "\tpublic String getRelayState() {\n\t\treturn this.parameters.get(Saml2ParameterNames.RELAY_STATE);\n\t}",
        "summary_tokens": [
            "the",
            "relay",
            "state",
            "associated",
            "with",
            "this",
            "logout",
            "request",
            "the",
            "relay",
            "state"
        ]
    },
    {
        "id": 1425,
        "code": "\tpublic String getParameter(String name) {\n\t\treturn this.parameters.get(name);\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "name",
            "parameters",
            "a",
            "short",
            "hand",
            "for",
            "code",
            "get",
            "parameters"
        ]
    },
    {
        "id": 1426,
        "code": "\tpublic String getParametersQuery() {\n\t\treturn this.encoder.apply(this.parameters);\n\t}",
        "summary_tokens": [
            "get",
            "an",
            "encoded",
            "query",
            "string",
            "of",
            "all",
            "parameters"
        ]
    },
    {
        "id": 1427,
        "code": "\tpublic String getRelyingPartyRegistrationId() {\n\t\treturn this.relyingPartyRegistrationId;\n\t}",
        "summary_tokens": [
            "the",
            "identifier",
            "for",
            "the",
            "relying",
            "party",
            "registration",
            "associated",
            "with",
            "this",
            "logout",
            "request",
            "the",
            "relying",
            "party",
            "registration",
            "id"
        ]
    },
    {
        "id": 1428,
        "code": "\tpublic static Builder withRelyingPartyRegistration(RelyingPartyRegistration registration) {\n\t\treturn new Builder(registration);\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "builder",
            "instance",
            "from",
            "this",
            "relying",
            "party",
            "registration"
        ]
    },
    {
        "id": 1429,
        "code": "\tpublic RelyingPartyRegistration getRelyingPartyRegistration() {\n\t\treturn this.registration;\n\t}",
        "summary_tokens": [
            "the",
            "relying",
            "party",
            "registration",
            "representing",
            "this",
            "relying",
            "party",
            "the",
            "relying",
            "party"
        ]
    },
    {
        "id": 1430,
        "code": "\tpublic Authentication getAuthentication() {\n\t\treturn this.authentication;\n\t}",
        "summary_tokens": [
            "the",
            "current",
            "authentication",
            "the",
            "authenticated",
            "user"
        ]
    },
    {
        "id": 1431,
        "code": "\tpublic String getResponseLocation() {\n\t\treturn this.location;\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "response",
            "location",
            "of",
            "the",
            "asserting",
            "party",
            "s",
            "a",
            "href",
            "https",
            "docs"
        ]
    },
    {
        "id": 1432,
        "code": "\tpublic Saml2MessageBinding getBinding() {\n\t\treturn this.binding;\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "binding",
            "for",
            "the",
            "asserting",
            "party",
            "s",
            "a",
            "href",
            "https",
            "docs"
        ]
    },
    {
        "id": 1433,
        "code": "\tpublic String getSamlResponse() {\n\t\treturn this.parameters.get(Saml2ParameterNames.SAML_RESPONSE);\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "signed",
            "and",
            "serialized",
            "lt",
            "saml",
            "0",
            "logout",
            "response",
            "gt",
            "payload",
            "the",
            "signed",
            "and",
            "serialized",
            "lt",
            "saml",
            "0",
            "logout",
            "response",
            "gt",
            "payload"
        ]
    },
    {
        "id": 1434,
        "code": "\tpublic String getRelayState() {\n\t\treturn this.parameters.get(Saml2ParameterNames.RELAY_STATE);\n\t}",
        "summary_tokens": [
            "the",
            "relay",
            "state",
            "associated",
            "with",
            "this",
            "logout",
            "request",
            "the",
            "relay",
            "state"
        ]
    },
    {
        "id": 1435,
        "code": "\tpublic String getParameter(String name) {\n\t\treturn this.parameters.get(name);\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "name",
            "parameter",
            "a",
            "short",
            "hand",
            "for",
            "code",
            "get",
            "parameters"
        ]
    },
    {
        "id": 1436,
        "code": "\tpublic String getParametersQuery() {\n\t\treturn this.encoder.apply(this.parameters);\n\t}",
        "summary_tokens": [
            "get",
            "an",
            "encoded",
            "query",
            "string",
            "of",
            "all",
            "parameters"
        ]
    },
    {
        "id": 1437,
        "code": "\tpublic static Builder withRelyingPartyRegistration(RelyingPartyRegistration registration) {\n\t\treturn new Builder(registration);\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "builder",
            "instance",
            "from",
            "this",
            "relying",
            "party",
            "registration"
        ]
    },
    {
        "id": 1438,
        "code": "\tpublic RelyingPartyRegistration getRelyingPartyRegistration() {\n\t\treturn this.registration;\n\t}",
        "summary_tokens": [
            "the",
            "relying",
            "party",
            "registration",
            "representing",
            "this",
            "relying",
            "party",
            "the",
            "relying",
            "party"
        ]
    },
    {
        "id": 1439,
        "code": "\tpublic boolean hasErrors() {\n\t\treturn !this.errors.isEmpty();\n\t}",
        "summary_tokens": [
            "say",
            "whether",
            "this",
            "result",
            "indicates",
            "success",
            "whether",
            "this",
            "result",
            "has",
            "errors"
        ]
    },
    {
        "id": 1440,
        "code": "\tpublic Collection<Saml2Error> getErrors() {\n\t\treturn Collections.unmodifiableCollection(this.errors);\n\t}",
        "summary_tokens": [
            "return",
            "error",
            "details",
            "regarding",
            "the",
            "validation",
            "attempt",
            "the",
            "collection",
            "of",
            "results",
            "in",
            "this",
            "result",
            "if",
            "any",
            "returns",
            "an",
            "empty",
            "list",
            "otherwise"
        ]
    },
    {
        "id": 1441,
        "code": "\tpublic static Saml2LogoutValidatorResult success() {\n\t\treturn NO_ERRORS;\n\t}",
        "summary_tokens": [
            "construct",
            "a",
            "successful",
            "saml",
            "0",
            "logout",
            "validator",
            "result",
            "an",
            "saml",
            "0",
            "logout",
            "validator",
            "result",
            "with",
            "no",
            "errors"
        ]
    },
    {
        "id": 1442,
        "code": "\tpublic static Saml2LogoutValidatorResult.Builder withErrors(Saml2Error... errors) {\n\t\treturn new Builder(errors);\n\t}",
        "summary_tokens": [
            "construct",
            "a",
            "saml",
            "0",
            "logout",
            "validator",
            "result"
        ]
    },
    {
        "id": 1443,
        "code": "\tpublic void setEntityDescriptorCustomizer(Consumer<EntityDescriptorParameters> entityDescriptorCustomizer) {\n\t\tAssert.notNull(entityDescriptorCustomizer, \"entityDescriptorCustomizer cannot be null\");\n\t\tthis.entityDescriptorCustomizer = entityDescriptorCustomizer;\n\t}",
        "summary_tokens": [
            "set",
            "a",
            "consumer",
            "for",
            "modifying",
            "the",
            "open",
            "saml",
            "entity",
            "descriptor",
            "entity",
            "descriptor",
            "customizer",
            "a",
            "consumer",
            "that",
            "accepts",
            "an",
            "entity",
            "descriptor",
            "parameters",
            "0"
        ]
    },
    {
        "id": 1444,
        "code": "\tpublic EntityDescriptor getEntityDescriptor() {\n\t\treturn this.descriptor;\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "entity",
            "descriptor",
            "that",
            "underlies",
            "this",
            "org"
        ]
    },
    {
        "id": 1445,
        "code": "\tpublic static OpenSamlAssertingPartyDetails.Builder withEntityDescriptor(EntityDescriptor entity) {\n\t\treturn new OpenSamlAssertingPartyDetails.Builder(entity);\n\t}",
        "summary_tokens": [
            "use",
            "this",
            "entity",
            "descriptor",
            "to",
            "begin",
            "building",
            "an",
            "org"
        ]
    },
    {
        "id": 1446,
        "code": "\tpublic String getRegistrationId() {\n\t\treturn this.registrationId;\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "unique",
            "registration",
            "id",
            "for",
            "this",
            "rp",
            "ap",
            "pair",
            "the",
            "unique",
            "registration",
            "id",
            "for",
            "this",
            "rp",
            "ap",
            "pair"
        ]
    },
    {
        "id": 1447,
        "code": "\tpublic String getEntityId() {\n\t\treturn this.entityId;\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "relying",
            "party",
            "s",
            "a",
            "href",
            "https",
            "www"
        ]
    },
    {
        "id": 1448,
        "code": "\tpublic String getAssertionConsumerServiceLocation() {\n\t\treturn this.assertionConsumerServiceLocation;\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "assertion",
            "consumer",
            "service",
            "location"
        ]
    },
    {
        "id": 1449,
        "code": "\tpublic Saml2MessageBinding getAssertionConsumerServiceBinding() {\n\t\treturn this.assertionConsumerServiceBinding;\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "assertion",
            "consumer",
            "service",
            "binding"
        ]
    },
    {
        "id": 1450,
        "code": "\tpublic Saml2MessageBinding getSingleLogoutServiceBinding() {\n\t\tAssert.state(this.singleLogoutServiceBindings.size() == 1, \"Method does not support multiple bindings.\");\n\t\treturn this.singleLogoutServiceBindings.iterator().next();\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "a",
            "href",
            "https",
            "docs"
        ]
    },
    {
        "id": 1451,
        "code": "\tpublic Collection<Saml2MessageBinding> getSingleLogoutServiceBindings() {\n\t\treturn this.singleLogoutServiceBindings;\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "a",
            "href",
            "https",
            "docs"
        ]
    },
    {
        "id": 1452,
        "code": "\tpublic String getSingleLogoutServiceLocation() {\n\t\treturn this.singleLogoutServiceLocation;\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "a",
            "href",
            "https",
            "docs"
        ]
    },
    {
        "id": 1453,
        "code": "\tpublic String getSingleLogoutServiceResponseLocation() {\n\t\treturn this.singleLogoutServiceResponseLocation;\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "a",
            "href",
            "https",
            "docs"
        ]
    },
    {
        "id": 1454,
        "code": "\tpublic String getNameIdFormat() {\n\t\treturn this.nameIdFormat;\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "name",
            "id",
            "format"
        ]
    },
    {
        "id": 1455,
        "code": "\tpublic Collection<Saml2X509Credential> getDecryptionX509Credentials() {\n\t\treturn this.decryptionX509Credentials;\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "collection",
            "of",
            "decryption",
            "saml",
            "0",
            "x",
            "0",
            "credential",
            "s",
            "associated",
            "with",
            "this",
            "relying",
            "party",
            "the",
            "collection",
            "of",
            "decryption",
            "saml",
            "0",
            "x",
            "0",
            "credential",
            "s",
            "associated",
            "with",
            "this",
            "relying",
            "party",
            "0"
        ]
    },
    {
        "id": 1456,
        "code": "\tpublic Collection<Saml2X509Credential> getSigningX509Credentials() {\n\t\treturn this.signingX509Credentials;\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "collection",
            "of",
            "signing",
            "saml",
            "0",
            "x",
            "0",
            "credential",
            "s",
            "associated",
            "with",
            "this",
            "relying",
            "party",
            "the",
            "collection",
            "of",
            "signing",
            "saml",
            "0",
            "x",
            "0",
            "credential",
            "s",
            "associated",
            "with",
            "this",
            "relying",
            "party",
            "0"
        ]
    },
    {
        "id": 1457,
        "code": "\tpublic AssertingPartyDetails getAssertingPartyDetails() {\n\t\treturn this.assertingPartyDetails;\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "configuration",
            "details",
            "for",
            "the",
            "asserting",
            "party",
            "the",
            "asserting",
            "party",
            "details",
            "0"
        ]
    },
    {
        "id": 1458,
        "code": "\tpublic static Builder withRegistrationId(String registrationId) {\n\t\tAssert.hasText(registrationId, \"registrationId cannot be empty\");\n\t\treturn new Builder(registrationId);\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "relying",
            "party",
            "registration",
            "builder",
            "with",
            "a",
            "known",
            "registration",
            "id",
            "registration",
            "id",
            "a",
            "string",
            "identifier",
            "for",
            "the",
            "relying",
            "party",
            "registration",
            "builder",
            "to",
            "create",
            "a",
            "relying",
            "party",
            "registration",
            "object"
        ]
    },
    {
        "id": 1459,
        "code": "\tpublic static Builder withRelyingPartyRegistration(RelyingPartyRegistration registration) {\n\t\tAssert.notNull(registration, \"registration cannot be null\");\n\t\treturn withRegistrationId(registration.getRegistrationId()).entityId(registration.getEntityId())\n\t\t\t\t.signingX509Credentials((c) -> c.addAll(registration.getSigningX509Credentials()))\n\t\t\t\t.decryptionX509Credentials((c) -> c.addAll(registration.getDecryptionX509Credentials()))\n\t\t\t\t.assertionConsumerServiceLocation(registration.getAssertionConsumerServiceLocation())\n\t\t\t\t.assertionConsumerServiceBinding(registration.getAssertionConsumerServiceBinding())\n\t\t\t\t.singleLogoutServiceLocation(registration.getSingleLogoutServiceLocation())\n\t\t\t\t.singleLogoutServiceResponseLocation(registration.getSingleLogoutServiceResponseLocation())\n\t\t\t\t.singleLogoutServiceBindings((c) -> c.addAll(registration.getSingleLogoutServiceBindings()))\n\t\t\t\t.nameIdFormat(registration.getNameIdFormat())\n\t\t\t\t.assertingPartyDetails((assertingParty) -> assertingParty\n\t\t\t\t\t\t.entityId(registration.getAssertingPartyDetails().getEntityId())\n\t\t\t\t\t\t.wantAuthnRequestsSigned(registration.getAssertingPartyDetails().getWantAuthnRequestsSigned())\n\t\t\t\t\t\t.signingAlgorithms((algorithms) -> algorithms\n\t\t\t\t\t\t\t\t.addAll(registration.getAssertingPartyDetails().getSigningAlgorithms()))\n\t\t\t\t\t\t.verificationX509Credentials((c) -> c\n\t\t\t\t\t\t\t\t.addAll(registration.getAssertingPartyDetails().getVerificationX509Credentials()))\n\t\t\t\t\t\t.encryptionX509Credentials(\n\t\t\t\t\t\t\t\t(c) -> c.addAll(registration.getAssertingPartyDetails().getEncryptionX509Credentials()))\n\t\t\t\t\t\t.singleSignOnServiceLocation(\n\t\t\t\t\t\t\t\tregistration.getAssertingPartyDetails().getSingleSignOnServiceLocation())\n\t\t\t\t\t\t.singleSignOnServiceBinding(\n\t\t\t\t\t\t\t\tregistration.getAssertingPartyDetails().getSingleSignOnServiceBinding())\n\t\t\t\t\t\t.singleLogoutServiceLocation(\n\t\t\t\t\t\t\t\tregistration.getAssertingPartyDetails().getSingleLogoutServiceLocation())\n\t\t\t\t\t\t.singleLogoutServiceResponseLocation(\n\t\t\t\t\t\t\t\tregistration.getAssertingPartyDetails().getSingleLogoutServiceResponseLocation())\n\t\t\t\t\t\t.singleLogoutServiceBinding(\n\t\t\t\t\t\t\t\tregistration.getAssertingPartyDetails().getSingleLogoutServiceBinding()));\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "relying",
            "party",
            "registration",
            "builder",
            "based",
            "on",
            "an",
            "existing",
            "object",
            "registration",
            "the",
            "relying",
            "party",
            "registration",
            "builder",
            "to",
            "create",
            "a",
            "relying",
            "party",
            "registration",
            "object"
        ]
    },
    {
        "id": 1460,
        "code": "\tpublic static RelyingPartyRegistration.Builder fromMetadataLocation(String metadataLocation) {\n\t\ttry (InputStream source = resourceLoader.getResource(metadataLocation).getInputStream()) {\n\t\t\treturn fromMetadata(source);\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tif (ex.getCause() instanceof Saml2Exception) {\n\t\t\t\tthrow (Saml2Exception) ex.getCause();\n\t\t\t}\n\t\t\tthrow new Saml2Exception(ex);\n\t\t}\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "relying",
            "party",
            "registration"
        ]
    },
    {
        "id": 1461,
        "code": "\tpublic static RelyingPartyRegistration.Builder fromMetadata(InputStream source) {\n\t\treturn collectionFromMetadata(source).iterator().next();\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "relying",
            "party",
            "registration"
        ]
    },
    {
        "id": 1462,
        "code": "\tpublic static Collection<RelyingPartyRegistration.Builder> collectionFromMetadataLocation(String location) {\n\t\ttry (InputStream source = resourceLoader.getResource(location).getInputStream()) {\n\t\t\treturn collectionFromMetadata(source);\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tif (ex.getCause() instanceof Saml2Exception) {\n\t\t\t\tthrow (Saml2Exception) ex.getCause();\n\t\t\t}\n\t\t\tthrow new Saml2Exception(ex);\n\t\t}\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "collection",
            "of",
            "relying",
            "party",
            "registration"
        ]
    },
    {
        "id": 1463,
        "code": "\tpublic static Collection<RelyingPartyRegistration.Builder> collectionFromMetadata(InputStream source) {\n\t\tCollection<RelyingPartyRegistration.Builder> builders = new ArrayList<>();\n\t\tfor (AssertingPartyDetails.Builder builder : assertingPartyMetadataConverter.convert(source)) {\n\t\t\tbuilders.add(RelyingPartyRegistration.withAssertingPartyDetails(builder.build()));\n\t\t}\n\t\treturn builders;\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "collection",
            "of",
            "relying",
            "party",
            "registration"
        ]
    },
    {
        "id": 1464,
        "code": "\tpublic void setAuthenticationRequestRepository(\n\t\t\tSaml2AuthenticationRequestRepository<AbstractSaml2AuthenticationRequest> authenticationRequestRepository) {\n\t\tAssert.notNull(authenticationRequestRepository, \"authenticationRequestRepository cannot be null\");\n\t\tthis.authenticationRequestRepository = authenticationRequestRepository;\n\t\tsetAuthenticationRequestRepositoryIntoAuthenticationConverter(authenticationRequestRepository);\n\t}",
        "summary_tokens": [
            "use",
            "the",
            "given",
            "saml",
            "0",
            "authentication",
            "request",
            "repository",
            "to",
            "remove",
            "the",
            "saved",
            "authentication",
            "request"
        ]
    },
    {
        "id": 1465,
        "code": "\tpublic void setAuthenticationRequestRepository(\n\t\t\tSaml2AuthenticationRequestRepository<AbstractSaml2AuthenticationRequest> authenticationRequestRepository) {\n\t\tAssert.notNull(authenticationRequestRepository, \"authenticationRequestRepository cannot be null\");\n\t\tthis.authenticationRequestRepository = authenticationRequestRepository;\n\t}",
        "summary_tokens": [
            "use",
            "the",
            "given",
            "saml",
            "0",
            "authentication",
            "request",
            "repository",
            "to",
            "save",
            "the",
            "authentication",
            "request",
            "authentication",
            "request",
            "repository",
            "the",
            "saml",
            "0",
            "authentication",
            "request",
            "repository",
            "to",
            "use",
            "0"
        ]
    },
    {
        "id": 1466,
        "code": "\tpublic void setAuthenticationRequestRepository(\n\t\t\tSaml2AuthenticationRequestRepository<AbstractSaml2AuthenticationRequest> authenticationRequestRepository) {\n\t\tAssert.notNull(authenticationRequestRepository, \"authenticationRequestRepository cannot be null\");\n\t\tthis.loader = authenticationRequestRepository::loadAuthenticationRequest;\n\t}",
        "summary_tokens": [
            "use",
            "the",
            "given",
            "saml",
            "0",
            "authentication",
            "request",
            "repository",
            "to",
            "load",
            "authentication",
            "request"
        ]
    },
    {
        "id": 1467,
        "code": "\tpublic void setRequestMatcher(RequestMatcher requestMatcher) {\n\t\tAssert.notNull(requestMatcher, \"requestMatcher cannot be null\");\n\t\tthis.requestMatcher = requestMatcher;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "request",
            "matcher",
            "that",
            "determines",
            "whether",
            "this",
            "filter",
            "should",
            "handle",
            "the",
            "incoming",
            "http",
            "servlet",
            "request",
            "request",
            "matcher",
            "the",
            "request",
            "matcher",
            "to",
            "identify",
            "requests",
            "for",
            "metadata"
        ]
    },
    {
        "id": 1468,
        "code": "\tpublic void setMetadataFilename(String metadataFilename) {\n\t\tAssert.hasText(metadataFilename, \"metadataFilename cannot be empty\");\n\t\tAssert.isTrue(metadataFilename.contains(\"{registrationId}\"),\n\t\t\t\t\"metadataFilename must contain a {registrationId} match variable\");\n\t\tthis.metadataFilename = metadataFilename;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "metadata",
            "filename",
            "template",
            "containing",
            "the",
            "registration",
            "id",
            "template",
            "variable"
        ]
    },
    {
        "id": 1469,
        "code": "\tSaml2LogoutRequest resolve(HttpServletRequest request, Authentication authentication) {\n\t\treturn resolve(request, authentication, (registration, logoutRequest) -> {\n\t\t});\n\t}",
        "summary_tokens": [
            "prepare",
            "to",
            "create",
            "sign",
            "and",
            "serialize",
            "a",
            "saml",
            "0"
        ]
    },
    {
        "id": 1470,
        "code": "\tSaml2LogoutResponse resolve(HttpServletRequest request, Authentication authentication) {\n\t\treturn resolve(request, authentication, (registration, logoutResponse) -> {\n\t\t});\n\t}",
        "summary_tokens": [
            "prepare",
            "to",
            "create",
            "sign",
            "and",
            "serialize",
            "a",
            "saml",
            "0"
        ]
    },
    {
        "id": 1471,
        "code": "\tpublic void setLogoutRequestRepository(Saml2LogoutRequestRepository logoutRequestRepository) {\n\t\tAssert.notNull(logoutRequestRepository, \"logoutRequestRepository cannot be null\");\n\t\tthis.logoutRequestRepository = logoutRequestRepository;\n\t}",
        "summary_tokens": [
            "use",
            "this",
            "saml",
            "0",
            "logout",
            "request",
            "repository",
            "for",
            "retrieving",
            "the",
            "saml",
            "0"
        ]
    },
    {
        "id": 1472,
        "code": "\tpublic void onLogoutSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication)\n\t\t\tthrows IOException {\n\t\tSaml2LogoutRequest logoutRequest = this.logoutRequestResolver.resolve(request, authentication);\n\t\tif (logoutRequest == null) {\n\t\t\tthis.logger.trace(\"Returning 401 since no logout request generated\");\n\t\t\tresponse.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n\t\t\treturn;\n\t\t}\n\t\tthis.logoutRequestRepository.saveLogoutRequest(logoutRequest, request, response);\n\t\tif (logoutRequest.getBinding() == Saml2MessageBinding.REDIRECT) {\n\t\t\tdoRedirect(request, response, logoutRequest);\n\t\t}\n\t\telse {\n\t\t\tdoPost(response, logoutRequest);\n\t\t}\n\t}",
        "summary_tokens": [
            "produce",
            "and",
            "send",
            "a",
            "saml",
            "0"
        ]
    },
    {
        "id": 1473,
        "code": "\tpublic void setLogoutRequestRepository(Saml2LogoutRequestRepository logoutRequestRepository) {\n\t\tAssert.notNull(logoutRequestRepository, \"logoutRequestRepository cannot be null\");\n\t\tthis.logoutRequestRepository = logoutRequestRepository;\n\t}",
        "summary_tokens": [
            "use",
            "this",
            "saml",
            "0",
            "logout",
            "request",
            "repository",
            "for",
            "saving",
            "the",
            "saml",
            "0"
        ]
    },
    {
        "id": 1474,
        "code": "\tpublic void setResponseElementsDecrypter(Consumer<ResponseToken> responseElementsDecrypter) {\n\t\tAssert.notNull(responseElementsDecrypter, \"responseElementsDecrypter cannot be null\");\n\t\tthis.responseElementsDecrypter = responseElementsDecrypter;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "consumer",
            "strategy",
            "to",
            "use",
            "for",
            "decrypting",
            "elements",
            "of",
            "a",
            "validated",
            "response"
        ]
    },
    {
        "id": 1475,
        "code": "\tpublic void setAssertionValidator(Converter<AssertionToken, Saml2ResponseValidatorResult> assertionValidator) {\n\t\tAssert.notNull(assertionValidator, \"assertionValidator cannot be null\");\n\t\tthis.assertionValidator = assertionValidator;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "converter",
            "to",
            "use",
            "for",
            "validating",
            "each",
            "assertion",
            "in",
            "the",
            "saml",
            "0"
        ]
    },
    {
        "id": 1476,
        "code": "\tpublic void setAssertionElementsDecrypter(Consumer<AssertionToken> assertionDecrypter) {\n\t\tAssert.notNull(assertionDecrypter, \"assertionDecrypter cannot be null\");\n\t\tthis.assertionElementsDecrypter = assertionDecrypter;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "consumer",
            "strategy",
            "to",
            "use",
            "for",
            "decrypting",
            "elements",
            "of",
            "a",
            "validated",
            "assertion"
        ]
    },
    {
        "id": 1477,
        "code": "\tpublic void setResponseAuthenticationConverter(\n\t\t\tConverter<ResponseToken, ? extends AbstractAuthenticationToken> responseAuthenticationConverter) {\n\t\tAssert.notNull(responseAuthenticationConverter, \"responseAuthenticationConverter cannot be null\");\n\t\tthis.responseAuthenticationConverter = responseAuthenticationConverter;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "converter",
            "to",
            "use",
            "for",
            "converting",
            "a",
            "validated",
            "response",
            "into",
            "an",
            "abstract",
            "authentication",
            "token"
        ]
    },
    {
        "id": 1478,
        "code": "\tpublic void setAuthoritiesExtractor(\n\t\t\tConverter<Assertion, Collection<? extends GrantedAuthority>> authoritiesExtractor) {\n\t\tAssert.notNull(authoritiesExtractor, \"authoritiesExtractor cannot be null\");\n\t\tthis.authoritiesExtractor = authoritiesExtractor;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "converter",
            "used",
            "for",
            "extracting",
            "assertion",
            "attributes",
            "that",
            "can",
            "be",
            "mapped",
            "to",
            "authorities"
        ]
    },
    {
        "id": 1479,
        "code": "\tpublic void setAuthoritiesMapper(GrantedAuthoritiesMapper authoritiesMapper) {\n\t\tAssert.notNull(authoritiesMapper, \"authoritiesMapper cannot be null\");\n\t\tthis.authoritiesMapper = authoritiesMapper;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "granted",
            "authorities",
            "mapper",
            "used",
            "for",
            "mapping",
            "assertion",
            "attributes",
            "to",
            "a",
            "new",
            "set",
            "of",
            "authorities",
            "which",
            "will",
            "be",
            "associated",
            "to",
            "the",
            "saml",
            "0",
            "authentication"
        ]
    },
    {
        "id": 1480,
        "code": "\tpublic void setResponseTimeValidationSkew(Duration responseTimeValidationSkew) {\n\t\tthis.responseTimeValidationSkew = responseTimeValidationSkew;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "duration",
            "for",
            "how",
            "much",
            "time",
            "skew",
            "an",
            "assertion",
            "may",
            "tolerate",
            "during",
            "timestamp",
            "not",
            "on",
            "or",
            "before",
            "and",
            "not",
            "on",
            "or",
            "after",
            "validation"
        ]
    },
    {
        "id": 1481,
        "code": "\tpublic static Converter<AssertionToken, Saml2ResponseValidatorResult> createDefaultAssertionValidator(\n\t\t\tConverter<AssertionToken, ValidationContext> contextConverter) {\n\n\t\treturn createAssertionValidator(Saml2ErrorCodes.INVALID_ASSERTION,\n\t\t\t\t(assertionToken) -> SAML20AssertionValidators.attributeValidator, contextConverter);\n\t}",
        "summary_tokens": [
            "construct",
            "a",
            "default",
            "strategy",
            "for",
            "validating",
            "each",
            "saml",
            "0"
        ]
    },
    {
        "id": 1482,
        "code": "\tpublic static Converter<ResponseToken, Saml2Authentication> createDefaultResponseAuthenticationConverter() {\n\t\treturn (responseToken) -> {\n\t\t\tSaml2AuthenticationToken token = responseToken.token;\n\t\t\tResponse response = responseToken.response;\n\t\t\tAssertion assertion = CollectionUtils.firstElement(response.getAssertions());\n\t\t\tString username = assertion.getSubject().getNameID().getValue();\n\t\t\tMap<String, List<Object>> attributes = getAssertionAttributes(assertion);\n\t\t\tDefaultSaml2AuthenticatedPrincipal principal = new DefaultSaml2AuthenticatedPrincipal(username, attributes);\n\t\t\tString registrationId = responseToken.token.getRelyingPartyRegistration().getRegistrationId();\n\t\t\tprincipal.setRelyingPartyRegistrationId(registrationId);\n\t\t\treturn new Saml2Authentication(principal, token.getSaml2Response(),\n\t\t\t\t\tCollections.singleton(new SimpleGrantedAuthority(\"ROLE_USER\")));\n\t\t};\n\t}",
        "summary_tokens": [
            "construct",
            "a",
            "default",
            "strategy",
            "for",
            "converting",
            "a",
            "saml",
            "0"
        ]
    },
    {
        "id": 1483,
        "code": "\tpublic Authentication authenticate(Authentication authentication) throws AuthenticationException {\n\t\ttry {\n\t\t\tSaml2AuthenticationToken token = (Saml2AuthenticationToken) authentication;\n\t\t\tString serializedResponse = token.getSaml2Response();\n\t\t\tResponse response = parse(serializedResponse);\n\t\t\tprocess(token, response);\n\t\t\treturn this.responseAuthenticationConverter.convert(new ResponseToken(response, token));\n\t\t}\n\t\tcatch (Saml2AuthenticationException ex) {\n\t\t\tthrow ex;\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tthrow createAuthenticationException(Saml2ErrorCodes.INTERNAL_VALIDATION_ERROR, ex.getMessage(), ex);\n\t\t}\n\t}",
        "summary_tokens": [
            "authentication",
            "the",
            "authentication",
            "request",
            "object",
            "must",
            "be",
            "of",
            "type",
            "saml",
            "0",
            "authentication",
            "token",
            "saml",
            "0",
            "authentication",
            "if",
            "the",
            "assertion",
            "is",
            "valid",
            "authentication",
            "exception",
            "if",
            "a",
            "validation",
            "exception",
            "occurs"
        ]
    },
    {
        "id": 1484,
        "code": "\tpublic void setAuthnRequestCustomizer(Consumer<AuthnRequestContext> contextConsumer) {\n\t\tAssert.notNull(contextConsumer, \"contextConsumer cannot be null\");\n\t\tthis.contextConsumer = contextConsumer;\n\t}",
        "summary_tokens": [
            "set",
            "a",
            "consumer",
            "for",
            "modifying",
            "the",
            "open",
            "saml",
            "logout",
            "request",
            "context",
            "consumer",
            "a",
            "consumer",
            "that",
            "accepts",
            "an",
            "authn",
            "request",
            "context"
        ]
    },
    {
        "id": 1485,
        "code": "\tpublic void setClock(Clock clock) {\n\t\tAssert.notNull(clock, \"clock must not be null\");\n\t\tthis.clock = clock;\n\t}",
        "summary_tokens": [
            "use",
            "this",
            "clock",
            "for",
            "generating",
            "the",
            "issued",
            "date",
            "time",
            "clock",
            "the",
            "clock",
            "to",
            "use"
        ]
    },
    {
        "id": 1486,
        "code": "\tpublic void setParametersConsumer(Consumer<LogoutRequestParameters> parametersConsumer) {\n\t\tAssert.notNull(parametersConsumer, \"parametersConsumer cannot be null\");\n\t\tthis.parametersConsumer = parametersConsumer;\n\t}",
        "summary_tokens": [
            "set",
            "a",
            "consumer",
            "for",
            "modifying",
            "the",
            "open",
            "saml",
            "logout",
            "request",
            "parameters",
            "consumer",
            "a",
            "consumer",
            "that",
            "accepts",
            "an",
            "logout",
            "request",
            "parameters"
        ]
    },
    {
        "id": 1487,
        "code": "\tpublic void setClock(Clock clock) {\n\t\tAssert.notNull(clock, \"clock must not be null\");\n\t\tthis.clock = clock;\n\t}",
        "summary_tokens": [
            "use",
            "this",
            "clock",
            "for",
            "generating",
            "the",
            "issued",
            "date",
            "time",
            "clock",
            "the",
            "clock",
            "to",
            "use"
        ]
    },
    {
        "id": 1488,
        "code": "\tpublic void setParametersConsumer(Consumer<LogoutResponseParameters> parametersConsumer) {\n\t\tAssert.notNull(parametersConsumer, \"parametersConsumer cannot be null\");\n\t\tthis.parametersConsumer = parametersConsumer;\n\t}",
        "summary_tokens": [
            "set",
            "a",
            "consumer",
            "for",
            "modifying",
            "the",
            "open",
            "saml",
            "logout",
            "response",
            "parameters",
            "consumer",
            "a",
            "consumer",
            "that",
            "accepts",
            "an",
            "logout",
            "response",
            "parameters"
        ]
    },
    {
        "id": 1489,
        "code": "\tpublic void setResponseElementsDecrypter(Consumer<ResponseToken> responseElementsDecrypter) {\n\t\tAssert.notNull(responseElementsDecrypter, \"responseElementsDecrypter cannot be null\");\n\t\tthis.responseElementsDecrypter = responseElementsDecrypter;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "consumer",
            "strategy",
            "to",
            "use",
            "for",
            "decrypting",
            "elements",
            "of",
            "a",
            "validated",
            "response"
        ]
    },
    {
        "id": 1490,
        "code": "\tpublic void setResponseValidator(Converter<ResponseToken, Saml2ResponseValidatorResult> responseValidator) {\n\t\tAssert.notNull(responseValidator, \"responseValidator cannot be null\");\n\t\tthis.responseValidator = responseValidator;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "converter",
            "to",
            "use",
            "for",
            "validating",
            "the",
            "saml",
            "0"
        ]
    },
    {
        "id": 1491,
        "code": "\tpublic void setAssertionValidator(Converter<AssertionToken, Saml2ResponseValidatorResult> assertionValidator) {\n\t\tAssert.notNull(assertionValidator, \"assertionValidator cannot be null\");\n\t\tthis.assertionValidator = assertionValidator;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "converter",
            "to",
            "use",
            "for",
            "validating",
            "each",
            "assertion",
            "in",
            "the",
            "saml",
            "0"
        ]
    },
    {
        "id": 1492,
        "code": "\tpublic void setAssertionElementsDecrypter(Consumer<AssertionToken> assertionDecrypter) {\n\t\tAssert.notNull(assertionDecrypter, \"assertionDecrypter cannot be null\");\n\t\tthis.assertionElementsDecrypter = assertionDecrypter;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "consumer",
            "strategy",
            "to",
            "use",
            "for",
            "decrypting",
            "elements",
            "of",
            "a",
            "validated",
            "assertion"
        ]
    },
    {
        "id": 1493,
        "code": "\tpublic void setResponseAuthenticationConverter(\n\t\t\tConverter<ResponseToken, ? extends AbstractAuthenticationToken> responseAuthenticationConverter) {\n\t\tAssert.notNull(responseAuthenticationConverter, \"responseAuthenticationConverter cannot be null\");\n\t\tthis.responseAuthenticationConverter = responseAuthenticationConverter;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "converter",
            "to",
            "use",
            "for",
            "converting",
            "a",
            "validated",
            "response",
            "into",
            "an",
            "abstract",
            "authentication",
            "token"
        ]
    },
    {
        "id": 1494,
        "code": "\tpublic static Converter<ResponseToken, Saml2ResponseValidatorResult> createDefaultResponseValidator() {\n\t\treturn (responseToken) -> {\n\t\t\tResponse response = responseToken.getResponse();\n\t\t\tSaml2AuthenticationToken token = responseToken.getToken();\n\t\t\tSaml2ResponseValidatorResult result = Saml2ResponseValidatorResult.success();\n\t\t\tString statusCode = getStatusCode(response);\n\t\t\tif (!StatusCode.SUCCESS.equals(statusCode)) {\n\t\t\t\tString message = String.format(\"Invalid status [%s] for SAML response [%s]\", statusCode,\n\t\t\t\t\t\tresponse.getID());\n\t\t\t\tresult = result.concat(new Saml2Error(Saml2ErrorCodes.INVALID_RESPONSE, message));\n\t\t\t}\n\n\t\t\tString inResponseTo = response.getInResponseTo();\n\t\t\tresult = result.concat(validateInResponseTo(token.getAuthenticationRequest(), inResponseTo));\n\n\t\t\tString issuer = response.getIssuer().getValue();\n\t\t\tString destination = response.getDestination();\n\t\t\tString location = token.getRelyingPartyRegistration().getAssertionConsumerServiceLocation();\n\t\t\tif (StringUtils.hasText(destination) && !destination.equals(location)) {\n\t\t\t\tString message = \"Invalid destination [\" + destination + \"] for SAML response [\" + response.getID()\n\t\t\t\t\t\t+ \"]\";\n\t\t\t\tresult = result.concat(new Saml2Error(Saml2ErrorCodes.INVALID_DESTINATION, message));\n\t\t\t}\n\t\t\tString assertingPartyEntityId = token.getRelyingPartyRegistration().getAssertingPartyDetails()\n\t\t\t\t\t.getEntityId();\n\t\t\tif (!StringUtils.hasText(issuer) || !issuer.equals(assertingPartyEntityId)) {\n\t\t\t\tString message = String.format(\"Invalid issuer [%s] for SAML response [%s]\", issuer, response.getID());\n\t\t\t\tresult = result.concat(new Saml2Error(Saml2ErrorCodes.INVALID_ISSUER, message));\n\t\t\t}\n\t\t\tif (response.getAssertions().isEmpty()) {\n\t\t\t\tresult = result.concat(\n\t\t\t\t\t\tnew Saml2Error(Saml2ErrorCodes.MALFORMED_RESPONSE_DATA, \"No assertions found in response.\"));\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\t}",
        "summary_tokens": [
            "construct",
            "a",
            "default",
            "strategy",
            "for",
            "validating",
            "the",
            "saml",
            "0"
        ]
    },
    {
        "id": 1495,
        "code": "\tpublic static Converter<AssertionToken, Saml2ResponseValidatorResult> createDefaultAssertionValidator(\n\t\t\tConverter<AssertionToken, ValidationContext> contextConverter) {\n\n\t\treturn createAssertionValidator(Saml2ErrorCodes.INVALID_ASSERTION,\n\t\t\t\t(assertionToken) -> SAML20AssertionValidators.attributeValidator, contextConverter);\n\t}",
        "summary_tokens": [
            "construct",
            "a",
            "default",
            "strategy",
            "for",
            "validating",
            "each",
            "saml",
            "0"
        ]
    },
    {
        "id": 1496,
        "code": "\tpublic static Converter<ResponseToken, Saml2Authentication> createDefaultResponseAuthenticationConverter() {\n\t\treturn (responseToken) -> {\n\t\t\tResponse response = responseToken.response;\n\t\t\tSaml2AuthenticationToken token = responseToken.token;\n\t\t\tAssertion assertion = CollectionUtils.firstElement(response.getAssertions());\n\t\t\tString username = assertion.getSubject().getNameID().getValue();\n\t\t\tMap<String, List<Object>> attributes = getAssertionAttributes(assertion);\n\t\t\tList<String> sessionIndexes = getSessionIndexes(assertion);\n\t\t\tDefaultSaml2AuthenticatedPrincipal principal = new DefaultSaml2AuthenticatedPrincipal(username, attributes,\n\t\t\t\t\tsessionIndexes);\n\t\t\tString registrationId = responseToken.token.getRelyingPartyRegistration().getRegistrationId();\n\t\t\tprincipal.setRelyingPartyRegistrationId(registrationId);\n\t\t\treturn new Saml2Authentication(principal, token.getSaml2Response(),\n\t\t\t\t\tAuthorityUtils.createAuthorityList(\"ROLE_USER\"));\n\t\t};\n\t}",
        "summary_tokens": [
            "construct",
            "a",
            "default",
            "strategy",
            "for",
            "converting",
            "a",
            "saml",
            "0"
        ]
    },
    {
        "id": 1497,
        "code": "\tpublic Authentication authenticate(Authentication authentication) throws AuthenticationException {\n\t\ttry {\n\t\t\tSaml2AuthenticationToken token = (Saml2AuthenticationToken) authentication;\n\t\t\tString serializedResponse = token.getSaml2Response();\n\t\t\tResponse response = parseResponse(serializedResponse);\n\t\t\tprocess(token, response);\n\t\t\tAbstractAuthenticationToken authenticationResponse = this.responseAuthenticationConverter\n\t\t\t\t\t.convert(new ResponseToken(response, token));\n\t\t\tif (authenticationResponse != null) {\n\t\t\t\tauthenticationResponse.setDetails(authentication.getDetails());\n\t\t\t}\n\t\t\treturn authenticationResponse;\n\t\t}\n\t\tcatch (Saml2AuthenticationException ex) {\n\t\t\tthrow ex;\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tthrow createAuthenticationException(Saml2ErrorCodes.INTERNAL_VALIDATION_ERROR, ex.getMessage(), ex);\n\t\t}\n\t}",
        "summary_tokens": [
            "authentication",
            "the",
            "authentication",
            "request",
            "object",
            "must",
            "be",
            "of",
            "type",
            "saml",
            "0",
            "authentication",
            "token",
            "saml",
            "0",
            "authentication",
            "if",
            "the",
            "assertion",
            "is",
            "valid",
            "authentication",
            "exception",
            "if",
            "a",
            "validation",
            "exception",
            "occurs"
        ]
    },
    {
        "id": 1498,
        "code": "\tpublic void setAuthnRequestCustomizer(Consumer<AuthnRequestContext> contextConsumer) {\n\t\tAssert.notNull(contextConsumer, \"contextConsumer cannot be null\");\n\t\tthis.contextConsumer = contextConsumer;\n\t}",
        "summary_tokens": [
            "set",
            "a",
            "consumer",
            "for",
            "modifying",
            "the",
            "open",
            "saml",
            "authn",
            "request",
            "context",
            "consumer",
            "a",
            "consumer",
            "that",
            "accepts",
            "an",
            "authn",
            "request",
            "context"
        ]
    },
    {
        "id": 1499,
        "code": "\tpublic void setRequestMatcher(RequestMatcher requestMatcher) {\n\t\tAssert.notNull(requestMatcher, \"requestMatcher cannot be null\");\n\t\tthis.authnRequestResolver.setRequestMatcher(requestMatcher);\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "request",
            "matcher",
            "to",
            "use",
            "for",
            "setting",
            "the",
            "open",
            "saml",
            "authentication",
            "request",
            "resolver",
            "set",
            "request",
            "matcher",
            "request",
            "matcher",
            "request",
            "matcher",
            "request",
            "matcher",
            "the",
            "request",
            "matcher",
            "to",
            "identify",
            "authentication",
            "requests"
        ]
    },
    {
        "id": 1500,
        "code": "\tpublic void setClock(Clock clock) {\n\t\tAssert.notNull(clock, \"clock must not be null\");\n\t\tthis.clock = clock;\n\t}",
        "summary_tokens": [
            "use",
            "this",
            "clock",
            "for",
            "generating",
            "the",
            "issued",
            "instant",
            "clock",
            "the",
            "clock",
            "to",
            "use"
        ]
    },
    {
        "id": 1501,
        "code": "\tpublic void setRelayStateResolver(Converter<HttpServletRequest, String> relayStateResolver) {\n\t\tAssert.notNull(relayStateResolver, \"relayStateResolver cannot be null\");\n\t\tthis.authnRequestResolver.setRelayStateResolver(relayStateResolver);\n\t}",
        "summary_tokens": [
            "use",
            "this",
            "converter",
            "to",
            "compute",
            "the",
            "relay",
            "state",
            "relay",
            "state",
            "resolver",
            "the",
            "converter",
            "to",
            "use",
            "0"
        ]
    },
    {
        "id": 1502,
        "code": "\tpublic void setParametersConsumer(Consumer<LogoutRequestParameters> parametersConsumer) {\n\t\tAssert.notNull(parametersConsumer, \"parametersConsumer cannot be null\");\n\t\tthis.parametersConsumer = parametersConsumer;\n\t}",
        "summary_tokens": [
            "set",
            "a",
            "consumer",
            "for",
            "modifying",
            "the",
            "open",
            "saml",
            "logout",
            "request",
            "parameters",
            "consumer",
            "a",
            "consumer",
            "that",
            "accepts",
            "an",
            "logout",
            "request",
            "parameters"
        ]
    },
    {
        "id": 1503,
        "code": "\tpublic void setClock(Clock clock) {\n\t\tAssert.notNull(clock, \"clock must not be null\");\n\t\tthis.clock = clock;\n\t}",
        "summary_tokens": [
            "use",
            "this",
            "clock",
            "for",
            "determining",
            "the",
            "issued",
            "instant",
            "clock",
            "the",
            "clock",
            "to",
            "use"
        ]
    },
    {
        "id": 1504,
        "code": "\tpublic void setParametersConsumer(Consumer<LogoutResponseParameters> parametersConsumer) {\n\t\tAssert.notNull(parametersConsumer, \"parametersConsumer cannot be null\");\n\t\tthis.parametersConsumer = parametersConsumer;\n\t}",
        "summary_tokens": [
            "set",
            "a",
            "consumer",
            "for",
            "modifying",
            "the",
            "open",
            "saml",
            "logout",
            "response",
            "parameters",
            "consumer",
            "a",
            "consumer",
            "that",
            "accepts",
            "an",
            "logout",
            "response",
            "parameters"
        ]
    },
    {
        "id": 1505,
        "code": "\tpublic static int evalOrSkip(boolean authorized) {\n\t\treturn (authorized || DISABLE_UI_SECURITY) ? Tag.EVAL_BODY_INCLUDE : Tag.SKIP_BODY;\n\t}",
        "summary_tokens": [
            "returns",
            "eval",
            "body",
            "include",
            "if",
            "the",
            "authorized",
            "flag",
            "is",
            "true",
            "or",
            "ui",
            "security",
            "has",
            "been",
            "disabled"
        ]
    },
    {
        "id": 1506,
        "code": "\tpublic boolean authorize() throws IOException {\n\t\tif (StringUtils.hasText(getAccess())) {\n\t\t\treturn authorizeUsingAccessExpression();\n\t\t}\n\t\tif (StringUtils.hasText(getUrl())) {\n\t\t\treturn authorizeUsingUrlCheck();\n\t\t}\n\t\treturn false;\n\t}",
        "summary_tokens": [
            "make",
            "an",
            "authorization",
            "decision",
            "by",
            "considering",
            "all",
            "lt",
            "authorize",
            "gt",
            "tag",
            "attributes"
        ]
    },
    {
        "id": 1507,
        "code": "\tpublic boolean authorizeUsingAccessExpression() throws IOException {\n\t\tif (getContext().getAuthentication() == null) {\n\t\t\treturn false;\n\t\t}\n\t\tSecurityExpressionHandler<FilterInvocation> handler = getExpressionHandler();\n\t\tExpression accessExpression;\n\t\ttry {\n\t\t\taccessExpression = handler.getExpressionParser().parseExpression(getAccess());\n\t\t}\n\t\tcatch (ParseException ex) {\n\t\t\tthrow new IOException(ex);\n\t\t}\n\t\treturn ExpressionUtils.evaluateAsBoolean(accessExpression, createExpressionEvaluationContext(handler));\n\t}",
        "summary_tokens": [
            "make",
            "an",
            "authorization",
            "decision",
            "based",
            "on",
            "a",
            "spring",
            "el",
            "expression"
        ]
    },
    {
        "id": 1508,
        "code": "\tprotected EvaluationContext createExpressionEvaluationContext(SecurityExpressionHandler<FilterInvocation> handler) {\n\t\tFilterInvocation f = new FilterInvocation(getRequest(), getResponse(), (request, response) -> {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t});\n\t\treturn handler.createEvaluationContext(getContext().getAuthentication(), f);\n\t}",
        "summary_tokens": [
            "allows",
            "the",
            "evaluation",
            "context",
            "to",
            "be",
            "customized",
            "for",
            "variable",
            "lookup",
            "etc"
        ]
    },
    {
        "id": 1509,
        "code": "\tpublic boolean authorizeUsingUrlCheck() throws IOException {\n\t\tString contextPath = ((HttpServletRequest) getRequest()).getContextPath();\n\t\tAuthentication currentUser = getContext().getAuthentication();\n\t\treturn getPrivilegeEvaluator().isAllowed(contextPath, getUrl(), getMethod(), currentUser);\n\t}",
        "summary_tokens": [
            "make",
            "an",
            "authorization",
            "decision",
            "based",
            "on",
            "the",
            "url",
            "and",
            "http",
            "method",
            "attributes"
        ]
    },
    {
        "id": 1510,
        "code": "\tprotected ApplicationContext getContext(PageContext pageContext) {\n\t\tServletContext servletContext = pageContext.getServletContext();\n\t\treturn SecurityWebApplicationContextUtils.findRequiredWebApplicationContext(servletContext);\n\t}",
        "summary_tokens": [
            "allows",
            "test",
            "cases",
            "to",
            "override",
            "where",
            "application",
            "context",
            "obtained",
            "from"
        ]
    },
    {
        "id": 1511,
        "code": "\tpublic void setHtmlEscape(String htmlEscape) {\n\t\tthis.htmlEscape = Boolean.parseBoolean(htmlEscape);\n\t}",
        "summary_tokens": [
            "set",
            "html",
            "escaping",
            "for",
            "this",
            "tag",
            "as",
            "boolean",
            "value"
        ]
    },
    {
        "id": 1512,
        "code": "\tprotected boolean isHtmlEscape() {\n\t\treturn this.htmlEscape;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "html",
            "escaping",
            "setting",
            "for",
            "this",
            "tag",
            "or",
            "the",
            "default",
            "setting",
            "if",
            "not",
            "overridden"
        ]
    },
    {
        "id": 1513,
        "code": "\tpublic int doStartTag() throws JspException {\n\t\ttry {\n\t\t\tthis.authorized = super.authorize();\n\t\t\tif (!this.authorized && TagLibConfig.isUiSecurityDisabled()) {\n\t\t\t\tthis.pageContext.getOut().write(TagLibConfig.getSecuredUiPrefix());\n\t\t\t}\n\t\t\tif (this.var != null) {\n\t\t\t\tthis.pageContext.setAttribute(this.var, this.authorized, PageContext.PAGE_SCOPE);\n\t\t\t}\n\t\t\treturn TagLibConfig.evalOrSkip(this.authorized);\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tthrow new JspException(ex);\n\t\t}\n\t}",
        "summary_tokens": [
            "invokes",
            "the",
            "base",
            "class",
            "abstract",
            "authorize",
            "tag",
            "authorize",
            "method",
            "to",
            "decide",
            "if",
            "the",
            "body",
            "of",
            "the",
            "tag",
            "should",
            "be",
            "skipped",
            "or",
            "not"
        ]
    },
    {
        "id": 1514,
        "code": "\tpublic int doEndTag() throws JspException {\n\t\ttry {\n\t\t\tif (!this.authorized && TagLibConfig.isUiSecurityDisabled()) {\n\t\t\t\tthis.pageContext.getOut().write(TagLibConfig.getSecuredUiSuffix());\n\t\t\t}\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tthrow new JspException(ex);\n\t\t}\n\t\treturn EVAL_PAGE;\n\t}",
        "summary_tokens": [
            "default",
            "processing",
            "of",
            "the",
            "end",
            "tag",
            "returning",
            "eval",
            "page"
        ]
    },
    {
        "id": 1515,
        "code": "\tpublic static void clearContext() {\n\t\tcontextHolder.remove();\n\t\tSecurityContextHolder.clearContext();\n\t}",
        "summary_tokens": [
            "clears",
            "the",
            "security",
            "context",
            "from",
            "test",
            "security",
            "context",
            "holder",
            "and",
            "security",
            "context",
            "holder"
        ]
    },
    {
        "id": 1516,
        "code": "\tpublic static SecurityContext getContext() {\n\t\tSecurityContext ctx = contextHolder.get();\n\t\tif (ctx == null) {\n\t\t\tctx = getDefaultContext();\n\t\t\tcontextHolder.set(ctx);\n\t\t}\n\t\treturn ctx;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "security",
            "context",
            "from",
            "test",
            "security",
            "context",
            "holder"
        ]
    },
    {
        "id": 1517,
        "code": "\tpublic static void setContext(SecurityContext context) {\n\t\tAssert.notNull(context, \"Only non-null SecurityContext instances are permitted\");\n\t\tcontextHolder.set(context);\n\t\tSecurityContextHolder.setContext(context);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "on",
            "test",
            "security",
            "context",
            "holder",
            "and",
            "security",
            "context",
            "holder"
        ]
    },
    {
        "id": 1518,
        "code": "\tpublic static void setAuthentication(Authentication authentication) {\n\t\tAssert.notNull(authentication, \"Only non-null Authentication instances are permitted\");\n\t\tSecurityContext context = SecurityContextHolder.createEmptyContext();\n\t\tcontext.setAuthentication(authentication);\n\t\tsetContext(context);\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "new",
            "security",
            "context",
            "with",
            "the",
            "given",
            "authentication"
        ]
    },
    {
        "id": 1519,
        "code": "\tprivate static SecurityContext getDefaultContext() {\n\t\treturn SecurityContextHolder.getContext();\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "default",
            "security",
            "context",
            "by",
            "delegating",
            "to",
            "the",
            "security",
            "context",
            "holder",
            "the",
            "default",
            "security",
            "context"
        ]
    },
    {
        "id": 1520,
        "code": "\tpublic void beforeTestMethod(TestContext testContext) {\n\t\tTestSecurityContext testSecurityContext = createTestSecurityContext(testContext.getTestMethod(), testContext);\n\t\tif (testSecurityContext == null) {\n\t\t\ttestSecurityContext = createTestSecurityContext(testContext.getTestClass(), testContext);\n\t\t}\n\t\tif (testSecurityContext == null) {\n\t\t\treturn;\n\t\t}\n\t\tSupplier<SecurityContext> supplier = testSecurityContext.getSecurityContextSupplier();\n\t\tif (testSecurityContext.getTestExecutionEvent() == TestExecutionEvent.TEST_METHOD) {\n\t\t\tthis.securityContextHolderStrategyConverter.convert(testContext).setContext(supplier.get());\n\t\t}\n\t\telse {\n\t\t\ttestContext.setAttribute(SECURITY_CONTEXT_ATTR_NAME, supplier);\n\t\t}\n\t}",
        "summary_tokens": [
            "sets",
            "up",
            "the",
            "security",
            "context",
            "for",
            "each",
            "test",
            "method"
        ]
    },
    {
        "id": 1521,
        "code": "\tpublic void beforeTestExecution(TestContext testContext) {\n\t\tSupplier<SecurityContext> supplier = (Supplier<SecurityContext>) testContext\n\t\t\t\t.removeAttribute(SECURITY_CONTEXT_ATTR_NAME);\n\t\tif (supplier != null) {\n\t\t\tthis.securityContextHolderStrategyConverter.convert(testContext).setContext(supplier.get());\n\t\t}\n\t}",
        "summary_tokens": [
            "if",
            "configured",
            "before",
            "test",
            "execution",
            "sets",
            "the",
            "security",
            "context",
            "0"
        ]
    },
    {
        "id": 1522,
        "code": "\tpublic void afterTestMethod(TestContext testContext) {\n\t\tthis.securityContextHolderStrategyConverter.convert(testContext).clearContext();\n\t}",
        "summary_tokens": [
            "clears",
            "out",
            "the",
            "test",
            "security",
            "context",
            "holder",
            "and",
            "the",
            "security",
            "context",
            "holder",
            "after",
            "each",
            "test",
            "method"
        ]
    },
    {
        "id": 1523,
        "code": "\tpublic static MockServerConfigurer springSecurity() {\n\t\treturn new MockServerConfigurer() {\n\n\t\t\t@Override\n\t\t\tpublic void beforeServerCreated(WebHttpHandlerBuilder builder) {\n\t\t\t\tbuilder.filters((filters) -> filters.add(0, new MutatorFilter()));\n\t\t\t}\n\n\t\t};\n\t}",
        "summary_tokens": [
            "sets",
            "up",
            "spring",
            "security",
            "s",
            "web",
            "test",
            "client",
            "test",
            "support",
            "the",
            "mock",
            "server",
            "configurer",
            "to",
            "use"
        ]
    },
    {
        "id": 1524,
        "code": "\tpublic static <T extends WebTestClientConfigurer & MockServerConfigurer> T mockAuthentication(\n\t\t\tAuthentication authentication) {\n\t\treturn (T) new MutatorWebTestClientConfigurer(() -> Mono.just(authentication).map(SecurityContextImpl::new));\n\t}",
        "summary_tokens": [
            "updates",
            "the",
            "server",
            "web",
            "exchange",
            "to",
            "use",
            "the",
            "provided",
            "authentication",
            "as",
            "the",
            "principal",
            "authentication",
            "the",
            "authentication",
            "to",
            "use"
        ]
    },
    {
        "id": 1525,
        "code": "\tpublic static UserExchangeMutator mockUser(String username) {\n\t\treturn new UserExchangeMutator(username);\n\t}",
        "summary_tokens": [
            "updates",
            "the",
            "server",
            "web",
            "exchange",
            "to",
            "use",
            "a",
            "user",
            "details",
            "to",
            "create",
            "a",
            "username",
            "password",
            "authentication",
            "token",
            "as",
            "the",
            "principal"
        ]
    },
    {
        "id": 1526,
        "code": "\tpublic static JwtMutator mockJwt() {\n\t\treturn new JwtMutator();\n\t}",
        "summary_tokens": [
            "updates",
            "the",
            "server",
            "web",
            "exchange",
            "to",
            "establish",
            "a",
            "security",
            "context",
            "that",
            "has",
            "a",
            "jwt",
            "authentication",
            "token",
            "for",
            "the",
            "authentication",
            "and",
            "a",
            "jwt",
            "for",
            "the",
            "authentication",
            "get",
            "principal"
        ]
    },
    {
        "id": 1527,
        "code": "\tpublic static OpaqueTokenMutator mockOpaqueToken() {\n\t\treturn new OpaqueTokenMutator();\n\t}",
        "summary_tokens": [
            "updates",
            "the",
            "server",
            "web",
            "exchange",
            "to",
            "establish",
            "a",
            "security",
            "context",
            "that",
            "has",
            "a",
            "bearer",
            "token",
            "authentication",
            "for",
            "the",
            "authentication",
            "and",
            "an",
            "oauth",
            "0",
            "authenticated",
            "principal",
            "for",
            "the",
            "authentication",
            "get",
            "principal"
        ]
    },
    {
        "id": 1528,
        "code": "\tpublic static OAuth2LoginMutator mockOAuth2Login() {\n\t\tOAuth2AccessToken accessToken = new OAuth2AccessToken(OAuth2AccessToken.TokenType.BEARER, \"access-token\", null,\n\t\t\t\tnull, Collections.singleton(\"read\"));\n\t\treturn new OAuth2LoginMutator(accessToken);\n\t}",
        "summary_tokens": [
            "updates",
            "the",
            "server",
            "web",
            "exchange",
            "to",
            "establish",
            "a",
            "security",
            "context",
            "that",
            "has",
            "a",
            "oauth",
            "0",
            "authentication",
            "token",
            "for",
            "the",
            "authentication"
        ]
    },
    {
        "id": 1529,
        "code": "\tpublic static OidcLoginMutator mockOidcLogin() {\n\t\tOAuth2AccessToken accessToken = new OAuth2AccessToken(OAuth2AccessToken.TokenType.BEARER, \"access-token\", null,\n\t\t\t\tnull, Collections.singleton(\"read\"));\n\t\treturn new OidcLoginMutator(accessToken);\n\t}",
        "summary_tokens": [
            "updates",
            "the",
            "server",
            "web",
            "exchange",
            "to",
            "establish",
            "a",
            "security",
            "context",
            "that",
            "has",
            "a",
            "oauth",
            "0",
            "authentication",
            "token",
            "for",
            "the",
            "authentication"
        ]
    },
    {
        "id": 1530,
        "code": "\tpublic static OAuth2ClientMutator mockOAuth2Client(String registrationId) {\n\t\treturn new OAuth2ClientMutator(registrationId);\n\t}",
        "summary_tokens": [
            "updates",
            "the",
            "server",
            "web",
            "exchange",
            "to",
            "establish",
            "a",
            "oauth",
            "0",
            "authorized",
            "client",
            "in",
            "the",
            "session"
        ]
    },
    {
        "id": 1531,
        "code": "\tpublic static FormLoginRequestBuilder formLogin(String loginProcessingUrl) {\n\t\treturn formLogin().loginProcessingUrl(loginProcessingUrl);\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "request",
            "including",
            "any",
            "necessary",
            "csrf",
            "token",
            "that",
            "will",
            "submit",
            "a",
            "form",
            "based",
            "login",
            "to",
            "post",
            "login",
            "processing",
            "url"
        ]
    },
    {
        "id": 1532,
        "code": "\tpublic static LogoutRequestBuilder logout(String logoutUrl) {\n\t\treturn new LogoutRequestBuilder().logoutUrl(logoutUrl);\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "logout",
            "request",
            "including",
            "any",
            "necessary",
            "csrf",
            "token",
            "to",
            "the",
            "specified",
            "logout",
            "url",
            "logout",
            "url",
            "the",
            "logout",
            "request",
            "url",
            "the",
            "logout",
            "request",
            "builder",
            "for",
            "additional",
            "customizations"
        ]
    },
    {
        "id": 1533,
        "code": "\tpublic static DigestRequestPostProcessor digest(String username) {\n\t\treturn digest().username(username);\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "digest",
            "request",
            "post",
            "processor",
            "that",
            "enables",
            "easily",
            "adding",
            "digest",
            "based",
            "authentication",
            "to",
            "a",
            "request"
        ]
    },
    {
        "id": 1534,
        "code": "\tpublic static RequestPostProcessor x509(String resourceName) throws IOException, CertificateException {\n\t\tResourceLoader loader = new DefaultResourceLoader();\n\t\tResource resource = loader.getResource(resourceName);\n\t\tInputStream inputStream = resource.getInputStream();\n\t\tCertificateFactory certFactory = CertificateFactory.getInstance(\"X.509\");\n\t\tX509Certificate certificate = (X509Certificate) certFactory.generateCertificate(inputStream);\n\t\treturn x509(certificate);\n\t}",
        "summary_tokens": [
            "finds",
            "an",
            "x",
            "0",
            "cetificate",
            "using",
            "a",
            "resoure",
            "name",
            "and",
            "populates",
            "it",
            "on",
            "the",
            "request"
        ]
    },
    {
        "id": 1535,
        "code": "\tpublic static CsrfRequestPostProcessor csrf() {\n\t\treturn new CsrfRequestPostProcessor();\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "request",
            "post",
            "processor",
            "that",
            "will",
            "automatically",
            "populate",
            "a",
            "valid",
            "csrf",
            "token",
            "in",
            "the",
            "request"
        ]
    },
    {
        "id": 1536,
        "code": "\tpublic static RequestPostProcessor testSecurityContext() {\n\t\treturn new TestSecurityContextHolderPostProcessor();\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "request",
            "post",
            "processor",
            "that",
            "can",
            "be",
            "used",
            "to",
            "ensure",
            "that",
            "the",
            "resulting",
            "request",
            "is",
            "ran",
            "with",
            "the",
            "user",
            "in",
            "the",
            "test",
            "security",
            "context",
            "holder"
        ]
    },
    {
        "id": 1537,
        "code": "\tpublic static RequestPostProcessor user(UserDetails user) {\n\t\treturn new UserDetailsRequestPostProcessor(user);\n\t}",
        "summary_tokens": [
            "establish",
            "a",
            "security",
            "context",
            "that",
            "has",
            "a",
            "username",
            "password",
            "authentication",
            "token",
            "for",
            "the",
            "authentication",
            "get",
            "principal",
            "and",
            "a",
            "custom",
            "user",
            "details",
            "for",
            "the",
            "username",
            "password",
            "authentication",
            "token",
            "get",
            "principal"
        ]
    },
    {
        "id": 1538,
        "code": "\tpublic static JwtRequestPostProcessor jwt() {\n\t\treturn new JwtRequestPostProcessor();\n\t}",
        "summary_tokens": [
            "establish",
            "a",
            "security",
            "context",
            "that",
            "has",
            "a",
            "jwt",
            "authentication",
            "token",
            "for",
            "the",
            "authentication",
            "and",
            "a",
            "jwt",
            "for",
            "the",
            "authentication",
            "get",
            "principal"
        ]
    },
    {
        "id": 1539,
        "code": "\tpublic static OpaqueTokenRequestPostProcessor opaqueToken() {\n\t\treturn new OpaqueTokenRequestPostProcessor();\n\t}",
        "summary_tokens": [
            "establish",
            "a",
            "security",
            "context",
            "that",
            "has",
            "a",
            "bearer",
            "token",
            "authentication",
            "for",
            "the",
            "authentication",
            "and",
            "a",
            "oauth",
            "0",
            "authenticated",
            "principal",
            "for",
            "the",
            "authentication",
            "get",
            "principal"
        ]
    },
    {
        "id": 1540,
        "code": "\tpublic static RequestPostProcessor authentication(Authentication authentication) {\n\t\treturn new AuthenticationRequestPostProcessor(authentication);\n\t}",
        "summary_tokens": [
            "establish",
            "a",
            "security",
            "context",
            "that",
            "uses",
            "the",
            "specified",
            "authentication",
            "for",
            "the",
            "authentication",
            "get",
            "principal",
            "and",
            "a",
            "custom",
            "user",
            "details"
        ]
    },
    {
        "id": 1541,
        "code": "\tpublic static RequestPostProcessor anonymous() {\n\t\treturn new AnonymousRequestPostProcessor();\n\t}",
        "summary_tokens": [
            "establish",
            "a",
            "security",
            "context",
            "that",
            "uses",
            "an",
            "anonymous",
            "authentication",
            "token"
        ]
    },
    {
        "id": 1542,
        "code": "\tpublic static RequestPostProcessor securityContext(SecurityContext securityContext) {\n\t\treturn new SecurityContextRequestPostProcessor(securityContext);\n\t}",
        "summary_tokens": [
            "establish",
            "the",
            "specified",
            "security",
            "context",
            "to",
            "be",
            "used"
        ]
    },
    {
        "id": 1543,
        "code": "\tpublic static RequestPostProcessor httpBasic(String username, String password) {\n\t\treturn new HttpBasicRequestPostProcessor(username, password);\n\t}",
        "summary_tokens": [
            "convenience",
            "mechanism",
            "for",
            "setting",
            "the",
            "authorization",
            "header",
            "to",
            "use",
            "http",
            "basic",
            "with",
            "the",
            "given",
            "username",
            "and",
            "password"
        ]
    },
    {
        "id": 1544,
        "code": "\tpublic static OAuth2LoginRequestPostProcessor oauth2Login() {\n\t\tOAuth2AccessToken accessToken = new OAuth2AccessToken(OAuth2AccessToken.TokenType.BEARER, \"access-token\", null,\n\t\t\t\tnull, Collections.singleton(\"read\"));\n\t\treturn new OAuth2LoginRequestPostProcessor(accessToken);\n\t}",
        "summary_tokens": [
            "establish",
            "a",
            "security",
            "context",
            "that",
            "has",
            "a",
            "oauth",
            "0",
            "authentication",
            "token",
            "for",
            "the",
            "authentication",
            "a",
            "oauth",
            "0",
            "user",
            "as",
            "the",
            "principal",
            "and",
            "a",
            "oauth",
            "0",
            "authorized",
            "client",
            "in",
            "the",
            "session"
        ]
    },
    {
        "id": 1545,
        "code": "\tpublic static OidcLoginRequestPostProcessor oidcLogin() {\n\t\tOAuth2AccessToken accessToken = new OAuth2AccessToken(OAuth2AccessToken.TokenType.BEARER, \"access-token\", null,\n\t\t\t\tnull, Collections.singleton(\"read\"));\n\t\treturn new OidcLoginRequestPostProcessor(accessToken);\n\t}",
        "summary_tokens": [
            "establish",
            "a",
            "security",
            "context",
            "that",
            "has",
            "a",
            "oauth",
            "0",
            "authentication",
            "token",
            "for",
            "the",
            "authentication",
            "a",
            "oidc",
            "user",
            "as",
            "the",
            "principal",
            "and",
            "a",
            "oauth",
            "0",
            "authorized",
            "client",
            "in",
            "the",
            "session"
        ]
    },
    {
        "id": 1546,
        "code": "\tpublic static OAuth2ClientRequestPostProcessor oauth2Client(String registrationId) {\n\t\treturn new OAuth2ClientRequestPostProcessor(registrationId);\n\t}",
        "summary_tokens": [
            "establish",
            "an",
            "oauth",
            "0",
            "authorized",
            "client",
            "in",
            "the",
            "session"
        ]
    },
    {
        "id": 1547,
        "code": "\tpublic static ResultHandler exportTestSecurityContext() {\n\t\treturn new ExportTestSecurityContextHandler();\n\t}",
        "summary_tokens": [
            "exports",
            "the",
            "security",
            "context",
            "from",
            "test",
            "security",
            "context",
            "holder",
            "to",
            "security",
            "context",
            "holder"
        ]
    },
    {
        "id": 1548,
        "code": "\tpublic static AuthenticatedMatcher authenticated() {\n\t\treturn new AuthenticatedMatcher();\n\t}",
        "summary_tokens": [
            "result",
            "matcher",
            "that",
            "verifies",
            "that",
            "a",
            "specified",
            "user",
            "is",
            "authenticated"
        ]
    },
    {
        "id": 1549,
        "code": "\tpublic static ResultMatcher unauthenticated() {\n\t\treturn new UnAuthenticatedMatcher();\n\t}",
        "summary_tokens": [
            "result",
            "matcher",
            "that",
            "verifies",
            "that",
            "no",
            "user",
            "is",
            "authenticated"
        ]
    },
    {
        "id": 1550,
        "code": "\tpublic static MockMvcConfigurer springSecurity(Filter springSecurityFilterChain) {\n\t\tAssert.notNull(springSecurityFilterChain, \"springSecurityFilterChain cannot be null\");\n\t\treturn new SecurityMockMvcConfigurer(springSecurityFilterChain);\n\t}",
        "summary_tokens": [
            "configures",
            "the",
            "mock",
            "mvc",
            "builder",
            "for",
            "use",
            "with",
            "spring",
            "security"
        ]
    },
    {
        "id": 1551,
        "code": "\tpublic static SecurityContextRepository getSecurityContextRepository(HttpServletRequest request) {\n\t\tSecurityContextPersistenceFilter filter = findFilter(request, SecurityContextPersistenceFilter.class);\n\t\tif (filter != null) {\n\t\t\treturn (SecurityContextRepository) ReflectionTestUtils.getField(filter, \"repo\");\n\t\t}\n\t\tSecurityContextHolderFilter holderFilter = findFilter(request, SecurityContextHolderFilter.class);\n\t\tif (holderFilter != null) {\n\t\t\treturn (SecurityContextRepository) ReflectionTestUtils.getField(holderFilter, \"securityContextRepository\");\n\t\t}\n\t\treturn DEFAULT_CONTEXT_REPO;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "security",
            "context",
            "repository",
            "for",
            "the",
            "specified",
            "http",
            "servlet",
            "request"
        ]
    },
    {
        "id": 1552,
        "code": "\tpublic static void setSecurityContextRepository(HttpServletRequest request,\n\t\t\tSecurityContextRepository securityContextRepository) {\n\t\tSecurityContextPersistenceFilter filter = findFilter(request, SecurityContextPersistenceFilter.class);\n\t\tif (filter != null) {\n\t\t\tReflectionTestUtils.setField(filter, \"repo\", securityContextRepository);\n\t\t}\n\t\tSecurityContextHolderFilter holderFilter = findFilter(request, SecurityContextHolderFilter.class);\n\t\tif (holderFilter != null) {\n\t\t\tReflectionTestUtils.setField(holderFilter, \"securityContextRepository\", securityContextRepository);\n\t\t}\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "repository",
            "for",
            "the",
            "specified",
            "http",
            "servlet",
            "request"
        ]
    },
    {
        "id": 1553,
        "code": "\tpublic static CsrfTokenRepository getCsrfTokenRepository(HttpServletRequest request) {\n\t\tCsrfFilter filter = findFilter(request, CsrfFilter.class);\n\t\tif (filter == null) {\n\t\t\treturn DEFAULT_TOKEN_REPO;\n\t\t}\n\t\treturn (CsrfTokenRepository) ReflectionTestUtils.getField(filter, \"tokenRepository\");\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "csrf",
            "token",
            "repository",
            "for",
            "the",
            "specified",
            "http",
            "servlet",
            "request"
        ]
    },
    {
        "id": 1554,
        "code": "\tpublic static void setCsrfTokenRepository(HttpServletRequest request, CsrfTokenRepository repository) {\n\t\tCsrfFilter filter = findFilter(request, CsrfFilter.class);\n\t\tif (filter != null) {\n\t\t\tReflectionTestUtils.setField(filter, \"tokenRepository\", repository);\n\t\t}\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "csrf",
            "token",
            "repository",
            "for",
            "the",
            "specified",
            "http",
            "servlet",
            "request"
        ]
    },
    {
        "id": 1555,
        "code": "\tpublic void postProcessorsAreMergedDuringMockMvcPerform() throws Exception {\n\t\tRequestPostProcessor postProcessor = mock(RequestPostProcessor.class);\n\t\tgiven(postProcessor.postProcessRequest(any())).willAnswer((i) -> i.getArgument(0));\n\t\tMockMvc mockMvc = MockMvcBuilders.standaloneSetup(new Object())\n\t\t\t\t.defaultRequest(MockMvcRequestBuilders.get(\"/\").with(postProcessor)).build();\n\t\tMvcResult mvcResult = mockMvc.perform(formLogin()).andReturn();\n\t\tassertThat(mvcResult.getRequest().getMethod()).isEqualTo(HttpMethod.POST.name());\n\t\tassertThat(mvcResult.getRequest().getHeader(\"Accept\"))\n\t\t\t\t.isEqualTo(MediaType.toString(Arrays.asList(MediaType.APPLICATION_FORM_URLENCODED)));\n\t\tassertThat(mvcResult.getRequest().getParameter(\"username\")).isEqualTo(\"user\");\n\t\tassertThat(mvcResult.getRequest().getParameter(\"password\")).isEqualTo(\"password\");\n\t\tassertThat(mvcResult.getRequest().getRequestURI()).isEqualTo(\"/login\");\n\t\tassertThat(mvcResult.getRequest().getParameter(\"_csrf\")).isNotEmpty();\n\t\tverify(postProcessor).postProcessRequest(any());\n\t}",
        "summary_tokens": [
            "spring",
            "restdocs",
            "uses",
            "postprocessors",
            "to",
            "do",
            "its",
            "trick"
        ]
    },
    {
        "id": 1556,
        "code": "\tpublic void postProcessorsAreMergedDuringMockMvcPerform() throws Exception {\n\t\tRequestPostProcessor postProcessor = mock(RequestPostProcessor.class);\n\t\tgiven(postProcessor.postProcessRequest(any())).willAnswer((i) -> i.getArgument(0));\n\t\tMockMvc mockMvc = MockMvcBuilders.standaloneSetup(new Object())\n\t\t\t\t.defaultRequest(MockMvcRequestBuilders.get(\"/\").with(postProcessor)).build();\n\t\tMvcResult mvcResult = mockMvc.perform(logout()).andReturn();\n\t\tassertThat(mvcResult.getRequest().getMethod()).isEqualTo(HttpMethod.POST.name());\n\t\tassertThat(mvcResult.getRequest().getHeader(\"Accept\"))\n\t\t\t\t.isEqualTo(MediaType.toString(Arrays.asList(MediaType.TEXT_HTML, MediaType.ALL)));\n\t\tassertThat(mvcResult.getRequest().getRequestURI()).isEqualTo(\"/logout\");\n\t\tassertThat(mvcResult.getRequest().getParameter(\"_csrf\")).isNotEmpty();\n\t\tverify(postProcessor).postProcessRequest(any());\n\t}",
        "summary_tokens": [
            "spring",
            "restdocs",
            "uses",
            "postprocessors",
            "to",
            "do",
            "its",
            "trick"
        ]
    },
    {
        "id": 1557,
        "code": "\tpublic void applySpringSecurityWhenAddFilterFirstThenFilterFirst() throws Exception {\n\t\tMockMvc mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).addFilters(this.noOpFilter)\n\t\t\t\t.apply(springSecurity()).build();\n\t\tmockMvc.perform(get(\"/\")).andExpect(status().isOk());\n\t}",
        "summary_tokens": [
            "since",
            "no",
            "op",
            "filter",
            "is",
            "first",
            "does",
            "not",
            "continue",
            "the",
            "chain",
            "security",
            "will",
            "not",
            "be",
            "invoked",
            "and",
            "the",
            "status",
            "should",
            "be",
            "ok",
            "exception"
        ]
    },
    {
        "id": 1558,
        "code": "\tpublic void applySpringSecurityWhenAddFilterSecondThenSecurityFirst() throws Exception {\n\t\tMockMvc mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).apply(springSecurity())\n\t\t\t\t.addFilters(this.noOpFilter).build();\n\t\tmockMvc.perform(get(\"/\")).andExpect(status().is4xxClientError());\n\t}",
        "summary_tokens": [
            "since",
            "no",
            "op",
            "filter",
            "is",
            "second",
            "security",
            "will",
            "be",
            "invoked",
            "and",
            "the",
            "status",
            "will",
            "be",
            "not",
            "ok"
        ]
    },
    {
        "id": 1559,
        "code": "\tpublic void sendRedirect(HttpServletRequest request, HttpServletResponse response, String url) throws IOException {\n\t\tString redirectUrl = calculateRedirectUrl(request.getContextPath(), url);\n\t\tredirectUrl = response.encodeRedirectURL(redirectUrl);\n\t\tif (this.logger.isDebugEnabled()) {\n\t\t\tthis.logger.debug(LogMessage.format(\"Redirecting to %s\", redirectUrl));\n\t\t}\n\t\tresponse.sendRedirect(redirectUrl);\n\t}",
        "summary_tokens": [
            "redirects",
            "the",
            "response",
            "to",
            "the",
            "supplied",
            "url"
        ]
    },
    {
        "id": 1560,
        "code": "\tpublic void setContextRelative(boolean useRelativeContext) {\n\t\tthis.contextRelative = useRelativeContext;\n\t}",
        "summary_tokens": [
            "if",
            "tt",
            "true",
            "tt",
            "causes",
            "any",
            "redirection",
            "urls",
            "to",
            "be",
            "calculated",
            "minus",
            "the",
            "protocol",
            "and",
            "context",
            "path",
            "defaults",
            "to",
            "tt",
            "false",
            "tt"
        ]
    },
    {
        "id": 1561,
        "code": "\tprotected boolean isContextRelative() {\n\t\treturn this.contextRelative;\n\t}",
        "summary_tokens": [
            "returns",
            "tt",
            "true",
            "tt",
            "if",
            "the",
            "redirection",
            "url",
            "should",
            "be",
            "calculated",
            "minus",
            "the",
            "protocol",
            "and",
            "context",
            "path",
            "defaults",
            "to",
            "tt",
            "false",
            "tt"
        ]
    },
    {
        "id": 1562,
        "code": "\tpublic List<Filter> getFilters(String url) {\n\t\treturn getFilters(this.firewall.getFirewalledRequest((new FilterInvocation(url, \"GET\").getRequest())));\n\t}",
        "summary_tokens": [
            "convenience",
            "method",
            "mainly",
            "for",
            "testing"
        ]
    },
    {
        "id": 1563,
        "code": "\tpublic List<SecurityFilterChain> getFilterChains() {\n\t\treturn Collections.unmodifiableList(this.filterChains);\n\t}",
        "summary_tokens": [
            "the",
            "list",
            "of",
            "security",
            "filter",
            "chain",
            "s",
            "which",
            "will",
            "be",
            "matched",
            "against",
            "and",
            "applied",
            "to",
            "incoming",
            "requests"
        ]
    },
    {
        "id": 1564,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n\t\tAssert.notNull(securityContextHolderStrategy, \"securityContextHolderStrategy cannot be null\");\n\t\tthis.securityContextHolderStrategy = securityContextHolderStrategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 1565,
        "code": "\tpublic void setFilterChainValidator(FilterChainValidator filterChainValidator) {\n\t\tthis.filterChainValidator = filterChainValidator;\n\t}",
        "summary_tokens": [
            "used",
            "internally",
            "to",
            "specify",
            "a",
            "validation",
            "strategy",
            "for",
            "the",
            "filters",
            "in",
            "each",
            "configured",
            "chain"
        ]
    },
    {
        "id": 1566,
        "code": "\tpublic void setFirewall(HttpFirewall firewall) {\n\t\tthis.firewall = firewall;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "firewall",
            "implementation",
            "which",
            "will",
            "be",
            "used",
            "to",
            "validate",
            "and",
            "wrap",
            "or",
            "potentially",
            "reject",
            "the",
            "incoming",
            "requests"
        ]
    },
    {
        "id": 1567,
        "code": "\tpublic void setRequestRejectedHandler(RequestRejectedHandler requestRejectedHandler) {\n\t\tAssert.notNull(requestRejectedHandler, \"requestRejectedHandler may not be null\");\n\t\tthis.requestRejectedHandler = requestRejectedHandler;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "request",
            "rejected",
            "handler",
            "to",
            "be",
            "used",
            "for",
            "requests",
            "rejected",
            "by",
            "the",
            "firewall"
        ]
    },
    {
        "id": 1568,
        "code": "\tpublic String getFullRequestUrl() {\n\t\treturn UrlUtils.buildFullRequestUrl(this.request);\n\t}",
        "summary_tokens": [
            "indicates",
            "the",
            "url",
            "that",
            "the",
            "user",
            "agent",
            "used",
            "for",
            "this",
            "request"
        ]
    },
    {
        "id": 1569,
        "code": "\tpublic String getRequestUrl() {\n\t\treturn UrlUtils.buildRequestUrl(this.request);\n\t}",
        "summary_tokens": [
            "obtains",
            "the",
            "web",
            "application",
            "specific",
            "fragment",
            "of",
            "the",
            "url"
        ]
    },
    {
        "id": 1570,
        "code": "\tpublic Map<Integer, Integer> getTranslatedPortMappings() {\n\t\treturn this.httpsPortMappings;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "translated",
            "integer",
            "gt",
            "integer",
            "version",
            "of",
            "the",
            "original",
            "port",
            "mapping",
            "specified",
            "via",
            "set",
            "https",
            "port",
            "mapping"
        ]
    },
    {
        "id": 1571,
        "code": "\tpublic void setPortMappings(Map<String, String> newMappings) {\n\t\tAssert.notNull(newMappings, \"A valid list of HTTPS port mappings must be provided\");\n\t\tthis.httpsPortMappings.clear();\n\t\tfor (Map.Entry<String, String> entry : newMappings.entrySet()) {\n\t\t\tInteger httpPort = Integer.valueOf(entry.getKey());\n\t\t\tInteger httpsPort = Integer.valueOf(entry.getValue());\n\t\t\tAssert.isTrue(isInPortRange(httpPort) && isInPortRange(httpsPort),\n\t\t\t\t\t() -> \"one or both ports out of legal range: \" + httpPort + \", \" + httpsPort);\n\t\t\tthis.httpsPortMappings.put(httpPort, httpsPort);\n\t\t}\n\t\tAssert.isTrue(!this.httpsPortMappings.isEmpty(), \"must map at least one port\");\n\t}",
        "summary_tokens": [
            "set",
            "to",
            "override",
            "the",
            "default",
            "http",
            "port",
            "to",
            "https",
            "port",
            "mappings",
            "of",
            "0",
            "0",
            "and",
            "0",
            "0"
        ]
    },
    {
        "id": 1572,
        "code": "\tpublic void setErrorPage(String errorPage) {\n\t\tAssert.isTrue(errorPage == null || errorPage.startsWith(\"/\"), \"errorPage must begin with '/'\");\n\t\tthis.errorPage = errorPage;\n\t}",
        "summary_tokens": [
            "the",
            "error",
            "page",
            "to",
            "use"
        ]
    },
    {
        "id": 1573,
        "code": "\tpublic boolean isAllowed(String contextPath, String uri, String method, Authentication authentication) {\n\t\tAssert.notNull(uri, \"uri parameter is required\");\n\t\tFilterInvocation filterInvocation = new FilterInvocation(contextPath, uri, method, this.servletContext);\n\t\tCollection<ConfigAttribute> attributes = this.securityInterceptor.obtainSecurityMetadataSource()\n\t\t\t\t.getAttributes(filterInvocation);\n\t\tif (attributes == null) {\n\t\t\treturn (!this.securityInterceptor.isRejectPublicInvocations());\n\t\t}\n\t\tif (authentication == null) {\n\t\t\treturn false;\n\t\t}\n\t\ttry {\n\t\t\tthis.securityInterceptor.getAccessDecisionManager().decide(authentication, filterInvocation, attributes);\n\t\t\treturn true;\n\t\t}\n\t\tcatch (AccessDeniedException ex) {\n\t\t\tlogger.debug(LogMessage.format(\"%s denied for %s\", filterInvocation, authentication), ex);\n\t\t\treturn false;\n\t\t}\n\t}",
        "summary_tokens": [
            "determines",
            "whether",
            "the",
            "user",
            "represented",
            "by",
            "the",
            "supplied",
            "tt",
            "authentication",
            "tt",
            "object",
            "is",
            "allowed",
            "to",
            "invoke",
            "the",
            "supplied",
            "uri",
            "with",
            "the",
            "given"
        ]
    },
    {
        "id": 1574,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n\t\tAssert.notNull(securityContextHolderStrategy, \"securityContextHolderStrategy cannot be null\");\n\t\tthis.securityContextHolderStrategy = securityContextHolderStrategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 1575,
        "code": "\tpublic boolean isAllowed(String contextPath, String uri, String method, Authentication authentication) {\n\t\tList<WebInvocationPrivilegeEvaluator> privilegeEvaluators = getDelegate(contextPath, uri, method);\n\t\tif (privilegeEvaluators.isEmpty()) {\n\t\t\treturn true;\n\t\t}\n\t\tfor (WebInvocationPrivilegeEvaluator evaluator : privilegeEvaluators) {\n\t\t\tboolean isAllowed = evaluator.isAllowed(contextPath, uri, method, authentication);\n\t\t\tif (!isAllowed) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}",
        "summary_tokens": [
            "determines",
            "whether",
            "the",
            "user",
            "represented",
            "by",
            "the",
            "supplied",
            "tt",
            "authentication",
            "tt",
            "object",
            "is",
            "allowed",
            "to",
            "invoke",
            "the",
            "supplied",
            "uri"
        ]
    },
    {
        "id": 1576,
        "code": "\tpublic void setRedirectStrategy(RedirectStrategy redirectStrategy) {\n\t\tAssert.notNull(redirectStrategy, \"redirectStrategy cannot be null\");\n\t\tthis.redirectStrategy = redirectStrategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "strategy",
            "to",
            "be",
            "used",
            "for",
            "redirecting",
            "to",
            "the",
            "required",
            "channel",
            "url"
        ]
    },
    {
        "id": 1577,
        "code": "\tpublic void setTrustResolver(AuthenticationTrustResolver trustResolver) {\n\t\tAssert.notNull(trustResolver, \"trustResolver cannot be null\");\n\t\tthis.trustResolver = trustResolver;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "authentication",
            "trust",
            "resolver",
            "to",
            "be",
            "used"
        ]
    },
    {
        "id": 1578,
        "code": "\tpublic void setDefaultRolePrefix(String defaultRolePrefix) {\n\t\tAssert.hasText(defaultRolePrefix, \"defaultRolePrefix cannot be empty\");\n\t\tthis.defaultRolePrefix = defaultRolePrefix;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "default",
            "prefix",
            "to",
            "be",
            "added",
            "to",
            "org"
        ]
    },
    {
        "id": 1579,
        "code": "\tpublic void setTrustResolver(AuthenticationTrustResolver trustResolver) {\n\t\tAssert.notNull(trustResolver, \"trustResolver cannot be null\");\n\t\tthis.trustResolver = trustResolver;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "authentication",
            "trust",
            "resolver",
            "to",
            "be",
            "used"
        ]
    },
    {
        "id": 1580,
        "code": "\tpublic void setDefaultRolePrefix(String defaultRolePrefix) {\n\t\tthis.defaultRolePrefix = defaultRolePrefix;\n\t}",
        "summary_tokens": [
            "p",
            "sets",
            "the",
            "default",
            "prefix",
            "to",
            "be",
            "added",
            "to",
            "org"
        ]
    },
    {
        "id": 1581,
        "code": "\tpublic void setExpressionHandler(SecurityExpressionHandler<RequestAuthorizationContext> expressionHandler) {\n\t\tAssert.notNull(expressionHandler, \"expressionHandler cannot be null\");\n\t\tthis.expressionHandler = expressionHandler;\n\t\tthis.expression = expressionHandler.getExpressionParser()\n\t\t\t\t.parseExpression(this.expression.getExpressionString());\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "expression",
            "handler",
            "to",
            "be",
            "used"
        ]
    },
    {
        "id": 1582,
        "code": "\tpublic AuthorizationDecision check(Supplier<Authentication> authentication, RequestAuthorizationContext context) {\n\t\tEvaluationContext ctx = this.expressionHandler.createEvaluationContext(authentication, context);\n\t\tboolean granted = ExpressionUtils.evaluateAsBoolean(this.expression, ctx);\n\t\treturn new ExpressionAuthorizationDecision(granted, this.expression);\n\t}",
        "summary_tokens": [
            "determines",
            "the",
            "access",
            "by",
            "evaluating",
            "the",
            "provided",
            "expression"
        ]
    },
    {
        "id": 1583,
        "code": "\tpublic boolean hasIpAddress(String ipAddress) {\n\t\tIpAddressMatcher matcher = new IpAddressMatcher(ipAddress);\n\t\treturn matcher.matches(this.request);\n\t}",
        "summary_tokens": [
            "takes",
            "a",
            "specific",
            "ip",
            "address",
            "or",
            "a",
            "range",
            "using",
            "the",
            "ip",
            "netmask",
            "e"
        ]
    },
    {
        "id": 1584,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n\t\tAssert.notNull(securityContextHolderStrategy, \"securityContextHolderStrategy cannot be null\");\n\t\tthis.securityContextHolderStrategy = securityContextHolderStrategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 1585,
        "code": "\tpublic void setAuthorizationEventPublisher(AuthorizationEventPublisher eventPublisher) {\n\t\tAssert.notNull(eventPublisher, \"eventPublisher cannot be null\");\n\t\tthis.eventPublisher = eventPublisher;\n\t}",
        "summary_tokens": [
            "use",
            "this",
            "authorization",
            "event",
            "publisher",
            "to",
            "publish",
            "authorization",
            "denied",
            "event",
            "s",
            "and",
            "authorization",
            "granted",
            "event",
            "s"
        ]
    },
    {
        "id": 1586,
        "code": "\tpublic AuthorizationManager<HttpServletRequest> getAuthorizationManager() {\n\t\treturn this.authorizationManager;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "authorization",
            "manager",
            "used",
            "by",
            "this",
            "filter",
            "the",
            "authorization",
            "manager"
        ]
    },
    {
        "id": 1587,
        "code": "\tpublic void setShouldFilterAllDispatcherTypes(boolean shouldFilterAllDispatcherTypes) {\n\t\tthis.shouldFilterAllDispatcherTypes = shouldFilterAllDispatcherTypes;\n\t}",
        "summary_tokens": [
            "sets",
            "whether",
            "to",
            "filter",
            "all",
            "dispatcher",
            "types"
        ]
    },
    {
        "id": 1588,
        "code": "\tpublic void init(FilterConfig arg0) {\n\t}",
        "summary_tokens": [
            "not",
            "used",
            "we",
            "rely",
            "on",
            "io",
            "c",
            "container",
            "lifecycle",
            "services",
            "instead",
            "arg",
            "0",
            "ignored"
        ]
    },
    {
        "id": 1589,
        "code": "",
        "summary_tokens": [
            "not",
            "used",
            "we",
            "rely",
            "on",
            "io",
            "c",
            "container",
            "lifecycle",
            "services",
            "instead"
        ]
    },
    {
        "id": 1590,
        "code": "\tpublic void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n\t\t\tthrows IOException, ServletException {\n\t\tinvoke(new FilterInvocation(request, response, chain));\n\t}",
        "summary_tokens": [
            "method",
            "that",
            "is",
            "actually",
            "called",
            "by",
            "the",
            "filter",
            "chain"
        ]
    },
    {
        "id": 1591,
        "code": "\tpublic boolean isObserveOncePerRequest() {\n\t\treturn this.observeOncePerRequest;\n\t}",
        "summary_tokens": [
            "indicates",
            "whether",
            "once",
            "per",
            "request",
            "handling",
            "will",
            "be",
            "observed"
        ]
    },
    {
        "id": 1592,
        "code": "\tpublic HttpServletRequest getRequest() {\n\t\treturn this.request;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "http",
            "servlet",
            "request"
        ]
    },
    {
        "id": 1593,
        "code": "\tpublic Map<String, String> getVariables() {\n\t\treturn this.variables;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "extracted",
            "variable",
            "values",
            "where",
            "the",
            "key",
            "is",
            "the",
            "variable",
            "name",
            "and",
            "the",
            "value",
            "is",
            "the",
            "variable",
            "value"
        ]
    },
    {
        "id": 1594,
        "code": "\tpublic AuthorizationDecision check(Supplier<Authentication> authentication, HttpServletRequest request) {\n\t\tif (this.logger.isTraceEnabled()) {\n\t\t\tthis.logger.trace(LogMessage.format(\"Authorizing %s\", request));\n\t\t}\n\t\tfor (RequestMatcherEntry<AuthorizationManager<RequestAuthorizationContext>> mapping : this.mappings) {\n\n\t\t\tRequestMatcher matcher = mapping.getRequestMatcher();\n\t\t\tMatchResult matchResult = matcher.matcher(request);\n\t\t\tif (matchResult.isMatch()) {\n\t\t\t\tAuthorizationManager<RequestAuthorizationContext> manager = mapping.getEntry();\n\t\t\t\tif (this.logger.isTraceEnabled()) {\n\t\t\t\t\tthis.logger.trace(LogMessage.format(\"Checking authorization on %s using %s\", request, manager));\n\t\t\t\t}\n\t\t\t\treturn manager.check(authentication,\n\t\t\t\t\t\tnew RequestAuthorizationContext(request, matchResult.getVariables()));\n\t\t\t}\n\t\t}\n\t\tthis.logger.trace(\"Abstaining since did not find matching RequestMatcher\");\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "delegates",
            "to",
            "a",
            "specific",
            "authorization",
            "manager",
            "based",
            "on",
            "a",
            "request",
            "matcher",
            "evaluation"
        ]
    },
    {
        "id": 1595,
        "code": "\tpublic static Builder builder() {\n\t\treturn new Builder();\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "builder",
            "for",
            "request",
            "matcher",
            "delegating",
            "authorization",
            "manager"
        ]
    },
    {
        "id": 1596,
        "code": "\tpublic void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n\t\t\tthrows IOException, ServletException {\n\t\tdoFilter((HttpServletRequest) request, (HttpServletResponse) response, chain);\n\t}",
        "summary_tokens": [
            "invokes",
            "the",
            "requires",
            "authentication",
            "http",
            "servlet",
            "request",
            "http",
            "servlet",
            "response",
            "requires",
            "authentication",
            "method",
            "to",
            "determine",
            "whether",
            "the",
            "request",
            "is",
            "for",
            "authentication",
            "and",
            "should",
            "be",
            "handled",
            "by",
            "this",
            "filter"
        ]
    },
    {
        "id": 1597,
        "code": "\tprotected boolean requiresAuthentication(HttpServletRequest request, HttpServletResponse response) {\n\t\tif (this.requiresAuthenticationRequestMatcher.matches(request)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this.logger.isTraceEnabled()) {\n\t\t\tthis.logger\n\t\t\t\t\t.trace(LogMessage.format(\"Did not match request to %s\", this.requiresAuthenticationRequestMatcher));\n\t\t}\n\t\treturn false;\n\t}",
        "summary_tokens": [
            "indicates",
            "whether",
            "this",
            "filter",
            "should",
            "attempt",
            "to",
            "process",
            "a",
            "login",
            "request",
            "for",
            "the",
            "current",
            "invocation"
        ]
    },
    {
        "id": 1598,
        "code": "\tprotected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response, FilterChain chain,\n\t\t\tAuthentication authResult) throws IOException, ServletException {\n\t\tSecurityContext context = this.securityContextHolderStrategy.createEmptyContext();\n\t\tcontext.setAuthentication(authResult);\n\t\tthis.securityContextHolderStrategy.setContext(context);\n\t\tthis.securityContextRepository.saveContext(context, request, response);\n\t\tif (this.logger.isDebugEnabled()) {\n\t\t\tthis.logger.debug(LogMessage.format(\"Set SecurityContextHolder to %s\", authResult));\n\t\t}\n\t\tthis.rememberMeServices.loginSuccess(request, response, authResult);\n\t\tif (this.eventPublisher != null) {\n\t\t\tthis.eventPublisher.publishEvent(new InteractiveAuthenticationSuccessEvent(authResult, this.getClass()));\n\t\t}\n\t\tthis.successHandler.onAuthenticationSuccess(request, response, authResult);\n\t}",
        "summary_tokens": [
            "default",
            "behaviour",
            "for",
            "successful",
            "authentication"
        ]
    },
    {
        "id": 1599,
        "code": "\tprotected void unsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response,\n\t\t\tAuthenticationException failed) throws IOException, ServletException {\n\t\tthis.securityContextHolderStrategy.clearContext();\n\t\tthis.logger.trace(\"Failed to process authentication request\", failed);\n\t\tthis.logger.trace(\"Cleared SecurityContextHolder\");\n\t\tthis.logger.trace(\"Handling authentication failure\");\n\t\tthis.rememberMeServices.loginFail(request, response);\n\t\tthis.failureHandler.onAuthenticationFailure(request, response, failed);\n\t}",
        "summary_tokens": [
            "default",
            "behaviour",
            "for",
            "unsuccessful",
            "authentication"
        ]
    },
    {
        "id": 1600,
        "code": "\tpublic void setFilterProcessesUrl(String filterProcessesUrl) {\n\t\tsetRequiresAuthenticationRequestMatcher(new AntPathRequestMatcher(filterProcessesUrl));\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "url",
            "that",
            "determines",
            "if",
            "authentication",
            "is",
            "required",
            "filter",
            "processes",
            "url"
        ]
    },
    {
        "id": 1601,
        "code": "\tpublic void setContinueChainBeforeSuccessfulAuthentication(boolean continueChainBeforeSuccessfulAuthentication) {\n\t\tthis.continueChainBeforeSuccessfulAuthentication = continueChainBeforeSuccessfulAuthentication;\n\t}",
        "summary_tokens": [
            "indicates",
            "if",
            "the",
            "filter",
            "chain",
            "should",
            "be",
            "continued",
            "prior",
            "to",
            "delegation",
            "to",
            "successful",
            "authentication",
            "http",
            "servlet",
            "request",
            "http",
            "servlet",
            "response",
            "filter",
            "chain",
            "authentication",
            "which",
            "may",
            "be",
            "useful",
            "in",
            "certain",
            "environment",
            "such",
            "as",
            "tapestry",
            "applications"
        ]
    },
    {
        "id": 1602,
        "code": "\tpublic void setSessionAuthenticationStrategy(SessionAuthenticationStrategy sessionStrategy) {\n\t\tthis.sessionStrategy = sessionStrategy;\n\t}",
        "summary_tokens": [
            "the",
            "session",
            "handling",
            "strategy",
            "which",
            "will",
            "be",
            "invoked",
            "immediately",
            "after",
            "an",
            "authentication",
            "request",
            "is",
            "successfully",
            "processed",
            "by",
            "the",
            "tt",
            "authentication",
            "manager",
            "tt"
        ]
    },
    {
        "id": 1603,
        "code": "\tpublic void setAuthenticationSuccessHandler(AuthenticationSuccessHandler successHandler) {\n\t\tAssert.notNull(successHandler, \"successHandler cannot be null\");\n\t\tthis.successHandler = successHandler;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "strategy",
            "used",
            "to",
            "handle",
            "a",
            "successful",
            "authentication"
        ]
    },
    {
        "id": 1604,
        "code": "\tpublic void setSecurityContextRepository(SecurityContextRepository securityContextRepository) {\n\t\tAssert.notNull(securityContextRepository, \"securityContextRepository cannot be null\");\n\t\tthis.securityContextRepository = securityContextRepository;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "repository",
            "to",
            "save",
            "the",
            "security",
            "context",
            "on",
            "authentication",
            "success"
        ]
    },
    {
        "id": 1605,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n\t\tAssert.notNull(securityContextHolderStrategy, \"securityContextHolderStrategy cannot be null\");\n\t\tthis.securityContextHolderStrategy = securityContextHolderStrategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 1606,
        "code": "\tprotected void handle(HttpServletRequest request, HttpServletResponse response, Authentication authentication)\n\t\t\tthrows IOException, ServletException {\n\t\tString targetUrl = determineTargetUrl(request, response, authentication);\n\t\tif (response.isCommitted()) {\n\t\t\tthis.logger.debug(LogMessage.format(\"Did not redirect to %s since response already committed.\", targetUrl));\n\t\t\treturn;\n\t\t}\n\t\tthis.redirectStrategy.sendRedirect(request, response, targetUrl);\n\t}",
        "summary_tokens": [
            "invokes",
            "the",
            "configured",
            "redirect",
            "strategy",
            "with",
            "the",
            "url",
            "returned",
            "by",
            "the",
            "determine",
            "target",
            "url",
            "method"
        ]
    },
    {
        "id": 1607,
        "code": "\tprotected String determineTargetUrl(HttpServletRequest request, HttpServletResponse response) {\n\t\tif (isAlwaysUseDefaultTargetUrl()) {\n\t\t\treturn this.defaultTargetUrl;\n\t\t}\n\t\t\n\t\tString targetUrl = null;\n\t\tif (this.targetUrlParameter != null) {\n\t\t\ttargetUrl = request.getParameter(this.targetUrlParameter);\n\t\t\tif (StringUtils.hasText(targetUrl)) {\n\t\t\t\tif (this.logger.isTraceEnabled()) {\n\t\t\t\t\tthis.logger.trace(LogMessage.format(\"Using url %s from request parameter %s\", targetUrl,\n\t\t\t\t\t\t\tthis.targetUrlParameter));\n\t\t\t\t}\n\t\t\t\treturn targetUrl;\n\t\t\t}\n\t\t}\n\t\tif (this.useReferer && !StringUtils.hasLength(targetUrl)) {\n\t\t\ttargetUrl = request.getHeader(\"Referer\");\n\t\t\tif (this.logger.isTraceEnabled()) {\n\t\t\t\tthis.logger.trace(LogMessage.format(\"Using url %s from Referer header\", targetUrl));\n\t\t\t}\n\t\t}\n\t\tif (!StringUtils.hasText(targetUrl)) {\n\t\t\ttargetUrl = this.defaultTargetUrl;\n\t\t\tif (this.logger.isTraceEnabled()) {\n\t\t\t\tthis.logger.trace(LogMessage.format(\"Using default url %s\", targetUrl));\n\t\t\t}\n\t\t}\n\t\treturn targetUrl;\n\t}",
        "summary_tokens": [
            "builds",
            "the",
            "target",
            "url",
            "according",
            "to",
            "the",
            "logic",
            "defined",
            "in",
            "the",
            "main",
            "class",
            "javadoc"
        ]
    },
    {
        "id": 1608,
        "code": "\tprotected final String getDefaultTargetUrl() {\n\t\treturn this.defaultTargetUrl;\n\t}",
        "summary_tokens": [
            "supplies",
            "the",
            "default",
            "target",
            "url",
            "that",
            "will",
            "be",
            "used",
            "if",
            "no",
            "saved",
            "request",
            "is",
            "found",
            "or",
            "the",
            "always",
            "use",
            "default",
            "target",
            "url",
            "property",
            "is",
            "set",
            "to",
            "true"
        ]
    },
    {
        "id": 1609,
        "code": "\tpublic void setDefaultTargetUrl(String defaultTargetUrl) {\n\t\tAssert.isTrue(UrlUtils.isValidRedirectUrl(defaultTargetUrl),\n\t\t\t\t\"defaultTarget must start with '/' or with 'http(s)'\");\n\t\tthis.defaultTargetUrl = defaultTargetUrl;\n\t}",
        "summary_tokens": [
            "supplies",
            "the",
            "default",
            "target",
            "url",
            "that",
            "will",
            "be",
            "used",
            "if",
            "no",
            "saved",
            "request",
            "is",
            "found",
            "in",
            "the",
            "session",
            "or",
            "the",
            "always",
            "use",
            "default",
            "target",
            "url",
            "property",
            "is",
            "set",
            "to",
            "true"
        ]
    },
    {
        "id": 1610,
        "code": "\tpublic void setAlwaysUseDefaultTargetUrl(boolean alwaysUseDefaultTargetUrl) {\n\t\tthis.alwaysUseDefaultTargetUrl = alwaysUseDefaultTargetUrl;\n\t}",
        "summary_tokens": [
            "if",
            "code",
            "true",
            "code",
            "will",
            "always",
            "redirect",
            "to",
            "the",
            "value",
            "of",
            "default",
            "target",
            "url",
            "defaults",
            "to",
            "code",
            "false",
            "code"
        ]
    },
    {
        "id": 1611,
        "code": "\tpublic void setTargetUrlParameter(String targetUrlParameter) {\n\t\tif (targetUrlParameter != null) {\n\t\t\tAssert.hasText(targetUrlParameter, \"targetUrlParameter cannot be empty\");\n\t\t}\n\t\tthis.targetUrlParameter = targetUrlParameter;\n\t}",
        "summary_tokens": [
            "if",
            "this",
            "property",
            "is",
            "set",
            "the",
            "current",
            "request",
            "will",
            "be",
            "checked",
            "for",
            "this",
            "a",
            "parameter",
            "with",
            "this",
            "name",
            "and",
            "the",
            "value",
            "used",
            "as",
            "the",
            "target",
            "url",
            "if",
            "present"
        ]
    },
    {
        "id": 1612,
        "code": "\tpublic void setRedirectStrategy(RedirectStrategy redirectStrategy) {\n\t\tthis.redirectStrategy = redirectStrategy;\n\t}",
        "summary_tokens": [
            "allows",
            "overriding",
            "of",
            "the",
            "behaviour",
            "when",
            "redirecting",
            "to",
            "a",
            "target",
            "url"
        ]
    },
    {
        "id": 1613,
        "code": "\tpublic void setUseReferer(boolean useReferer) {\n\t\tthis.useReferer = useReferer;\n\t}",
        "summary_tokens": [
            "if",
            "set",
            "to",
            "true",
            "the",
            "referer",
            "header",
            "will",
            "be",
            "used",
            "if",
            "available"
        ]
    },
    {
        "id": 1614,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n\t\tAssert.notNull(securityContextHolderStrategy, \"securityContextHolderStrategy cannot be null\");\n\t\tthis.securityContextHolderStrategy = securityContextHolderStrategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 1615,
        "code": "\tpublic void setSecurityContextRepository(SecurityContextRepository securityContextRepository) {\n\t\tAssert.notNull(securityContextRepository, \"securityContextRepository cannot be null\");\n\t\tthis.securityContextRepository = securityContextRepository;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "repository",
            "to",
            "save",
            "the",
            "security",
            "context",
            "on",
            "authentication",
            "success"
        ]
    },
    {
        "id": 1616,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n\t\tAssert.notNull(securityContextHolderStrategy, \"securityContextHolderStrategy cannot be null\");\n\t\tthis.securityContextHolderStrategy = securityContextHolderStrategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 1617,
        "code": "\tdefault void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, FilterChain chain,\n\t\t\tAuthentication authentication) throws IOException, ServletException {\n\t\tonAuthenticationSuccess(request, response, authentication);\n\t\tchain.doFilter(request, response);\n\t}",
        "summary_tokens": [
            "called",
            "when",
            "a",
            "user",
            "has",
            "been",
            "successfully",
            "authenticated"
        ]
    },
    {
        "id": 1618,
        "code": "\tpublic void setDefaultEntryPoint(AuthenticationEntryPoint defaultEntryPoint) {\n\t\tthis.defaultEntryPoint = defaultEntryPoint;\n\t}",
        "summary_tokens": [
            "entry",
            "point",
            "which",
            "is",
            "used",
            "when",
            "no",
            "request",
            "matcher",
            "returned",
            "true"
        ]
    },
    {
        "id": 1619,
        "code": "\tpublic void setExceptionMappings(Map<?, ?> failureUrlMap) {\n\t\tthis.failureUrlMap.clear();\n\t\tfor (Map.Entry<?, ?> entry : failureUrlMap.entrySet()) {\n\t\t\tObject exception = entry.getKey();\n\t\t\tObject url = entry.getValue();\n\t\t\tAssert.isInstanceOf(String.class, exception, \"Exception key must be a String (the exception classname).\");\n\t\t\tAssert.isInstanceOf(String.class, url, \"URL must be a String\");\n\t\t\tAssert.isTrue(UrlUtils.isValidRedirectUrl((String) url), () -> \"Not a valid redirect URL: \" + url);\n\t\t\tthis.failureUrlMap.put((String) exception, (String) url);\n\t\t}\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "map",
            "of",
            "exception",
            "types",
            "by",
            "name",
            "to",
            "urls"
        ]
    },
    {
        "id": 1620,
        "code": "\tpublic void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException arg2)\n\t\t\tthrows IOException {\n\t\tlogger.debug(\"Pre-authenticated entry point called. Rejecting access\");\n\t\tresponse.sendError(HttpServletResponse.SC_FORBIDDEN, \"Access Denied\");\n\t}",
        "summary_tokens": [
            "always",
            "returns",
            "a",
            "0",
            "error",
            "code",
            "to",
            "the",
            "client"
        ]
    },
    {
        "id": 1621,
        "code": "\tprotected String determineUrlToUseForThisRequest(HttpServletRequest request, HttpServletResponse response,\n\t\t\tAuthenticationException exception) {\n\t\treturn getLoginFormUrl();\n\t}",
        "summary_tokens": [
            "allows",
            "subclasses",
            "to",
            "modify",
            "the",
            "login",
            "form",
            "url",
            "that",
            "should",
            "be",
            "applicable",
            "for",
            "a",
            "given",
            "request"
        ]
    },
    {
        "id": 1622,
        "code": "\tpublic void commence(HttpServletRequest request, HttpServletResponse response,\n\t\t\tAuthenticationException authException) throws IOException, ServletException {\n\t\tif (!this.useForward) {\n\t\t\t\n\t\t\tString redirectUrl = buildRedirectUrlToLoginPage(request, response, authException);\n\t\t\tthis.redirectStrategy.sendRedirect(request, response, redirectUrl);\n\t\t\treturn;\n\t\t}\n\t\tString redirectUrl = null;\n\t\tif (this.forceHttps && \"http\".equals(request.getScheme())) {\n\t\t\t\n\t\t\t\n\t\t\tredirectUrl = buildHttpsRedirectUrlForRequest(request);\n\t\t}\n\t\tif (redirectUrl != null) {\n\t\t\tthis.redirectStrategy.sendRedirect(request, response, redirectUrl);\n\t\t\treturn;\n\t\t}\n\t\tString loginForm = determineUrlToUseForThisRequest(request, response, authException);\n\t\tlogger.debug(LogMessage.format(\"Server side forward to: %s\", loginForm));\n\t\tRequestDispatcher dispatcher = request.getRequestDispatcher(loginForm);\n\t\tdispatcher.forward(request, response);\n\t\treturn;\n\t}",
        "summary_tokens": [
            "performs",
            "the",
            "redirect",
            "or",
            "forward",
            "to",
            "the",
            "login",
            "form",
            "url"
        ]
    },
    {
        "id": 1623,
        "code": "\tprotected String buildHttpsRedirectUrlForRequest(HttpServletRequest request) throws IOException, ServletException {\n\t\tint serverPort = this.portResolver.getServerPort(request);\n\t\tInteger httpsPort = this.portMapper.lookupHttpsPort(serverPort);\n\t\tif (httpsPort != null) {\n\t\t\tRedirectUrlBuilder urlBuilder = new RedirectUrlBuilder();\n\t\t\turlBuilder.setScheme(\"https\");\n\t\t\turlBuilder.setServerName(request.getServerName());\n\t\t\turlBuilder.setPort(httpsPort);\n\t\t\turlBuilder.setContextPath(request.getContextPath());\n\t\t\turlBuilder.setServletPath(request.getServletPath());\n\t\t\turlBuilder.setPathInfo(request.getPathInfo());\n\t\t\turlBuilder.setQuery(request.getQueryString());\n\t\t\treturn urlBuilder.getUrl();\n\t\t}\n\t\t\n\t\tlogger.warn(\n\t\t\t\tLogMessage.format(\"Unable to redirect to HTTPS as no port mapping found for HTTP port %s\", serverPort));\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "builds",
            "a",
            "url",
            "to",
            "redirect",
            "the",
            "supplied",
            "request",
            "to",
            "https"
        ]
    },
    {
        "id": 1624,
        "code": "\tpublic void setForceHttps(boolean forceHttps) {\n\t\tthis.forceHttps = forceHttps;\n\t}",
        "summary_tokens": [
            "set",
            "to",
            "true",
            "to",
            "force",
            "login",
            "form",
            "access",
            "to",
            "be",
            "via",
            "https"
        ]
    },
    {
        "id": 1625,
        "code": "\tpublic void setUseForward(boolean useForward) {\n\t\tthis.useForward = useForward;\n\t}",
        "summary_tokens": [
            "tells",
            "if",
            "we",
            "are",
            "to",
            "do",
            "a",
            "forward",
            "to",
            "the",
            "login",
            "form",
            "url",
            "using",
            "the",
            "request",
            "dispatcher",
            "instead",
            "of",
            "a",
            "0",
            "redirect"
        ]
    },
    {
        "id": 1626,
        "code": "\tpublic void setDefaultAuthenticationManager(AuthenticationManager defaultAuthenticationManager) {\n\t\tAssert.notNull(defaultAuthenticationManager, \"defaultAuthenticationManager cannot be null\");\n\t\tthis.defaultAuthenticationManager = defaultAuthenticationManager;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "default",
            "authentication",
            "manager",
            "to",
            "use",
            "when",
            "a",
            "request",
            "does",
            "not",
            "match",
            "default",
            "authentication",
            "manager",
            "the",
            "default",
            "authentication",
            "manager",
            "to",
            "use"
        ]
    },
    {
        "id": 1627,
        "code": "\tpublic static Builder builder() {\n\t\treturn new Builder();\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "builder",
            "for",
            "request",
            "matcher",
            "delegating",
            "authorization",
            "manager"
        ]
    },
    {
        "id": 1628,
        "code": "\tpublic void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response,\n\t\t\tAuthenticationException exception) throws IOException, ServletException {\n\t\tif (this.defaultFailureUrl == null) {\n\t\t\tif (this.logger.isTraceEnabled()) {\n\t\t\t\tthis.logger.trace(\"Sending 401 Unauthorized error since no failure URL is set\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.logger.debug(\"Sending 401 Unauthorized error\");\n\t\t\t}\n\t\t\tresponse.sendError(HttpStatus.UNAUTHORIZED.value(), HttpStatus.UNAUTHORIZED.getReasonPhrase());\n\t\t\treturn;\n\t\t}\n\t\tsaveException(request, exception);\n\t\tif (this.forwardToDestination) {\n\t\t\tthis.logger.debug(\"Forwarding to \" + this.defaultFailureUrl);\n\t\t\trequest.getRequestDispatcher(this.defaultFailureUrl).forward(request, response);\n\t\t}\n\t\telse {\n\t\t\tthis.redirectStrategy.sendRedirect(request, response, this.defaultFailureUrl);\n\t\t}\n\t}",
        "summary_tokens": [
            "performs",
            "the",
            "redirect",
            "or",
            "forward",
            "to",
            "the",
            "default",
            "failure",
            "url",
            "if",
            "set",
            "otherwise",
            "returns",
            "a",
            "0",
            "error",
            "code"
        ]
    },
    {
        "id": 1629,
        "code": "\tprotected final void saveException(HttpServletRequest request, AuthenticationException exception) {\n\t\tif (this.forwardToDestination) {\n\t\t\trequest.setAttribute(WebAttributes.AUTHENTICATION_EXCEPTION, exception);\n\t\t\treturn;\n\t\t}\n\t\tHttpSession session = request.getSession(false);\n\t\tif (session != null || this.allowSessionCreation) {\n\t\t\trequest.getSession().setAttribute(WebAttributes.AUTHENTICATION_EXCEPTION, exception);\n\t\t}\n\t}",
        "summary_tokens": [
            "caches",
            "the",
            "authentication",
            "exception",
            "for",
            "use",
            "in",
            "view",
            "rendering"
        ]
    },
    {
        "id": 1630,
        "code": "\tpublic void setDefaultFailureUrl(String defaultFailureUrl) {\n\t\tAssert.isTrue(UrlUtils.isValidRedirectUrl(defaultFailureUrl),\n\t\t\t\t() -> \"'\" + defaultFailureUrl + \"' is not a valid redirect URL\");\n\t\tthis.defaultFailureUrl = defaultFailureUrl;\n\t}",
        "summary_tokens": [
            "the",
            "url",
            "which",
            "will",
            "be",
            "used",
            "as",
            "the",
            "failure",
            "destination"
        ]
    },
    {
        "id": 1631,
        "code": "\tpublic void setUseForward(boolean forwardToDestination) {\n\t\tthis.forwardToDestination = forwardToDestination;\n\t}",
        "summary_tokens": [
            "if",
            "set",
            "to",
            "tt",
            "true",
            "tt",
            "performs",
            "a",
            "forward",
            "to",
            "the",
            "failure",
            "destination",
            "url",
            "instead",
            "of",
            "a",
            "redirect"
        ]
    },
    {
        "id": 1632,
        "code": "\tpublic void setRedirectStrategy(RedirectStrategy redirectStrategy) {\n\t\tthis.redirectStrategy = redirectStrategy;\n\t}",
        "summary_tokens": [
            "allows",
            "overriding",
            "of",
            "the",
            "behaviour",
            "when",
            "redirecting",
            "to",
            "a",
            "target",
            "url"
        ]
    },
    {
        "id": 1633,
        "code": "\tpublic void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response,\n\t\t\tAuthentication authentication) throws IOException, ServletException {\n\t\thandle(request, response, authentication);\n\t\tclearAuthenticationAttributes(request);\n\t}",
        "summary_tokens": [
            "calls",
            "the",
            "parent",
            "class",
            "handle",
            "method",
            "to",
            "forward",
            "or",
            "redirect",
            "to",
            "the",
            "target",
            "url",
            "and",
            "then",
            "calls",
            "clear",
            "authentication",
            "attributes",
            "to",
            "remove",
            "any",
            "leftover",
            "session",
            "data"
        ]
    },
    {
        "id": 1634,
        "code": "\tprotected final void clearAuthenticationAttributes(HttpServletRequest request) {\n\t\tHttpSession session = request.getSession(false);\n\t\tif (session != null) {\n\t\t\tsession.removeAttribute(WebAttributes.AUTHENTICATION_EXCEPTION);\n\t\t}\n\t}",
        "summary_tokens": [
            "removes",
            "temporary",
            "authentication",
            "related",
            "data",
            "which",
            "may",
            "have",
            "been",
            "stored",
            "in",
            "the",
            "session",
            "during",
            "the",
            "authentication",
            "process"
        ]
    },
    {
        "id": 1635,
        "code": "\tprotected String obtainPassword(HttpServletRequest request) {\n\t\treturn request.getParameter(this.passwordParameter);\n\t}",
        "summary_tokens": [
            "enables",
            "subclasses",
            "to",
            "override",
            "the",
            "composition",
            "of",
            "the",
            "password",
            "such",
            "as",
            "by",
            "including",
            "additional",
            "values",
            "and",
            "a",
            "separator"
        ]
    },
    {
        "id": 1636,
        "code": "\tprotected String obtainUsername(HttpServletRequest request) {\n\t\treturn request.getParameter(this.usernameParameter);\n\t}",
        "summary_tokens": [
            "enables",
            "subclasses",
            "to",
            "override",
            "the",
            "composition",
            "of",
            "the",
            "username",
            "such",
            "as",
            "by",
            "including",
            "additional",
            "values",
            "and",
            "a",
            "separator"
        ]
    },
    {
        "id": 1637,
        "code": "\tprotected void setDetails(HttpServletRequest request, UsernamePasswordAuthenticationToken authRequest) {\n\t\tauthRequest.setDetails(this.authenticationDetailsSource.buildDetails(request));\n\t}",
        "summary_tokens": [
            "provided",
            "so",
            "that",
            "subclasses",
            "may",
            "configure",
            "what",
            "is",
            "put",
            "into",
            "the",
            "authentication",
            "request",
            "s",
            "details",
            "property"
        ]
    },
    {
        "id": 1638,
        "code": "\tpublic void setUsernameParameter(String usernameParameter) {\n\t\tAssert.hasText(usernameParameter, \"Username parameter must not be empty or null\");\n\t\tthis.usernameParameter = usernameParameter;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "parameter",
            "name",
            "which",
            "will",
            "be",
            "used",
            "to",
            "obtain",
            "the",
            "username",
            "from",
            "the",
            "login",
            "request"
        ]
    },
    {
        "id": 1639,
        "code": "\tpublic void setPasswordParameter(String passwordParameter) {\n\t\tAssert.hasText(passwordParameter, \"Password parameter must not be empty or null\");\n\t\tthis.passwordParameter = passwordParameter;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "parameter",
            "name",
            "which",
            "will",
            "be",
            "used",
            "to",
            "obtain",
            "the",
            "password",
            "from",
            "the",
            "login",
            "request"
        ]
    },
    {
        "id": 1640,
        "code": "\tpublic void setPostOnly(boolean postOnly) {\n\t\tthis.postOnly = postOnly;\n\t}",
        "summary_tokens": [
            "defines",
            "whether",
            "only",
            "http",
            "post",
            "requests",
            "will",
            "be",
            "allowed",
            "by",
            "this",
            "filter"
        ]
    },
    {
        "id": 1641,
        "code": "\tpublic String getRemoteAddress() {\n\t\treturn this.remoteAddress;\n\t}",
        "summary_tokens": [
            "indicates",
            "the",
            "tcp",
            "ip",
            "address",
            "the",
            "authentication",
            "request",
            "was",
            "received",
            "from"
        ]
    },
    {
        "id": 1642,
        "code": "\tpublic String getSessionId() {\n\t\treturn this.sessionId;\n\t}",
        "summary_tokens": [
            "indicates",
            "the",
            "code",
            "http",
            "session",
            "code",
            "id",
            "the",
            "authentication",
            "request",
            "was",
            "received",
            "from"
        ]
    },
    {
        "id": 1643,
        "code": "\tpublic WebAuthenticationDetails buildDetails(HttpServletRequest context) {\n\t\treturn new WebAuthenticationDetails(context);\n\t}",
        "summary_tokens": [
            "context",
            "the",
            "http",
            "servlet",
            "request",
            "object"
        ]
    },
    {
        "id": 1644,
        "code": "\tpublic void setDefaultLogoutSuccessHandler(LogoutSuccessHandler defaultLogoutSuccessHandler) {\n\t\tthis.defaultLogoutSuccessHandler = defaultLogoutSuccessHandler;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "default",
            "logout",
            "success",
            "handler",
            "if",
            "no",
            "other",
            "handlers",
            "available",
            "default",
            "logout",
            "success",
            "handler",
            "the",
            "default",
            "logout",
            "success",
            "handler",
            "to",
            "set"
        ]
    },
    {
        "id": 1645,
        "code": "\tpublic void onLogoutSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication)\n\t\t\tthrows IOException {\n\t\tresponse.setStatus(this.httpStatusToReturn.value());\n\t\tresponse.getWriter().flush();\n\t}",
        "summary_tokens": [
            "implementation",
            "of",
            "logout",
            "success",
            "handler",
            "on",
            "logout",
            "success",
            "http",
            "servlet",
            "request",
            "http",
            "servlet",
            "response",
            "authentication"
        ]
    },
    {
        "id": 1646,
        "code": "\tprotected boolean requiresLogout(HttpServletRequest request, HttpServletResponse response) {\n\t\tif (this.logoutRequestMatcher.matches(request)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this.logger.isTraceEnabled()) {\n\t\t\tthis.logger.trace(LogMessage.format(\"Did not match request to %s\", this.logoutRequestMatcher));\n\t\t}\n\t\treturn false;\n\t}",
        "summary_tokens": [
            "allow",
            "subclasses",
            "to",
            "modify",
            "when",
            "a",
            "logout",
            "should",
            "take",
            "place"
        ]
    },
    {
        "id": 1647,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n\t\tAssert.notNull(securityContextHolderStrategy, \"securityContextHolderStrategy cannot be null\");\n\t\tthis.securityContextHolderStrategy = securityContextHolderStrategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 1648,
        "code": "\tpublic void logout(HttpServletRequest request, HttpServletResponse response, Authentication authentication) {\n\t\tAssert.notNull(request, \"HttpServletRequest required\");\n\t\tif (this.invalidateHttpSession) {\n\t\t\tHttpSession session = request.getSession(false);\n\t\t\tif (session != null) {\n\t\t\t\tsession.invalidate();\n\t\t\t\tif (this.logger.isDebugEnabled()) {\n\t\t\t\t\tthis.logger.debug(LogMessage.format(\"Invalidated session %s\", session.getId()));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSecurityContext context = this.securityContextHolderStrategy.getContext();\n\t\tthis.securityContextHolderStrategy.clearContext();\n\t\tif (this.clearAuthentication) {\n\t\t\tcontext.setAuthentication(null);\n\t\t}\n\t}",
        "summary_tokens": [
            "requires",
            "the",
            "request",
            "to",
            "be",
            "passed",
            "in"
        ]
    },
    {
        "id": 1649,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n\t\tAssert.notNull(securityContextHolderStrategy, \"securityContextHolderStrategy cannot be null\");\n\t\tthis.securityContextHolderStrategy = securityContextHolderStrategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 1650,
        "code": "\tpublic void setInvalidateHttpSession(boolean invalidateHttpSession) {\n\t\tthis.invalidateHttpSession = invalidateHttpSession;\n\t}",
        "summary_tokens": [
            "causes",
            "the",
            "http",
            "session",
            "to",
            "be",
            "invalidated",
            "when",
            "this",
            "logout",
            "handler",
            "is",
            "invoked"
        ]
    },
    {
        "id": 1651,
        "code": "\tpublic void setClearAuthentication(boolean clearAuthentication) {\n\t\tthis.clearAuthentication = clearAuthentication;\n\t}",
        "summary_tokens": [
            "if",
            "true",
            "removes",
            "the",
            "authentication",
            "from",
            "the",
            "security",
            "context",
            "to",
            "prevent",
            "issues",
            "with",
            "concurrent",
            "requests"
        ]
    },
    {
        "id": 1652,
        "code": "\tpublic void afterPropertiesSet() {\n\t\ttry {\n\t\t\tsuper.afterPropertiesSet();\n\t\t}\n\t\tcatch (ServletException ex) {\n\t\t\t\n\t\t\tthrow new RuntimeException(ex);\n\t\t}\n\t\tAssert.notNull(this.authenticationManager, \"An AuthenticationManager must be set\");\n\t}",
        "summary_tokens": [
            "check",
            "whether",
            "all",
            "required",
            "properties",
            "have",
            "been",
            "set"
        ]
    },
    {
        "id": 1653,
        "code": "\tpublic void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n\t\t\tthrows IOException, ServletException {\n\t\tif (this.requiresAuthenticationRequestMatcher.matches((HttpServletRequest) request)) {\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(LogMessage.of(\n\t\t\t\t\t\t() -> \"Authenticating \" + this.securityContextHolderStrategy.getContext().getAuthentication()));\n\t\t\t}\n\t\t\tdoAuthenticate((HttpServletRequest) request, (HttpServletResponse) response);\n\t\t}\n\t\telse {\n\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(LogMessage.format(\"Did not authenticate since request did not match [%s]\",\n\t\t\t\t\t\tthis.requiresAuthenticationRequestMatcher));\n\t\t\t}\n\t\t}\n\t\tchain.doFilter(request, response);\n\t}",
        "summary_tokens": [
            "try",
            "to",
            "authenticate",
            "a",
            "pre",
            "authenticated",
            "user",
            "with",
            "spring",
            "security",
            "if",
            "the",
            "user",
            "has",
            "not",
            "yet",
            "been",
            "authenticated"
        ]
    },
    {
        "id": 1654,
        "code": "\tprotected boolean principalChanged(HttpServletRequest request, Authentication currentAuthentication) {\n\t\tObject principal = getPreAuthenticatedPrincipal(request);\n\t\tif ((principal instanceof String) && currentAuthentication.getName().equals(principal)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (principal != null && principal.equals(currentAuthentication.getPrincipal())) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.logger.debug(LogMessage.format(\"Pre-authenticated principal has changed to %s and will be reauthenticated\",\n\t\t\t\tprincipal));\n\t\treturn true;\n\t}",
        "summary_tokens": [
            "determines",
            "if",
            "the",
            "current",
            "principal",
            "has",
            "changed"
        ]
    },
    {
        "id": 1655,
        "code": "\tprivate void doAuthenticate(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows IOException, ServletException {\n\t\tObject principal = getPreAuthenticatedPrincipal(request);\n\t\tif (principal == null) {\n\t\t\tthis.logger.debug(\"No pre-authenticated principal found in request\");\n\t\t\treturn;\n\t\t}\n\t\tthis.logger.debug(LogMessage.format(\"preAuthenticatedPrincipal = %s, trying to authenticate\", principal));\n\t\tObject credentials = getPreAuthenticatedCredentials(request);\n\t\ttry {\n\t\t\tPreAuthenticatedAuthenticationToken authenticationRequest = new PreAuthenticatedAuthenticationToken(\n\t\t\t\t\tprincipal, credentials);\n\t\t\tauthenticationRequest.setDetails(this.authenticationDetailsSource.buildDetails(request));\n\t\t\tAuthentication authenticationResult = this.authenticationManager.authenticate(authenticationRequest);\n\t\t\tsuccessfulAuthentication(request, response, authenticationResult);\n\t\t}\n\t\tcatch (AuthenticationException ex) {\n\t\t\tunsuccessfulAuthentication(request, response, ex);\n\t\t\tif (!this.continueFilterChainOnUnsuccessfulAuthentication) {\n\t\t\t\tthrow ex;\n\t\t\t}\n\t\t}\n\t}",
        "summary_tokens": [
            "do",
            "the",
            "actual",
            "authentication",
            "for",
            "a",
            "pre",
            "authenticated",
            "user"
        ]
    },
    {
        "id": 1656,
        "code": "\tprotected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response,\n\t\t\tAuthentication authResult) throws IOException, ServletException {\n\t\tthis.logger.debug(LogMessage.format(\"Authentication success: %s\", authResult));\n\t\tSecurityContext context = this.securityContextHolderStrategy.createEmptyContext();\n\t\tcontext.setAuthentication(authResult);\n\t\tthis.securityContextHolderStrategy.setContext(context);\n\t\tthis.securityContextRepository.saveContext(context, request, response);\n\t\tif (this.eventPublisher != null) {\n\t\t\tthis.eventPublisher.publishEvent(new InteractiveAuthenticationSuccessEvent(authResult, this.getClass()));\n\t\t}\n\t\tif (this.authenticationSuccessHandler != null) {\n\t\t\tthis.authenticationSuccessHandler.onAuthenticationSuccess(request, response, authResult);\n\t\t}\n\t}",
        "summary_tokens": [
            "puts",
            "the",
            "code",
            "authentication",
            "code",
            "instance",
            "returned",
            "by",
            "the",
            "authentication",
            "manager",
            "into",
            "the",
            "secure",
            "context"
        ]
    },
    {
        "id": 1657,
        "code": "\tprotected void unsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response,\n\t\t\tAuthenticationException failed) throws IOException, ServletException {\n\t\tthis.securityContextHolderStrategy.clearContext();\n\t\tthis.logger.debug(\"Cleared security context due to exception\", failed);\n\t\trequest.setAttribute(WebAttributes.AUTHENTICATION_EXCEPTION, failed);\n\t\tif (this.authenticationFailureHandler != null) {\n\t\t\tthis.authenticationFailureHandler.onAuthenticationFailure(request, response, failed);\n\t\t}\n\t}",
        "summary_tokens": [
            "ensures",
            "the",
            "authentication",
            "object",
            "in",
            "the",
            "secure",
            "context",
            "is",
            "set",
            "to",
            "null",
            "when",
            "authentication",
            "fails"
        ]
    },
    {
        "id": 1658,
        "code": "\tpublic void setApplicationEventPublisher(ApplicationEventPublisher anApplicationEventPublisher) {\n\t\tthis.eventPublisher = anApplicationEventPublisher;\n\t}",
        "summary_tokens": [
            "an",
            "application",
            "event",
            "publisher",
            "the",
            "application",
            "event",
            "publisher",
            "to",
            "use"
        ]
    },
    {
        "id": 1659,
        "code": "\tpublic void setSecurityContextRepository(SecurityContextRepository securityContextRepository) {\n\t\tAssert.notNull(securityContextRepository, \"securityContextRepository cannot be null\");\n\t\tthis.securityContextRepository = securityContextRepository;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "repository",
            "to",
            "save",
            "the",
            "security",
            "context",
            "on",
            "authentication",
            "success"
        ]
    },
    {
        "id": 1660,
        "code": "\tpublic void setAuthenticationDetailsSource(\n\t\t\tAuthenticationDetailsSource<HttpServletRequest, ?> authenticationDetailsSource) {\n\t\tAssert.notNull(authenticationDetailsSource, \"AuthenticationDetailsSource required\");\n\t\tthis.authenticationDetailsSource = authenticationDetailsSource;\n\t}",
        "summary_tokens": [
            "authentication",
            "details",
            "source",
            "the",
            "authentication",
            "details",
            "source",
            "to",
            "use"
        ]
    },
    {
        "id": 1661,
        "code": "\tpublic void setAuthenticationManager(AuthenticationManager authenticationManager) {\n\t\tthis.authenticationManager = authenticationManager;\n\t}",
        "summary_tokens": [
            "authentication",
            "manager",
            "the",
            "authentication",
            "manager",
            "to",
            "use"
        ]
    },
    {
        "id": 1662,
        "code": "\tpublic void setContinueFilterChainOnUnsuccessfulAuthentication(boolean shouldContinue) {\n\t\tthis.continueFilterChainOnUnsuccessfulAuthentication = shouldContinue;\n\t}",
        "summary_tokens": [
            "if",
            "set",
            "to",
            "true",
            "the",
            "default",
            "any",
            "authentication",
            "exception",
            "raised",
            "by",
            "the",
            "authentication",
            "manager",
            "will",
            "be",
            "swallowed",
            "and",
            "the",
            "request",
            "will",
            "be",
            "allowed",
            "to",
            "proceed",
            "potentially",
            "using",
            "alternative",
            "authentication",
            "mechanisms"
        ]
    },
    {
        "id": 1663,
        "code": "\tpublic void setCheckForPrincipalChanges(boolean checkForPrincipalChanges) {\n\t\tthis.checkForPrincipalChanges = checkForPrincipalChanges;\n\t}",
        "summary_tokens": [
            "if",
            "set",
            "the",
            "pre",
            "authenticated",
            "principal",
            "will",
            "be",
            "checked",
            "on",
            "each",
            "request",
            "and",
            "compared",
            "against",
            "the",
            "name",
            "of",
            "the",
            "current",
            "tt",
            "authentication",
            "tt",
            "object"
        ]
    },
    {
        "id": 1664,
        "code": "\tpublic void setInvalidateSessionOnPrincipalChange(boolean invalidateSessionOnPrincipalChange) {\n\t\tthis.invalidateSessionOnPrincipalChange = invalidateSessionOnPrincipalChange;\n\t}",
        "summary_tokens": [
            "if",
            "tt",
            "check",
            "for",
            "principal",
            "changes",
            "tt",
            "is",
            "set",
            "and",
            "a",
            "change",
            "of",
            "principal",
            "is",
            "detected",
            "determines",
            "whether",
            "any",
            "existing",
            "session",
            "should",
            "be",
            "invalidated",
            "before",
            "proceeding",
            "to",
            "authenticate",
            "the",
            "new",
            "principal"
        ]
    },
    {
        "id": 1665,
        "code": "\tpublic void setAuthenticationSuccessHandler(AuthenticationSuccessHandler authenticationSuccessHandler) {\n\t\tthis.authenticationSuccessHandler = authenticationSuccessHandler;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "strategy",
            "used",
            "to",
            "handle",
            "a",
            "successful",
            "authentication"
        ]
    },
    {
        "id": 1666,
        "code": "\tpublic void setAuthenticationFailureHandler(AuthenticationFailureHandler authenticationFailureHandler) {\n\t\tthis.authenticationFailureHandler = authenticationFailureHandler;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "strategy",
            "used",
            "to",
            "handle",
            "a",
            "failed",
            "authentication"
        ]
    },
    {
        "id": 1667,
        "code": "\tpublic void setRequiresAuthenticationRequestMatcher(RequestMatcher requiresAuthenticationRequestMatcher) {\n\t\tAssert.notNull(requiresAuthenticationRequestMatcher, \"requestMatcher cannot be null\");\n\t\tthis.requiresAuthenticationRequestMatcher = requiresAuthenticationRequestMatcher;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "request",
            "matcher",
            "to",
            "check",
            "whether",
            "to",
            "proceed",
            "the",
            "request",
            "further"
        ]
    },
    {
        "id": 1668,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n\t\tAssert.notNull(securityContextHolderStrategy, \"securityContextHolderStrategy cannot be null\");\n\t\tthis.securityContextHolderStrategy = securityContextHolderStrategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 1669,
        "code": "\tpublic void afterPropertiesSet() {\n\t\tAssert.notNull(this.preAuthenticatedUserDetailsService, \"An AuthenticationUserDetailsService must be set\");\n\t}",
        "summary_tokens": [
            "check",
            "whether",
            "all",
            "required",
            "properties",
            "have",
            "been",
            "set"
        ]
    },
    {
        "id": 1670,
        "code": "\tpublic Authentication authenticate(Authentication authentication) throws AuthenticationException {\n\t\tif (!supports(authentication.getClass())) {\n\t\t\treturn null;\n\t\t}\n\t\tlogger.debug(LogMessage.format(\"PreAuthenticated authentication request: %s\", authentication));\n\t\tif (authentication.getPrincipal() == null) {\n\t\t\tlogger.debug(\"No pre-authenticated principal found in request.\");\n\t\t\tif (this.throwExceptionWhenTokenRejected) {\n\t\t\t\tthrow new BadCredentialsException(\"No pre-authenticated principal found in request.\");\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\tif (authentication.getCredentials() == null) {\n\t\t\tlogger.debug(\"No pre-authenticated credentials found in request.\");\n\t\t\tif (this.throwExceptionWhenTokenRejected) {\n\t\t\t\tthrow new BadCredentialsException(\"No pre-authenticated credentials found in request.\");\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\tUserDetails userDetails = this.preAuthenticatedUserDetailsService\n\t\t\t\t.loadUserDetails((PreAuthenticatedAuthenticationToken) authentication);\n\t\tthis.userDetailsChecker.check(userDetails);\n\t\tPreAuthenticatedAuthenticationToken result = new PreAuthenticatedAuthenticationToken(userDetails,\n\t\t\t\tauthentication.getCredentials(), userDetails.getAuthorities());\n\t\tresult.setDetails(authentication.getDetails());\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "authenticate",
            "the",
            "given",
            "pre",
            "authenticated",
            "authentication",
            "token"
        ]
    },
    {
        "id": 1671,
        "code": "\tpublic final boolean supports(Class<?> authentication) {\n\t\treturn PreAuthenticatedAuthenticationToken.class.isAssignableFrom(authentication);\n\t}",
        "summary_tokens": [
            "indicate",
            "that",
            "this",
            "provider",
            "only",
            "supports",
            "pre",
            "authenticated",
            "authentication",
            "token",
            "sub",
            "classes"
        ]
    },
    {
        "id": 1672,
        "code": "\tpublic void setPreAuthenticatedUserDetailsService(\n\t\t\tAuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken> uds) {\n\t\tthis.preAuthenticatedUserDetailsService = uds;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "authenticated",
            "user",
            "details",
            "service",
            "to",
            "be",
            "used",
            "to",
            "load",
            "the",
            "user",
            "details",
            "for",
            "the",
            "authenticated",
            "user"
        ]
    },
    {
        "id": 1673,
        "code": "\tpublic void setThrowExceptionWhenTokenRejected(boolean throwExceptionWhenTokenRejected) {\n\t\tthis.throwExceptionWhenTokenRejected = throwExceptionWhenTokenRejected;\n\t}",
        "summary_tokens": [
            "if",
            "true",
            "causes",
            "the",
            "provider",
            "to",
            "throw",
            "a",
            "bad",
            "credentials",
            "exception",
            "if",
            "the",
            "presented",
            "authentication",
            "request",
            "is",
            "invalid",
            "contains",
            "a",
            "null",
            "principal",
            "or",
            "credentials"
        ]
    },
    {
        "id": 1674,
        "code": "\tpublic void setUserDetailsChecker(UserDetailsChecker userDetailsChecker) {\n\t\tAssert.notNull(userDetailsChecker, \"userDetailsChecker cannot be null\");\n\t\tthis.userDetailsChecker = userDetailsChecker;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "strategy",
            "which",
            "will",
            "be",
            "used",
            "to",
            "validate",
            "the",
            "loaded",
            "tt",
            "user",
            "details",
            "tt",
            "object",
            "for",
            "the",
            "user"
        ]
    },
    {
        "id": 1675,
        "code": "\tpublic final UserDetails loadUserDetails(PreAuthenticatedAuthenticationToken token) throws AuthenticationException {\n\t\tAssert.notNull(token.getDetails(), \"token.getDetails() cannot be null\");\n\t\tAssert.isInstanceOf(GrantedAuthoritiesContainer.class, token.getDetails());\n\t\tCollection<? extends GrantedAuthority> authorities = ((GrantedAuthoritiesContainer) token.getDetails())\n\t\t\t\t.getGrantedAuthorities();\n\t\treturn createUserDetails(token, authorities);\n\t}",
        "summary_tokens": [
            "get",
            "a",
            "user",
            "details",
            "object",
            "based",
            "on",
            "the",
            "user",
            "name",
            "contained",
            "in",
            "the",
            "given",
            "token",
            "and",
            "the",
            "granted",
            "authorities",
            "as",
            "returned",
            "by",
            "the",
            "granted",
            "authorities",
            "container",
            "implementation",
            "as",
            "returned",
            "by",
            "the",
            "token"
        ]
    },
    {
        "id": 1676,
        "code": "\tprotected UserDetails createUserDetails(Authentication token, Collection<? extends GrantedAuthority> authorities) {\n\t\treturn new User(token.getName(), \"N/A\", true, true, true, true, authorities);\n\t}",
        "summary_tokens": [
            "creates",
            "the",
            "final",
            "tt",
            "user",
            "details",
            "tt",
            "object"
        ]
    },
    {
        "id": 1677,
        "code": "\tprotected Object getPreAuthenticatedPrincipal(HttpServletRequest request) {\n\t\tString principal = (String) request.getAttribute(this.principalEnvironmentVariable);\n\t\tif (principal == null && this.exceptionIfVariableMissing) {\n\t\t\tthrow new PreAuthenticatedCredentialsNotFoundException(\n\t\t\t\t\tthis.principalEnvironmentVariable + \" variable not found in request.\");\n\t\t}\n\t\treturn principal;\n\t}",
        "summary_tokens": [
            "read",
            "and",
            "returns",
            "the",
            "variable",
            "named",
            "by",
            "principal",
            "environment",
            "variable",
            "from",
            "the",
            "request"
        ]
    },
    {
        "id": 1678,
        "code": "\tprotected Object getPreAuthenticatedCredentials(HttpServletRequest request) {\n\t\tif (this.credentialsEnvironmentVariable != null) {\n\t\t\treturn request.getAttribute(this.credentialsEnvironmentVariable);\n\t\t}\n\t\treturn \"N/A\";\n\t}",
        "summary_tokens": [
            "credentials",
            "aren",
            "t",
            "usually",
            "applicable",
            "but",
            "if",
            "a",
            "credentials",
            "environment",
            "variable",
            "is",
            "set",
            "this",
            "will",
            "be",
            "read",
            "and",
            "used",
            "as",
            "the",
            "credentials",
            "value"
        ]
    },
    {
        "id": 1679,
        "code": "\tpublic void setExceptionIfVariableMissing(boolean exceptionIfVariableMissing) {\n\t\tthis.exceptionIfVariableMissing = exceptionIfVariableMissing;\n\t}",
        "summary_tokens": [
            "defines",
            "whether",
            "an",
            "exception",
            "should",
            "be",
            "raised",
            "if",
            "the",
            "principal",
            "variable",
            "is",
            "missing"
        ]
    },
    {
        "id": 1680,
        "code": "\tprotected Object getPreAuthenticatedPrincipal(HttpServletRequest request) {\n\t\tString principal = request.getHeader(this.principalRequestHeader);\n\t\tif (principal == null && this.exceptionIfHeaderMissing) {\n\t\t\tthrow new PreAuthenticatedCredentialsNotFoundException(\n\t\t\t\t\tthis.principalRequestHeader + \" header not found in request.\");\n\t\t}\n\t\treturn principal;\n\t}",
        "summary_tokens": [
            "read",
            "and",
            "returns",
            "the",
            "header",
            "named",
            "by",
            "principal",
            "request",
            "header",
            "from",
            "the",
            "request"
        ]
    },
    {
        "id": 1681,
        "code": "\tprotected Object getPreAuthenticatedCredentials(HttpServletRequest request) {\n\t\tif (this.credentialsRequestHeader != null) {\n\t\t\treturn request.getHeader(this.credentialsRequestHeader);\n\t\t}\n\t\treturn \"N/A\";\n\t}",
        "summary_tokens": [
            "credentials",
            "aren",
            "t",
            "usually",
            "applicable",
            "but",
            "if",
            "a",
            "credentials",
            "request",
            "header",
            "is",
            "set",
            "this",
            "will",
            "be",
            "read",
            "and",
            "used",
            "as",
            "the",
            "credentials",
            "value"
        ]
    },
    {
        "id": 1682,
        "code": "\tpublic void setExceptionIfHeaderMissing(boolean exceptionIfHeaderMissing) {\n\t\tthis.exceptionIfHeaderMissing = exceptionIfHeaderMissing;\n\t}",
        "summary_tokens": [
            "defines",
            "whether",
            "an",
            "exception",
            "should",
            "be",
            "raised",
            "if",
            "the",
            "principal",
            "header",
            "is",
            "missing"
        ]
    },
    {
        "id": 1683,
        "code": "\tpublic void afterPropertiesSet() {\n\t\tAssert.notNull(this.j2eeMappableRoles, \"No mappable roles available\");\n\t\tAssert.notNull(this.j2eeUserRoles2GrantedAuthoritiesMapper, \"Roles to granted authorities mapper not set\");\n\t}",
        "summary_tokens": [
            "check",
            "that",
            "all",
            "required",
            "properties",
            "have",
            "been",
            "set"
        ]
    },
    {
        "id": 1684,
        "code": "\tprotected Collection<String> getUserRoles(HttpServletRequest request) {\n\t\tArrayList<String> j2eeUserRolesList = new ArrayList<>();\n\t\tfor (String role : this.j2eeMappableRoles) {\n\t\t\tif (request.isUserInRole(role)) {\n\t\t\t\tj2eeUserRolesList.add(role);\n\t\t\t}\n\t\t}\n\t\treturn j2eeUserRolesList;\n\t}",
        "summary_tokens": [
            "obtains",
            "the",
            "list",
            "of",
            "user",
            "roles",
            "based",
            "on",
            "the",
            "current",
            "user",
            "s",
            "jee",
            "roles"
        ]
    },
    {
        "id": 1685,
        "code": "\tpublic PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails buildDetails(HttpServletRequest context) {\n\t\tCollection<String> j2eeUserRoles = getUserRoles(context);\n\t\tCollection<? extends GrantedAuthority> userGrantedAuthorities = this.j2eeUserRoles2GrantedAuthoritiesMapper\n\t\t\t\t.getGrantedAuthorities(j2eeUserRoles);\n\t\tif (this.logger.isDebugEnabled()) {\n\t\t\tthis.logger.debug(LogMessage.format(\"J2EE roles [%s] mapped to Granted Authorities: [%s]\", j2eeUserRoles,\n\t\t\t\t\tuserGrantedAuthorities));\n\t\t}\n\t\treturn new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails(context, userGrantedAuthorities);\n\t}",
        "summary_tokens": [
            "builds",
            "the",
            "authentication",
            "details",
            "object"
        ]
    },
    {
        "id": 1686,
        "code": "\tpublic void setMappableRolesRetriever(MappableAttributesRetriever aJ2eeMappableRolesRetriever) {\n\t\tthis.j2eeMappableRoles = Collections.unmodifiableSet(aJ2eeMappableRolesRetriever.getMappableAttributes());\n\t}",
        "summary_tokens": [
            "a",
            "j",
            "0",
            "ee",
            "mappable",
            "roles",
            "retriever",
            "the",
            "mappable",
            "attributes",
            "retriever",
            "to",
            "use"
        ]
    },
    {
        "id": 1687,
        "code": "\tpublic void setUserRoles2GrantedAuthoritiesMapper(Attributes2GrantedAuthoritiesMapper mapper) {\n\t\tthis.j2eeUserRoles2GrantedAuthoritiesMapper = mapper;\n\t}",
        "summary_tokens": [
            "mapper",
            "the",
            "attributes",
            "0",
            "granted",
            "authorities",
            "mapper",
            "to",
            "use"
        ]
    },
    {
        "id": 1688,
        "code": "\tprotected Object getPreAuthenticatedPrincipal(HttpServletRequest httpRequest) {\n\t\tObject principal = (httpRequest.getUserPrincipal() != null) ? httpRequest.getUserPrincipal().getName() : null;\n\t\tthis.logger.debug(LogMessage.format(\"PreAuthenticated J2EE principal: %s\", principal));\n\t\treturn principal;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "j",
            "0",
            "ee",
            "user",
            "name"
        ]
    },
    {
        "id": 1689,
        "code": "\tprotected Object getPreAuthenticatedCredentials(HttpServletRequest httpRequest) {\n\t\treturn \"N/A\";\n\t}",
        "summary_tokens": [
            "for",
            "j",
            "0",
            "ee",
            "container",
            "based",
            "authentication",
            "there",
            "is",
            "no",
            "generic",
            "way",
            "to",
            "retrieve",
            "the",
            "credentials",
            "as",
            "such",
            "this",
            "method",
            "returns",
            "a",
            "fixed",
            "dummy",
            "value"
        ]
    },
    {
        "id": 1690,
        "code": "\tprivate Document getDocument(InputStream aStream) {\n\t\ttry {\n\t\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\t\t\tfactory.setValidating(false);\n\t\t\tDocumentBuilder builder = factory.newDocumentBuilder();\n\t\t\tbuilder.setEntityResolver(new MyEntityResolver());\n\t\t\treturn builder.parse(aStream);\n\t\t}\n\t\tcatch (FactoryConfigurationError | IOException | SAXException | ParserConfigurationException ex) {\n\t\t\tthrow new RuntimeException(\"Unable to parse document object\", ex);\n\t\t}\n\t\tfinally {\n\t\t\ttry {\n\t\t\t\taStream.close();\n\t\t\t}\n\t\t\tcatch (IOException ex) {\n\t\t\t\tthis.logger.warn(\"Failed to close input stream for web.xml\", ex);\n\t\t\t}\n\t\t}\n\t}",
        "summary_tokens": [
            "document",
            "for",
            "the",
            "specified",
            "input",
            "stream"
        ]
    },
    {
        "id": 1691,
        "code": "\tprivate static String getSecurityName(final Subject subject) {\n\t\tlogger.debug(LogMessage.format(\"Determining Websphere security name for subject %s\", subject));\n\t\tString userSecurityName = null;\n\t\tif (subject != null) {\n\t\t\t\n\t\t\tObject credential = subject.getPublicCredentials(getWSCredentialClass()).iterator().next();\n\t\t\tif (credential != null) {\n\t\t\t\tuserSecurityName = (String) invokeMethod(getSecurityNameMethod(), credential);\n\t\t\t}\n\t\t}\n\t\tlogger.debug(LogMessage.format(\"Websphere security name is %s for subject %s\", subject, userSecurityName));\n\t\treturn userSecurityName;\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "security",
            "name",
            "for",
            "the",
            "given",
            "subject"
        ]
    },
    {
        "id": 1692,
        "code": "\tprivate static Subject getRunAsSubject() {\n\t\tlogger.debug(\"Retrieving WebSphere RunAs subject\");\n\t\t\n\t\treturn (Subject) invokeMethod(getRunAsSubjectMethod(), null, new Object[] {});\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "current",
            "run",
            "as",
            "subject"
        ]
    },
    {
        "id": 1693,
        "code": "\tprivate static List<String> getWebSphereGroups(final String securityName) {\n\t\tContext context = null;\n\t\ttry {\n\t\t\t\n\t\t\tcontext = new InitialContext();\n\t\t\tObject objRef = context.lookup(USER_REGISTRY);\n\t\t\tObject userReg = invokeMethod(getNarrowMethod(), null, objRef,\n\t\t\t\t\tClass.forName(\"com.ibm.websphere.security.UserRegistry\"));\n\t\t\tlogger.debug(LogMessage.format(\"Determining WebSphere groups for user %s using WebSphere UserRegistry %s\",\n\t\t\t\t\tsecurityName, userReg));\n\t\t\tfinal Collection<String> groups = (Collection<String>) invokeMethod(getGroupsForUserMethod(), userReg,\n\t\t\t\t\tnew Object[] { securityName });\n\t\t\tlogger.debug(LogMessage.format(\"Groups for user %s: %s\", securityName, groups));\n\t\t\treturn new ArrayList<String>(groups);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tlogger.error(\"Exception occured while looking up groups for user\", ex);\n\t\t\tthrow new RuntimeException(\"Exception occured while looking up groups for user\", ex);\n\t\t}\n\t\tfinally {\n\t\t\tcloseContext(context);\n\t\t}\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "web",
            "sphere",
            "group",
            "names",
            "for",
            "the",
            "given",
            "security",
            "name"
        ]
    },
    {
        "id": 1694,
        "code": "\tprotected Object getPreAuthenticatedPrincipal(HttpServletRequest httpRequest) {\n\t\tObject principal = this.wasHelper.getCurrentUserName();\n\t\tthis.logger.debug(LogMessage.format(\"PreAuthenticated WebSphere principal: %s\", principal));\n\t\treturn principal;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "web",
            "sphere",
            "user",
            "name"
        ]
    },
    {
        "id": 1695,
        "code": "\tprotected Object getPreAuthenticatedCredentials(HttpServletRequest httpRequest) {\n\t\treturn \"N/A\";\n\t}",
        "summary_tokens": [
            "for",
            "j",
            "0",
            "ee",
            "container",
            "based",
            "authentication",
            "there",
            "is",
            "no",
            "generic",
            "way",
            "to",
            "retrieve",
            "the",
            "credentials",
            "as",
            "such",
            "this",
            "method",
            "returns",
            "a",
            "fixed",
            "dummy",
            "value"
        ]
    },
    {
        "id": 1696,
        "code": "\tprivate Collection<? extends GrantedAuthority> getWebSphereGroupsBasedGrantedAuthorities() {\n\t\tList<String> webSphereGroups = this.wasHelper.getGroupsForCurrentUser();\n\t\tCollection<? extends GrantedAuthority> userGas = this.webSphereGroups2GrantedAuthoritiesMapper\n\t\t\t\t.getGrantedAuthorities(webSphereGroups);\n\t\tthis.logger.debug(\n\t\t\t\tLogMessage.format(\"WebSphere groups: %s mapped to Granted Authorities: %s\", webSphereGroups, userGas));\n\t\treturn userGas;\n\t}",
        "summary_tokens": [
            "get",
            "a",
            "list",
            "of",
            "granted",
            "authorities",
            "based",
            "on",
            "the",
            "current",
            "user",
            "s",
            "web",
            "sphere",
            "groups"
        ]
    },
    {
        "id": 1697,
        "code": "\tpublic void setWebSphereGroups2GrantedAuthoritiesMapper(Attributes2GrantedAuthoritiesMapper mapper) {\n\t\tthis.webSphereGroups2GrantedAuthoritiesMapper = mapper;\n\t}",
        "summary_tokens": [
            "mapper",
            "the",
            "attributes",
            "0",
            "granted",
            "authorities",
            "mapper",
            "to",
            "use",
            "for",
            "converting",
            "the",
            "was",
            "groups",
            "to",
            "authorities"
        ]
    },
    {
        "id": 1698,
        "code": "\tpublic void setSubjectDnRegex(String subjectDnRegex) {\n\t\tAssert.hasText(subjectDnRegex, \"Regular expression may not be null or empty\");\n\t\tthis.subjectDnPattern = Pattern.compile(subjectDnRegex, Pattern.CASE_INSENSITIVE);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "regular",
            "expression",
            "which",
            "will",
            "by",
            "used",
            "to",
            "extract",
            "the",
            "user",
            "name",
            "from",
            "the",
            "certificate",
            "s",
            "subject",
            "dn"
        ]
    },
    {
        "id": 1699,
        "code": "\tpublic final Authentication autoLogin(HttpServletRequest request, HttpServletResponse response) {\n\t\tString rememberMeCookie = extractRememberMeCookie(request);\n\t\tif (rememberMeCookie == null) {\n\t\t\treturn null;\n\t\t}\n\t\tthis.logger.debug(\"Remember-me cookie detected\");\n\t\tif (rememberMeCookie.length() == 0) {\n\t\t\tthis.logger.debug(\"Cookie was empty\");\n\t\t\tcancelCookie(request, response);\n\t\t\treturn null;\n\t\t}\n\t\ttry {\n\t\t\tString[] cookieTokens = decodeCookie(rememberMeCookie);\n\t\t\tUserDetails user = processAutoLoginCookie(cookieTokens, request, response);\n\t\t\tthis.userDetailsChecker.check(user);\n\t\t\tthis.logger.debug(\"Remember-me cookie accepted\");\n\t\t\treturn createSuccessfulAuthentication(request, user);\n\t\t}\n\t\tcatch (CookieTheftException ex) {\n\t\t\tcancelCookie(request, response);\n\t\t\tthrow ex;\n\t\t}\n\t\tcatch (UsernameNotFoundException ex) {\n\t\t\tthis.logger.debug(\"Remember-me login was valid but corresponding user not found.\", ex);\n\t\t}\n\t\tcatch (InvalidCookieException ex) {\n\t\t\tthis.logger.debug(\"Invalid remember-me cookie: \" + ex.getMessage());\n\t\t}\n\t\tcatch (AccountStatusException ex) {\n\t\t\tthis.logger.debug(\"Invalid UserDetails: \" + ex.getMessage());\n\t\t}\n\t\tcatch (RememberMeAuthenticationException ex) {\n\t\t\tthis.logger.debug(ex.getMessage());\n\t\t}\n\t\tcancelCookie(request, response);\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "template",
            "implementation",
            "which",
            "locates",
            "the",
            "spring",
            "security",
            "cookie",
            "decodes",
            "it",
            "into",
            "a",
            "delimited",
            "array",
            "of",
            "tokens",
            "and",
            "submits",
            "it",
            "to",
            "subclasses",
            "for",
            "processing",
            "via",
            "the",
            "tt",
            "process",
            "auto",
            "login",
            "cookie",
            "tt",
            "method"
        ]
    },
    {
        "id": 1700,
        "code": "\tprotected String extractRememberMeCookie(HttpServletRequest request) {\n\t\tCookie[] cookies = request.getCookies();\n\t\tif ((cookies == null) || (cookies.length == 0)) {\n\t\t\treturn null;\n\t\t}\n\t\tfor (Cookie cookie : cookies) {\n\t\t\tif (this.cookieName.equals(cookie.getName())) {\n\t\t\t\treturn cookie.getValue();\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "locates",
            "the",
            "spring",
            "security",
            "remember",
            "me",
            "cookie",
            "in",
            "the",
            "request",
            "and",
            "returns",
            "its",
            "value"
        ]
    },
    {
        "id": 1701,
        "code": "\tprotected Authentication createSuccessfulAuthentication(HttpServletRequest request, UserDetails user) {\n\t\tRememberMeAuthenticationToken auth = new RememberMeAuthenticationToken(this.key, user,\n\t\t\t\tthis.authoritiesMapper.mapAuthorities(user.getAuthorities()));\n\t\tauth.setDetails(this.authenticationDetailsSource.buildDetails(request));\n\t\treturn auth;\n\t}",
        "summary_tokens": [
            "creates",
            "the",
            "final",
            "tt",
            "authentication",
            "tt",
            "object",
            "returned",
            "from",
            "the",
            "tt",
            "auto",
            "login",
            "tt",
            "method"
        ]
    },
    {
        "id": 1702,
        "code": "\tprotected String[] decodeCookie(String cookieValue) throws InvalidCookieException {\n\t\tfor (int j = 0; j < cookieValue.length() % 4; j++) {\n\t\t\tcookieValue = cookieValue + \"=\";\n\t\t}\n\t\tString cookieAsPlainText;\n\t\ttry {\n\t\t\tcookieAsPlainText = new String(Base64.getDecoder().decode(cookieValue.getBytes()));\n\t\t}\n\t\tcatch (IllegalArgumentException ex) {\n\t\t\tthrow new InvalidCookieException(\"Cookie token was not Base64 encoded; value was '\" + cookieValue + \"'\");\n\t\t}\n\t\tString[] tokens = StringUtils.delimitedListToStringArray(cookieAsPlainText, DELIMITER);\n\t\tfor (int i = 0; i < tokens.length; i++) {\n\t\t\ttry {\n\t\t\t\ttokens[i] = URLDecoder.decode(tokens[i], StandardCharsets.UTF_8.toString());\n\t\t\t}\n\t\t\tcatch (UnsupportedEncodingException ex) {\n\t\t\t\tthis.logger.error(ex.getMessage(), ex);\n\t\t\t}\n\t\t}\n\t\treturn tokens;\n\t}",
        "summary_tokens": [
            "decodes",
            "the",
            "cookie",
            "and",
            "splits",
            "it",
            "into",
            "a",
            "set",
            "of",
            "token",
            "strings",
            "using",
            "the",
            "delimiter"
        ]
    },
    {
        "id": 1703,
        "code": "\tprotected String encodeCookie(String[] cookieTokens) {\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (int i = 0; i < cookieTokens.length; i++) {\n\t\t\ttry {\n\t\t\t\tsb.append(URLEncoder.encode(cookieTokens[i], StandardCharsets.UTF_8.toString()));\n\t\t\t}\n\t\t\tcatch (UnsupportedEncodingException ex) {\n\t\t\t\tthis.logger.error(ex.getMessage(), ex);\n\t\t\t}\n\t\t\tif (i < cookieTokens.length - 1) {\n\t\t\t\tsb.append(DELIMITER);\n\t\t\t}\n\t\t}\n\t\tString value = sb.toString();\n\t\tsb = new StringBuilder(new String(Base64.getEncoder().encode(value.getBytes())));\n\t\twhile (sb.charAt(sb.length() - 1) == '=') {\n\t\t\tsb.deleteCharAt(sb.length() - 1);\n\t\t}\n\t\treturn sb.toString();\n\t}",
        "summary_tokens": [
            "inverse",
            "operation",
            "of",
            "decode",
            "cookie"
        ]
    },
    {
        "id": 1704,
        "code": "\tprotected boolean rememberMeRequested(HttpServletRequest request, String parameter) {\n\t\tif (this.alwaysRemember) {\n\t\t\treturn true;\n\t\t}\n\t\tString paramValue = request.getParameter(parameter);\n\t\tif (paramValue != null) {\n\t\t\tif (paramValue.equalsIgnoreCase(\"true\") || paramValue.equalsIgnoreCase(\"on\")\n\t\t\t\t\t|| paramValue.equalsIgnoreCase(\"yes\") || paramValue.equals(\"1\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\tthis.logger.debug(\n\t\t\t\tLogMessage.format(\"Did not send remember-me cookie (principal did not set parameter '%s')\", parameter));\n\t\treturn false;\n\t}",
        "summary_tokens": [
            "allows",
            "customization",
            "of",
            "whether",
            "a",
            "remember",
            "me",
            "login",
            "has",
            "been",
            "requested"
        ]
    },
    {
        "id": 1705,
        "code": "\tprotected void cancelCookie(HttpServletRequest request, HttpServletResponse response) {\n\t\tthis.logger.debug(\"Cancelling cookie\");\n\t\tCookie cookie = new Cookie(this.cookieName, null);\n\t\tcookie.setMaxAge(0);\n\t\tcookie.setPath(getCookiePath(request));\n\t\tif (this.cookieDomain != null) {\n\t\t\tcookie.setDomain(this.cookieDomain);\n\t\t}\n\t\tcookie.setSecure((this.useSecureCookie != null) ? this.useSecureCookie : request.isSecure());\n\t\tresponse.addCookie(cookie);\n\t}",
        "summary_tokens": [
            "sets",
            "a",
            "cancel",
            "cookie",
            "with",
            "max",
            "age",
            "0",
            "on",
            "the",
            "response",
            "to",
            "disable",
            "persistent",
            "logins"
        ]
    },
    {
        "id": 1706,
        "code": "\tprotected void setCookie(String[] tokens, int maxAge, HttpServletRequest request, HttpServletResponse response) {\n\t\tString cookieValue = encodeCookie(tokens);\n\t\tCookie cookie = new Cookie(this.cookieName, cookieValue);\n\t\tcookie.setMaxAge(maxAge);\n\t\tcookie.setPath(getCookiePath(request));\n\t\tif (this.cookieDomain != null) {\n\t\t\tcookie.setDomain(this.cookieDomain);\n\t\t}\n\t\tif (maxAge < 1) {\n\t\t\tcookie.setVersion(1);\n\t\t}\n\t\tcookie.setSecure((this.useSecureCookie != null) ? this.useSecureCookie : request.isSecure());\n\t\tcookie.setHttpOnly(true);\n\t\tresponse.addCookie(cookie);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "cookie",
            "on",
            "the",
            "response"
        ]
    },
    {
        "id": 1707,
        "code": "\tpublic void logout(HttpServletRequest request, HttpServletResponse response, Authentication authentication) {\n\t\tthis.logger.debug(LogMessage\n\t\t\t\t.of(() -> \"Logout of user \" + ((authentication != null) ? authentication.getName() : \"Unknown\")));\n\t\tcancelCookie(request, response);\n\t}",
        "summary_tokens": [
            "implementation",
            "of",
            "logout",
            "handler"
        ]
    },
    {
        "id": 1708,
        "code": "\tpublic void setParameter(String parameter) {\n\t\tAssert.hasText(parameter, \"Parameter name cannot be empty or null\");\n\t\tthis.parameter = parameter;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "name",
            "of",
            "the",
            "parameter",
            "which",
            "should",
            "be",
            "checked",
            "for",
            "to",
            "see",
            "if",
            "a",
            "remember",
            "me",
            "has",
            "been",
            "requested",
            "during",
            "a",
            "login",
            "request"
        ]
    },
    {
        "id": 1709,
        "code": "\tpublic void setUseSecureCookie(boolean useSecureCookie) {\n\t\tthis.useSecureCookie = useSecureCookie;\n\t}",
        "summary_tokens": [
            "whether",
            "the",
            "cookie",
            "should",
            "be",
            "flagged",
            "as",
            "secure",
            "or",
            "not"
        ]
    },
    {
        "id": 1710,
        "code": "\tpublic void setUserDetailsChecker(UserDetailsChecker userDetailsChecker) {\n\t\tthis.userDetailsChecker = userDetailsChecker;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "strategy",
            "to",
            "be",
            "used",
            "to",
            "validate",
            "the",
            "user",
            "details",
            "object",
            "obtained",
            "for",
            "the",
            "user",
            "when",
            "processing",
            "a",
            "remember",
            "me",
            "cookie",
            "to",
            "automatically",
            "log",
            "in",
            "a",
            "user"
        ]
    },
    {
        "id": 1711,
        "code": "\tpublic PersistentRememberMeToken getTokenForSeries(String seriesId) {\n\t\ttry {\n\t\t\treturn getJdbcTemplate().queryForObject(this.tokensBySeriesSql, this::createRememberMeToken, seriesId);\n\t\t}\n\t\tcatch (EmptyResultDataAccessException ex) {\n\t\t\tthis.logger.debug(LogMessage.format(\"Querying token for series '%s' returned no results.\", seriesId), ex);\n\t\t}\n\t\tcatch (IncorrectResultSizeDataAccessException ex) {\n\t\t\tthis.logger.error(LogMessage.format(\n\t\t\t\t\t\"Querying token for series '%s' returned more than one value. Series\" + \" should be unique\",\n\t\t\t\t\tseriesId));\n\t\t}\n\t\tcatch (DataAccessException ex) {\n\t\t\tthis.logger.error(\"Failed to load token for series \" + seriesId, ex);\n\t\t}\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "loads",
            "the",
            "token",
            "data",
            "for",
            "the",
            "supplied",
            "series",
            "identifier"
        ]
    },
    {
        "id": 1712,
        "code": "\tpublic void setCreateTableOnStartup(boolean createTableOnStartup) {\n\t\tthis.createTableOnStartup = createTableOnStartup;\n\t}",
        "summary_tokens": [
            "intended",
            "for",
            "convenience",
            "in",
            "debugging"
        ]
    },
    {
        "id": 1713,
        "code": "\tprotected UserDetails processAutoLoginCookie(String[] cookieTokens, HttpServletRequest request,\n\t\t\tHttpServletResponse response) {\n\t\tif (cookieTokens.length != 2) {\n\t\t\tthrow new InvalidCookieException(\"Cookie token did not contain \" + 2 + \" tokens, but contained '\"\n\t\t\t\t\t+ Arrays.asList(cookieTokens) + \"'\");\n\t\t}\n\t\tString presentedSeries = cookieTokens[0];\n\t\tString presentedToken = cookieTokens[1];\n\t\tPersistentRememberMeToken token = this.tokenRepository.getTokenForSeries(presentedSeries);\n\t\tif (token == null) {\n\t\t\t\n\t\t\tthrow new RememberMeAuthenticationException(\"No persistent token found for series id: \" + presentedSeries);\n\t\t}\n\t\t\n\t\tif (!presentedToken.equals(token.getTokenValue())) {\n\t\t\t\n\t\t\t\n\t\t\tthis.tokenRepository.removeUserTokens(token.getUsername());\n\t\t\tthrow new CookieTheftException(this.messages.getMessage(\n\t\t\t\t\t\"PersistentTokenBasedRememberMeServices.cookieStolen\",\n\t\t\t\t\t\"Invalid remember-me token (Series/token) mismatch. Implies previous cookie theft attack.\"));\n\t\t}\n\t\tif (token.getDate().getTime() + getTokenValiditySeconds() * 1000L < System.currentTimeMillis()) {\n\t\t\tthrow new RememberMeAuthenticationException(\"Remember-me login has expired\");\n\t\t}\n\t\t\n\t\t\n\t\tthis.logger.debug(LogMessage.format(\"Refreshing persistent login token for user '%s', series '%s'\",\n\t\t\t\ttoken.getUsername(), token.getSeries()));\n\t\tPersistentRememberMeToken newToken = new PersistentRememberMeToken(token.getUsername(), token.getSeries(),\n\t\t\t\tgenerateTokenData(), new Date());\n\t\ttry {\n\t\t\tthis.tokenRepository.updateToken(newToken.getSeries(), newToken.getTokenValue(), newToken.getDate());\n\t\t\taddCookie(newToken, request, response);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tthis.logger.error(\"Failed to update token: \", ex);\n\t\t\tthrow new RememberMeAuthenticationException(\"Autologin failed due to data access problem\");\n\t\t}\n\t\treturn getUserDetailsService().loadUserByUsername(token.getUsername());\n\t}",
        "summary_tokens": [
            "locates",
            "the",
            "presented",
            "cookie",
            "data",
            "in",
            "the",
            "token",
            "repository",
            "using",
            "the",
            "series",
            "id"
        ]
    },
    {
        "id": 1714,
        "code": "\tprotected void onLoginSuccess(HttpServletRequest request, HttpServletResponse response,\n\t\t\tAuthentication successfulAuthentication) {\n\t\tString username = successfulAuthentication.getName();\n\t\tthis.logger.debug(LogMessage.format(\"Creating new persistent login for user %s\", username));\n\t\tPersistentRememberMeToken persistentToken = new PersistentRememberMeToken(username, generateSeriesData(),\n\t\t\t\tgenerateTokenData(), new Date());\n\t\ttry {\n\t\t\tthis.tokenRepository.createNewToken(persistentToken);\n\t\t\taddCookie(persistentToken, request, response);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tthis.logger.error(\"Failed to save persistent token \", ex);\n\t\t}\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "new",
            "persistent",
            "login",
            "token",
            "with",
            "a",
            "new",
            "series",
            "number",
            "stores",
            "the",
            "data",
            "in",
            "the",
            "persistent",
            "token",
            "repository",
            "and",
            "adds",
            "the",
            "corresponding",
            "cookie",
            "to",
            "the",
            "response"
        ]
    },
    {
        "id": 1715,
        "code": "\tprotected void onSuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response,\n\t\t\tAuthentication authResult) {\n\t}",
        "summary_tokens": [
            "called",
            "if",
            "a",
            "remember",
            "me",
            "token",
            "is",
            "presented",
            "and",
            "successfully",
            "authenticated",
            "by",
            "the",
            "remember",
            "me",
            "services",
            "auto",
            "login",
            "method",
            "and",
            "the",
            "authentication",
            "manager"
        ]
    },
    {
        "id": 1716,
        "code": "\tprotected void onUnsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response,\n\t\t\tAuthenticationException failed) {\n\t}",
        "summary_tokens": [
            "called",
            "if",
            "the",
            "authentication",
            "manager",
            "rejects",
            "the",
            "authentication",
            "object",
            "returned",
            "from",
            "the",
            "remember",
            "me",
            "services",
            "auto",
            "login",
            "method"
        ]
    },
    {
        "id": 1717,
        "code": "\tpublic void setAuthenticationSuccessHandler(AuthenticationSuccessHandler successHandler) {\n\t\tAssert.notNull(successHandler, \"successHandler cannot be null\");\n\t\tthis.successHandler = successHandler;\n\t}",
        "summary_tokens": [
            "allows",
            "control",
            "over",
            "the",
            "destination",
            "a",
            "remembered",
            "user",
            "is",
            "sent",
            "to",
            "when",
            "they",
            "are",
            "successfully",
            "authenticated"
        ]
    },
    {
        "id": 1718,
        "code": "\tpublic void setSecurityContextRepository(SecurityContextRepository securityContextRepository) {\n\t\tAssert.notNull(securityContextRepository, \"securityContextRepository cannot be null\");\n\t\tthis.securityContextRepository = securityContextRepository;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "repository",
            "to",
            "save",
            "the",
            "security",
            "context",
            "on",
            "authentication",
            "success"
        ]
    },
    {
        "id": 1719,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n\t\tAssert.notNull(securityContextHolderStrategy, \"securityContextHolderStrategy cannot be null\");\n\t\tthis.securityContextHolderStrategy = securityContextHolderStrategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 1720,
        "code": "\tprotected String makeTokenSignature(long tokenExpiryTime, String username, String password,\n\t\t\tRememberMeTokenAlgorithm algorithm) {\n\t\tString data = username + \":\" + tokenExpiryTime + \":\" + password + \":\" + getKey();\n\t\ttry {\n\t\t\tMessageDigest digest = MessageDigest.getInstance(algorithm.getDigestAlgorithm());\n\t\t\treturn new String(Hex.encode(digest.digest(data.getBytes())));\n\t\t}\n\t\tcatch (NoSuchAlgorithmException ex) {\n\t\t\tthrow new IllegalStateException(\"No \" + algorithm.name() + \" algorithm available!\");\n\t\t}\n\t}",
        "summary_tokens": [
            "calculates",
            "the",
            "digital",
            "signature",
            "to",
            "be",
            "put",
            "in",
            "the",
            "cookie"
        ]
    },
    {
        "id": 1721,
        "code": "\tpublic void setMatchingAlgorithm(RememberMeTokenAlgorithm matchingAlgorithm) {\n\t\tAssert.notNull(matchingAlgorithm, \"matchingAlgorithm cannot be null\");\n\t\tthis.matchingAlgorithm = matchingAlgorithm;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "algorithm",
            "to",
            "be",
            "used",
            "to",
            "match",
            "the",
            "token",
            "signature",
            "matching",
            "algorithm",
            "the",
            "matching",
            "algorithm",
            "0"
        ]
    },
    {
        "id": 1722,
        "code": "\tprotected int calculateLoginLifetime(HttpServletRequest request, Authentication authentication) {\n\t\treturn getTokenValiditySeconds();\n\t}",
        "summary_tokens": [
            "calculates",
            "the",
            "validity",
            "period",
            "in",
            "seconds",
            "for",
            "a",
            "newly",
            "generated",
            "remember",
            "me",
            "login"
        ]
    },
    {
        "id": 1723,
        "code": "\tprivate static boolean equals(String expected, String actual) {\n\t\tbyte[] expectedBytes = bytesUtf8(expected);\n\t\tbyte[] actualBytes = bytesUtf8(actual);\n\t\treturn MessageDigest.isEqual(expectedBytes, actualBytes);\n\t}",
        "summary_tokens": [
            "constant",
            "time",
            "comparison",
            "to",
            "prevent",
            "against",
            "timing",
            "attacks"
        ]
    },
    {
        "id": 1724,
        "code": "\tpublic void onAuthentication(Authentication authentication, HttpServletRequest request,\n\t\t\tHttpServletResponse response) {\n\t\tboolean hadSessionAlready = request.getSession(false) != null;\n\t\tif (!hadSessionAlready && !this.alwaysCreateSession) {\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tHttpSession session = request.getSession();\n\t\tif (hadSessionAlready && request.isRequestedSessionIdValid()) {\n\t\t\tString originalSessionId;\n\t\t\tString newSessionId;\n\t\t\tObject mutex = WebUtils.getSessionMutex(session);\n\t\t\tsynchronized (mutex) {\n\t\t\t\t\n\t\t\t\toriginalSessionId = session.getId();\n\t\t\t\tsession = applySessionFixation(request);\n\t\t\t\tnewSessionId = session.getId();\n\t\t\t}\n\t\t\tif (originalSessionId.equals(newSessionId)) {\n\t\t\t\tthis.logger.warn(\"Your servlet container did not change the session ID when a new session \"\n\t\t\t\t\t\t+ \"was created. You will not be adequately protected against session-fixation attacks\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (this.logger.isDebugEnabled()) {\n\t\t\t\t\tthis.logger.debug(LogMessage.format(\"Changed session id from %s\", originalSessionId));\n\t\t\t\t}\n\t\t\t}\n\t\t\tonSessionChange(originalSessionId, session, authentication);\n\t\t}\n\t}",
        "summary_tokens": [
            "called",
            "when",
            "a",
            "user",
            "is",
            "newly",
            "authenticated"
        ]
    },
    {
        "id": 1725,
        "code": "\tprotected void onSessionChange(String originalSessionId, HttpSession newSession, Authentication auth) {\n\t\tthis.applicationEventPublisher\n\t\t\t\t.publishEvent(new SessionFixationProtectionEvent(auth, originalSessionId, newSession.getId()));\n\t}",
        "summary_tokens": [
            "called",
            "when",
            "the",
            "session",
            "has",
            "been",
            "changed",
            "and",
            "the",
            "old",
            "attributes",
            "have",
            "been",
            "migrated",
            "to",
            "the",
            "new",
            "session"
        ]
    },
    {
        "id": 1726,
        "code": "\tpublic void setApplicationEventPublisher(ApplicationEventPublisher applicationEventPublisher) {\n\t\tAssert.notNull(applicationEventPublisher, \"applicationEventPublisher cannot be null\");\n\t\tthis.applicationEventPublisher = applicationEventPublisher;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "application",
            "event",
            "publisher",
            "to",
            "use",
            "for",
            "submitting",
            "session",
            "fixation",
            "protection",
            "event"
        ]
    },
    {
        "id": 1727,
        "code": "\tpublic void onAuthentication(Authentication authentication, HttpServletRequest request,\n\t\t\tHttpServletResponse response) {\n\t\tint allowedSessions = getMaximumSessionsForThisUser(authentication);\n\t\tif (allowedSessions == -1) {\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t\tList<SessionInformation> sessions = this.sessionRegistry.getAllSessions(authentication.getPrincipal(), false);\n\t\tint sessionCount = sessions.size();\n\t\tif (sessionCount < allowedSessions) {\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t\tif (sessionCount == allowedSessions) {\n\t\t\tHttpSession session = request.getSession(false);\n\t\t\tif (session != null) {\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tfor (SessionInformation si : sessions) {\n\t\t\t\t\tif (si.getSessionId().equals(session.getId())) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t}\n\t\tallowableSessionsExceeded(sessions, allowedSessions, this.sessionRegistry);\n\t}",
        "summary_tokens": [
            "in",
            "addition",
            "to",
            "the",
            "steps",
            "from",
            "the",
            "superclass",
            "the",
            "session",
            "registry",
            "will",
            "be",
            "updated",
            "with",
            "the",
            "new",
            "session",
            "information"
        ]
    },
    {
        "id": 1728,
        "code": "\tprotected int getMaximumSessionsForThisUser(Authentication authentication) {\n\t\treturn this.maximumSessions;\n\t}",
        "summary_tokens": [
            "method",
            "intended",
            "for",
            "use",
            "by",
            "subclasses",
            "to",
            "override",
            "the",
            "maximum",
            "number",
            "of",
            "sessions",
            "that",
            "are",
            "permitted",
            "for",
            "a",
            "particular",
            "authentication"
        ]
    },
    {
        "id": 1729,
        "code": "\tprotected void allowableSessionsExceeded(List<SessionInformation> sessions, int allowableSessions,\n\t\t\tSessionRegistry registry) throws SessionAuthenticationException {\n\t\tif (this.exceptionIfMaximumExceeded || (sessions == null)) {\n\t\t\tthrow new SessionAuthenticationException(\n\t\t\t\t\tthis.messages.getMessage(\"ConcurrentSessionControlAuthenticationStrategy.exceededAllowed\",\n\t\t\t\t\t\t\tnew Object[] { allowableSessions }, \"Maximum sessions of {0} for this principal exceeded\"));\n\t\t}\n\t\t\n\t\tsessions.sort(Comparator.comparing(SessionInformation::getLastRequest));\n\t\tint maximumSessionsExceededBy = sessions.size() - allowableSessions + 1;\n\t\tList<SessionInformation> sessionsToBeExpired = sessions.subList(0, maximumSessionsExceededBy);\n\t\tfor (SessionInformation session : sessionsToBeExpired) {\n\t\t\tsession.expireNow();\n\t\t}\n\t}",
        "summary_tokens": [
            "allows",
            "subclasses",
            "to",
            "customise",
            "behaviour",
            "when",
            "too",
            "many",
            "sessions",
            "are",
            "detected"
        ]
    },
    {
        "id": 1730,
        "code": "\tpublic void setExceptionIfMaximumExceeded(boolean exceptionIfMaximumExceeded) {\n\t\tthis.exceptionIfMaximumExceeded = exceptionIfMaximumExceeded;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "tt",
            "exception",
            "if",
            "maximum",
            "exceeded",
            "tt",
            "property",
            "which",
            "determines",
            "whether",
            "the",
            "user",
            "should",
            "be",
            "prevented",
            "from",
            "opening",
            "more",
            "sessions",
            "than",
            "allowed"
        ]
    },
    {
        "id": 1731,
        "code": "\tpublic void setMaximumSessions(int maximumSessions) {\n\t\tAssert.isTrue(maximumSessions != 0,\n\t\t\t\t\"MaximumLogins must be either -1 to allow unlimited logins, or a positive integer to specify a maximum\");\n\t\tthis.maximumSessions = maximumSessions;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "tt",
            "max",
            "sessions",
            "tt",
            "property"
        ]
    },
    {
        "id": 1732,
        "code": "\tpublic void setMessageSource(MessageSource messageSource) {\n\t\tAssert.notNull(messageSource, \"messageSource cannot be null\");\n\t\tthis.messages = new MessageSourceAccessor(messageSource);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "message",
            "source",
            "used",
            "for",
            "reporting",
            "errors",
            "back",
            "to",
            "the",
            "user",
            "when",
            "the",
            "user",
            "has",
            "exceeded",
            "the",
            "maximum",
            "number",
            "of",
            "authentications"
        ]
    },
    {
        "id": 1733,
        "code": "\tpublic void onAuthentication(Authentication authentication, HttpServletRequest request,\n\t\t\tHttpServletResponse response) {\n\t\tthis.sessionRegistry.registerNewSession(request.getSession().getId(), authentication.getPrincipal());\n\t}",
        "summary_tokens": [
            "in",
            "addition",
            "to",
            "the",
            "steps",
            "from",
            "the",
            "superclass",
            "the",
            "session",
            "registry",
            "will",
            "be",
            "updated",
            "with",
            "the",
            "new",
            "session",
            "information"
        ]
    },
    {
        "id": 1734,
        "code": "\tpublic String getOldSessionId() {\n\t\treturn this.oldSessionId;\n\t}",
        "summary_tokens": [
            "getter",
            "for",
            "the",
            "session",
            "id",
            "before",
            "it",
            "was",
            "changed"
        ]
    },
    {
        "id": 1735,
        "code": "\tpublic String getNewSessionId() {\n\t\treturn this.newSessionId;\n\t}",
        "summary_tokens": [
            "getter",
            "for",
            "the",
            "session",
            "id",
            "after",
            "it",
            "was",
            "changed"
        ]
    },
    {
        "id": 1736,
        "code": "\tprotected Map<String, Object> extractAttributes(HttpSession session) {\n\t\treturn createMigratedAttributeMap(session);\n\t}",
        "summary_tokens": [
            "called",
            "to",
            "extract",
            "the",
            "existing",
            "attributes",
            "from",
            "the",
            "session",
            "prior",
            "to",
            "invalidating",
            "it"
        ]
    },
    {
        "id": 1737,
        "code": "\tvoid transferAttributes(Map<String, Object> attributes, HttpSession newSession) {\n\t\tif (attributes != null) {\n\t\t\tattributes.forEach(newSession::setAttribute);\n\t\t}\n\t}",
        "summary_tokens": [
            "attributes",
            "the",
            "attributes",
            "which",
            "were",
            "extracted",
            "from",
            "the",
            "original",
            "session",
            "by",
            "extract",
            "attributes",
            "new",
            "session",
            "the",
            "newly",
            "created",
            "session"
        ]
    },
    {
        "id": 1738,
        "code": "\tpublic void setMigrateSessionAttributes(boolean migrateSessionAttributes) {\n\t\tthis.migrateSessionAttributes = migrateSessionAttributes;\n\t}",
        "summary_tokens": [
            "defines",
            "whether",
            "attributes",
            "should",
            "be",
            "migrated",
            "to",
            "a",
            "new",
            "session",
            "or",
            "not"
        ]
    },
    {
        "id": 1739,
        "code": "\tprotected Authentication attemptSwitchUser(HttpServletRequest request) throws AuthenticationException {\n\t\tUsernamePasswordAuthenticationToken targetUserRequest;\n\t\tString username = request.getParameter(this.usernameParameter);\n\t\tusername = (username != null) ? username : \"\";\n\t\tthis.logger.debug(LogMessage.format(\"Attempting to switch to user [%s]\", username));\n\t\tUserDetails targetUser = this.userDetailsService.loadUserByUsername(username);\n\t\tthis.userDetailsChecker.check(targetUser);\n\t\t\n\t\ttargetUserRequest = createSwitchUserToken(request, targetUser);\n\t\t\n\t\tif (this.eventPublisher != null) {\n\t\t\tthis.eventPublisher.publishEvent(new AuthenticationSwitchUserEvent(\n\t\t\t\t\tthis.securityContextHolderStrategy.getContext().getAuthentication(), targetUser));\n\t\t}\n\t\treturn targetUserRequest;\n\t}",
        "summary_tokens": [
            "attempt",
            "to",
            "switch",
            "to",
            "another",
            "user"
        ]
    },
    {
        "id": 1740,
        "code": "\tprotected Authentication attemptExitUser(HttpServletRequest request)\n\t\t\tthrows AuthenticationCredentialsNotFoundException {\n\t\t\n\t\tAuthentication current = this.securityContextHolderStrategy.getContext().getAuthentication();\n\t\tif (current == null) {\n\t\t\tthrow new AuthenticationCredentialsNotFoundException(this.messages\n\t\t\t\t\t.getMessage(\"SwitchUserFilter.noCurrentUser\", \"No current user associated with this request\"));\n\t\t}\n\t\t\n\t\t\n\t\tAuthentication original = getSourceAuthentication(current);\n\t\tif (original == null) {\n\t\t\tthis.logger.debug(\"Failed to find original user\");\n\t\t\tthrow new AuthenticationCredentialsNotFoundException(this.messages\n\t\t\t\t\t.getMessage(\"SwitchUserFilter.noOriginalAuthentication\", \"Failed to find original user\"));\n\t\t}\n\t\t\n\t\tUserDetails originalUser = null;\n\t\tObject obj = original.getPrincipal();\n\t\tif ((obj != null) && obj instanceof UserDetails) {\n\t\t\toriginalUser = (UserDetails) obj;\n\t\t}\n\t\t\n\t\tif (this.eventPublisher != null) {\n\t\t\tthis.eventPublisher.publishEvent(new AuthenticationSwitchUserEvent(current, originalUser));\n\t\t}\n\t\treturn original;\n\t}",
        "summary_tokens": [
            "attempt",
            "to",
            "exit",
            "from",
            "an",
            "already",
            "switched",
            "user"
        ]
    },
    {
        "id": 1741,
        "code": "\tprivate UsernamePasswordAuthenticationToken createSwitchUserToken(HttpServletRequest request,\n\t\t\tUserDetails targetUser) {\n\t\tUsernamePasswordAuthenticationToken targetUserRequest;\n\t\t\n\t\t\n\t\tAuthentication currentAuthentication = getCurrentAuthentication(request);\n\t\tGrantedAuthority switchAuthority = new SwitchUserGrantedAuthority(this.switchAuthorityRole,\n\t\t\t\tcurrentAuthentication);\n\t\t\n\t\tCollection<? extends GrantedAuthority> orig = targetUser.getAuthorities();\n\t\t\n\t\tif (this.switchUserAuthorityChanger != null) {\n\t\t\torig = this.switchUserAuthorityChanger.modifyGrantedAuthorities(targetUser, currentAuthentication, orig);\n\t\t}\n\t\t\n\t\tList<GrantedAuthority> newAuths = new ArrayList<>(orig);\n\t\tnewAuths.add(switchAuthority);\n\t\t\n\t\ttargetUserRequest = UsernamePasswordAuthenticationToken.authenticated(targetUser, targetUser.getPassword(),\n\t\t\t\tnewAuths);\n\t\t\n\t\ttargetUserRequest.setDetails(this.authenticationDetailsSource.buildDetails(request));\n\t\treturn targetUserRequest;\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "switch",
            "user",
            "token",
            "that",
            "contains",
            "an",
            "additional",
            "tt",
            "granted",
            "authority",
            "tt",
            "that",
            "contains",
            "the",
            "original",
            "code",
            "authentication",
            "code",
            "object"
        ]
    },
    {
        "id": 1742,
        "code": "\tprivate Authentication getSourceAuthentication(Authentication current) {\n\t\tAuthentication original = null;\n\t\t\n\t\tCollection<? extends GrantedAuthority> authorities = current.getAuthorities();\n\t\tfor (GrantedAuthority auth : authorities) {\n\t\t\t\n\t\t\tif (auth instanceof SwitchUserGrantedAuthority) {\n\t\t\t\toriginal = ((SwitchUserGrantedAuthority) auth).getSource();\n\t\t\t\tthis.logger.debug(LogMessage.format(\"Found original switch user granted authority [%s]\", original));\n\t\t\t}\n\t\t}\n\t\treturn original;\n\t}",
        "summary_tokens": [
            "find",
            "the",
            "original",
            "code",
            "authentication",
            "code",
            "object",
            "from",
            "the",
            "current",
            "user",
            "s",
            "granted",
            "authorities"
        ]
    },
    {
        "id": 1743,
        "code": "\tprotected boolean requiresExitUser(HttpServletRequest request) {\n\t\treturn this.exitUserMatcher.matches(request);\n\t}",
        "summary_tokens": [
            "checks",
            "the",
            "request",
            "uri",
            "for",
            "the",
            "presence",
            "of",
            "tt",
            "exit",
            "user",
            "url",
            "tt"
        ]
    },
    {
        "id": 1744,
        "code": "\tprotected boolean requiresSwitchUser(HttpServletRequest request) {\n\t\treturn this.switchUserMatcher.matches(request);\n\t}",
        "summary_tokens": [
            "checks",
            "the",
            "request",
            "uri",
            "for",
            "the",
            "presence",
            "of",
            "tt",
            "switch",
            "user",
            "url",
            "tt"
        ]
    },
    {
        "id": 1745,
        "code": "\tpublic void setUserDetailsService(UserDetailsService userDetailsService) {\n\t\tthis.userDetailsService = userDetailsService;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "authentication",
            "data",
            "access",
            "object"
        ]
    },
    {
        "id": 1746,
        "code": "\tpublic void setExitUserUrl(String exitUserUrl) {\n\t\tAssert.isTrue(UrlUtils.isValidRedirectUrl(exitUserUrl),\n\t\t\t\t\"exitUserUrl cannot be empty and must be a valid redirect URL\");\n\t\tthis.exitUserMatcher = createMatcher(exitUserUrl);\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "url",
            "to",
            "respond",
            "to",
            "exit",
            "user",
            "processing"
        ]
    },
    {
        "id": 1747,
        "code": "\tpublic void setExitUserMatcher(RequestMatcher exitUserMatcher) {\n\t\tAssert.notNull(exitUserMatcher, \"exitUserMatcher cannot be null\");\n\t\tthis.exitUserMatcher = exitUserMatcher;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "matcher",
            "to",
            "respond",
            "to",
            "exit",
            "user",
            "processing"
        ]
    },
    {
        "id": 1748,
        "code": "\tpublic void setSwitchUserUrl(String switchUserUrl) {\n\t\tAssert.isTrue(UrlUtils.isValidRedirectUrl(switchUserUrl),\n\t\t\t\t\"switchUserUrl cannot be empty and must be a valid redirect URL\");\n\t\tthis.switchUserMatcher = createMatcher(switchUserUrl);\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "url",
            "to",
            "respond",
            "to",
            "switch",
            "user",
            "processing"
        ]
    },
    {
        "id": 1749,
        "code": "\tpublic void setSwitchUserMatcher(RequestMatcher switchUserMatcher) {\n\t\tAssert.notNull(switchUserMatcher, \"switchUserMatcher cannot be null\");\n\t\tthis.switchUserMatcher = switchUserMatcher;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "matcher",
            "to",
            "respond",
            "to",
            "switch",
            "user",
            "processing"
        ]
    },
    {
        "id": 1750,
        "code": "\tpublic void setTargetUrl(String targetUrl) {\n\t\tthis.targetUrl = targetUrl;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "url",
            "to",
            "go",
            "to",
            "after",
            "a",
            "successful",
            "switch",
            "exit",
            "user",
            "request"
        ]
    },
    {
        "id": 1751,
        "code": "\tpublic void setSuccessHandler(AuthenticationSuccessHandler successHandler) {\n\t\tAssert.notNull(successHandler, \"successHandler cannot be null\");\n\t\tthis.successHandler = successHandler;\n\t}",
        "summary_tokens": [
            "used",
            "to",
            "define",
            "custom",
            "behaviour",
            "on",
            "a",
            "successful",
            "switch",
            "or",
            "exit",
            "user"
        ]
    },
    {
        "id": 1752,
        "code": "\tpublic void setSwitchFailureUrl(String switchFailureUrl) {\n\t\tAssert.isTrue(UrlUtils.isValidRedirectUrl(switchFailureUrl), \"switchFailureUrl must be a valid redirect URL\");\n\t\tthis.switchFailureUrl = switchFailureUrl;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "url",
            "to",
            "which",
            "a",
            "user",
            "should",
            "be",
            "redirected",
            "if",
            "the",
            "switch",
            "fails"
        ]
    },
    {
        "id": 1753,
        "code": "\tpublic void setFailureHandler(AuthenticationFailureHandler failureHandler) {\n\t\tAssert.notNull(failureHandler, \"failureHandler cannot be null\");\n\t\tthis.failureHandler = failureHandler;\n\t}",
        "summary_tokens": [
            "used",
            "to",
            "define",
            "custom",
            "behaviour",
            "when",
            "a",
            "switch",
            "fails"
        ]
    },
    {
        "id": 1754,
        "code": "\tpublic void setSwitchUserAuthorityChanger(SwitchUserAuthorityChanger switchUserAuthorityChanger) {\n\t\tthis.switchUserAuthorityChanger = switchUserAuthorityChanger;\n\t}",
        "summary_tokens": [
            "switch",
            "user",
            "authority",
            "changer",
            "to",
            "use",
            "to",
            "fine",
            "tune",
            "the",
            "authorities",
            "granted",
            "to",
            "subclasses",
            "may",
            "be",
            "null",
            "if",
            "switch",
            "user",
            "filter",
            "should",
            "not",
            "fine",
            "tune",
            "the",
            "authorities"
        ]
    },
    {
        "id": 1755,
        "code": "\tpublic void setUserDetailsChecker(UserDetailsChecker userDetailsChecker) {\n\t\tthis.userDetailsChecker = userDetailsChecker;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "user",
            "details",
            "checker",
            "that",
            "is",
            "called",
            "on",
            "the",
            "target",
            "user",
            "whenever",
            "the",
            "user",
            "is",
            "switched"
        ]
    },
    {
        "id": 1756,
        "code": "\tpublic void setUsernameParameter(String usernameParameter) {\n\t\tthis.usernameParameter = usernameParameter;\n\t}",
        "summary_tokens": [
            "allows",
            "the",
            "parameter",
            "containing",
            "the",
            "username",
            "to",
            "be",
            "customized"
        ]
    },
    {
        "id": 1757,
        "code": "\tpublic void setSwitchAuthorityRole(String switchAuthorityRole) {\n\t\tAssert.notNull(switchAuthorityRole, \"switchAuthorityRole cannot be null\");\n\t\tthis.switchAuthorityRole = switchAuthorityRole;\n\t}",
        "summary_tokens": [
            "allows",
            "the",
            "role",
            "of",
            "the",
            "switch",
            "authority",
            "to",
            "be",
            "customized"
        ]
    },
    {
        "id": 1758,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n\t\tAssert.notNull(securityContextHolderStrategy, \"securityContextHolderStrategy cannot be null\");\n\t\tthis.securityContextHolderStrategy = securityContextHolderStrategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 1759,
        "code": "\tpublic Authentication getSource() {\n\t\treturn this.source;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "original",
            "user",
            "associated",
            "with",
            "a",
            "successful",
            "user",
            "switch"
        ]
    },
    {
        "id": 1760,
        "code": "\tpublic void setResolveHiddenInputs(Function<HttpServletRequest, Map<String, String>> resolveHiddenInputs) {\n\t\tAssert.notNull(resolveHiddenInputs, \"resolveHiddenInputs cannot be null\");\n\t\tthis.resolveHiddenInputs = resolveHiddenInputs;\n\t}",
        "summary_tokens": [
            "sets",
            "a",
            "function",
            "used",
            "to",
            "resolve",
            "a",
            "map",
            "of",
            "the",
            "hidden",
            "inputs",
            "where",
            "the",
            "key",
            "is",
            "the",
            "name",
            "of",
            "the",
            "input",
            "and",
            "the",
            "value",
            "is",
            "the",
            "value",
            "of",
            "the",
            "input"
        ]
    },
    {
        "id": 1761,
        "code": "\tpublic void setResolveHiddenInputs(Function<HttpServletRequest, Map<String, String>> resolveHiddenInputs) {\n\t\tAssert.notNull(resolveHiddenInputs, \"resolveHiddenInputs cannot be null\");\n\t\tthis.resolveHiddenInputs = resolveHiddenInputs;\n\t}",
        "summary_tokens": [
            "sets",
            "a",
            "function",
            "used",
            "to",
            "resolve",
            "a",
            "map",
            "of",
            "the",
            "hidden",
            "inputs",
            "where",
            "the",
            "key",
            "is",
            "the",
            "name",
            "of",
            "the",
            "input",
            "and",
            "the",
            "value",
            "is",
            "the",
            "value",
            "of",
            "the",
            "input"
        ]
    },
    {
        "id": 1762,
        "code": "\tpublic void setSecurityContextRepository(SecurityContextRepository securityContextRepository) {\n\t\tAssert.notNull(securityContextRepository, \"securityContextRepository cannot be null\");\n\t\tthis.securityContextRepository = securityContextRepository;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "repository",
            "to",
            "save",
            "the",
            "security",
            "context",
            "on",
            "authentication",
            "success"
        ]
    },
    {
        "id": 1763,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n\t\tAssert.notNull(securityContextHolderStrategy, \"securityContextHolderStrategy cannot be null\");\n\t\tthis.securityContextHolderStrategy = securityContextHolderStrategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 1764,
        "code": "\tstatic String generateDigest(boolean passwordAlreadyEncoded, String username, String realm, String password,\n\t\t\tString httpMethod, String uri, String qop, String nonce, String nc, String cnonce)\n\t\t\tthrows IllegalArgumentException {\n\t\tString a2 = httpMethod + \":\" + uri;\n\t\tString a1Md5 = (!passwordAlreadyEncoded) ? DigestAuthUtils.encodePasswordInA1Format(username, realm, password)\n\t\t\t\t: password;\n\t\tString a2Md5 = md5Hex(a2);\n\t\tif (qop == null) {\n\t\t\t\n\t\t\treturn md5Hex(a1Md5 + \":\" + nonce + \":\" + a2Md5);\n\t\t}\n\t\tif (\"auth\".equals(qop)) {\n\t\t\t\n\t\t\treturn md5Hex(a1Md5 + \":\" + nonce + \":\" + nc + \":\" + cnonce + \":\" + qop + \":\" + a2Md5);\n\t\t}\n\t\tthrow new IllegalArgumentException(\"This method does not support a qop: '\" + qop + \"'\");\n\t}",
        "summary_tokens": [
            "computes",
            "the",
            "code",
            "response",
            "code",
            "portion",
            "of",
            "a",
            "digest",
            "authentication",
            "header"
        ]
    },
    {
        "id": 1765,
        "code": "\tstatic Map<String, String> splitEachArrayElementAndCreateMap(String[] array, String delimiter,\n\t\t\tString removeCharacters) {\n\t\tif ((array == null) || (array.length == 0)) {\n\t\t\treturn null;\n\t\t}\n\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (String s : array) {\n\t\t\tString postRemove = (removeCharacters != null) ? StringUtils.replace(s, removeCharacters, \"\") : s;\n\t\t\tString[] splitThisArrayElement = split(postRemove, delimiter);\n\t\t\tif (splitThisArrayElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmap.put(splitThisArrayElement[0].trim(), splitThisArrayElement[1].trim());\n\t\t}\n\t\treturn map;\n\t}",
        "summary_tokens": [
            "takes",
            "an",
            "array",
            "of",
            "code",
            "string",
            "code",
            "s",
            "and",
            "for",
            "each",
            "element",
            "removes",
            "any",
            "instances",
            "of",
            "code",
            "remove",
            "character",
            "code",
            "and",
            "splits",
            "the",
            "element",
            "based",
            "on",
            "the",
            "code",
            "delimiter",
            "code"
        ]
    },
    {
        "id": 1766,
        "code": "\tstatic String[] split(String toSplit, String delimiter) {\n\t\tAssert.hasLength(toSplit, \"Cannot split a null or empty string\");\n\t\tAssert.hasLength(delimiter, \"Cannot use a null or empty delimiter to split a string\");\n\t\tAssert.isTrue(delimiter.length() == 1, \"Delimiter can only be one character in length\");\n\t\tint offset = toSplit.indexOf(delimiter);\n\t\tif (offset < 0) {\n\t\t\treturn null;\n\t\t}\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + 1);\n\t\treturn new String[] { beforeDelimiter, afterDelimiter };\n\t}",
        "summary_tokens": [
            "splits",
            "a",
            "code",
            "string",
            "code",
            "at",
            "the",
            "first",
            "instance",
            "of",
            "the",
            "delimiter"
        ]
    },
    {
        "id": 1767,
        "code": "\tpublic void setCreateAuthenticatedToken(boolean createAuthenticatedToken) {\n\t\tthis.createAuthenticatedToken = createAuthenticatedToken;\n\t}",
        "summary_tokens": [
            "if",
            "you",
            "set",
            "this",
            "property",
            "the",
            "authentication",
            "object",
            "which",
            "is",
            "created",
            "after",
            "the",
            "successful",
            "digest",
            "authentication",
            "will",
            "be",
            "marked",
            "as",
            "b",
            "authenticated",
            "b",
            "and",
            "filled",
            "with",
            "the",
            "authorities",
            "loaded",
            "by",
            "the",
            "user",
            "details",
            "service"
        ]
    },
    {
        "id": 1768,
        "code": "\tpublic void setSecurityContextRepository(SecurityContextRepository securityContextRepository) {\n\t\tAssert.notNull(securityContextRepository, \"securityContextRepository cannot be null\");\n\t\tthis.securityContextRepository = securityContextRepository;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "repository",
            "to",
            "save",
            "the",
            "security",
            "context",
            "on",
            "authentication",
            "success"
        ]
    },
    {
        "id": 1769,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n\t\tAssert.notNull(securityContextHolderStrategy, \"securityContextHolderStrategy cannot be null\");\n\t\tthis.securityContextHolderStrategy = securityContextHolderStrategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 1770,
        "code": "\tprivate <T extends Annotation> T findMethodAnnotation(Class<T> annotationClass, MethodParameter parameter) {\n\t\tT annotation = parameter.getParameterAnnotation(annotationClass);\n\t\tif (annotation != null) {\n\t\t\treturn annotation;\n\t\t}\n\t\tAnnotation[] annotationsToSearch = parameter.getParameterAnnotations();\n\t\tfor (Annotation toSearch : annotationsToSearch) {\n\t\t\tannotation = AnnotationUtils.findAnnotation(toSearch.annotationType(), annotationClass);\n\t\t\tif (annotation != null) {\n\t\t\t\treturn annotation;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "obtains",
            "the",
            "specified",
            "annotation",
            "on",
            "the",
            "specified",
            "method",
            "parameter"
        ]
    },
    {
        "id": 1771,
        "code": "\tprotected boolean enableHttpSessionEventPublisher() {\n\t\treturn false;\n\t}",
        "summary_tokens": [
            "override",
            "this",
            "if",
            "http",
            "session",
            "event",
            "publisher",
            "should",
            "be",
            "added",
            "as",
            "a",
            "listener"
        ]
    },
    {
        "id": 1772,
        "code": "\tprivate void insertSpringSecurityFilterChain(ServletContext servletContext) {\n\t\tString filterName = DEFAULT_FILTER_NAME;\n\t\tDelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy(filterName);\n\t\tString contextAttribute = getWebApplicationContextAttribute();\n\t\tif (contextAttribute != null) {\n\t\t\tspringSecurityFilterChain.setContextAttribute(contextAttribute);\n\t\t}\n\t\tregisterFilter(servletContext, true, filterName, springSecurityFilterChain);\n\t}",
        "summary_tokens": [
            "registers",
            "the",
            "spring",
            "security",
            "filter",
            "chain",
            "servlet",
            "context",
            "the",
            "servlet",
            "context"
        ]
    },
    {
        "id": 1773,
        "code": "\tprotected final void insertFilters(ServletContext servletContext, Filter... filters) {\n\t\tregisterFilters(servletContext, true, filters);\n\t}",
        "summary_tokens": [
            "inserts",
            "the",
            "provided",
            "filter",
            "s",
            "before",
            "existing",
            "filter",
            "s",
            "using",
            "default",
            "generated",
            "names",
            "get",
            "security",
            "dispatcher",
            "types",
            "and",
            "is",
            "async",
            "security",
            "supported"
        ]
    },
    {
        "id": 1774,
        "code": "\tprotected final void appendFilters(ServletContext servletContext, Filter... filters) {\n\t\tregisterFilters(servletContext, false, filters);\n\t}",
        "summary_tokens": [
            "inserts",
            "the",
            "provided",
            "filter",
            "s",
            "after",
            "existing",
            "filter",
            "s",
            "using",
            "default",
            "generated",
            "names",
            "get",
            "security",
            "dispatcher",
            "types",
            "and",
            "is",
            "async",
            "security",
            "supported"
        ]
    },
    {
        "id": 1775,
        "code": "\tprivate void registerFilters(ServletContext servletContext, boolean insertBeforeOtherFilters, Filter... filters) {\n\t\tAssert.notEmpty(filters, \"filters cannot be null or empty\");\n\t\tfor (Filter filter : filters) {\n\t\t\tAssert.notNull(filter, () -> \"filters cannot contain null values. Got \" + Arrays.asList(filters));\n\t\t\tString filterName = Conventions.getVariableName(filter);\n\t\t\tregisterFilter(servletContext, insertBeforeOtherFilters, filterName, filter);\n\t\t}\n\t}",
        "summary_tokens": [
            "registers",
            "the",
            "provided",
            "filter",
            "s",
            "using",
            "default",
            "generated",
            "names",
            "get",
            "security",
            "dispatcher",
            "types",
            "and",
            "is",
            "async",
            "security",
            "supported"
        ]
    },
    {
        "id": 1776,
        "code": "\tprivate void registerFilter(ServletContext servletContext, boolean insertBeforeOtherFilters, String filterName,\n\t\t\tFilter filter) {\n\t\tDynamic registration = servletContext.addFilter(filterName, filter);\n\t\tAssert.state(registration != null, () -> \"Duplicate Filter registration for '\" + filterName\n\t\t\t\t+ \"'. Check to ensure the Filter is only configured once.\");\n\t\tregistration.setAsyncSupported(isAsyncSecuritySupported());\n\t\tEnumSet<DispatcherType> dispatcherTypes = getSecurityDispatcherTypes();\n\t\tregistration.addMappingForUrlPatterns(dispatcherTypes, !insertBeforeOtherFilters, \"/*\");\n\t}",
        "summary_tokens": [
            "registers",
            "the",
            "provided",
            "filter",
            "using",
            "the",
            "is",
            "async",
            "security",
            "supported",
            "and",
            "get",
            "security",
            "dispatcher",
            "types"
        ]
    },
    {
        "id": 1777,
        "code": "\tprivate String getWebApplicationContextAttribute() {\n\t\tString dispatcherServletName = getDispatcherWebApplicationContextSuffix();\n\t\tif (dispatcherServletName == null) {\n\t\t\treturn null;\n\t\t}\n\t\treturn SERVLET_CONTEXT_PREFIX + dispatcherServletName;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "delegating",
            "filter",
            "proxy",
            "get",
            "context",
            "attribute",
            "or",
            "null",
            "if",
            "the",
            "parent",
            "application",
            "context",
            "should",
            "be",
            "used"
        ]
    },
    {
        "id": 1778,
        "code": "\tprotected Set<SessionTrackingMode> getSessionTrackingModes() {\n\t\treturn EnumSet.of(SessionTrackingMode.COOKIE);\n\t}",
        "summary_tokens": [
            "determines",
            "how",
            "a",
            "session",
            "should",
            "be",
            "tracked"
        ]
    },
    {
        "id": 1779,
        "code": "\tprotected String getDispatcherWebApplicationContextSuffix() {\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "lt",
            "servlet",
            "name",
            "gt",
            "to",
            "use",
            "the",
            "dispatcher",
            "servlet",
            "s",
            "web",
            "application",
            "context",
            "to",
            "find",
            "the",
            "delegating",
            "filter",
            "proxy",
            "or",
            "null",
            "to",
            "use",
            "the",
            "parent",
            "application",
            "context"
        ]
    },
    {
        "id": 1780,
        "code": "\tprotected void beforeSpringSecurityFilterChain(ServletContext servletContext) {\n\n\t}",
        "summary_tokens": [
            "invoked",
            "before",
            "the",
            "spring",
            "security",
            "filter",
            "chain",
            "is",
            "added"
        ]
    },
    {
        "id": 1781,
        "code": "\tprotected void afterSpringSecurityFilterChain(ServletContext servletContext) {\n\n\t}",
        "summary_tokens": [
            "invoked",
            "after",
            "the",
            "spring",
            "security",
            "filter",
            "chain",
            "is",
            "added"
        ]
    },
    {
        "id": 1782,
        "code": "\tprotected EnumSet<DispatcherType> getSecurityDispatcherTypes() {\n\t\treturn EnumSet.of(DispatcherType.REQUEST, DispatcherType.ERROR, DispatcherType.ASYNC);\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "dispatcher",
            "type",
            "for",
            "the",
            "spring",
            "security",
            "filter",
            "chain"
        ]
    },
    {
        "id": 1783,
        "code": "\tprotected boolean isAsyncSecuritySupported() {\n\t\treturn true;\n\t}",
        "summary_tokens": [
            "determine",
            "if",
            "the",
            "spring",
            "security",
            "filter",
            "chain",
            "should",
            "be",
            "marked",
            "as",
            "supporting",
            "asynch"
        ]
    },
    {
        "id": 1784,
        "code": "\tpublic SecurityContext loadContext(HttpRequestResponseHolder requestResponseHolder) {\n\t\tHttpServletRequest request = requestResponseHolder.getRequest();\n\t\tHttpServletResponse response = requestResponseHolder.getResponse();\n\t\tHttpSession httpSession = request.getSession(false);\n\t\tSecurityContext context = readSecurityContextFromSession(httpSession);\n\t\tif (context == null) {\n\t\t\tcontext = generateNewContext();\n\t\t\tif (this.logger.isTraceEnabled()) {\n\t\t\t\tthis.logger.trace(LogMessage.format(\"Created %s\", context));\n\t\t\t}\n\t\t}\n\t\tif (response != null) {\n\t\t\tSaveToSessionResponseWrapper wrappedResponse = new SaveToSessionResponseWrapper(response, request,\n\t\t\t\t\thttpSession != null, context);\n\t\t\twrappedResponse.setSecurityContextHolderStrategy(this.securityContextHolderStrategy);\n\t\t\trequestResponseHolder.setResponse(wrappedResponse);\n\t\t\trequestResponseHolder.setRequest(new SaveToSessionRequestWrapper(request, wrappedResponse));\n\t\t}\n\t\treturn context;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "security",
            "context",
            "for",
            "the",
            "current",
            "request",
            "if",
            "available",
            "and",
            "returns",
            "it"
        ]
    },
    {
        "id": 1785,
        "code": "\tprivate SecurityContext readSecurityContextFromSession(HttpSession httpSession) {\n\t\tif (httpSession == null) {\n\t\t\tthis.logger.trace(\"No HttpSession currently exists\");\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\tObject contextFromSession = httpSession.getAttribute(this.springSecurityContextKey);\n\t\tif (contextFromSession == null) {\n\t\t\tif (this.logger.isTraceEnabled()) {\n\t\t\t\tthis.logger.trace(LogMessage.format(\"Did not find SecurityContext in HttpSession %s \"\n\t\t\t\t\t\t+ \"using the SPRING_SECURITY_CONTEXT session attribute\", httpSession.getId()));\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t\n\t\tif (!(contextFromSession instanceof SecurityContext)) {\n\t\t\tthis.logger.warn(LogMessage.format(\n\t\t\t\t\t\"%s did not contain a SecurityContext but contained: '%s'; are you improperly \"\n\t\t\t\t\t\t\t+ \"modifying the HttpSession directly (you should always use SecurityContextHolder) \"\n\t\t\t\t\t\t\t+ \"or using the HttpSession attribute reserved for this class?\",\n\t\t\t\t\tthis.springSecurityContextKey, contextFromSession));\n\t\t\treturn null;\n\t\t}\n\n\t\tif (this.logger.isTraceEnabled()) {\n\t\t\tthis.logger.trace(\n\t\t\t\t\tLogMessage.format(\"Retrieved %s from %s\", contextFromSession, this.springSecurityContextKey));\n\t\t}\n\t\telse if (this.logger.isDebugEnabled()) {\n\t\t\tthis.logger.debug(LogMessage.format(\"Retrieved %s\", contextFromSession));\n\t\t}\n\t\t\n\t\treturn (SecurityContext) contextFromSession;\n\t}",
        "summary_tokens": [
            "http",
            "session",
            "the",
            "session",
            "obtained",
            "from",
            "the",
            "request"
        ]
    },
    {
        "id": 1786,
        "code": "\tprotected SecurityContext generateNewContext() {\n\t\treturn this.securityContextHolderStrategy.createEmptyContext();\n\t}",
        "summary_tokens": [
            "by",
            "default",
            "calls",
            "security",
            "context",
            "holder",
            "create",
            "empty",
            "context",
            "to",
            "obtain",
            "a",
            "new",
            "context",
            "there",
            "should",
            "be",
            "no",
            "context",
            "present",
            "in",
            "the",
            "holder",
            "when",
            "this",
            "method",
            "is",
            "called"
        ]
    },
    {
        "id": 1787,
        "code": "\tpublic void setAllowSessionCreation(boolean allowSessionCreation) {\n\t\tthis.allowSessionCreation = allowSessionCreation;\n\t}",
        "summary_tokens": [
            "if",
            "set",
            "to",
            "true",
            "the",
            "default",
            "a",
            "session",
            "will",
            "be",
            "created",
            "if",
            "required",
            "to",
            "store",
            "the",
            "security",
            "context",
            "if",
            "it",
            "is",
            "determined",
            "that",
            "its",
            "contents",
            "are",
            "different",
            "from",
            "the",
            "default",
            "empty",
            "context",
            "value"
        ]
    },
    {
        "id": 1788,
        "code": "\tpublic void setDisableUrlRewriting(boolean disableUrlRewriting) {\n\t\tthis.disableUrlRewriting = disableUrlRewriting;\n\t}",
        "summary_tokens": [
            "allows",
            "the",
            "use",
            "of",
            "session",
            "identifiers",
            "in",
            "urls",
            "to",
            "be",
            "disabled"
        ]
    },
    {
        "id": 1789,
        "code": "\tpublic void setSpringSecurityContextKey(String springSecurityContextKey) {\n\t\tAssert.hasText(springSecurityContextKey, \"springSecurityContextKey cannot be empty\");\n\t\tthis.springSecurityContextKey = springSecurityContextKey;\n\t}",
        "summary_tokens": [
            "allows",
            "the",
            "session",
            "attribute",
            "name",
            "to",
            "be",
            "customized",
            "for",
            "this",
            "repository",
            "instance"
        ]
    },
    {
        "id": 1790,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy strategy) {\n\t\tthis.securityContextHolderStrategy = strategy;\n\t\tthis.contextObject = this.securityContextHolderStrategy.createEmptyContext();\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 1791,
        "code": "\tpublic void setTrustResolver(AuthenticationTrustResolver trustResolver) {\n\t\tAssert.notNull(trustResolver, \"trustResolver cannot be null\");\n\t\tthis.trustResolver = trustResolver;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "authentication",
            "trust",
            "resolver",
            "to",
            "be",
            "used"
        ]
    },
    {
        "id": 1792,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy strategy) {\n\t\tAssert.notNull(this.securityContextHolderStrategy, \"securityContextHolderStrategy cannot be null\");\n\t\tthis.securityContextHolderStrategy = strategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 1793,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n\t\tAssert.notNull(securityContextHolderStrategy, \"securityContextHolderStrategy cannot be null\");\n\t\tthis.securityContextHolderStrategy = securityContextHolderStrategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 1794,
        "code": "\tpublic void disableSaveOnResponseCommitted() {\n\t\tdisableOnResponseCommitted();\n\t}",
        "summary_tokens": [
            "invoke",
            "this",
            "method",
            "to",
            "disable",
            "automatic",
            "saving",
            "of",
            "the",
            "security",
            "context",
            "when",
            "the",
            "http",
            "servlet",
            "response",
            "is",
            "committed"
        ]
    },
    {
        "id": 1795,
        "code": "\tprotected void onResponseCommitted() {\n\t\tsaveContext(this.securityContextHolderStrategy.getContext());\n\t\tthis.contextSaved = true;\n\t}",
        "summary_tokens": [
            "calls",
            "code",
            "save",
            "context",
            "code",
            "with",
            "the",
            "current",
            "contents",
            "of",
            "the",
            "tt",
            "security",
            "context",
            "holder",
            "tt",
            "as",
            "long",
            "as",
            "disable",
            "save",
            "on",
            "response",
            "committed",
            "was",
            "not",
            "invoked"
        ]
    },
    {
        "id": 1796,
        "code": "\tpublic final boolean isContextSaved() {\n\t\treturn this.contextSaved;\n\t}",
        "summary_tokens": [
            "tells",
            "if",
            "the",
            "response",
            "wrapper",
            "has",
            "called",
            "code",
            "save",
            "context",
            "code",
            "because",
            "of",
            "this",
            "wrapper"
        ]
    },
    {
        "id": 1797,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n\t\tAssert.notNull(securityContextHolderStrategy, \"securityContextHolderStrategy cannot be null\");\n\t\tthis.securityContextHolderStrategy = securityContextHolderStrategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 1798,
        "code": "\tpublic void setShouldNotFilterErrorDispatch(boolean shouldNotFilterErrorDispatch) {\n\t\tthis.shouldNotFilterErrorDispatch = shouldNotFilterErrorDispatch;\n\t}",
        "summary_tokens": [
            "disables",
            "security",
            "context",
            "holder",
            "filter",
            "for",
            "error",
            "dispatch"
        ]
    },
    {
        "id": 1799,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n\t\tAssert.notNull(securityContextHolderStrategy, \"securityContextHolderStrategy cannot be null\");\n\t\tthis.securityContextHolderStrategy = securityContextHolderStrategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 1800,
        "code": "\tdefault Supplier<SecurityContext> loadContext(HttpServletRequest request) {\n\t\treturn SingletonSupplier.of(() -> loadContext(new HttpRequestResponseHolder(request, null)));\n\t}",
        "summary_tokens": [
            "obtains",
            "the",
            "security",
            "context",
            "for",
            "the",
            "supplied",
            "request"
        ]
    },
    {
        "id": 1801,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n\t\tAssert.notNull(securityContextHolderStrategy, \"securityContextHolderStrategy cannot be null\");\n\t\tthis.securityContextHolderStrategy = securityContextHolderStrategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 1802,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n\t\tAssert.notNull(securityContextHolderStrategy, \"securityContextHolderStrategy cannot be null\");\n\t\tthis.securityContextHolderStrategy = securityContextHolderStrategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 1803,
        "code": "\tpublic static WebApplicationContext findRequiredWebApplicationContext(ServletContext servletContext) {\n\t\tWebApplicationContext webApplicationContext = findWebApplicationContext(servletContext);\n\t\tAssert.state(webApplicationContext != null,\n\t\t\t\t\"No WebApplicationContext found: no ContextLoaderListener registered?\");\n\t\treturn webApplicationContext;\n\t}",
        "summary_tokens": [
            "find",
            "a",
            "unique",
            "web",
            "application",
            "context",
            "for",
            "this",
            "web",
            "app",
            "either",
            "the",
            "root",
            "web",
            "app",
            "context",
            "preferred",
            "or",
            "a",
            "unique",
            "web",
            "application",
            "context",
            "among",
            "the",
            "registered",
            "servlet",
            "context",
            "attributes",
            "typically",
            "coming",
            "from",
            "a",
            "single",
            "dispatcher",
            "servlet",
            "in",
            "the",
            "current",
            "web",
            "application"
        ]
    },
    {
        "id": 1804,
        "code": "\tpublic void setParameterName(String parameterName) {\n\t\tAssert.notNull(parameterName, \"parameterName cannot be null\");\n\t\tthis.parameterName = parameterName;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "name",
            "of",
            "the",
            "http",
            "request",
            "parameter",
            "that",
            "should",
            "be",
            "used",
            "to",
            "provide",
            "a",
            "token"
        ]
    },
    {
        "id": 1805,
        "code": "\tpublic void setHeaderName(String headerName) {\n\t\tAssert.notNull(headerName, \"headerName cannot be null\");\n\t\tthis.headerName = headerName;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "name",
            "of",
            "the",
            "http",
            "header",
            "that",
            "should",
            "be",
            "used",
            "to",
            "provide",
            "the",
            "token"
        ]
    },
    {
        "id": 1806,
        "code": "\tpublic void setCookieName(String cookieName) {\n\t\tAssert.notNull(cookieName, \"cookieName cannot be null\");\n\t\tthis.cookieName = cookieName;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "name",
            "of",
            "the",
            "cookie",
            "that",
            "the",
            "expected",
            "csrf",
            "token",
            "is",
            "saved",
            "to",
            "and",
            "read",
            "from"
        ]
    },
    {
        "id": 1807,
        "code": "\tpublic void setCookieHttpOnly(boolean cookieHttpOnly) {\n\t\tthis.cookieHttpOnly = cookieHttpOnly;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "http",
            "only",
            "attribute",
            "on",
            "the",
            "cookie",
            "containing",
            "the",
            "csrf",
            "token"
        ]
    },
    {
        "id": 1808,
        "code": "\tpublic static CookieCsrfTokenRepository withHttpOnlyFalse() {\n\t\tCookieCsrfTokenRepository result = new CookieCsrfTokenRepository();\n\t\tresult.setCookieHttpOnly(false);\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "conveniently",
            "create",
            "an",
            "instance",
            "that",
            "has",
            "set",
            "cookie",
            "http",
            "only",
            "boolean",
            "set",
            "to",
            "false"
        ]
    },
    {
        "id": 1809,
        "code": "\tpublic void setCookiePath(String path) {\n\t\tthis.cookiePath = path;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "path",
            "that",
            "the",
            "cookie",
            "will",
            "be",
            "created",
            "with"
        ]
    },
    {
        "id": 1810,
        "code": "\tpublic String getCookiePath() {\n\t\treturn this.cookiePath;\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "path",
            "that",
            "the",
            "csrf",
            "cookie",
            "will",
            "be",
            "set",
            "to"
        ]
    },
    {
        "id": 1811,
        "code": "\tpublic void setCookieDomain(String cookieDomain) {\n\t\tthis.cookieDomain = cookieDomain;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "domain",
            "of",
            "the",
            "cookie",
            "that",
            "the",
            "expected",
            "csrf",
            "token",
            "is",
            "saved",
            "to",
            "and",
            "read",
            "from"
        ]
    },
    {
        "id": 1812,
        "code": "\tpublic void setSecure(Boolean secure) {\n\t\tthis.secure = secure;\n\t}",
        "summary_tokens": [
            "sets",
            "secure",
            "flag",
            "of",
            "the",
            "cookie",
            "that",
            "the",
            "expected",
            "csrf",
            "token",
            "is",
            "saved",
            "to",
            "and",
            "read",
            "from"
        ]
    },
    {
        "id": 1813,
        "code": "\tpublic void setCookieMaxAge(int cookieMaxAge) {\n\t\tAssert.isTrue(cookieMaxAge != 0, \"cookieMaxAge cannot be zero\");\n\t\tthis.cookieMaxAge = cookieMaxAge;\n\t}",
        "summary_tokens": [
            "sets",
            "maximum",
            "age",
            "in",
            "seconds",
            "for",
            "the",
            "cookie",
            "that",
            "the",
            "expected",
            "csrf",
            "token",
            "is",
            "saved",
            "to",
            "and",
            "read",
            "from"
        ]
    },
    {
        "id": 1814,
        "code": "\tpublic void setRequestAttributeHandler(CsrfTokenRequestAttributeHandler requestAttributeHandler) {\n\t\tAssert.notNull(requestAttributeHandler, \"requestAttributeHandler cannot be null\");\n\t\tthis.requestAttributeHandler = requestAttributeHandler;\n\t}",
        "summary_tokens": [
            "specify",
            "a",
            "csrf",
            "token",
            "request",
            "attribute",
            "handler",
            "to",
            "use",
            "for",
            "making",
            "the",
            "csrf",
            "token",
            "available",
            "as",
            "a",
            "request",
            "attribute"
        ]
    },
    {
        "id": 1815,
        "code": "\tpublic void setRequireCsrfProtectionMatcher(RequestMatcher requireCsrfProtectionMatcher) {\n\t\tAssert.notNull(requireCsrfProtectionMatcher, \"requireCsrfProtectionMatcher cannot be null\");\n\t\tthis.requireCsrfProtectionMatcher = requireCsrfProtectionMatcher;\n\t}",
        "summary_tokens": [
            "specifies",
            "a",
            "request",
            "matcher",
            "that",
            "is",
            "used",
            "to",
            "determine",
            "if",
            "csrf",
            "protection",
            "should",
            "be",
            "applied"
        ]
    },
    {
        "id": 1816,
        "code": "\tpublic void setAccessDeniedHandler(AccessDeniedHandler accessDeniedHandler) {\n\t\tAssert.notNull(accessDeniedHandler, \"accessDeniedHandler cannot be null\");\n\t\tthis.accessDeniedHandler = accessDeniedHandler;\n\t}",
        "summary_tokens": [
            "specifies",
            "a",
            "access",
            "denied",
            "handler",
            "that",
            "should",
            "be",
            "used",
            "when",
            "csrf",
            "protection",
            "fails"
        ]
    },
    {
        "id": 1817,
        "code": "\tpublic void setRequestAttributeHandler(CsrfTokenRequestAttributeHandler requestAttributeHandler) {\n\t\tAssert.notNull(requestAttributeHandler, \"requestAttributeHandler cannot be null\");\n\t\tthis.requestAttributeHandler = requestAttributeHandler;\n\t}",
        "summary_tokens": [
            "specifies",
            "a",
            "csrf",
            "token",
            "request",
            "attribute",
            "handler",
            "that",
            "is",
            "used",
            "to",
            "make",
            "the",
            "csrf",
            "token",
            "available",
            "as",
            "a",
            "request",
            "attribute"
        ]
    },
    {
        "id": 1818,
        "code": "\tpublic void setRequestResolver(CsrfTokenRequestResolver requestResolver) {\n\t\tAssert.notNull(requestResolver, \"requestResolver cannot be null\");\n\t\tthis.requestResolver = requestResolver;\n\t}",
        "summary_tokens": [
            "specifies",
            "a",
            "csrf",
            "token",
            "request",
            "resolver",
            "that",
            "is",
            "used",
            "to",
            "resolve",
            "the",
            "token",
            "value",
            "from",
            "the",
            "request"
        ]
    },
    {
        "id": 1819,
        "code": "\tprivate static boolean equalsConstantTime(String expected, String actual) {\n\t\tif (expected == actual) {\n\t\t\treturn true;\n\t\t}\n\t\tif (expected == null || actual == null) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tbyte[] expectedBytes = Utf8.encode(expected);\n\t\tbyte[] actualBytes = Utf8.encode(actual);\n\t\treturn MessageDigest.isEqual(expectedBytes, actualBytes);\n\t}",
        "summary_tokens": [
            "constant",
            "time",
            "comparison",
            "to",
            "prevent",
            "against",
            "timing",
            "attacks"
        ]
    },
    {
        "id": 1820,
        "code": "\tpublic void logout(HttpServletRequest request, HttpServletResponse response, Authentication authentication) {\n\t\tthis.csrfTokenRepository.saveToken(null, request, response);\n\t}",
        "summary_tokens": [
            "clears",
            "the",
            "csrf",
            "token"
        ]
    },
    {
        "id": 1821,
        "code": "\tpublic final void setCsrfRequestAttributeName(String csrfRequestAttributeName) {\n\t\tthis.csrfRequestAttributeName = csrfRequestAttributeName;\n\t}",
        "summary_tokens": [
            "the",
            "csrf",
            "token",
            "is",
            "available",
            "as",
            "a",
            "request",
            "attribute",
            "named",
            "csrf",
            "token"
        ]
    },
    {
        "id": 1822,
        "code": "\tpublic void setParameterName(String parameterName) {\n\t\tAssert.hasLength(parameterName, \"parameterName cannot be null or empty\");\n\t\tthis.parameterName = parameterName;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "http",
            "servlet",
            "request",
            "parameter",
            "name",
            "that",
            "the",
            "csrf",
            "token",
            "is",
            "expected",
            "to",
            "appear",
            "on",
            "parameter",
            "name",
            "the",
            "new",
            "parameter",
            "name",
            "to",
            "use"
        ]
    },
    {
        "id": 1823,
        "code": "\tpublic void setHeaderName(String headerName) {\n\t\tAssert.hasLength(headerName, \"headerName cannot be null or empty\");\n\t\tthis.headerName = headerName;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "header",
            "name",
            "that",
            "the",
            "csrf",
            "token",
            "is",
            "expected",
            "to",
            "appear",
            "on",
            "and",
            "the",
            "header",
            "that",
            "the",
            "response",
            "will",
            "contain",
            "the",
            "csrf",
            "token"
        ]
    },
    {
        "id": 1824,
        "code": "\tpublic void setSessionAttributeName(String sessionAttributeName) {\n\t\tAssert.hasLength(sessionAttributeName, \"sessionAttributename cannot be null or empty\");\n\t\tthis.sessionAttributeName = sessionAttributeName;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "http",
            "session",
            "attribute",
            "name",
            "that",
            "the",
            "csrf",
            "token",
            "is",
            "stored",
            "in",
            "session",
            "attribute",
            "name",
            "the",
            "new",
            "attribute",
            "name",
            "to",
            "use"
        ]
    },
    {
        "id": 1825,
        "code": "\tpublic void setDeferLoadToken(boolean deferLoadToken) {\n\t\tthis.deferLoadToken = deferLoadToken;\n\t}",
        "summary_tokens": [
            "determines",
            "if",
            "load",
            "token",
            "http",
            "servlet",
            "request",
            "should",
            "be",
            "lazily",
            "loaded"
        ]
    },
    {
        "id": 1826,
        "code": "\tpublic CsrfToken generateToken(HttpServletRequest request) {\n\t\treturn wrap(request, this.delegate.generateToken(request));\n\t}",
        "summary_tokens": [
            "generates",
            "a",
            "new",
            "token",
            "request",
            "the",
            "http",
            "servlet",
            "request",
            "to",
            "use"
        ]
    },
    {
        "id": 1827,
        "code": "\tpublic void saveToken(CsrfToken token, HttpServletRequest request, HttpServletResponse response) {\n\t\tif (token == null) {\n\t\t\tthis.delegate.saveToken(token, request, response);\n\t\t}\n\t}",
        "summary_tokens": [
            "does",
            "nothing",
            "if",
            "the",
            "csrf",
            "token",
            "is",
            "not",
            "null"
        ]
    },
    {
        "id": 1828,
        "code": "\tpublic CsrfToken loadToken(HttpServletRequest request) {\n\t\tif (this.deferLoadToken) {\n\t\t\treturn new LazyLoadCsrfToken(request, this.delegate);\n\t\t}\n\t\treturn this.delegate.loadToken(request);\n\t}",
        "summary_tokens": [
            "delegates",
            "to",
            "the",
            "injected",
            "csrf",
            "token",
            "repository"
        ]
    },
    {
        "id": 1829,
        "code": "\tpublic void setAllowUrlEncodedSlash(boolean allowUrlEncodedSlash) {\n\t\tthis.allowUrlEncodedSlash = allowUrlEncodedSlash;\n\t}",
        "summary_tokens": [
            "p",
            "sets",
            "if",
            "the",
            "application",
            "should",
            "allow",
            "a",
            "url",
            "encoded",
            "slash",
            "character"
        ]
    },
    {
        "id": 1830,
        "code": "\tprivate boolean isNormalized(String path) {\n\t\tif (path == null) {\n\t\t\treturn true;\n\t\t}\n\t\tfor (int i = path.length(); i > 0;) {\n\t\t\tint slashIndex = path.lastIndexOf('/', i - 1);\n\t\t\tint gap = i - slashIndex;\n\t\t\tif (gap == 2 && path.charAt(slashIndex + 1) == '.') {\n\t\t\t\t\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (gap == 3 && path.charAt(slashIndex + 1) == '.' && path.charAt(slashIndex + 2) == '.') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ti = slashIndex;\n\t\t}\n\t\treturn true;\n\t}",
        "summary_tokens": [
            "checks",
            "whether",
            "a",
            "path",
            "is",
            "normalized",
            "doesn",
            "t",
            "contain",
            "path",
            "traversal",
            "sequences",
            "like"
        ]
    },
    {
        "id": 1831,
        "code": "\tprivate String strip(String path) {\n\t\tif (path == null) {\n\t\t\treturn null;\n\t\t}\n\t\tint semicolonIndex = path.indexOf(';');\n\t\tif (semicolonIndex < 0) {\n\t\t\tint doubleSlashIndex = path.indexOf(\"//\");\n\t\t\tif (doubleSlashIndex < 0) {\n\t\t\t\t\n\t\t\t\t\n\t\t\t\treturn path;\n\t\t\t}\n\t\t}\n\t\tStringTokenizer tokenizer = new StringTokenizer(path, \"/\");\n\t\tStringBuilder stripped = new StringBuilder(path.length());\n\t\tif (path.charAt(0) == '/') {\n\t\t\tstripped.append('/');\n\t\t}\n\t\twhile (tokenizer.hasMoreTokens()) {\n\t\t\tString segment = tokenizer.nextToken();\n\t\t\tsemicolonIndex = segment.indexOf(';');\n\t\t\tif (semicolonIndex >= 0) {\n\t\t\t\tsegment = segment.substring(0, semicolonIndex);\n\t\t\t}\n\t\t\tstripped.append(segment).append('/');\n\t\t}\n\t\t\n\t\tif (path.charAt(path.length() - 1) != '/') {\n\t\t\tstripped.deleteCharAt(stripped.length() - 1);\n\t\t}\n\t\treturn stripped.toString();\n\t}",
        "summary_tokens": [
            "removes",
            "path",
            "parameters",
            "from",
            "each",
            "path",
            "segment",
            "in",
            "the",
            "supplied",
            "path",
            "and",
            "truncates",
            "sequences",
            "of",
            "multiple",
            "characters",
            "to",
            "a",
            "single"
        ]
    },
    {
        "id": 1832,
        "code": "\tpublic void setUnsafeAllowAnyHttpMethod(boolean unsafeAllowAnyHttpMethod) {\n\t\tthis.allowedHttpMethods = unsafeAllowAnyHttpMethod ? ALLOW_ANY_HTTP_METHOD : createDefaultAllowedHttpMethods();\n\t}",
        "summary_tokens": [
            "sets",
            "if",
            "any",
            "http",
            "method",
            "is",
            "allowed"
        ]
    },
    {
        "id": 1833,
        "code": "\tpublic void setAllowedHttpMethods(Collection<String> allowedHttpMethods) {\n\t\tAssert.notNull(allowedHttpMethods, \"allowedHttpMethods cannot be null\");\n\t\tthis.allowedHttpMethods = (allowedHttpMethods != ALLOW_ANY_HTTP_METHOD) ? new HashSet<>(allowedHttpMethods)\n\t\t\t\t: ALLOW_ANY_HTTP_METHOD;\n\t}",
        "summary_tokens": [
            "p",
            "determines",
            "which",
            "http",
            "methods",
            "should",
            "be",
            "allowed"
        ]
    },
    {
        "id": 1834,
        "code": "\tpublic void setAllowSemicolon(boolean allowSemicolon) {\n\t\tif (allowSemicolon) {\n\t\t\turlBlocklistsRemoveAll(FORBIDDEN_SEMICOLON);\n\t\t}\n\t\telse {\n\t\t\turlBlocklistsAddAll(FORBIDDEN_SEMICOLON);\n\t\t}\n\t}",
        "summary_tokens": [
            "p",
            "determines",
            "if",
            "semicolon",
            "is",
            "allowed",
            "in",
            "the",
            "url",
            "i"
        ]
    },
    {
        "id": 1835,
        "code": "\tpublic void setAllowUrlEncodedSlash(boolean allowUrlEncodedSlash) {\n\t\tif (allowUrlEncodedSlash) {\n\t\t\turlBlocklistsRemoveAll(FORBIDDEN_FORWARDSLASH);\n\t\t}\n\t\telse {\n\t\t\turlBlocklistsAddAll(FORBIDDEN_FORWARDSLASH);\n\t\t}\n\t}",
        "summary_tokens": [
            "p",
            "determines",
            "if",
            "a",
            "slash",
            "that",
            "is",
            "url",
            "encoded",
            "0",
            "f",
            "should",
            "be",
            "allowed",
            "in",
            "the",
            "path",
            "or",
            "not"
        ]
    },
    {
        "id": 1836,
        "code": "\tpublic void setAllowUrlEncodedDoubleSlash(boolean allowUrlEncodedDoubleSlash) {\n\t\tif (allowUrlEncodedDoubleSlash) {\n\t\t\turlBlocklistsRemoveAll(FORBIDDEN_DOUBLE_FORWARDSLASH);\n\t\t}\n\t\telse {\n\t\t\turlBlocklistsAddAll(FORBIDDEN_DOUBLE_FORWARDSLASH);\n\t\t}\n\t}",
        "summary_tokens": [
            "p",
            "determines",
            "if",
            "double",
            "slash",
            "that",
            "is",
            "url",
            "encoded",
            "0",
            "f",
            "0",
            "f",
            "should",
            "be",
            "allowed",
            "in",
            "the",
            "path",
            "or",
            "not"
        ]
    },
    {
        "id": 1837,
        "code": "\tpublic void setAllowUrlEncodedPeriod(boolean allowUrlEncodedPeriod) {\n\t\tif (allowUrlEncodedPeriod) {\n\t\t\tthis.encodedUrlBlocklist.removeAll(FORBIDDEN_ENCODED_PERIOD);\n\t\t}\n\t\telse {\n\t\t\tthis.encodedUrlBlocklist.addAll(FORBIDDEN_ENCODED_PERIOD);\n\t\t}\n\t}",
        "summary_tokens": [
            "p",
            "determines",
            "if",
            "a",
            "period"
        ]
    },
    {
        "id": 1838,
        "code": "\tpublic void setAllowBackSlash(boolean allowBackSlash) {\n\t\tif (allowBackSlash) {\n\t\t\turlBlocklistsRemoveAll(FORBIDDEN_BACKSLASH);\n\t\t}\n\t\telse {\n\t\t\turlBlocklistsAddAll(FORBIDDEN_BACKSLASH);\n\t\t}\n\t}",
        "summary_tokens": [
            "p",
            "determines",
            "if",
            "a",
            "backslash",
            "or",
            "a",
            "url",
            "encoded",
            "backslash",
            "0",
            "c",
            "should",
            "be",
            "allowed",
            "in",
            "the",
            "path",
            "or",
            "not"
        ]
    },
    {
        "id": 1839,
        "code": "\tpublic void setAllowNull(boolean allowNull) {\n\t\tif (allowNull) {\n\t\t\turlBlocklistsRemoveAll(FORBIDDEN_NULL);\n\t\t}\n\t\telse {\n\t\t\turlBlocklistsAddAll(FORBIDDEN_NULL);\n\t\t}\n\t}",
        "summary_tokens": [
            "p",
            "determines",
            "if",
            "a",
            "null",
            "0",
            "or",
            "a",
            "url",
            "encoded",
            "nul",
            "0",
            "should",
            "be",
            "allowed",
            "in",
            "the",
            "path",
            "or",
            "not"
        ]
    },
    {
        "id": 1840,
        "code": "\tpublic void setAllowUrlEncodedPercent(boolean allowUrlEncodedPercent) {\n\t\tif (allowUrlEncodedPercent) {\n\t\t\tthis.encodedUrlBlocklist.remove(ENCODED_PERCENT);\n\t\t\tthis.decodedUrlBlocklist.remove(PERCENT);\n\t\t}\n\t\telse {\n\t\t\tthis.encodedUrlBlocklist.add(ENCODED_PERCENT);\n\t\t\tthis.decodedUrlBlocklist.add(PERCENT);\n\t\t}\n\t}",
        "summary_tokens": [
            "p",
            "determines",
            "if",
            "a",
            "percent",
            "that",
            "is",
            "url",
            "encoded",
            "0",
            "should",
            "be",
            "allowed",
            "in",
            "the",
            "path",
            "or",
            "not"
        ]
    },
    {
        "id": 1841,
        "code": "\tpublic void setAllowUrlEncodedCarriageReturn(boolean allowUrlEncodedCarriageReturn) {\n\t\tif (allowUrlEncodedCarriageReturn) {\n\t\t\turlBlocklistsRemoveAll(FORBIDDEN_CR);\n\t\t}\n\t\telse {\n\t\t\turlBlocklistsAddAll(FORBIDDEN_CR);\n\t\t}\n\t}",
        "summary_tokens": [
            "determines",
            "if",
            "a",
            "url",
            "encoded",
            "carriage",
            "return",
            "is",
            "allowed",
            "in",
            "the",
            "path",
            "or",
            "not"
        ]
    },
    {
        "id": 1842,
        "code": "\tpublic void setAllowUrlEncodedLineFeed(boolean allowUrlEncodedLineFeed) {\n\t\tif (allowUrlEncodedLineFeed) {\n\t\t\turlBlocklistsRemoveAll(FORBIDDEN_LF);\n\t\t}\n\t\telse {\n\t\t\turlBlocklistsAddAll(FORBIDDEN_LF);\n\t\t}\n\t}",
        "summary_tokens": [
            "determines",
            "if",
            "a",
            "url",
            "encoded",
            "line",
            "feed",
            "is",
            "allowed",
            "in",
            "the",
            "path",
            "or",
            "not"
        ]
    },
    {
        "id": 1843,
        "code": "\tpublic void setAllowUrlEncodedParagraphSeparator(boolean allowUrlEncodedParagraphSeparator) {\n\t\tif (allowUrlEncodedParagraphSeparator) {\n\t\t\tthis.decodedUrlBlocklist.removeAll(FORBIDDEN_PARAGRAPH_SEPARATOR);\n\t\t}\n\t\telse {\n\t\t\tthis.decodedUrlBlocklist.addAll(FORBIDDEN_PARAGRAPH_SEPARATOR);\n\t\t}\n\t}",
        "summary_tokens": [
            "determines",
            "if",
            "a",
            "url",
            "encoded",
            "paragraph",
            "separator",
            "is",
            "allowed",
            "in",
            "the",
            "path",
            "or",
            "not"
        ]
    },
    {
        "id": 1844,
        "code": "\tpublic void setAllowUrlEncodedLineSeparator(boolean allowUrlEncodedLineSeparator) {\n\t\tif (allowUrlEncodedLineSeparator) {\n\t\t\tthis.decodedUrlBlocklist.removeAll(FORBIDDEN_LINE_SEPARATOR);\n\t\t}\n\t\telse {\n\t\t\tthis.decodedUrlBlocklist.addAll(FORBIDDEN_LINE_SEPARATOR);\n\t\t}\n\t}",
        "summary_tokens": [
            "determines",
            "if",
            "a",
            "url",
            "encoded",
            "line",
            "separator",
            "is",
            "allowed",
            "in",
            "the",
            "path",
            "or",
            "not"
        ]
    },
    {
        "id": 1845,
        "code": "\tpublic void setAllowedHeaderNames(Predicate<String> allowedHeaderNames) {\n\t\tAssert.notNull(allowedHeaderNames, \"allowedHeaderNames cannot be null\");\n\t\tthis.allowedHeaderNames = allowedHeaderNames;\n\t}",
        "summary_tokens": [
            "p",
            "determines",
            "which",
            "header",
            "names",
            "should",
            "be",
            "allowed"
        ]
    },
    {
        "id": 1846,
        "code": "\tpublic void setAllowedHeaderValues(Predicate<String> allowedHeaderValues) {\n\t\tAssert.notNull(allowedHeaderValues, \"allowedHeaderValues cannot be null\");\n\t\tthis.allowedHeaderValues = allowedHeaderValues;\n\t}",
        "summary_tokens": [
            "p",
            "determines",
            "which",
            "header",
            "values",
            "should",
            "be",
            "allowed"
        ]
    },
    {
        "id": 1847,
        "code": "\tpublic void setAllowedParameterNames(Predicate<String> allowedParameterNames) {\n\t\tAssert.notNull(allowedParameterNames, \"allowedParameterNames cannot be null\");\n\t\tthis.allowedParameterNames = allowedParameterNames;\n\t}",
        "summary_tokens": [
            "determines",
            "which",
            "parameter",
            "names",
            "should",
            "be",
            "allowed"
        ]
    },
    {
        "id": 1848,
        "code": "\tpublic void setAllowedParameterValues(Predicate<String> allowedParameterValues) {\n\t\tAssert.notNull(allowedParameterValues, \"allowedParameterValues cannot be null\");\n\t\tthis.allowedParameterValues = allowedParameterValues;\n\t}",
        "summary_tokens": [
            "p",
            "determines",
            "which",
            "parameter",
            "values",
            "should",
            "be",
            "allowed"
        ]
    },
    {
        "id": 1849,
        "code": "\tpublic void setAllowedHostnames(Predicate<String> allowedHostnames) {\n\t\tAssert.notNull(allowedHostnames, \"allowedHostnames cannot be null\");\n\t\tthis.allowedHostnames = allowedHostnames;\n\t}",
        "summary_tokens": [
            "p",
            "determines",
            "which",
            "hostnames",
            "should",
            "be",
            "allowed"
        ]
    },
    {
        "id": 1850,
        "code": "\tprivate static boolean isNormalized(String path) {\n\t\tif (path == null) {\n\t\t\treturn true;\n\t\t}\n\t\tfor (int i = path.length(); i > 0;) {\n\t\t\tint slashIndex = path.lastIndexOf('/', i - 1);\n\t\t\tint gap = i - slashIndex;\n\t\t\tif (gap == 2 && path.charAt(slashIndex + 1) == '.') {\n\t\t\t\treturn false; \n\t\t\t}\n\t\t\tif (gap == 3 && path.charAt(slashIndex + 1) == '.' && path.charAt(slashIndex + 2) == '.') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ti = slashIndex;\n\t\t}\n\t\treturn true;\n\t}",
        "summary_tokens": [
            "checks",
            "whether",
            "a",
            "path",
            "is",
            "normalized",
            "doesn",
            "t",
            "contain",
            "path",
            "traversal",
            "sequences",
            "like"
        ]
    },
    {
        "id": 1851,
        "code": "\tpublic Set<String> getEncodedUrlBlocklist() {\n\t\treturn this.encodedUrlBlocklist;\n\t}",
        "summary_tokens": [
            "provides",
            "the",
            "existing",
            "encoded",
            "url",
            "blocklist",
            "which",
            "can",
            "add",
            "remove",
            "entries",
            "from",
            "the",
            "existing",
            "encoded",
            "url",
            "blocklist",
            "never",
            "null"
        ]
    },
    {
        "id": 1852,
        "code": "\tpublic Set<String> getDecodedUrlBlocklist() {\n\t\treturn this.decodedUrlBlocklist;\n\t}",
        "summary_tokens": [
            "provides",
            "the",
            "existing",
            "decoded",
            "url",
            "blocklist",
            "which",
            "can",
            "add",
            "remove",
            "entries",
            "from",
            "the",
            "existing",
            "decoded",
            "url",
            "blocklist",
            "never",
            "null"
        ]
    },
    {
        "id": 1853,
        "code": "\tpublic Set<String> getEncodedUrlBlacklist() {\n\t\treturn getEncodedUrlBlocklist();\n\t}",
        "summary_tokens": [
            "provides",
            "the",
            "existing",
            "encoded",
            "url",
            "blocklist",
            "which",
            "can",
            "add",
            "remove",
            "entries",
            "from",
            "the",
            "existing",
            "encoded",
            "url",
            "blocklist",
            "never",
            "null",
            "use",
            "get",
            "encoded",
            "url",
            "blocklist",
            "instead"
        ]
    },
    {
        "id": 1854,
        "code": "\tpublic Set<String> getDecodedUrlBlacklist() {\n\t\treturn getDecodedUrlBlocklist();\n\t}",
        "summary_tokens": [
            "provides",
            "the",
            "existing",
            "decoded",
            "url",
            "blocklist",
            "which",
            "can",
            "add",
            "remove",
            "entries",
            "from",
            "the",
            "existing",
            "decoded",
            "url",
            "blocklist",
            "never",
            "null"
        ]
    },
    {
        "id": 1855,
        "code": "\tpublic String getName() {\n\t\treturn this.headerName;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "name",
            "of",
            "the",
            "header"
        ]
    },
    {
        "id": 1856,
        "code": "\tpublic List<String> getValues() {\n\t\treturn this.headerValues;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "values",
            "of",
            "the",
            "header"
        ]
    },
    {
        "id": 1857,
        "code": "\tpublic void setShouldWriteHeadersEagerly(boolean shouldWriteHeadersEagerly) {\n\t\tthis.shouldWriteHeadersEagerly = shouldWriteHeadersEagerly;\n\t}",
        "summary_tokens": [
            "allow",
            "writing",
            "headers",
            "at",
            "the",
            "beginning",
            "of",
            "the",
            "request"
        ]
    },
    {
        "id": 1858,
        "code": "\tpublic void setPolicyDirectives(String policyDirectives) {\n\t\tAssert.hasLength(policyDirectives, \"policyDirectives cannot be null or empty\");\n\t\tthis.policyDirectives = policyDirectives;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "policy",
            "directive",
            "s",
            "to",
            "be",
            "used",
            "in",
            "the",
            "response",
            "header"
        ]
    },
    {
        "id": 1859,
        "code": "\tpublic void setReportOnly(boolean reportOnly) {\n\t\tthis.reportOnly = reportOnly;\n\t}",
        "summary_tokens": [
            "if",
            "true",
            "includes",
            "the",
            "content",
            "security",
            "policy",
            "report",
            "only",
            "header",
            "in",
            "the",
            "response",
            "otherwise",
            "defaults",
            "to",
            "the",
            "content",
            "security",
            "policy",
            "header"
        ]
    },
    {
        "id": 1860,
        "code": "\tpublic void setPolicy(CrossOriginEmbedderPolicy embedderPolicy) {\n\t\tAssert.notNull(embedderPolicy, \"embedderPolicy cannot be null\");\n\t\tthis.policy = embedderPolicy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "cross",
            "origin",
            "embedder",
            "policy",
            "value",
            "to",
            "be",
            "used",
            "in",
            "the",
            "cross",
            "origin",
            "embedder",
            "policy",
            "header",
            "embedder",
            "policy",
            "the",
            "cross",
            "origin",
            "embedder",
            "policy",
            "to",
            "use"
        ]
    },
    {
        "id": 1861,
        "code": "\tpublic void setPolicy(CrossOriginOpenerPolicy openerPolicy) {\n\t\tAssert.notNull(openerPolicy, \"openerPolicy cannot be null\");\n\t\tthis.policy = openerPolicy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "cross",
            "origin",
            "opener",
            "policy",
            "value",
            "to",
            "be",
            "used",
            "in",
            "the",
            "cross",
            "origin",
            "opener",
            "policy",
            "header",
            "opener",
            "policy",
            "the",
            "cross",
            "origin",
            "opener",
            "policy",
            "to",
            "use"
        ]
    },
    {
        "id": 1862,
        "code": "\tpublic void setPolicy(CrossOriginResourcePolicy resourcePolicy) {\n\t\tAssert.notNull(resourcePolicy, \"resourcePolicy cannot be null\");\n\t\tthis.policy = resourcePolicy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "cross",
            "origin",
            "resource",
            "policy",
            "value",
            "to",
            "be",
            "used",
            "in",
            "the",
            "cross",
            "origin",
            "resource",
            "policy",
            "header",
            "resource",
            "policy",
            "the",
            "cross",
            "origin",
            "resource",
            "policy",
            "to",
            "use"
        ]
    },
    {
        "id": 1863,
        "code": "\tpublic void setPolicyDirectives(String policyDirectives) {\n\t\tAssert.hasLength(policyDirectives, \"policyDirectives must not be null or empty\");\n\t\tthis.policyDirectives = policyDirectives;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "security",
            "policy",
            "directive",
            "s",
            "to",
            "be",
            "used",
            "in",
            "the",
            "response",
            "header"
        ]
    },
    {
        "id": 1864,
        "code": "\tpublic void setPins(Map<String, String> pins) {\n\t\tAssert.notNull(pins, \"pins cannot be null\");\n\t\tthis.pins = pins;\n\t\tupdateHpkpHeaderValue();\n\t}",
        "summary_tokens": [
            "p",
            "sets",
            "the",
            "value",
            "for",
            "the",
            "pin",
            "directive",
            "of",
            "the",
            "public",
            "key",
            "pins",
            "header"
        ]
    },
    {
        "id": 1865,
        "code": "\tpublic void addSha256Pins(String... pins) {\n\t\tfor (String pin : pins) {\n\t\t\tAssert.notNull(pin, \"pin cannot be null\");\n\t\t\tthis.pins.put(pin, \"sha256\");\n\t\t}\n\t\tupdateHpkpHeaderValue();\n\t}",
        "summary_tokens": [
            "p",
            "adds",
            "a",
            "list",
            "of",
            "sha",
            "0",
            "hashed",
            "pins",
            "for",
            "the",
            "pin",
            "directive",
            "of",
            "the",
            "public",
            "key",
            "pins",
            "header"
        ]
    },
    {
        "id": 1866,
        "code": "\tpublic void setMaxAgeInSeconds(long maxAgeInSeconds) {\n\t\tAssert.isTrue(maxAgeInSeconds > 0, () -> \"maxAgeInSeconds must be non-negative. Got \" + maxAgeInSeconds);\n\t\tthis.maxAgeInSeconds = maxAgeInSeconds;\n\t\tupdateHpkpHeaderValue();\n\t}",
        "summary_tokens": [
            "p",
            "sets",
            "the",
            "value",
            "in",
            "seconds",
            "for",
            "the",
            "max",
            "age",
            "directive",
            "of",
            "the",
            "public",
            "key",
            "pins",
            "header"
        ]
    },
    {
        "id": 1867,
        "code": "\tpublic void setIncludeSubDomains(boolean includeSubDomains) {\n\t\tthis.includeSubDomains = includeSubDomains;\n\t\tupdateHpkpHeaderValue();\n\t}",
        "summary_tokens": [
            "p",
            "if",
            "true",
            "the",
            "pinning",
            "policy",
            "applies",
            "to",
            "this",
            "pinned",
            "host",
            "as",
            "well",
            "as",
            "any",
            "subdomains",
            "of",
            "the",
            "host",
            "s",
            "domain",
            "name"
        ]
    },
    {
        "id": 1868,
        "code": "\tpublic void setReportOnly(boolean reportOnly) {\n\t\tthis.reportOnly = reportOnly;\n\t}",
        "summary_tokens": [
            "p",
            "to",
            "get",
            "a",
            "public",
            "key",
            "pins",
            "header",
            "you",
            "should",
            "set",
            "this",
            "to",
            "false",
            "otherwise",
            "the",
            "header",
            "will",
            "be",
            "public",
            "key",
            "pins",
            "report",
            "only"
        ]
    },
    {
        "id": 1869,
        "code": "\tpublic void setReportUri(String reportUri) {\n\t\ttry {\n\t\t\tthis.reportUri = new URI(reportUri);\n\t\t\tupdateHpkpHeaderValue();\n\t\t}\n\t\tcatch (URISyntaxException ex) {\n\t\t\tthrow new IllegalArgumentException(ex);\n\t\t}\n\t}",
        "summary_tokens": [
            "p",
            "sets",
            "the",
            "uri",
            "to",
            "which",
            "the",
            "browser",
            "should",
            "report",
            "pin",
            "validation",
            "failures"
        ]
    },
    {
        "id": 1870,
        "code": "\tpublic void setRequestMatcher(RequestMatcher requestMatcher) {\n\t\tAssert.notNull(requestMatcher, \"requestMatcher cannot be null\");\n\t\tthis.requestMatcher = requestMatcher;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "request",
            "matcher",
            "used",
            "to",
            "determine",
            "if",
            "the",
            "strict",
            "transport",
            "security",
            "should",
            "be",
            "added"
        ]
    },
    {
        "id": 1871,
        "code": "\tpublic void setMaxAgeInSeconds(long maxAgeInSeconds) {\n\t\tAssert.isTrue(maxAgeInSeconds >= 0, () -> \"maxAgeInSeconds must be non-negative. Got \" + maxAgeInSeconds);\n\t\tthis.maxAgeInSeconds = maxAgeInSeconds;\n\t\tupdateHstsHeaderValue();\n\t}",
        "summary_tokens": [
            "p",
            "sets",
            "the",
            "value",
            "in",
            "seconds",
            "for",
            "the",
            "max",
            "age",
            "directive",
            "of",
            "the",
            "strict",
            "transport",
            "security",
            "header"
        ]
    },
    {
        "id": 1872,
        "code": "\tpublic void setIncludeSubDomains(boolean includeSubDomains) {\n\t\tthis.includeSubDomains = includeSubDomains;\n\t\tupdateHstsHeaderValue();\n\t}",
        "summary_tokens": [
            "p",
            "if",
            "true",
            "subdomains",
            "should",
            "be",
            "considered",
            "hsts",
            "hosts",
            "too"
        ]
    },
    {
        "id": 1873,
        "code": "\tpublic void setPreload(boolean preload) {\n\t\tthis.preload = preload;\n\t\tupdateHstsHeaderValue();\n\t}",
        "summary_tokens": [
            "p",
            "if",
            "true",
            "preload",
            "will",
            "be",
            "included",
            "in",
            "hsts",
            "header"
        ]
    },
    {
        "id": 1874,
        "code": "\tpublic void setPolicy(String policy) {\n\t\tAssert.hasLength(policy, \"policy can not be null or empty\");\n\t\tthis.policy = policy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "policy",
            "to",
            "be",
            "used",
            "in",
            "the",
            "response",
            "header"
        ]
    },
    {
        "id": 1875,
        "code": "\tpublic void setPolicy(ReferrerPolicy policy) {\n\t\tAssert.notNull(policy, \"policy can not be null\");\n\t\tthis.policy = policy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "policy",
            "to",
            "be",
            "used",
            "in",
            "the",
            "response",
            "header"
        ]
    },
    {
        "id": 1876,
        "code": "\tpublic void setEnabled(boolean enabled) {\n\t\tif (!enabled) {\n\t\t\tsetBlock(false);\n\t\t}\n\t\tthis.enabled = enabled;\n\t\tupdateHeaderValue();\n\t}",
        "summary_tokens": [
            "if",
            "true",
            "will",
            "contain",
            "a",
            "value",
            "of",
            "0"
        ]
    },
    {
        "id": 1877,
        "code": "\tpublic void setBlock(boolean block) {\n\t\tif (!this.enabled && block) {\n\t\t\tthrow new IllegalArgumentException(\"Cannot set block to true with enabled false\");\n\t\t}\n\t\tthis.block = block;\n\t\tupdateHeaderValue();\n\t}",
        "summary_tokens": [
            "if",
            "false",
            "will",
            "not",
            "specify",
            "the",
            "mode",
            "as",
            "blocked"
        ]
    },
    {
        "id": 1878,
        "code": "\tpublic void setAllowFromParameterName(String allowFromParameterName) {\n\t\tAssert.notNull(allowFromParameterName, \"allowFromParameterName cannot be null\");\n\t\tthis.allowFromParameterName = allowFromParameterName;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "http",
            "parameter",
            "used",
            "to",
            "retrieve",
            "the",
            "value",
            "for",
            "the",
            "origin",
            "that",
            "is",
            "allowed",
            "from"
        ]
    },
    {
        "id": 1879,
        "code": "\tpublic void writeHeaders(HttpServletRequest request, HttpServletResponse response) {\n\t\tif (XFrameOptionsMode.ALLOW_FROM.equals(this.frameOptionsMode)) {\n\t\t\tString allowFromValue = this.allowFromStrategy.getAllowFromValue(request);\n\t\t\tif (XFrameOptionsMode.DENY.getMode().equals(allowFromValue)) {\n\t\t\t\tif (!response.containsHeader(XFRAME_OPTIONS_HEADER)) {\n\t\t\t\t\tresponse.setHeader(XFRAME_OPTIONS_HEADER, XFrameOptionsMode.DENY.getMode());\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (allowFromValue != null) {\n\t\t\t\tif (!response.containsHeader(XFRAME_OPTIONS_HEADER)) {\n\t\t\t\t\tresponse.setHeader(XFRAME_OPTIONS_HEADER,\n\t\t\t\t\t\t\tXFrameOptionsMode.ALLOW_FROM.getMode() + \" \" + allowFromValue);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tresponse.setHeader(XFRAME_OPTIONS_HEADER, this.frameOptionsMode.getMode());\n\t\t}\n\t}",
        "summary_tokens": [
            "writes",
            "the",
            "x",
            "frame",
            "options",
            "header",
            "value",
            "overwritting",
            "any",
            "previous",
            "value"
        ]
    },
    {
        "id": 1880,
        "code": "\tpublic static Consumer<HttpHeaders> bearerToken(String bearerTokenValue) {\n\t\tAssert.hasText(bearerTokenValue, \"bearerTokenValue cannot be null\");\n\t\treturn (headers) -> headers.set(HttpHeaders.AUTHORIZATION, \"Bearer \" + bearerTokenValue);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "provided",
            "value",
            "as",
            "a",
            "bearer",
            "token",
            "in",
            "a",
            "header",
            "with",
            "the",
            "name",
            "of",
            "http",
            "headers",
            "authorization",
            "bearer",
            "token",
            "value",
            "the",
            "bear",
            "token",
            "value",
            "a",
            "consumer",
            "that",
            "sets",
            "the",
            "header"
        ]
    },
    {
        "id": 1881,
        "code": "\tpublic final void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n\t\t\tthrows ServletException, IOException {\n\n\t\tSubject subject = obtainSubject(request);\n\t\tif (subject == null && this.createEmptySubject) {\n\t\t\tthis.logger.debug(\"Subject returned was null and createEmptySubject is true; \"\n\t\t\t\t\t+ \"creating new empty subject to run as.\");\n\t\t\tsubject = new Subject();\n\t\t}\n\t\tif (subject == null) {\n\t\t\tthis.logger.debug(\"Subject is null continue running with no Subject.\");\n\t\t\tchain.doFilter(request, response);\n\t\t\treturn;\n\t\t}\n\t\tthis.logger.debug(LogMessage.format(\"Running as Subject %s\", subject));\n\t\ttry {\n\t\t\tSubject.doAs(subject, (PrivilegedExceptionAction<Object>) () -> {\n\t\t\t\tchain.doFilter(request, response);\n\t\t\t\treturn null;\n\t\t\t});\n\t\t}\n\t\tcatch (PrivilegedActionException ex) {\n\t\t\tthrow new ServletException(ex.getMessage(), ex);\n\t\t}\n\t}",
        "summary_tokens": [
            "p",
            "attempts",
            "to",
            "obtain",
            "and",
            "run",
            "as",
            "a",
            "jaas",
            "code",
            "subject",
            "code",
            "using",
            "obtain",
            "subject",
            "servlet",
            "request"
        ]
    },
    {
        "id": 1882,
        "code": "\tprotected Subject obtainSubject(ServletRequest request) {\n\t\tAuthentication authentication = this.securityContextHolderStrategy.getContext().getAuthentication();\n\t\tthis.logger.debug(LogMessage.format(\"Attempting to obtainSubject using authentication : %s\", authentication));\n\t\tif (authentication == null) {\n\t\t\treturn null;\n\t\t}\n\t\tif (!authentication.isAuthenticated()) {\n\t\t\treturn null;\n\t\t}\n\t\tif (!(authentication instanceof JaasAuthenticationToken)) {\n\t\t\treturn null;\n\t\t}\n\t\tJaasAuthenticationToken token = (JaasAuthenticationToken) authentication;\n\t\tLoginContext loginContext = token.getLoginContext();\n\t\tif (loginContext == null) {\n\t\t\treturn null;\n\t\t}\n\t\treturn loginContext.getSubject();\n\t}",
        "summary_tokens": [
            "p",
            "obtains",
            "the",
            "code",
            "subject",
            "code",
            "to",
            "run",
            "as",
            "or",
            "code",
            "null",
            "code",
            "if",
            "no",
            "code",
            "subject",
            "code",
            "is",
            "available"
        ]
    },
    {
        "id": 1883,
        "code": "\tpublic final void setCreateEmptySubject(boolean createEmptySubject) {\n\t\tthis.createEmptySubject = createEmptySubject;\n\t}",
        "summary_tokens": [
            "sets",
            "code",
            "create",
            "empty",
            "subject",
            "code"
        ]
    },
    {
        "id": 1884,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n\t\tAssert.notNull(securityContextHolderStrategy, \"securityContextHolderStrategy cannot be null\");\n\t\tthis.securityContextHolderStrategy = securityContextHolderStrategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 1885,
        "code": "\tpublic PreAuthenticatedAuthenticationToken deserialize(JsonParser jp, DeserializationContext ctxt)\n\t\t\tthrows IOException, JsonProcessingException {\n\t\tObjectMapper mapper = (ObjectMapper) jp.getCodec();\n\t\tJsonNode jsonNode = mapper.readTree(jp);\n\t\tBoolean authenticated = readJsonNode(jsonNode, \"authenticated\").asBoolean();\n\t\tJsonNode principalNode = readJsonNode(jsonNode, \"principal\");\n\t\tObject principal = (!principalNode.isObject()) ? principalNode.asText()\n\t\t\t\t: mapper.readValue(principalNode.traverse(mapper), Object.class);\n\t\tObject credentials = readJsonNode(jsonNode, \"credentials\").asText();\n\t\tList<GrantedAuthority> authorities = mapper.readValue(readJsonNode(jsonNode, \"authorities\").traverse(mapper),\n\t\t\t\tGRANTED_AUTHORITY_LIST);\n\t\tPreAuthenticatedAuthenticationToken token = (!authenticated)\n\t\t\t\t? new PreAuthenticatedAuthenticationToken(principal, credentials)\n\t\t\t\t: new PreAuthenticatedAuthenticationToken(principal, credentials, authorities);\n\t\ttoken.setDetails(readJsonNode(jsonNode, \"details\"));\n\t\treturn token;\n\t}",
        "summary_tokens": [
            "this",
            "method",
            "construct",
            "pre",
            "authenticated",
            "authentication",
            "token",
            "object",
            "from",
            "serialized",
            "json"
        ]
    },
    {
        "id": 1886,
        "code": "\tpublic void setBeanResolver(BeanResolver beanResolver) {\n\t\tthis.beanResolver = beanResolver;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "bean",
            "resolver",
            "to",
            "be",
            "used",
            "on",
            "the",
            "expressions",
            "bean",
            "resolver",
            "the",
            "bean",
            "resolver",
            "to",
            "use"
        ]
    },
    {
        "id": 1887,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n\t\tAssert.notNull(securityContextHolderStrategy, \"securityContextHolderStrategy cannot be null\");\n\t\tthis.securityContextHolderStrategy = securityContextHolderStrategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 1888,
        "code": "\tprivate <T extends Annotation> T findMethodAnnotation(Class<T> annotationClass, MethodParameter parameter) {\n\t\tT annotation = parameter.getParameterAnnotation(annotationClass);\n\t\tif (annotation != null) {\n\t\t\treturn annotation;\n\t\t}\n\t\tAnnotation[] annotationsToSearch = parameter.getParameterAnnotations();\n\t\tfor (Annotation toSearch : annotationsToSearch) {\n\t\t\tannotation = AnnotationUtils.findAnnotation(toSearch.annotationType(), annotationClass);\n\t\t\tif (annotation != null) {\n\t\t\t\treturn annotation;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "obtains",
            "the",
            "specified",
            "annotation",
            "on",
            "the",
            "specified",
            "method",
            "parameter"
        ]
    },
    {
        "id": 1889,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n\t\tAssert.notNull(securityContextHolderStrategy, \"securityContextHolderStrategy cannot be null\");\n\t\tthis.securityContextHolderStrategy = securityContextHolderStrategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 1890,
        "code": "\tpublic void setBeanResolver(BeanResolver beanResolver) {\n\t\tAssert.notNull(beanResolver, \"beanResolver cannot be null\");\n\t\tthis.beanResolver = beanResolver;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "bean",
            "resolver",
            "to",
            "be",
            "used",
            "on",
            "the",
            "expressions",
            "bean",
            "resolver",
            "the",
            "bean",
            "resolver",
            "to",
            "use"
        ]
    },
    {
        "id": 1891,
        "code": "\tprivate <T extends Annotation> T findMethodAnnotation(Class<T> annotationClass, MethodParameter parameter) {\n\t\tT annotation = parameter.getParameterAnnotation(annotationClass);\n\t\tif (annotation != null) {\n\t\t\treturn annotation;\n\t\t}\n\t\tAnnotation[] annotationsToSearch = parameter.getParameterAnnotations();\n\t\tfor (Annotation toSearch : annotationsToSearch) {\n\t\t\tannotation = AnnotationUtils.findAnnotation(toSearch.annotationType(), annotationClass);\n\t\t\tif (annotation != null) {\n\t\t\t\treturn annotation;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "obtain",
            "the",
            "specified",
            "annotation",
            "on",
            "the",
            "specified",
            "method",
            "parameter"
        ]
    },
    {
        "id": 1892,
        "code": "\tpublic void setBeanResolver(BeanResolver beanResolver) {\n\t\tthis.beanResolver = beanResolver;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "bean",
            "resolver",
            "to",
            "be",
            "used",
            "on",
            "the",
            "expressions",
            "bean",
            "resolver",
            "the",
            "bean",
            "resolver",
            "to",
            "use"
        ]
    },
    {
        "id": 1893,
        "code": "\tprivate <T extends Annotation> T findMethodAnnotation(Class<T> annotationClass, MethodParameter parameter) {\n\t\tT annotation = parameter.getParameterAnnotation(annotationClass);\n\t\tif (annotation != null) {\n\t\t\treturn annotation;\n\t\t}\n\t\tAnnotation[] annotationsToSearch = parameter.getParameterAnnotations();\n\t\tfor (Annotation toSearch : annotationsToSearch) {\n\t\t\tannotation = AnnotationUtils.findAnnotation(toSearch.annotationType(), annotationClass);\n\t\t\tif (annotation != null) {\n\t\t\t\treturn annotation;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "obtains",
            "the",
            "specified",
            "annotation",
            "on",
            "the",
            "specified",
            "method",
            "parameter"
        ]
    },
    {
        "id": 1894,
        "code": "\tpublic void setBeanResolver(BeanResolver beanResolver) {\n\t\tAssert.notNull(beanResolver, \"beanResolver cannot be null\");\n\t\tthis.beanResolver = beanResolver;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "bean",
            "resolver",
            "to",
            "be",
            "used",
            "on",
            "the",
            "expressions",
            "bean",
            "resolver",
            "the",
            "bean",
            "resolver",
            "to",
            "use"
        ]
    },
    {
        "id": 1895,
        "code": "\tprivate Object resolveSecurityContext(MethodParameter parameter, SecurityContext securityContext) {\n\t\tCurrentSecurityContext annotation = findMethodAnnotation(CurrentSecurityContext.class, parameter);\n\t\tObject securityContextResult = securityContext;\n\t\tString expressionToParse = annotation.expression();\n\t\tif (StringUtils.hasLength(expressionToParse)) {\n\t\t\tStandardEvaluationContext context = new StandardEvaluationContext();\n\t\t\tcontext.setRootObject(securityContext);\n\t\t\tcontext.setVariable(\"this\", securityContext);\n\t\t\tcontext.setBeanResolver(this.beanResolver);\n\t\t\tExpression expression = this.parser.parseExpression(expressionToParse);\n\t\t\tsecurityContextResult = expression.getValue(context);\n\t\t}\n\t\tif (isInvalidType(parameter, securityContextResult)) {\n\t\t\tif (annotation.errorOnInvalidType()) {\n\t\t\t\tthrow new ClassCastException(\n\t\t\t\t\t\tsecurityContextResult + \" is not assignable to \" + parameter.getParameterType());\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\treturn securityContextResult;\n\t}",
        "summary_tokens": [
            "resolve",
            "the",
            "expression",
            "from",
            "current",
            "security",
            "context",
            "annotation",
            "to",
            "get",
            "the",
            "value"
        ]
    },
    {
        "id": 1896,
        "code": "\tprivate boolean isInvalidType(MethodParameter parameter, Object reactiveSecurityContext) {\n\t\tif (reactiveSecurityContext == null) {\n\t\t\treturn false;\n\t\t}\n\t\tClass<?> typeToCheck = parameter.getParameterType();\n\t\tboolean isParameterPublisher = Publisher.class.isAssignableFrom(parameter.getParameterType());\n\t\tif (isParameterPublisher) {\n\t\t\tResolvableType resolvableType = ResolvableType.forMethodParameter(parameter);\n\t\t\tClass<?> genericType = resolvableType.resolveGeneric(0);\n\t\t\tif (genericType == null) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ttypeToCheck = genericType;\n\t\t}\n\t\treturn !typeToCheck.isAssignableFrom(reactiveSecurityContext.getClass());\n\t}",
        "summary_tokens": [
            "check",
            "if",
            "the",
            "retrieved",
            "value",
            "match",
            "with",
            "the",
            "parameter",
            "type"
        ]
    },
    {
        "id": 1897,
        "code": "\tprivate <T extends Annotation> T findMethodAnnotation(Class<T> annotationClass, MethodParameter parameter) {\n\t\tT annotation = parameter.getParameterAnnotation(annotationClass);\n\t\tif (annotation != null) {\n\t\t\treturn annotation;\n\t\t}\n\t\tAnnotation[] annotationsToSearch = parameter.getParameterAnnotations();\n\t\tfor (Annotation toSearch : annotationsToSearch) {\n\t\t\tannotation = AnnotationUtils.findAnnotation(toSearch.annotationType(), annotationClass);\n\t\t\tif (annotation != null) {\n\t\t\t\treturn annotation;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "obtains",
            "the",
            "specified",
            "annotation",
            "on",
            "the",
            "specified",
            "method",
            "parameter"
        ]
    },
    {
        "id": 1898,
        "code": "\tpublic void setRequestMatcher(RequestMatcher requestMatcher) {\n\t\tAssert.notNull(requestMatcher, \"requestMatcher should not be null\");\n\t\tthis.requestMatcher = requestMatcher;\n\t}",
        "summary_tokens": [
            "allows",
            "selective",
            "use",
            "of",
            "saved",
            "requests",
            "for",
            "a",
            "subset",
            "of",
            "requests"
        ]
    },
    {
        "id": 1899,
        "code": "\tpublic boolean doesRequestMatch(HttpServletRequest request, PortResolver portResolver) {\n\t\tif (!propertyEquals(this.pathInfo, request.getPathInfo())) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!propertyEquals(this.queryString, request.getQueryString())) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!propertyEquals(this.requestURI, request.getRequestURI())) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!\"GET\".equals(request.getMethod()) && \"GET\".equals(this.method)) {\n\t\t\t\n\t\t\treturn false;\n\t\t}\n\t\tif (!propertyEquals(this.serverPort, portResolver.getServerPort(request))) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!propertyEquals(this.requestURL, request.getRequestURL().toString())) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!propertyEquals(this.scheme, request.getScheme())) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!propertyEquals(this.serverName, request.getServerName())) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!propertyEquals(this.contextPath, request.getContextPath())) {\n\t\t\treturn false;\n\t\t}\n\t\treturn propertyEquals(this.servletPath, request.getServletPath());\n\n\t}",
        "summary_tokens": [
            "determines",
            "if",
            "the",
            "current",
            "request",
            "matches",
            "the",
            "code",
            "default",
            "saved",
            "request",
            "code"
        ]
    },
    {
        "id": 1900,
        "code": "\tpublic String getRedirectUrl() {\n\t\tString queryString = createQueryString(this.queryString, this.matchingRequestParameterName);\n\t\treturn UrlUtils.buildFullRequestUrl(this.scheme, this.serverName, this.serverPort, this.requestURI,\n\t\t\t\tqueryString);\n\t}",
        "summary_tokens": [
            "indicates",
            "the",
            "url",
            "that",
            "the",
            "user",
            "agent",
            "used",
            "for",
            "this",
            "request"
        ]
    },
    {
        "id": 1901,
        "code": "\tpublic boolean hasMoreElements() {\n\t\treturn (this.iterator.hasNext());\n\t}",
        "summary_tokens": [
            "tests",
            "if",
            "this",
            "enumeration",
            "contains",
            "more",
            "elements"
        ]
    },
    {
        "id": 1902,
        "code": "\tpublic T nextElement() throws NoSuchElementException {\n\t\treturn (this.iterator.next());\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "next",
            "element",
            "of",
            "this",
            "enumeration",
            "if",
            "this",
            "enumeration",
            "has",
            "at",
            "least",
            "one",
            "more",
            "element",
            "to",
            "provide"
        ]
    },
    {
        "id": 1903,
        "code": "\tpublic static String formatDate(long value, DateFormat threadLocalformat) {\n\t\tString cachedDate = null;\n\t\tLong longValue = value;\n\t\ttry {\n\t\t\tcachedDate = formatCache.get(longValue);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t}\n\t\tif (cachedDate != null) {\n\t\t\treturn cachedDate;\n\t\t}\n\t\tString newDate;\n\t\tDate dateValue = new Date(value);\n\t\tif (threadLocalformat != null) {\n\t\t\tnewDate = threadLocalformat.format(dateValue);\n\t\t\tsynchronized (formatCache) {\n\t\t\t\tupdateCache(formatCache, longValue, newDate);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tsynchronized (formatCache) {\n\t\t\t\tnewDate = format.format(dateValue);\n\t\t\t\tupdateCache(formatCache, longValue, newDate);\n\t\t\t}\n\t\t}\n\t\treturn newDate;\n\t}",
        "summary_tokens": [
            "formats",
            "a",
            "specified",
            "date",
            "to",
            "http",
            "format"
        ]
    },
    {
        "id": 1904,
        "code": "\tpublic static String getCurrentDate() {\n\t\tlong now = System.currentTimeMillis();\n\t\tif ((now - currentDateGenerated) > 1000) {\n\t\t\tsynchronized (format) {\n\t\t\t\tif ((now - currentDateGenerated) > 1000) {\n\t\t\t\t\tcurrentDateGenerated = now;\n\t\t\t\t\tcurrentDate = format.format(new Date(now));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn currentDate;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "current",
            "date",
            "in",
            "http",
            "format"
        ]
    },
    {
        "id": 1905,
        "code": "\tprivate static Long internalParseDate(String value, DateFormat[] formats) {\n\t\tDate date = null;\n\t\tfor (int i = 0; (date == null) && (i < formats.length); i++) {\n\t\t\ttry {\n\t\t\t\tdate = formats[i].parse(value);\n\t\t\t}\n\t\t\tcatch (ParseException ex) {\n\t\t\t}\n\t\t}\n\t\tif (date == null) {\n\t\t\treturn null;\n\t\t}\n\t\treturn date.getTime();\n\t}",
        "summary_tokens": [
            "parses",
            "date",
            "with",
            "given",
            "formatters"
        ]
    },
    {
        "id": 1906,
        "code": "\tpublic static long parseDate(String value, DateFormat[] threadLocalformats) {\n\t\tLong cachedDate = null;\n\t\ttry {\n\t\t\tcachedDate = parseCache.get(value);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t}\n\t\tif (cachedDate != null) {\n\t\t\treturn cachedDate;\n\t\t}\n\t\tLong date;\n\t\tif (threadLocalformats != null) {\n\t\t\tdate = internalParseDate(value, threadLocalformats);\n\t\t\tsynchronized (parseCache) {\n\t\t\t\tupdateCache(parseCache, value, date);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tsynchronized (parseCache) {\n\t\t\t\tdate = internalParseDate(value, formats);\n\t\t\t\tupdateCache(parseCache, value, date);\n\t\t\t}\n\t\t}\n\t\treturn (date != null) ? date : -1L;\n\t}",
        "summary_tokens": [
            "tries",
            "to",
            "parse",
            "the",
            "given",
            "date",
            "as",
            "an",
            "http",
            "date"
        ]
    },
    {
        "id": 1907,
        "code": "\tpublic void saveRequest(HttpServletRequest request, HttpServletResponse response) {\n\t\tif (!this.requestMatcher.matches(request)) {\n\t\t\tif (this.logger.isTraceEnabled()) {\n\t\t\t\tthis.logger.trace(\n\t\t\t\t\t\tLogMessage.format(\"Did not save request since it did not match [%s]\", this.requestMatcher));\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.createSessionAllowed || request.getSession(false) != null) {\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tDefaultSavedRequest savedRequest = new DefaultSavedRequest(request, this.portResolver,\n\t\t\t\t\tthis.matchingRequestParameterName);\n\t\t\trequest.getSession().setAttribute(this.sessionAttrName, savedRequest);\n\t\t\tif (this.logger.isDebugEnabled()) {\n\t\t\t\tthis.logger.debug(LogMessage.format(\"Saved request %s to session\", savedRequest.getRedirectUrl()));\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthis.logger.trace(\"Did not save request since there's no session and createSessionAllowed is false\");\n\t\t}\n\t}",
        "summary_tokens": [
            "stores",
            "the",
            "current",
            "request",
            "provided",
            "the",
            "configuration",
            "properties",
            "allow",
            "it"
        ]
    },
    {
        "id": 1908,
        "code": "\tpublic void setRequestMatcher(RequestMatcher requestMatcher) {\n\t\tthis.requestMatcher = requestMatcher;\n\t}",
        "summary_tokens": [
            "allows",
            "selective",
            "use",
            "of",
            "saved",
            "requests",
            "for",
            "a",
            "subset",
            "of",
            "requests"
        ]
    },
    {
        "id": 1909,
        "code": "\tpublic void setCreateSessionAllowed(boolean createSessionAllowed) {\n\t\tthis.createSessionAllowed = createSessionAllowed;\n\t}",
        "summary_tokens": [
            "if",
            "code",
            "true",
            "code",
            "indicates",
            "that",
            "it",
            "is",
            "permitted",
            "to",
            "store",
            "the",
            "target",
            "url",
            "and",
            "exception",
            "information",
            "in",
            "a",
            "new",
            "code",
            "http",
            "session",
            "code",
            "the",
            "default"
        ]
    },
    {
        "id": 1910,
        "code": "\tpublic void setSessionAttrName(String sessionAttrName) {\n\t\tthis.sessionAttrName = sessionAttrName;\n\t}",
        "summary_tokens": [
            "if",
            "the",
            "session",
            "attr",
            "name",
            "property",
            "is",
            "set",
            "the",
            "request",
            "is",
            "stored",
            "in",
            "the",
            "session",
            "using",
            "this",
            "attribute",
            "name"
        ]
    },
    {
        "id": 1911,
        "code": "\tpublic void setMatchingRequestParameterName(String matchingRequestParameterName) {\n\t\tthis.matchingRequestParameterName = matchingRequestParameterName;\n\t}",
        "summary_tokens": [
            "specify",
            "the",
            "name",
            "of",
            "a",
            "query",
            "parameter",
            "that",
            "is",
            "added",
            "to",
            "the",
            "url",
            "that",
            "specifies",
            "the",
            "request",
            "cache",
            "should",
            "be",
            "checked",
            "in",
            "get",
            "matching",
            "request",
            "http",
            "servlet",
            "request",
            "http",
            "servlet",
            "response",
            "matching",
            "request",
            "parameter",
            "name",
            "the",
            "parameter",
            "name",
            "that",
            "must",
            "be",
            "in",
            "the",
            "request",
            "for",
            "get",
            "matching",
            "request",
            "http",
            "servlet",
            "request",
            "http",
            "servlet",
            "response",
            "to",
            "check",
            "the",
            "session"
        ]
    },
    {
        "id": 1912,
        "code": "\tpublic String getParameter(String name) {\n\t\tString value = super.getParameter(name);\n\t\tif (value != null) {\n\t\t\treturn value;\n\t\t}\n\t\tString[] values = this.savedRequest.getParameterValues(name);\n\t\tif (values == null || values.length == 0) {\n\t\t\treturn null;\n\t\t}\n\t\treturn values[0];\n\t}",
        "summary_tokens": [
            "if",
            "the",
            "parameter",
            "is",
            "available",
            "from",
            "the",
            "wrapped",
            "request",
            "then",
            "the",
            "request",
            "has",
            "been",
            "forwarded",
            "included",
            "to",
            "a",
            "url",
            "with",
            "parameters",
            "either",
            "supplementing",
            "or",
            "overriding",
            "the",
            "saved",
            "request",
            "values"
        ]
    },
    {
        "id": 1913,
        "code": "\tpublic void setHttpStatus(HttpStatus httpStatus) {\n\t\tAssert.notNull(httpStatus, \"httpStatus cannot be null\");\n\t\tthis.httpStatus = httpStatus;\n\t}",
        "summary_tokens": [
            "the",
            "http",
            "status",
            "to",
            "use",
            "for",
            "the",
            "redirect"
        ]
    },
    {
        "id": 1914,
        "code": "\tpublic void setContextRelative(boolean contextRelative) {\n\t\tthis.contextRelative = contextRelative;\n\t}",
        "summary_tokens": [
            "sets",
            "if",
            "the",
            "location",
            "is",
            "relative",
            "to",
            "the",
            "context"
        ]
    },
    {
        "id": 1915,
        "code": "\tpublic void setDefaultEntryPoint(ServerAuthenticationEntryPoint defaultEntryPoint) {\n\t\tthis.defaultEntryPoint = defaultEntryPoint;\n\t}",
        "summary_tokens": [
            "entry",
            "point",
            "which",
            "is",
            "used",
            "when",
            "no",
            "request",
            "matcher",
            "returned",
            "true"
        ]
    },
    {
        "id": 1916,
        "code": "\tpublic void setUsernameParameter(String usernameParameter) {\n\t\tAssert.notNull(usernameParameter, \"usernameParameter cannot be null\");\n\t\tthis.usernameParameter = usernameParameter;\n\t}",
        "summary_tokens": [
            "the",
            "parameter",
            "name",
            "of",
            "the",
            "form",
            "data",
            "to",
            "extract",
            "the",
            "username",
            "username",
            "parameter",
            "the",
            "username",
            "http",
            "parameter"
        ]
    },
    {
        "id": 1917,
        "code": "\tpublic void setPasswordParameter(String passwordParameter) {\n\t\tAssert.notNull(passwordParameter, \"passwordParameter cannot be null\");\n\t\tthis.passwordParameter = passwordParameter;\n\t}",
        "summary_tokens": [
            "the",
            "parameter",
            "name",
            "of",
            "the",
            "form",
            "data",
            "to",
            "extract",
            "the",
            "password",
            "password",
            "parameter",
            "the",
            "password",
            "http",
            "parameter"
        ]
    },
    {
        "id": 1918,
        "code": "\tpublic final void setCredentialsCharset(Charset credentialsCharset) {\n\t\tAssert.notNull(credentialsCharset, \"credentialsCharset cannot be null\");\n\t\tthis.credentialsCharset = credentialsCharset;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "charset",
            "used",
            "to",
            "decode",
            "the",
            "base",
            "0",
            "encoded",
            "bytes",
            "of",
            "the",
            "basic",
            "authentication",
            "credentials"
        ]
    },
    {
        "id": 1919,
        "code": "\tpublic ServerWebExchange getExchange() {\n\t\treturn this.exchange;\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "exchange",
            "the",
            "exchange"
        ]
    },
    {
        "id": 1920,
        "code": "\tpublic WebFilterChain getChain() {\n\t\treturn this.chain;\n\t}",
        "summary_tokens": [
            "the",
            "filter",
            "chain",
            "the",
            "filter",
            "chain"
        ]
    },
    {
        "id": 1921,
        "code": "\tpublic void setSecurityContextRepository(ServerSecurityContextRepository securityContextRepository) {\n\t\tAssert.notNull(securityContextRepository, \"securityContextRepository cannot be null\");\n\t\tthis.securityContextRepository = securityContextRepository;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "repository",
            "for",
            "persisting",
            "the",
            "security",
            "context"
        ]
    },
    {
        "id": 1922,
        "code": "\tpublic void setAuthenticationSuccessHandler(ServerAuthenticationSuccessHandler authenticationSuccessHandler) {\n\t\tAssert.notNull(authenticationSuccessHandler, \"authenticationSuccessHandler cannot be null\");\n\t\tthis.authenticationSuccessHandler = authenticationSuccessHandler;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "authentication",
            "success",
            "handler"
        ]
    },
    {
        "id": 1923,
        "code": "\tpublic void setAuthenticationConverter(Function<ServerWebExchange, Mono<Authentication>> authenticationConverter) {\n\t\tAssert.notNull(authenticationConverter, \"authenticationConverter cannot be null\");\n\t\tsetServerAuthenticationConverter(authenticationConverter::apply);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "strategy",
            "used",
            "for",
            "converting",
            "from",
            "a",
            "server",
            "web",
            "exchange",
            "to",
            "an",
            "authentication",
            "used",
            "for",
            "authenticating",
            "with",
            "the",
            "provided",
            "reactive",
            "authentication",
            "manager"
        ]
    },
    {
        "id": 1924,
        "code": "\tpublic void setServerAuthenticationConverter(ServerAuthenticationConverter authenticationConverter) {\n\t\tAssert.notNull(authenticationConverter, \"authenticationConverter cannot be null\");\n\t\tthis.authenticationConverter = authenticationConverter;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "strategy",
            "used",
            "for",
            "converting",
            "from",
            "a",
            "server",
            "web",
            "exchange",
            "to",
            "an",
            "authentication",
            "used",
            "for",
            "authenticating",
            "with",
            "the",
            "provided",
            "reactive",
            "authentication",
            "manager"
        ]
    },
    {
        "id": 1925,
        "code": "\tpublic void setAuthenticationFailureHandler(ServerAuthenticationFailureHandler authenticationFailureHandler) {\n\t\tAssert.notNull(authenticationFailureHandler, \"authenticationFailureHandler cannot be null\");\n\t\tthis.authenticationFailureHandler = authenticationFailureHandler;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "failure",
            "handler",
            "used",
            "when",
            "authentication",
            "fails"
        ]
    },
    {
        "id": 1926,
        "code": "\tpublic void setRequiresAuthenticationMatcher(ServerWebExchangeMatcher requiresAuthenticationMatcher) {\n\t\tAssert.notNull(requiresAuthenticationMatcher, \"requiresAuthenticationMatcher cannot be null\");\n\t\tthis.requiresAuthenticationMatcher = requiresAuthenticationMatcher;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "matcher",
            "used",
            "to",
            "determine",
            "when",
            "creating",
            "an",
            "authentication",
            "from",
            "set",
            "server",
            "authentication",
            "converter",
            "server",
            "authentication",
            "converter",
            "to",
            "be",
            "authentication"
        ]
    },
    {
        "id": 1927,
        "code": "\tpublic void setRealm(String realm) {\n\t\tthis.headerValue = createHeaderValue(realm);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "realm",
            "to",
            "be",
            "used",
            "realm",
            "the",
            "realm"
        ]
    },
    {
        "id": 1928,
        "code": "\tpublic void setRequestCache(ServerRequestCache requestCache) {\n\t\tAssert.notNull(requestCache, \"requestCache cannot be null\");\n\t\tthis.requestCache = requestCache;\n\t}",
        "summary_tokens": [
            "the",
            "request",
            "cache",
            "to",
            "use",
            "to",
            "save",
            "the",
            "request",
            "before",
            "sending",
            "a",
            "redirect"
        ]
    },
    {
        "id": 1929,
        "code": "\tpublic void setRedirectStrategy(ServerRedirectStrategy redirectStrategy) {\n\t\tAssert.notNull(redirectStrategy, \"redirectStrategy cannot be null\");\n\t\tthis.redirectStrategy = redirectStrategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "redirect",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 1930,
        "code": "\tpublic void setRedirectStrategy(ServerRedirectStrategy redirectStrategy) {\n\t\tAssert.notNull(redirectStrategy, \"redirectStrategy cannot be null\");\n\t\tthis.redirectStrategy = redirectStrategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "redirect",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 1931,
        "code": "\tpublic void setRequestCache(ServerRequestCache requestCache) {\n\t\tAssert.notNull(requestCache, \"requestCache cannot be null\");\n\t\tthis.requestCache = requestCache;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "server",
            "request",
            "cache",
            "used",
            "to",
            "redirect",
            "to"
        ]
    },
    {
        "id": 1932,
        "code": "\tpublic void setLocation(URI location) {\n\t\tAssert.notNull(location, \"location cannot be null\");\n\t\tthis.location = location;\n\t}",
        "summary_tokens": [
            "where",
            "the",
            "user",
            "is",
            "redirected",
            "to",
            "upon",
            "authentication",
            "success",
            "location",
            "the",
            "location",
            "to",
            "redirect",
            "to"
        ]
    },
    {
        "id": 1933,
        "code": "\tpublic void setRedirectStrategy(ServerRedirectStrategy redirectStrategy) {\n\t\tAssert.notNull(redirectStrategy, \"redirectStrategy cannot be null\");\n\t\tthis.redirectStrategy = redirectStrategy;\n\t}",
        "summary_tokens": [
            "the",
            "redirect",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 1934,
        "code": "\tpublic void setDefaultAuthenticationManager(ReactiveAuthenticationManager defaultAuthenticationManager) {\n\t\tAssert.notNull(defaultAuthenticationManager, \"defaultAuthenticationManager cannot be null\");\n\t\tthis.defaultAuthenticationManager = defaultAuthenticationManager;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "default",
            "reactive",
            "authentication",
            "manager",
            "to",
            "use",
            "when",
            "a",
            "request",
            "does",
            "not",
            "match",
            "default",
            "authentication",
            "manager",
            "the",
            "default",
            "reactive",
            "authentication",
            "manager",
            "to",
            "use"
        ]
    },
    {
        "id": 1935,
        "code": "\tpublic static Builder builder() {\n\t\treturn new Builder();\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "builder",
            "for",
            "request",
            "matcher",
            "delegating",
            "authorization",
            "manager"
        ]
    },
    {
        "id": 1936,
        "code": "\tprotected Mono<Authentication> switchUser(WebFilterExchange webFilterExchange) {\n\t\treturn this.switchUserMatcher.matches(webFilterExchange.getExchange())\n\t\t\t\t.filter(ServerWebExchangeMatcher.MatchResult::isMatch)\n\t\t\t\t.flatMap((matchResult) -> ReactiveSecurityContextHolder.getContext())\n\t\t\t\t.map(SecurityContext::getAuthentication).flatMap((currentAuthentication) -> {\n\t\t\t\t\tString username = getUsername(webFilterExchange.getExchange());\n\t\t\t\t\treturn attemptSwitchUser(currentAuthentication, username);\n\t\t\t\t}).onErrorResume(AuthenticationException.class, (ex) -> onAuthenticationFailure(ex, webFilterExchange)\n\t\t\t\t\t\t.then(Mono.error(new SwitchUserAuthenticationException(ex))));\n\t}",
        "summary_tokens": [
            "attempt",
            "to",
            "switch",
            "to",
            "another",
            "user"
        ]
    },
    {
        "id": 1937,
        "code": "\tprotected Mono<Authentication> exitSwitchUser(WebFilterExchange webFilterExchange) {\n\t\treturn this.exitUserMatcher.matches(webFilterExchange.getExchange())\n\t\t\t\t.filter(ServerWebExchangeMatcher.MatchResult::isMatch)\n\t\t\t\t.flatMap((matchResult) -> ReactiveSecurityContextHolder.getContext()\n\t\t\t\t\t\t.map(SecurityContext::getAuthentication)\n\t\t\t\t\t\t.switchIfEmpty(Mono.error(this::noCurrentUserException)))\n\t\t\t\t.map(this::attemptExitUser);\n\t}",
        "summary_tokens": [
            "attempt",
            "to",
            "exit",
            "from",
            "an",
            "already",
            "switched",
            "user"
        ]
    },
    {
        "id": 1938,
        "code": "\tprotected String getUsername(ServerWebExchange exchange) {\n\t\treturn exchange.getRequest().getQueryParams().getFirst(SPRING_SECURITY_SWITCH_USERNAME_KEY);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "name",
            "of",
            "the",
            "target",
            "user"
        ]
    },
    {
        "id": 1939,
        "code": "\tprivate Optional<Authentication> extractSourceAuthentication(Authentication currentAuthentication) {\n\t\t\n\t\tfor (GrantedAuthority authority : currentAuthentication.getAuthorities()) {\n\t\t\tif (authority instanceof SwitchUserGrantedAuthority) {\n\t\t\t\tSwitchUserGrantedAuthority switchAuthority = (SwitchUserGrantedAuthority) authority;\n\t\t\t\treturn Optional.of(switchAuthority.getSource());\n\t\t\t}\n\t\t}\n\t\treturn Optional.empty();\n\t}",
        "summary_tokens": [
            "find",
            "the",
            "original",
            "code",
            "authentication",
            "code",
            "object",
            "from",
            "the",
            "current",
            "user",
            "s",
            "granted",
            "authorities"
        ]
    },
    {
        "id": 1940,
        "code": "\tpublic void setSecurityContextRepository(ServerSecurityContextRepository securityContextRepository) {\n\t\tAssert.notNull(securityContextRepository, \"securityContextRepository cannot be null\");\n\t\tthis.securityContextRepository = securityContextRepository;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "repository",
            "for",
            "persisting",
            "the",
            "security",
            "context"
        ]
    },
    {
        "id": 1941,
        "code": "\tpublic void setExitUserUrl(String exitUserUrl) {\n\t\tAssert.isTrue(UrlUtils.isValidRedirectUrl(exitUserUrl),\n\t\t\t\t\"exitUserUrl cannot be empty and must be a valid redirect URL\");\n\t\tthis.exitUserMatcher = createMatcher(exitUserUrl);\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "url",
            "to",
            "respond",
            "to",
            "exit",
            "user",
            "processing"
        ]
    },
    {
        "id": 1942,
        "code": "\tpublic void setExitUserMatcher(ServerWebExchangeMatcher exitUserMatcher) {\n\t\tAssert.notNull(exitUserMatcher, \"exitUserMatcher cannot be null\");\n\t\tthis.exitUserMatcher = exitUserMatcher;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "matcher",
            "to",
            "respond",
            "to",
            "exit",
            "user",
            "processing"
        ]
    },
    {
        "id": 1943,
        "code": "\tpublic void setSwitchUserUrl(String switchUserUrl) {\n\t\tAssert.isTrue(UrlUtils.isValidRedirectUrl(switchUserUrl),\n\t\t\t\t\"switchUserUrl cannot be empty and must be a valid redirect URL\");\n\t\tthis.switchUserMatcher = createMatcher(switchUserUrl);\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "url",
            "to",
            "respond",
            "to",
            "switch",
            "user",
            "processing"
        ]
    },
    {
        "id": 1944,
        "code": "\tpublic void setSwitchUserMatcher(ServerWebExchangeMatcher switchUserMatcher) {\n\t\tAssert.notNull(switchUserMatcher, \"switchUserMatcher cannot be null\");\n\t\tthis.switchUserMatcher = switchUserMatcher;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "matcher",
            "to",
            "respond",
            "to",
            "switch",
            "user",
            "processing"
        ]
    },
    {
        "id": 1945,
        "code": "\tpublic Mono<Void> onLogoutSuccess(WebFilterExchange exchange, Authentication authentication) {\n\t\treturn Mono.fromRunnable(() -> exchange.getExchange().getResponse().setStatusCode(this.httpStatusToReturn));\n\t}",
        "summary_tokens": [
            "implementation",
            "of",
            "server",
            "logout",
            "success",
            "handler",
            "on",
            "logout",
            "success",
            "web",
            "filter",
            "exchange",
            "authentication"
        ]
    },
    {
        "id": 1946,
        "code": "\tpublic void setLogoutSuccessHandler(ServerLogoutSuccessHandler logoutSuccessHandler) {\n\t\tAssert.notNull(logoutSuccessHandler, \"logoutSuccessHandler cannot be null\");\n\t\tthis.logoutSuccessHandler = logoutSuccessHandler;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "server",
            "logout",
            "success",
            "handler"
        ]
    },
    {
        "id": 1947,
        "code": "\tpublic void setLogoutHandler(ServerLogoutHandler logoutHandler) {\n\t\tAssert.notNull(logoutHandler, \"logoutHandler must not be null\");\n\t\tthis.logoutHandler = logoutHandler;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "server",
            "logout",
            "handler"
        ]
    },
    {
        "id": 1948,
        "code": "\tpublic void setLogoutSuccessUrl(URI logoutSuccessUrl) {\n\t\tAssert.notNull(logoutSuccessUrl, \"logoutSuccessUrl cannot be null\");\n\t\tthis.logoutSuccessUrl = logoutSuccessUrl;\n\t}",
        "summary_tokens": [
            "the",
            "url",
            "to",
            "redirect",
            "to",
            "after",
            "successfully",
            "logging",
            "out"
        ]
    },
    {
        "id": 1949,
        "code": "\tpublic void setSecurityContextRepository(ServerSecurityContextRepository securityContextRepository) {\n\t\tAssert.notNull(securityContextRepository, \"securityContextRepository cannot be null\");\n\t\tthis.securityContextRepository = securityContextRepository;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "server",
            "security",
            "context",
            "repository",
            "that",
            "should",
            "be",
            "used",
            "for",
            "logging",
            "out"
        ]
    },
    {
        "id": 1950,
        "code": "\tpublic void setAccessDeniedHandler(ServerAccessDeniedHandler accessDeniedHandler) {\n\t\tAssert.notNull(accessDeniedHandler, \"accessDeniedHandler cannot be null\");\n\t\tthis.accessDeniedHandler = accessDeniedHandler;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "access",
            "denied",
            "handler"
        ]
    },
    {
        "id": 1951,
        "code": "\tpublic void setAuthenticationEntryPoint(ServerAuthenticationEntryPoint authenticationEntryPoint) {\n\t\tAssert.notNull(authenticationEntryPoint, \"authenticationEntryPoint cannot be null\");\n\t\tthis.authenticationEntryPoint = authenticationEntryPoint;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "authentication",
            "entry",
            "point",
            "used",
            "when",
            "authentication",
            "is",
            "required",
            "authentication",
            "entry",
            "point",
            "the",
            "authentication",
            "entry",
            "point",
            "to",
            "use"
        ]
    },
    {
        "id": 1952,
        "code": "\tpublic void setAuthenticationTrustResolver(AuthenticationTrustResolver authenticationTrustResolver) {\n\t\tAssert.notNull(authenticationTrustResolver, \"authenticationTrustResolver must not be null\");\n\t\tthis.authenticationTrustResolver = authenticationTrustResolver;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "authentication",
            "trust",
            "resolver"
        ]
    },
    {
        "id": 1953,
        "code": "\tpublic static IpAddressReactiveAuthorizationManager hasIpAddress(String ipAddress) {\n\t\tAssert.notNull(ipAddress, \"This IP address is required; it must not be null\");\n\t\treturn new IpAddressReactiveAuthorizationManager(ipAddress);\n\t}",
        "summary_tokens": [
            "creates",
            "an",
            "instance",
            "of",
            "ip",
            "address",
            "reactive",
            "authorization",
            "manager",
            "with",
            "the",
            "provided",
            "ip",
            "address"
        ]
    },
    {
        "id": 1954,
        "code": "\tpublic void setDefaultAccessDeniedHandler(ServerAccessDeniedHandler accessDeniedHandler) {\n\t\tAssert.notNull(accessDeniedHandler, \"accessDeniedHandler cannot be null\");\n\t\tthis.defaultHandler = accessDeniedHandler;\n\t}",
        "summary_tokens": [
            "use",
            "this",
            "server",
            "access",
            "denied",
            "handler",
            "when",
            "no",
            "server",
            "web",
            "exchange",
            "matcher",
            "matches"
        ]
    },
    {
        "id": 1955,
        "code": "\tpublic void setSpringSecurityContextAttrName(String springSecurityContextAttrName) {\n\t\tAssert.hasText(springSecurityContextAttrName, \"springSecurityContextAttrName cannot be null or empty\");\n\t\tthis.springSecurityContextAttrName = springSecurityContextAttrName;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "session",
            "attribute",
            "name",
            "used",
            "to",
            "save",
            "and",
            "load",
            "the",
            "security",
            "context",
            "spring",
            "security",
            "context",
            "attr",
            "name",
            "the",
            "session",
            "attribute",
            "name",
            "to",
            "use",
            "to",
            "save",
            "and",
            "load",
            "the",
            "security",
            "context"
        ]
    },
    {
        "id": 1956,
        "code": "\tpublic void setCacheSecurityContext(boolean cacheSecurityContext) {\n\t\tthis.cacheSecurityContext = cacheSecurityContext;\n\t}",
        "summary_tokens": [
            "if",
            "set",
            "to",
            "true",
            "the",
            "result",
            "of",
            "load",
            "server",
            "web",
            "exchange",
            "will",
            "use",
            "mono",
            "cache",
            "to",
            "prevent",
            "multiple",
            "lookups"
        ]
    },
    {
        "id": 1957,
        "code": "\tpublic static CookieServerCsrfTokenRepository withHttpOnlyFalse() {\n\t\tCookieServerCsrfTokenRepository result = new CookieServerCsrfTokenRepository();\n\t\tresult.setCookieHttpOnly(false);\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "conveniently",
            "create",
            "an",
            "instance",
            "that",
            "has",
            "set",
            "cookie",
            "http",
            "only",
            "boolean",
            "set",
            "to",
            "false"
        ]
    },
    {
        "id": 1958,
        "code": "\tpublic void setCookieHttpOnly(boolean cookieHttpOnly) {\n\t\tthis.cookieHttpOnly = cookieHttpOnly;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "http",
            "only",
            "attribute",
            "on",
            "the",
            "cookie",
            "containing",
            "the",
            "csrf",
            "token",
            "cookie",
            "http",
            "only",
            "true",
            "to",
            "mark",
            "the",
            "cookie",
            "as",
            "http",
            "only"
        ]
    },
    {
        "id": 1959,
        "code": "\tpublic void setCookieName(String cookieName) {\n\t\tAssert.hasLength(cookieName, \"cookieName can't be null\");\n\t\tthis.cookieName = cookieName;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "cookie",
            "name",
            "cookie",
            "name",
            "the",
            "cookie",
            "name"
        ]
    },
    {
        "id": 1960,
        "code": "\tpublic void setParameterName(String parameterName) {\n\t\tAssert.hasLength(parameterName, \"parameterName can't be null\");\n\t\tthis.parameterName = parameterName;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "parameter",
            "name",
            "parameter",
            "name",
            "the",
            "parameter",
            "name"
        ]
    },
    {
        "id": 1961,
        "code": "\tpublic void setHeaderName(String headerName) {\n\t\tAssert.hasLength(headerName, \"headerName can't be null\");\n\t\tthis.headerName = headerName;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "header",
            "name",
            "header",
            "name",
            "the",
            "header",
            "name"
        ]
    },
    {
        "id": 1962,
        "code": "\tpublic void setCookiePath(String cookiePath) {\n\t\tthis.cookiePath = cookiePath;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "cookie",
            "path",
            "cookie",
            "path",
            "the",
            "cookie",
            "path"
        ]
    },
    {
        "id": 1963,
        "code": "\tpublic void setCookieDomain(String cookieDomain) {\n\t\tthis.cookieDomain = cookieDomain;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "cookie",
            "domain",
            "cookie",
            "domain",
            "the",
            "cookie",
            "domain"
        ]
    },
    {
        "id": 1964,
        "code": "\tpublic void setSecure(boolean secure) {\n\t\tthis.secure = secure;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "cookie",
            "secure",
            "flag"
        ]
    },
    {
        "id": 1965,
        "code": "\tpublic void setCookieMaxAge(int cookieMaxAge) {\n\t\tAssert.isTrue(cookieMaxAge != 0, \"cookieMaxAge cannot be zero\");\n\t\tthis.cookieMaxAge = cookieMaxAge;\n\t}",
        "summary_tokens": [
            "sets",
            "maximum",
            "age",
            "in",
            "seconds",
            "for",
            "the",
            "cookie",
            "that",
            "the",
            "expected",
            "csrf",
            "token",
            "is",
            "saved",
            "to",
            "and",
            "read",
            "from"
        ]
    },
    {
        "id": 1966,
        "code": "\tpublic Mono<Void> logout(WebFilterExchange exchange, Authentication authentication) {\n\t\treturn this.csrfTokenRepository.saveToken(exchange.getExchange(), null);\n\t}",
        "summary_tokens": [
            "clears",
            "the",
            "csrf",
            "token",
            "exchange",
            "the",
            "exchange",
            "authentication",
            "the",
            "authentication",
            "a",
            "completion",
            "notification",
            "success",
            "or",
            "error"
        ]
    },
    {
        "id": 1967,
        "code": "\tpublic void setTokenFromMultipartDataEnabled(boolean tokenFromMultipartDataEnabled) {\n\t\tthis.isTokenFromMultipartDataEnabled = tokenFromMultipartDataEnabled;\n\t}",
        "summary_tokens": [
            "specifies",
            "if",
            "the",
            "csrf",
            "web",
            "filter",
            "should",
            "try",
            "to",
            "resolve",
            "the",
            "actual",
            "csrf",
            "token",
            "from",
            "the",
            "body",
            "of",
            "multipart",
            "data",
            "requests"
        ]
    },
    {
        "id": 1968,
        "code": "\tprivate static boolean equalsConstantTime(String expected, String actual) {\n\t\tif (expected == actual) {\n\t\t\treturn true;\n\t\t}\n\t\tif (expected == null || actual == null) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tbyte[] expectedBytes = Utf8.encode(expected);\n\t\tbyte[] actualBytes = Utf8.encode(actual);\n\t\treturn MessageDigest.isEqual(expectedBytes, actualBytes);\n\t}",
        "summary_tokens": [
            "constant",
            "time",
            "comparison",
            "to",
            "prevent",
            "against",
            "timing",
            "attacks"
        ]
    },
    {
        "id": 1969,
        "code": "\tpublic void setParameterName(String parameterName) {\n\t\tAssert.hasLength(parameterName, \"parameterName cannot be null or empty\");\n\t\tthis.parameterName = parameterName;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "http",
            "servlet",
            "request",
            "parameter",
            "name",
            "that",
            "the",
            "csrf",
            "token",
            "is",
            "expected",
            "to",
            "appear",
            "on",
            "parameter",
            "name",
            "the",
            "new",
            "parameter",
            "name",
            "to",
            "use"
        ]
    },
    {
        "id": 1970,
        "code": "\tpublic void setHeaderName(String headerName) {\n\t\tAssert.hasLength(headerName, \"headerName cannot be null or empty\");\n\t\tthis.headerName = headerName;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "header",
            "name",
            "that",
            "the",
            "csrf",
            "token",
            "is",
            "expected",
            "to",
            "appear",
            "on",
            "and",
            "the",
            "header",
            "that",
            "the",
            "response",
            "will",
            "contain",
            "the",
            "csrf",
            "token"
        ]
    },
    {
        "id": 1971,
        "code": "\tpublic void setSessionAttributeName(String sessionAttributeName) {\n\t\tAssert.hasLength(sessionAttributeName, \"sessionAttributename cannot be null or empty\");\n\t\tthis.sessionAttributeName = sessionAttributeName;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "http",
            "session",
            "attribute",
            "name",
            "that",
            "the",
            "csrf",
            "token",
            "is",
            "stored",
            "in",
            "session",
            "attribute",
            "name",
            "the",
            "new",
            "attribute",
            "name",
            "to",
            "use"
        ]
    },
    {
        "id": 1972,
        "code": "\tpublic void setPolicyDirectives(String policyDirectives) {\n\t\tAssert.hasLength(policyDirectives, \"policyDirectives must not be null or empty\");\n\t\tthis.policyDirectives = policyDirectives;\n\t\tthis.delegate = createDelegate();\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "policy",
            "directive",
            "s",
            "to",
            "be",
            "used",
            "in",
            "the",
            "response",
            "header"
        ]
    },
    {
        "id": 1973,
        "code": "\tpublic void setReportOnly(boolean reportOnly) {\n\t\tthis.reportOnly = reportOnly;\n\t\tthis.delegate = createDelegate();\n\t}",
        "summary_tokens": [
            "set",
            "whether",
            "to",
            "include",
            "the",
            "content",
            "security",
            "policy",
            "report",
            "only",
            "header",
            "in",
            "the",
            "response"
        ]
    },
    {
        "id": 1974,
        "code": "\tpublic void setPolicy(CrossOriginEmbedderPolicy embedderPolicy) {\n\t\tAssert.notNull(embedderPolicy, \"embedderPolicy cannot be null\");\n\t\tthis.delegate = createDelegate(embedderPolicy);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "cross",
            "origin",
            "embedder",
            "policy",
            "value",
            "to",
            "be",
            "used",
            "in",
            "the",
            "cross",
            "origin",
            "embedder",
            "policy",
            "header",
            "embedder",
            "policy",
            "the",
            "cross",
            "origin",
            "embedder",
            "policy",
            "to",
            "use"
        ]
    },
    {
        "id": 1975,
        "code": "\tpublic void setPolicy(CrossOriginOpenerPolicy openerPolicy) {\n\t\tAssert.notNull(openerPolicy, \"openerPolicy cannot be null\");\n\t\tthis.delegate = createDelegate(openerPolicy);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "cross",
            "origin",
            "opener",
            "policy",
            "value",
            "to",
            "be",
            "used",
            "in",
            "the",
            "cross",
            "origin",
            "opener",
            "policy",
            "header",
            "opener",
            "policy",
            "the",
            "cross",
            "origin",
            "opener",
            "policy",
            "to",
            "use"
        ]
    },
    {
        "id": 1976,
        "code": "\tpublic void setPolicy(CrossOriginResourcePolicy resourcePolicy) {\n\t\tAssert.notNull(resourcePolicy, \"resourcePolicy cannot be null\");\n\t\tthis.delegate = createDelegate(resourcePolicy);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "cross",
            "origin",
            "resource",
            "policy",
            "value",
            "to",
            "be",
            "used",
            "in",
            "the",
            "cross",
            "origin",
            "embedder",
            "policy",
            "header",
            "resource",
            "policy",
            "the",
            "cross",
            "origin",
            "resource",
            "policy",
            "to",
            "use"
        ]
    },
    {
        "id": 1977,
        "code": "\tpublic void setPolicyDirectives(String policyDirectives) {\n\t\tAssert.hasLength(policyDirectives, \"policyDirectives must not be null or empty\");\n\t\tthis.delegate = createDelegate(policyDirectives);\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "policy",
            "directive",
            "s",
            "to",
            "be",
            "used",
            "in",
            "the",
            "response",
            "header"
        ]
    },
    {
        "id": 1978,
        "code": "\tpublic void setPolicy(String policy) {\n\t\tAssert.notNull(policy, \"policy must not be null\");\n\t\tthis.delegate = createDelegate(policy);\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "policy",
            "to",
            "be",
            "used",
            "in",
            "the",
            "response",
            "header"
        ]
    },
    {
        "id": 1979,
        "code": "\tpublic void setPolicy(ReferrerPolicy policy) {\n\t\tAssert.notNull(policy, \"policy must not be null\");\n\t\tthis.delegate = createDelegate(policy);\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "policy",
            "to",
            "be",
            "used",
            "in",
            "the",
            "response",
            "header"
        ]
    },
    {
        "id": 1980,
        "code": "\tpublic void setIncludeSubDomains(boolean includeSubDomains) {\n\t\tthis.subdomain = includeSubDomains ? \" ; includeSubDomains\" : \"\";\n\t\tupdateDelegate();\n\t}",
        "summary_tokens": [
            "sets",
            "if",
            "subdomains",
            "should",
            "be",
            "included"
        ]
    },
    {
        "id": 1981,
        "code": "\tpublic void setPreload(boolean preload) {\n\t\tthis.preload = preload ? \" ; preload\" : \"\";\n\t\tupdateDelegate();\n\t}",
        "summary_tokens": [
            "p",
            "sets",
            "if",
            "preload",
            "should",
            "be",
            "included"
        ]
    },
    {
        "id": 1982,
        "code": "\tpublic void setMaxAge(Duration maxAge) {\n\t\tthis.maxAge = \"max-age=\" + maxAge.getSeconds();\n\t\tupdateDelegate();\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "max",
            "age",
            "of",
            "the",
            "header"
        ]
    },
    {
        "id": 1983,
        "code": "\tpublic void setMode(Mode mode) {\n\t\tthis.delegate = createDelegate(mode);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "x",
            "frame",
            "options",
            "mode"
        ]
    },
    {
        "id": 1984,
        "code": "\tpublic void setEnabled(boolean enabled) {\n\t\tif (!enabled) {\n\t\t\tsetBlock(false);\n\t\t}\n\t\tthis.enabled = enabled;\n\t\tupdateDelegate();\n\t}",
        "summary_tokens": [
            "if",
            "true",
            "will",
            "contain",
            "a",
            "value",
            "of",
            "0"
        ]
    },
    {
        "id": 1985,
        "code": "\tpublic void setBlock(boolean block) {\n\t\tAssert.isTrue(this.enabled || !block, \"Cannot set block to true with enabled false\");\n\t\tthis.block = block;\n\t\tupdateDelegate();\n\t}",
        "summary_tokens": [
            "if",
            "false",
            "will",
            "not",
            "specify",
            "the",
            "mode",
            "as",
            "blocked"
        ]
    },
    {
        "id": 1986,
        "code": "\tpublic void setSaveRequestMatcher(ServerWebExchangeMatcher saveRequestMatcher) {\n\t\tAssert.notNull(saveRequestMatcher, \"saveRequestMatcher cannot be null\");\n\t\tthis.saveRequestMatcher = saveRequestMatcher;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "matcher",
            "to",
            "determine",
            "if",
            "the",
            "request",
            "should",
            "be",
            "saved"
        ]
    },
    {
        "id": 1987,
        "code": "\tpublic void setSaveRequestMatcher(ServerWebExchangeMatcher saveRequestMatcher) {\n\t\tAssert.notNull(saveRequestMatcher, \"saveRequestMatcher cannot be null\");\n\t\tthis.saveRequestMatcher = saveRequestMatcher;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "matcher",
            "to",
            "determine",
            "if",
            "the",
            "request",
            "should",
            "be",
            "saved"
        ]
    },
    {
        "id": 1988,
        "code": "\tpublic void setMatchingRequestParameterName(String matchingRequestParameterName) {\n\t\tthis.matchingRequestParameterName = matchingRequestParameterName;\n\t}",
        "summary_tokens": [
            "specify",
            "the",
            "name",
            "of",
            "a",
            "query",
            "parameter",
            "that",
            "is",
            "added",
            "to",
            "the",
            "url",
            "in",
            "get",
            "redirect",
            "uri",
            "server",
            "web",
            "exchange",
            "and",
            "is",
            "required",
            "for",
            "remove",
            "matching",
            "request",
            "server",
            "web",
            "exchange",
            "to",
            "look",
            "up",
            "the",
            "server",
            "http",
            "request"
        ]
    },
    {
        "id": 1989,
        "code": "\tpublic void setPortMapper(PortMapper portMapper) {\n\t\tAssert.notNull(portMapper, \"portMapper cannot be null\");\n\t\tthis.portMapper = portMapper;\n\t}",
        "summary_tokens": [
            "use",
            "this",
            "port",
            "mapper",
            "for",
            "mapping",
            "custom",
            "ports",
            "port",
            "mapper",
            "the",
            "port",
            "mapper",
            "to",
            "use"
        ]
    },
    {
        "id": 1990,
        "code": "\tpublic void setRequiresHttpsRedirectMatcher(ServerWebExchangeMatcher requiresHttpsRedirectMatcher) {\n\t\tAssert.notNull(requiresHttpsRedirectMatcher, \"requiresHttpsRedirectMatcher cannot be null\");\n\t\tthis.requiresHttpsRedirectMatcher = requiresHttpsRedirectMatcher;\n\t}",
        "summary_tokens": [
            "use",
            "this",
            "server",
            "web",
            "exchange",
            "matcher",
            "to",
            "narrow",
            "which",
            "requests",
            "are",
            "redirected",
            "to",
            "https"
        ]
    },
    {
        "id": 1991,
        "code": "\tpublic void setUseEquals(boolean useEquals) {\n\t\tthis.useEquals = useEquals;\n\t}",
        "summary_tokens": [
            "if",
            "set",
            "to",
            "true",
            "matches",
            "on",
            "exact",
            "media",
            "type",
            "else",
            "uses",
            "media",
            "type",
            "is",
            "compatible",
            "with",
            "media",
            "type"
        ]
    },
    {
        "id": 1992,
        "code": "\tpublic void setIgnoredMediaTypes(Set<MediaType> ignoredMediaTypes) {\n\t\tthis.ignoredMediaTypes = ignoredMediaTypes;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "media",
            "type",
            "to",
            "ignore",
            "from",
            "the",
            "content",
            "negotiation",
            "strategy"
        ]
    },
    {
        "id": 1993,
        "code": "\tpublic static ServerWebExchangeMatcher pathMatchers(String... patterns) {\n\t\treturn pathMatchers(null, patterns);\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "matcher",
            "that",
            "matches",
            "on",
            "any",
            "of",
            "the",
            "provided",
            "patterns"
        ]
    },
    {
        "id": 1994,
        "code": "\tpublic static ServerWebExchangeMatcher matchers(ServerWebExchangeMatcher... matchers) {\n\t\treturn new OrServerWebExchangeMatcher(matchers);\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "matcher",
            "that",
            "will",
            "match",
            "on",
            "any",
            "of",
            "the",
            "provided",
            "matchers",
            "matchers",
            "the",
            "matchers",
            "to",
            "match",
            "on",
            "the",
            "matcher",
            "to",
            "use"
        ]
    },
    {
        "id": 1995,
        "code": "\tpublic static ServerWebExchangeMatcher anyExchange() {\n\t\t\n\t\t\n\t\t\n\t\treturn new ServerWebExchangeMatcher() {\n\n\t\t\t@Override\n\t\t\tpublic Mono<MatchResult> matches(ServerWebExchange exchange) {\n\t\t\t\treturn ServerWebExchangeMatcher.MatchResult.match();\n\t\t\t}\n\n\t\t};\n\t}",
        "summary_tokens": [
            "matches",
            "any",
            "exchange",
            "the",
            "matcher",
            "to",
            "use"
        ]
    },
    {
        "id": 1996,
        "code": "\tpublic void setMethod(HttpMethod method) {\n\t\tthis.method = method;\n\t}",
        "summary_tokens": [
            "method",
            "the",
            "method",
            "to",
            "set"
        ]
    },
    {
        "id": 1997,
        "code": "\tpublic void setServletPath(String servletPath) {\n\t\tthis.servletPath = servletPath;\n\t}",
        "summary_tokens": [
            "the",
            "servlet",
            "path",
            "to",
            "match",
            "on"
        ]
    },
    {
        "id": 1998,
        "code": "\tvoid setAuthenticationEntryPoint(AuthenticationEntryPoint authenticationEntryPoint) {\n\t\tthis.authenticationEntryPoint = authenticationEntryPoint;\n\t}",
        "summary_tokens": [
            "p",
            "sets",
            "the",
            "authentication",
            "entry",
            "point",
            "used",
            "when",
            "integrating",
            "http",
            "servlet",
            "request",
            "with",
            "servlet",
            "0",
            "apis"
        ]
    },
    {
        "id": 1999,
        "code": "\tvoid setAuthenticationManager(AuthenticationManager authenticationManager) {\n\t\tthis.authenticationManager = authenticationManager;\n\t}",
        "summary_tokens": [
            "p",
            "sets",
            "the",
            "authentication",
            "manager",
            "used",
            "when",
            "integrating",
            "http",
            "servlet",
            "request",
            "with",
            "servlet",
            "0",
            "apis"
        ]
    },
    {
        "id": 2000,
        "code": "\tvoid setLogoutHandlers(List<LogoutHandler> logoutHandlers) {\n\t\tthis.logoutHandlers = logoutHandlers;\n\t}",
        "summary_tokens": [
            "p",
            "sets",
            "the",
            "logout",
            "handler",
            "s",
            "used",
            "when",
            "integrating",
            "with",
            "http",
            "servlet",
            "request",
            "with",
            "servlet",
            "0",
            "apis"
        ]
    },
    {
        "id": 2001,
        "code": "\tvoid setTrustResolver(AuthenticationTrustResolver trustResolver) {\n\t\tAssert.notNull(trustResolver, \"trustResolver cannot be null\");\n\t\tthis.trustResolver = trustResolver;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "authentication",
            "trust",
            "resolver",
            "to",
            "be",
            "used"
        ]
    },
    {
        "id": 2002,
        "code": "\tpublic void setSecurityContextRepository(SecurityContextRepository securityContextRepository) {\n\t\tAssert.notNull(securityContextRepository, \"securityContextRepository cannot be null\");\n\t\tthis.securityContextRepository = securityContextRepository;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "repository",
            "to",
            "use"
        ]
    },
    {
        "id": 2003,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n\t\tAssert.notNull(securityContextHolderStrategy, \"securityContextHolderStrategy cannot be null\");\n\t\tthis.securityContextHolderStrategy = securityContextHolderStrategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 2004,
        "code": "\tpublic void setAuthenticationEntryPoint(AuthenticationEntryPoint authenticationEntryPoint) {\n\t\tthis.authenticationEntryPoint = authenticationEntryPoint;\n\t}",
        "summary_tokens": [
            "p",
            "sets",
            "the",
            "authentication",
            "entry",
            "point",
            "used",
            "when",
            "integrating",
            "http",
            "servlet",
            "request",
            "with",
            "servlet",
            "0",
            "apis"
        ]
    },
    {
        "id": 2005,
        "code": "\tpublic void setAuthenticationManager(AuthenticationManager authenticationManager) {\n\t\tthis.authenticationManager = authenticationManager;\n\t}",
        "summary_tokens": [
            "p",
            "sets",
            "the",
            "authentication",
            "manager",
            "used",
            "when",
            "integrating",
            "http",
            "servlet",
            "request",
            "with",
            "servlet",
            "0",
            "apis"
        ]
    },
    {
        "id": 2006,
        "code": "\tpublic void setLogoutHandlers(List<LogoutHandler> logoutHandlers) {\n\t\tthis.logoutHandlers = logoutHandlers;\n\t}",
        "summary_tokens": [
            "p",
            "sets",
            "the",
            "logout",
            "handler",
            "s",
            "used",
            "when",
            "integrating",
            "with",
            "http",
            "servlet",
            "request",
            "with",
            "servlet",
            "0",
            "apis"
        ]
    },
    {
        "id": 2007,
        "code": "\tpublic void setTrustResolver(AuthenticationTrustResolver trustResolver) {\n\t\tAssert.notNull(trustResolver, \"trustResolver cannot be null\");\n\t\tthis.trustResolver = trustResolver;\n\t\tupdateFactory();\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "authentication",
            "trust",
            "resolver",
            "to",
            "be",
            "used"
        ]
    },
    {
        "id": 2008,
        "code": "\tprivate Authentication getAuthentication() {\n\t\tAuthentication auth = this.securityContextHolderStrategy.getContext().getAuthentication();\n\t\treturn (!this.trustResolver.isAnonymous(auth)) ? auth : null;\n\t}",
        "summary_tokens": [
            "obtain",
            "the",
            "current",
            "active",
            "code",
            "authentication",
            "code",
            "the",
            "authentication",
            "object",
            "or",
            "code",
            "null",
            "code"
        ]
    },
    {
        "id": 2009,
        "code": "\tpublic String getRemoteUser() {\n\t\tAuthentication auth = getAuthentication();\n\t\tif ((auth == null) || (auth.getPrincipal() == null)) {\n\t\t\treturn null;\n\t\t}\n\t\tif (auth.getPrincipal() instanceof UserDetails) {\n\t\t\treturn ((UserDetails) auth.getPrincipal()).getUsername();\n\t\t}\n\t\tif (auth instanceof AbstractAuthenticationToken) {\n\t\t\treturn auth.getName();\n\t\t}\n\t\treturn auth.getPrincipal().toString();\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "principal",
            "s",
            "name",
            "as",
            "obtained",
            "from",
            "the",
            "code",
            "security",
            "context",
            "holder",
            "code"
        ]
    },
    {
        "id": 2010,
        "code": "\tpublic Principal getUserPrincipal() {\n\t\tAuthentication auth = getAuthentication();\n\t\tif ((auth == null) || (auth.getPrincipal() == null)) {\n\t\t\treturn null;\n\t\t}\n\t\treturn auth;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "code",
            "authentication",
            "code",
            "which",
            "is",
            "a",
            "subclass",
            "of",
            "code",
            "principal",
            "code",
            "or",
            "code",
            "null",
            "code",
            "if",
            "unavailable"
        ]
    },
    {
        "id": 2011,
        "code": "\tpublic boolean isUserInRole(String role) {\n\t\treturn isGranted(role);\n\t}",
        "summary_tokens": [
            "simple",
            "searches",
            "for",
            "an",
            "exactly",
            "matching",
            "org"
        ]
    },
    {
        "id": 2012,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n\t\tAssert.notNull(securityContextHolderStrategy, \"securityContextHolderStrategy cannot be null\");\n\t\tthis.securityContextHolderStrategy = securityContextHolderStrategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 2013,
        "code": "\tprotected String determineExpiredUrl(HttpServletRequest request, SessionInformation info) {\n\t\treturn this.expiredUrl;\n\t}",
        "summary_tokens": [
            "determine",
            "the",
            "url",
            "for",
            "expiration",
            "request",
            "the",
            "http",
            "servlet",
            "request",
            "info",
            "the",
            "session",
            "information",
            "the",
            "url",
            "for",
            "expiration",
            "use",
            "concurrent",
            "session",
            "filter",
            "session",
            "registry",
            "session",
            "information",
            "expired",
            "strategy",
            "instead"
        ]
    },
    {
        "id": 2014,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n\t\tAssert.notNull(securityContextHolderStrategy, \"securityContextHolderStrategy cannot be null\");\n\t\tthis.securityContextHolderStrategy = securityContextHolderStrategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 2015,
        "code": "\tpublic void setLogoutHandlers(List<LogoutHandler> handlers) {\n\t\tthis.handlers = new CompositeLogoutHandler(handlers);\n\t}",
        "summary_tokens": [
            "set",
            "list",
            "of",
            "logout",
            "handler",
            "handlers",
            "list",
            "of",
            "logout",
            "handler",
            "0"
        ]
    },
    {
        "id": 2016,
        "code": "\tpublic void setRedirectStrategy(RedirectStrategy redirectStrategy) {\n\t\tthis.redirectStrategy = redirectStrategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "redirect",
            "strategy",
            "used",
            "with",
            "concurrent",
            "session",
            "filter",
            "session",
            "registry",
            "string",
            "redirect",
            "strategy",
            "the",
            "redirect",
            "strategy",
            "to",
            "use",
            "use",
            "concurrent",
            "session",
            "filter",
            "session",
            "registry",
            "session",
            "information",
            "expired",
            "strategy",
            "instead"
        ]
    },
    {
        "id": 2017,
        "code": "\tpublic void sessionCreated(HttpSessionEvent event) {\n\t\textracted(event.getSession(), new HttpSessionCreatedEvent(event.getSession()));\n\t}",
        "summary_tokens": [
            "handles",
            "the",
            "http",
            "session",
            "event",
            "by",
            "publishing",
            "a",
            "http",
            "session",
            "created",
            "event",
            "to",
            "the",
            "application",
            "app",
            "context"
        ]
    },
    {
        "id": 2018,
        "code": "\tpublic void sessionDestroyed(HttpSessionEvent event) {\n\t\textracted(event.getSession(), new HttpSessionDestroyedEvent(event.getSession()));\n\t}",
        "summary_tokens": [
            "handles",
            "the",
            "http",
            "session",
            "event",
            "by",
            "publishing",
            "a",
            "http",
            "session",
            "destroyed",
            "event",
            "to",
            "the",
            "application",
            "app",
            "context"
        ]
    },
    {
        "id": 2019,
        "code": "\tpublic void setCreateNewSession(boolean createNewSession) {\n\t\tthis.createNewSession = createNewSession;\n\t}",
        "summary_tokens": [
            "determines",
            "whether",
            "a",
            "new",
            "session",
            "should",
            "be",
            "created",
            "before",
            "redirecting",
            "to",
            "avoid",
            "possible",
            "looping",
            "issues",
            "where",
            "the",
            "same",
            "session",
            "id",
            "is",
            "sent",
            "with",
            "the",
            "redirected",
            "request"
        ]
    },
    {
        "id": 2020,
        "code": "\tpublic void setInvalidSessionStrategy(InvalidSessionStrategy invalidSessionStrategy) {\n\t\tthis.invalidSessionStrategy = invalidSessionStrategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "strategy",
            "which",
            "will",
            "be",
            "invoked",
            "instead",
            "of",
            "allowing",
            "the",
            "filter",
            "chain",
            "to",
            "proceed",
            "if",
            "the",
            "user",
            "agent",
            "requests",
            "an",
            "invalid",
            "session",
            "id"
        ]
    },
    {
        "id": 2021,
        "code": "\tpublic void setAuthenticationFailureHandler(AuthenticationFailureHandler failureHandler) {\n\t\tAssert.notNull(failureHandler, \"failureHandler cannot be null\");\n\t\tthis.failureHandler = failureHandler;\n\t}",
        "summary_tokens": [
            "the",
            "handler",
            "which",
            "will",
            "be",
            "invoked",
            "if",
            "the",
            "tt",
            "authenticated",
            "session",
            "strategy",
            "tt",
            "raises",
            "a",
            "tt",
            "session",
            "authentication",
            "exception",
            "tt",
            "indicating",
            "that",
            "the",
            "user",
            "is",
            "not",
            "allowed",
            "to",
            "be",
            "authenticated",
            "for",
            "this",
            "session",
            "typically",
            "because",
            "they",
            "already",
            "have",
            "too",
            "many",
            "sessions",
            "open"
        ]
    },
    {
        "id": 2022,
        "code": "\tpublic void setTrustResolver(AuthenticationTrustResolver trustResolver) {\n\t\tAssert.notNull(trustResolver, \"trustResolver cannot be null\");\n\t\tthis.trustResolver = trustResolver;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "authentication",
            "trust",
            "resolver",
            "to",
            "be",
            "used"
        ]
    },
    {
        "id": 2023,
        "code": "\tpublic void setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy) {\n\t\tAssert.notNull(securityContextHolderStrategy, \"securityContextHolderStrategy cannot be null\");\n\t\tthis.securityContextHolderStrategy = securityContextHolderStrategy;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "security",
            "context",
            "holder",
            "strategy",
            "to",
            "use"
        ]
    },
    {
        "id": 2024,
        "code": "\tpublic void setCreateNewSession(boolean createNewSession) {\n\t\tthis.createNewSession = createNewSession;\n\t}",
        "summary_tokens": [
            "determines",
            "whether",
            "a",
            "new",
            "session",
            "should",
            "be",
            "created",
            "before",
            "redirecting",
            "to",
            "avoid",
            "possible",
            "looping",
            "issues",
            "where",
            "the",
            "same",
            "session",
            "id",
            "is",
            "sent",
            "with",
            "the",
            "redirected",
            "request"
        ]
    },
    {
        "id": 2025,
        "code": "\tprotected void disableOnResponseCommitted() {\n\t\tthis.disableOnCommitted = true;\n\t}",
        "summary_tokens": [
            "invoke",
            "this",
            "method",
            "to",
            "disable",
            "invoking",
            "on",
            "committed",
            "response",
            "wrapper",
            "on",
            "response",
            "committed",
            "when",
            "the",
            "jakarta"
        ]
    },
    {
        "id": 2026,
        "code": "\tprotected boolean isDisableOnResponseCommitted() {\n\t\treturn this.disableOnCommitted;\n\t}",
        "summary_tokens": [
            "returns",
            "true",
            "if",
            "on",
            "response",
            "committed",
            "will",
            "be",
            "invoked",
            "when",
            "the",
            "response",
            "is",
            "committed",
            "else",
            "false"
        ]
    },
    {
        "id": 2027,
        "code": "\tpublic final void sendError(int sc, String msg) throws IOException {\n\t\tdoOnResponseCommitted();\n\t\tsuper.sendError(sc, msg);\n\t}",
        "summary_tokens": [
            "makes",
            "sure",
            "on",
            "committed",
            "response",
            "wrapper",
            "on",
            "response",
            "committed",
            "is",
            "invoked",
            "before",
            "calling",
            "the",
            "superclass",
            "code",
            "send",
            "error",
            "code"
        ]
    },
    {
        "id": 2028,
        "code": "\tpublic final void sendRedirect(String location) throws IOException {\n\t\tdoOnResponseCommitted();\n\t\tsuper.sendRedirect(location);\n\t}",
        "summary_tokens": [
            "makes",
            "sure",
            "on",
            "committed",
            "response",
            "wrapper",
            "on",
            "response",
            "committed",
            "is",
            "invoked",
            "before",
            "calling",
            "the",
            "superclass",
            "code",
            "send",
            "redirect",
            "code"
        ]
    },
    {
        "id": 2029,
        "code": "\tpublic ServletOutputStream getOutputStream() throws IOException {\n\t\treturn new SaveContextServletOutputStream(super.getOutputStream());\n\t}",
        "summary_tokens": [
            "makes",
            "sure",
            "on",
            "committed",
            "response",
            "wrapper",
            "on",
            "response",
            "committed",
            "is",
            "invoked",
            "before",
            "calling",
            "the",
            "calling",
            "code",
            "get",
            "output",
            "stream"
        ]
    },
    {
        "id": 2030,
        "code": "\tpublic PrintWriter getWriter() throws IOException {\n\t\treturn new SaveContextPrintWriter(super.getWriter());\n\t}",
        "summary_tokens": [
            "makes",
            "sure",
            "on",
            "committed",
            "response",
            "wrapper",
            "on",
            "response",
            "committed",
            "is",
            "invoked",
            "before",
            "calling",
            "the",
            "code",
            "get",
            "writer"
        ]
    },
    {
        "id": 2031,
        "code": "\tpublic void flushBuffer() throws IOException {\n\t\tdoOnResponseCommitted();\n\t\tsuper.flushBuffer();\n\t}",
        "summary_tokens": [
            "makes",
            "sure",
            "on",
            "committed",
            "response",
            "wrapper",
            "on",
            "response",
            "committed",
            "is",
            "invoked",
            "before",
            "calling",
            "the",
            "superclass",
            "code",
            "flush",
            "buffer",
            "code"
        ]
    },
    {
        "id": 2032,
        "code": "\tprivate void checkContentLength(long contentLengthToWrite) {\n\t\tthis.contentWritten += contentLengthToWrite;\n\t\tboolean isBodyFullyWritten = this.contentLength > 0 && this.contentWritten >= this.contentLength;\n\t\tint bufferSize = getBufferSize();\n\t\tboolean requiresFlush = bufferSize > 0 && this.contentWritten >= bufferSize;\n\t\tif (isBodyFullyWritten || requiresFlush) {\n\t\t\tdoOnResponseCommitted();\n\t\t}\n\t}",
        "summary_tokens": [
            "adds",
            "the",
            "content",
            "length",
            "to",
            "write",
            "to",
            "the",
            "total",
            "content",
            "written",
            "size",
            "and",
            "checks",
            "to",
            "see",
            "if",
            "the",
            "response",
            "should",
            "be",
            "written"
        ]
    },
    {
        "id": 2033,
        "code": "\tprivate void doOnResponseCommitted() {\n\t\tif (!this.disableOnCommitted) {\n\t\t\tonResponseCommitted();\n\t\t\tdisableOnResponseCommitted();\n\t\t}\n\t}",
        "summary_tokens": [
            "calls",
            "code",
            "on",
            "response",
            "commmitted",
            "code",
            "with",
            "the",
            "current",
            "contents",
            "as",
            "long",
            "as",
            "disable",
            "on",
            "response",
            "committed",
            "was",
            "not",
            "invoked"
        ]
    },
    {
        "id": 2034,
        "code": "\tprotected final void registerExtractor(Class<? extends Throwable> throwableType,\n\t\t\tThrowableCauseExtractor extractor) {\n\t\tAssert.notNull(extractor, \"Invalid extractor: null\");\n\t\tthis.extractorMap.put(throwableType, extractor);\n\t}",
        "summary_tokens": [
            "registers",
            "a",
            "code",
            "throwable",
            "cause",
            "extractor",
            "code",
            "for",
            "the",
            "specified",
            "type"
        ]
    },
    {
        "id": 2035,
        "code": "\tprotected void initExtractorMap() {\n\t\tregisterExtractor(InvocationTargetException.class, INVOCATIONTARGET_EXTRACTOR);\n\t\tregisterExtractor(Throwable.class, DEFAULT_EXTRACTOR);\n\t}",
        "summary_tokens": [
            "initializes",
            "associations",
            "between",
            "code",
            "throwable",
            "code",
            "s",
            "and",
            "code",
            "throwable",
            "cause",
            "extractor",
            "code",
            "s"
        ]
    },
    {
        "id": 2036,
        "code": "\tfinal Class<? extends Throwable>[] getRegisteredTypes() {\n\t\tSet<Class<? extends Throwable>> typeList = this.extractorMap.keySet();\n\t\treturn typeList.toArray(new Class[0]);\n\t}",
        "summary_tokens": [
            "returns",
            "an",
            "array",
            "containing",
            "the",
            "classes",
            "for",
            "which",
            "extractors",
            "are",
            "registered"
        ]
    },
    {
        "id": 2037,
        "code": "\tpublic final Throwable[] determineCauseChain(Throwable throwable) {\n\t\tAssert.notNull(throwable, \"Invalid throwable: null\");\n\t\tList<Throwable> chain = new ArrayList<>();\n\t\tThrowable currentThrowable = throwable;\n\t\twhile (currentThrowable != null) {\n\t\t\tchain.add(currentThrowable);\n\t\t\tcurrentThrowable = extractCause(currentThrowable);\n\t\t}\n\t\treturn chain.toArray(new Throwable[0]);\n\t}",
        "summary_tokens": [
            "determines",
            "the",
            "cause",
            "chain",
            "of",
            "the",
            "provided",
            "code",
            "throwable",
            "code"
        ]
    },
    {
        "id": 2038,
        "code": "\tprivate Throwable extractCause(Throwable throwable) {\n\t\tfor (Map.Entry<Class<? extends Throwable>, ThrowableCauseExtractor> entry : this.extractorMap.entrySet()) {\n\t\t\tClass<? extends Throwable> throwableType = entry.getKey();\n\t\t\tif (throwableType.isInstance(throwable)) {\n\t\t\t\tThrowableCauseExtractor extractor = entry.getValue();\n\t\t\t\treturn extractor.extractCause(throwable);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "extracts",
            "the",
            "cause",
            "of",
            "the",
            "given",
            "throwable",
            "using",
            "an",
            "appropriate",
            "extractor"
        ]
    },
    {
        "id": 2039,
        "code": "\tpublic final Throwable getFirstThrowableOfType(Class<? extends Throwable> throwableType, Throwable[] chain) {\n\t\tif (chain != null) {\n\t\t\tfor (Throwable t : chain) {\n\t\t\t\tif ((t != null) && throwableType.isInstance(t)) {\n\t\t\t\t\treturn t;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "first",
            "throwable",
            "from",
            "the",
            "passed",
            "in",
            "array",
            "that",
            "is",
            "assignable",
            "to",
            "the",
            "provided",
            "type"
        ]
    },
    {
        "id": 2040,
        "code": "\tpublic static void verifyThrowableHierarchy(Throwable throwable, Class<? extends Throwable> expectedBaseType) {\n\t\tif (expectedBaseType == null) {\n\t\t\treturn;\n\t\t}\n\t\tAssert.notNull(throwable, \"Invalid throwable: null\");\n\t\tClass<? extends Throwable> throwableType = throwable.getClass();\n\t\tAssert.isTrue(expectedBaseType.isAssignableFrom(throwableType), () -> \"Invalid type: '\"\n\t\t\t\t+ throwableType.getName() + \"'. Has to be a subclass of '\" + expectedBaseType.getName() + \"'\");\n\t}",
        "summary_tokens": [
            "verifies",
            "that",
            "the",
            "provided",
            "throwable",
            "is",
            "a",
            "valid",
            "subclass",
            "of",
            "the",
            "provided",
            "type",
            "or",
            "of",
            "the",
            "type",
            "itself"
        ]
    },
    {
        "id": 2041,
        "code": "\tpublic static String buildFullRequestUrl(String scheme, String serverName, int serverPort, String requestURI,\n\t\t\tString queryString) {\n\t\tscheme = scheme.toLowerCase();\n\t\tStringBuilder url = new StringBuilder();\n\t\turl.append(scheme).append(\"://\").append(serverName);\n\t\t\n\t\tif (\"http\".equals(scheme)) {\n\t\t\tif (serverPort != 80) {\n\t\t\t\turl.append(\":\").append(serverPort);\n\t\t\t}\n\t\t}\n\t\telse if (\"https\".equals(scheme)) {\n\t\t\tif (serverPort != 443) {\n\t\t\t\turl.append(\":\").append(serverPort);\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\turl.append(requestURI);\n\t\tif (queryString != null) {\n\t\t\turl.append(\"?\").append(queryString);\n\t\t}\n\t\treturn url.toString();\n\t}",
        "summary_tokens": [
            "obtains",
            "the",
            "full",
            "url",
            "the",
            "client",
            "used",
            "to",
            "make",
            "the",
            "request"
        ]
    },
    {
        "id": 2042,
        "code": "\tprivate static String buildRequestUrl(String servletPath, String requestURI, String contextPath, String pathInfo,\n\t\t\tString queryString) {\n\t\tStringBuilder url = new StringBuilder();\n\t\tif (servletPath != null) {\n\t\t\turl.append(servletPath);\n\t\t\tif (pathInfo != null) {\n\t\t\t\turl.append(pathInfo);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\turl.append(requestURI.substring(contextPath.length()));\n\t\t}\n\t\tif (queryString != null) {\n\t\t\turl.append(\"?\").append(queryString);\n\t\t}\n\t\treturn url.toString();\n\t}",
        "summary_tokens": [
            "obtains",
            "the",
            "web",
            "application",
            "specific",
            "fragment",
            "of",
            "the",
            "url"
        ]
    },
    {
        "id": 2043,
        "code": "\tpublic static boolean isValidRedirectUrl(String url) {\n\t\treturn url != null && (url.startsWith(\"/\") || isAbsoluteUrl(url));\n\t}",
        "summary_tokens": [
            "returns",
            "true",
            "if",
            "the",
            "supplied",
            "url",
            "starts",
            "with",
            "a",
            "or",
            "is",
            "absolute"
        ]
    },
    {
        "id": 2044,
        "code": "\tpublic static boolean isAbsoluteUrl(String url) {\n\t\treturn (url != null) ? ABSOLUTE_URL.matcher(url).matches() : false;\n\t}",
        "summary_tokens": [
            "decides",
            "if",
            "a",
            "url",
            "is",
            "absolute",
            "based",
            "on",
            "whether",
            "it",
            "contains",
            "a",
            "valid",
            "scheme",
            "name",
            "as",
            "defined",
            "in",
            "rfc",
            "0"
        ]
    },
    {
        "id": 2045,
        "code": "\tpublic boolean matches(HttpServletRequest request) {\n\t\tif (this.httpMethod != null && StringUtils.hasText(request.getMethod())\n\t\t\t\t&& this.httpMethod != HttpMethod.valueOf(request.getMethod())) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.pattern.equals(MATCH_ALL)) {\n\t\t\treturn true;\n\t\t}\n\t\tString url = getRequestPath(request);\n\t\treturn this.matcher.matches(url);\n\t}",
        "summary_tokens": [
            "returns",
            "true",
            "if",
            "the",
            "configured",
            "pattern",
            "and",
            "http",
            "method",
            "match",
            "those",
            "of",
            "the",
            "supplied",
            "request"
        ]
    },
    {
        "id": 2046,
        "code": "\tpublic boolean matches(HttpServletRequest request) {\n\t\tif (this.httpMethod != null && StringUtils.hasText(request.getMethod())\n\t\t\t\t&& this.httpMethod != HttpMethod.resolve(request.getMethod())) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.dispatcherType == request.getDispatcherType();\n\t}",
        "summary_tokens": [
            "performs",
            "the",
            "match",
            "against",
            "the",
            "request",
            "s",
            "method",
            "and",
            "dispatcher",
            "type"
        ]
    },
    {
        "id": 2047,
        "code": "\tpublic EvaluationContext createELContext(HttpServletRequest request) {\n\t\treturn new StandardEvaluationContext(new ELRequestMatcherContext(request));\n\t}",
        "summary_tokens": [
            "subclasses",
            "can",
            "override",
            "this",
            "methode",
            "if",
            "they",
            "want",
            "to",
            "use",
            "a",
            "different",
            "el",
            "root",
            "context",
            "el",
            "root",
            "context",
            "which",
            "is",
            "used",
            "to",
            "evaluate",
            "the",
            "expression"
        ]
    },
    {
        "id": 2048,
        "code": "\tpublic void setUseEquals(boolean useEquals) {\n\t\tthis.useEquals = useEquals;\n\t}",
        "summary_tokens": [
            "if",
            "set",
            "to",
            "true",
            "matches",
            "on",
            "exact",
            "media",
            "type",
            "else",
            "uses",
            "media",
            "type",
            "is",
            "compatible",
            "with",
            "media",
            "type"
        ]
    },
    {
        "id": 2049,
        "code": "\tpublic void setIgnoredMediaTypes(Set<MediaType> ignoredMediaTypes) {\n\t\tthis.ignoredMediaTypes = ignoredMediaTypes;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "media",
            "type",
            "to",
            "ignore",
            "from",
            "the",
            "content",
            "negotiation",
            "strategy"
        ]
    },
    {
        "id": 2050,
        "code": "\tpublic boolean matches(HttpServletRequest request) {\n\t\tif (this.httpMethod != null && request.getMethod() != null\n\t\t\t\t&& this.httpMethod != HttpMethod.resolve(request.getMethod())) {\n\t\t\treturn false;\n\t\t}\n\t\tString url = request.getServletPath();\n\t\tString pathInfo = request.getPathInfo();\n\t\tString query = request.getQueryString();\n\t\tif (pathInfo != null || query != null) {\n\t\t\tStringBuilder sb = new StringBuilder(url);\n\t\t\tif (pathInfo != null) {\n\t\t\t\tsb.append(pathInfo);\n\t\t\t}\n\t\t\tif (query != null) {\n\t\t\t\tsb.append('?').append(query);\n\t\t\t}\n\t\t\turl = sb.toString();\n\t\t}\n\t\tlogger.debug(LogMessage.format(\"Checking match of request : '%s'; against '%s'\", url, this.pattern));\n\t\treturn this.pattern.matcher(url).matches();\n\t}",
        "summary_tokens": [
            "performs",
            "the",
            "match",
            "of",
            "the",
            "request",
            "url",
            "servlet",
            "path",
            "path",
            "info",
            "query",
            "string",
            "against",
            "the",
            "compiled",
            "pattern"
        ]
    },
    {
        "id": 2051,
        "code": "\tdefault MatchResult matcher(HttpServletRequest request) {\n\t\tboolean match = matches(request);\n\t\treturn new MatchResult(match, Collections.emptyMap());\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "match",
            "result",
            "for",
            "this",
            "request",
            "matcher",
            "the",
            "default",
            "implementation",
            "returns",
            "collections",
            "empty",
            "map",
            "when",
            "match",
            "result",
            "get",
            "variables",
            "is",
            "invoked"
        ]
    },
    {
        "id": 2052,
        "code": "\tpublic void extraQuestionMarkStillMatches() {\n\t\tcreateFids(\"/someAdminPage.html*\", null);\n\t\tFilterInvocation fi = createFilterInvocation(\"/someAdminPage.html\", null, null, null);\n\t\tCollection<ConfigAttribute> response = this.fids.getAttributes(fi);\n\t\tassertThat(response).isEqualTo(this.def);\n\t\tfi = createFilterInvocation(\"/someAdminPage.html\", null, \"?\", null);\n\t\tresponse = this.fids.getAttributes(fi);\n\t\tassertThat(response).isEqualTo(this.def);\n\t}",
        "summary_tokens": [
            "check",
            "fixes",
            "for",
            "sec",
            "0"
        ]
    },
    {
        "id": 2053,
        "code": "\tpublic void testSuccessfulInvocation() throws Throwable {\n\t\t\n\t\tAuthentication token = new TestingAuthenticationToken(\"Test\", \"Password\", \"NOT_USED\");\n\t\tSecurityContextHolder.getContext().setAuthentication(token);\n\t\tFilterInvocation fi = createinvocation();\n\t\tgiven(this.ods.getAttributes(fi)).willReturn(SecurityConfig.createList(\"MOCK_OK\"));\n\t\tthis.interceptor.invoke(fi);\n\t\t\n\t\tverify(this.publisher, never()).publishEvent(any(AuthorizedEvent.class));\n\t}",
        "summary_tokens": [
            "we",
            "just",
            "test",
            "invocation",
            "works",
            "in",
            "a",
            "success",
            "event"
        ]
    },
    {
        "id": 2054,
        "code": "\tprivate AuthenticationManager createAuthenticationManager() {\n\t\tAuthenticationManager am = mock(AuthenticationManager.class);\n\t\tgiven(am.authenticate(any(Authentication.class)))\n\t\t\t\t.willAnswer((Answer<Authentication>) (invocation) -> (Authentication) invocation.getArguments()[0]);\n\t\treturn am;\n\t}",
        "summary_tokens": [
            "create",
            "an",
            "authentication",
            "manager",
            "which",
            "returns",
            "the",
            "passed",
            "in",
            "object"
        ]
    },
    {
        "id": 2055,
        "code": "\tprivate AuthenticationManager createAuthenticationManager() {\n\t\tAuthenticationManager am = mock(AuthenticationManager.class);\n\t\tgiven(am.authenticate(any(Authentication.class)))\n\t\t\t\t.willAnswer((Answer<Authentication>) (invocation) -> (Authentication) invocation.getArguments()[0]);\n\t\treturn am;\n\t}",
        "summary_tokens": [
            "create",
            "an",
            "authentication",
            "manager",
            "which",
            "returns",
            "the",
            "passed",
            "in",
            "object"
        ]
    },
    {
        "id": 2056,
        "code": "\tpublic void doFilterDefaultRequireCsrfProtectionMatcherAllowedMethodsCaseSensitive() throws Exception {\n\t\tthis.filter = new CsrfFilter(this.tokenRepository);\n\t\tthis.filter.setAccessDeniedHandler(this.deniedHandler);\n\t\tfor (String method : Arrays.asList(\"get\", \"TrAcE\", \"oPTIOnS\", \"hEaD\")) {\n\t\t\tresetRequestResponse();\n\t\t\tgiven(this.tokenRepository.loadToken(this.request)).willReturn(this.token);\n\t\t\tthis.request.setMethod(method);\n\t\t\tthis.filter.doFilter(this.request, this.response, this.filterChain);\n\t\t\tverify(this.deniedHandler).handle(eq(this.request), eq(this.response),\n\t\t\t\t\tany(InvalidCsrfTokenException.class));\n\t\t\tverifyNoMoreInteractions(this.filterChain);\n\t\t}\n\t}",
        "summary_tokens": [
            "sec",
            "0",
            "should",
            "not",
            "allow",
            "other",
            "cases",
            "through",
            "since",
            "spec",
            "states",
            "http",
            "method",
            "is",
            "case",
            "sensitive",
            "https",
            "www"
        ]
    },
    {
        "id": 2057,
        "code": "\tpublic void getFirewalledRequestWhenLowercaseEncodedPathThenException() {\n\t\tDefaultHttpFirewall fw = new DefaultHttpFirewall();\n\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n\t\trequest.setRequestURI(\"/context-root/a/b;%2f1/c\");\n\t\trequest.setContextPath(\"/context-root\");\n\t\trequest.setServletPath(\"\");\n\t\trequest.setPathInfo(\"/a/b;/1/c\"); \n\t\tassertThatExceptionOfType(RequestRejectedException.class).isThrownBy(() -> fw.getFirewalledRequest(request));\n\t}",
        "summary_tokens": [
            "on",
            "web",
            "sphere",
            "0"
        ]
    },
    {
        "id": 2058,
        "code": "\tpublic void getFirewalledRequestWhenLowercaseEncodedPathThenException() {\n\t\tthis.request.setRequestURI(\"/context-root/a/b;%2f1/c\");\n\t\tthis.request.setContextPath(\"/context-root\");\n\t\tthis.request.setServletPath(\"\");\n\t\tthis.request.setPathInfo(\"/a/b;/1/c\"); \n\t\tassertThatExceptionOfType(RequestRejectedException.class)\n\t\t\t\t.isThrownBy(() -> this.firewall.getFirewalledRequest(this.request));\n\t}",
        "summary_tokens": [
            "on",
            "web",
            "sphere",
            "0"
        ]
    },
    {
        "id": 2059,
        "code": "\tpublic void currentSubjectNull() {\n\t\tassertThat(Subject.getSubject(AccessController.getContext())).isNull();\n\t}",
        "summary_tokens": [
            "ensure",
            "a",
            "subject",
            "was",
            "not",
            "setup",
            "in",
            "some",
            "other",
            "manner"
        ]
    },
    {
        "id": 2060,
        "code": "\tpublic Method method() {\n\t\treturn this.method;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "resolved",
            "method"
        ]
    },
    {
        "id": 2061,
        "code": "\tpublic MethodParameter returnType() {\n\t\treturn new SynthesizingMethodParameter(this.method, -1);\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "declared",
            "return",
            "type",
            "of",
            "the",
            "resolved",
            "method"
        ]
    },
    {
        "id": 2062,
        "code": "\tpublic MethodParameter arg(ResolvableType type) {\n\t\treturn new ArgResolver().arg(type);\n\t}",
        "summary_tokens": [
            "find",
            "a",
            "unique",
            "argument",
            "matching",
            "the",
            "given",
            "type"
        ]
    },
    {
        "id": 2063,
        "code": "\tpublic final ArgResolver annot(Predicate<MethodParameter>... filter) {\n\t\treturn new ArgResolver(filter);\n\t}",
        "summary_tokens": [
            "filter",
            "on",
            "method",
            "arguments",
            "with",
            "annotation"
        ]
    },
    {
        "id": 2064,
        "code": "\tpublic final ArgResolver annotNotPresent(Class<? extends Annotation>... annotationTypes) {\n\t\treturn new ArgResolver().annotNotPresent(annotationTypes);\n\t}",
        "summary_tokens": [
            "filter",
            "on",
            "method",
            "arguments",
            "that",
            "don",
            "t",
            "have",
            "the",
            "given",
            "annotation",
            "type",
            "s"
        ]
    },
    {
        "id": 2065,
        "code": "\tpublic static <T> Builder<T> on(Class<T> objectClass) {\n\t\treturn new Builder<>(objectClass);\n\t}",
        "summary_tokens": [
            "main",
            "entry",
            "point",
            "providing",
            "access",
            "to",
            "a",
            "resolvable",
            "method",
            "builder"
        ]
    },
    {
        "id": 2066,
        "code": "\tpublic void anyExchangeWhenTwoCreatedThenDifferentToPreventIssuesInMap() {\n\t\tassertThat(ServerWebExchangeMatchers.anyExchange()).isNotEqualTo(ServerWebExchangeMatchers.anyExchange());\n\t}",
        "summary_tokens": [
            "if",
            "a",
            "linked",
            "map",
            "is",
            "used",
            "and",
            "any",
            "request",
            "equals",
            "any",
            "request",
            "then",
            "the",
            "following",
            "is",
            "added",
            "any",
            "request",
            "authenticated",
            "path",
            "matchers",
            "admin",
            "has",
            "role",
            "admin",
            "any",
            "request",
            "permit",
            "all"
        ]
    },
    {
        "id": 2067,
        "code": "\tpublic void matchesInvalidMethodOnRequest() {\n\t\tthis.matcher.setMethod(HttpMethod.GET);\n\t\tthis.request.setMethod(\"invalid\");\n\t\tassertThat(this.matcher.matches(this.request)).isFalse();\n\t\t\n\t\tverifyNoMoreInteractions(this.introspector);\n\t}",
        "summary_tokens": [
            "malicious",
            "users",
            "can",
            "specify",
            "any",
            "http",
            "method",
            "to",
            "create",
            "a",
            "stacktrace",
            "and",
            "try",
            "to",
            "expose",
            "useful",
            "information",
            "about",
            "the",
            "system"
        ]
    },
    {
        "id": 2068,
        "code": "\tpublic void publishedEventIsReceivedbyListener() {\n\t\tHttpSessionEventPublisher publisher = new HttpSessionEventPublisher();\n\t\tStaticWebApplicationContext context = new StaticWebApplicationContext();\n\t\tMockServletContext servletContext = new MockServletContext();\n\t\tservletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, context);\n\t\tcontext.setServletContext(servletContext);\n\t\tcontext.registerSingleton(\"listener\", MockApplicationListener.class, null);\n\t\tcontext.refresh();\n\t\tMockHttpSession session = new MockHttpSession(servletContext);\n\t\tMockApplicationListener listener = (MockApplicationListener) context.getBean(\"listener\");\n\t\tHttpSessionEvent event = new HttpSessionEvent(session);\n\t\tpublisher.sessionCreated(event);\n\t\tassertThat(listener.getCreatedEvent()).isNotNull();\n\t\tassertThat(listener.getDestroyedEvent()).isNull();\n\t\tassertThat(listener.getCreatedEvent().getSession()).isEqualTo(session);\n\t\tlistener.setCreatedEvent(null);\n\t\tlistener.setDestroyedEvent(null);\n\t\tpublisher.sessionDestroyed(event);\n\t\tassertThat(listener.getDestroyedEvent()).isNotNull();\n\t\tassertThat(listener.getCreatedEvent()).isNull();\n\t\tassertThat(listener.getDestroyedEvent().getSession()).isEqualTo(session);\n\t\tpublisher.sessionIdChanged(event, \"oldSessionId\");\n\t\tassertThat(listener.getSessionIdChangedEvent()).isNotNull();\n\t\tassertThat(listener.getSessionIdChangedEvent().getOldSessionId()).isEqualTo(\"oldSessionId\");\n\t\tlistener.setSessionIdChangedEvent(null);\n\t}",
        "summary_tokens": [
            "it",
            "s",
            "not",
            "that",
            "complicated",
            "so",
            "we",
            "ll",
            "just",
            "run",
            "it",
            "straight",
            "through",
            "here"
        ]
    },
    {
        "id": 2069,
        "code": "\tpublic void charactersAreEscapedCorrectly() {\n\t\tassertThat(TextEscapeUtils.escapeEntities(\"& a<script>\\\"'\")).isEqualTo(\"&amp;&#32;a&lt;script&gt;&#34;&#39;\");\n\t}",
        "summary_tokens": [
            "amp",
            "lt",
            "gt",
            "0",
            "0",
            "and",
            "0",
            "space",
            "escaping"
        ]
    }
]