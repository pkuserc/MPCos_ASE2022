[
    {
        "id": 1,
        "code": "\tprivate void addMavenOptionalFeature(Project project) {\n\t\tJavaPluginExtension extension = project.getExtensions().getByType(JavaPluginExtension.class);\n\t\textension.registerFeature(\"mavenOptional\",\n\t\t\t\t(feature) -> feature.usingSourceSet(extension.getSourceSets().getByName(\"main\")));\n\t\tAdhocComponentWithVariants javaComponent = (AdhocComponentWithVariants) project.getComponents()\n\t\t\t\t.findByName(\"java\");\n\t\tjavaComponent.addVariantsFromConfiguration(\n\t\t\t\tproject.getConfigurations().findByName(\"mavenOptionalRuntimeElements\"),\n\t\t\t\tConfigurationVariantDetails::mapToOptional);\n\t}",
        "summary_tokens": [
            "add",
            "a",
            "feature",
            "that",
            "allows",
            "maven",
            "plugins",
            "to",
            "declare",
            "optional",
            "dependencies",
            "that",
            "appear",
            "in",
            "the",
            "pom"
        ]
    },
    {
        "id": 2,
        "code": "\tprivate List<String> readAutoConfigurationsFile() throws IOException {\n\t\tFile file = findAutoConfigurationImportsFile();\n\t\tif (file == null) {\n\t\t\treturn Collections.emptyList();\n\t\t}\n\t\ttry (BufferedReader reader = new BufferedReader(new FileReader(file))) {\n\t\t\treturn reader.lines().map(this::stripComment).filter((line) -> !line.isEmpty())\n\t\t\t\t\t.collect(Collectors.toList());\n\t\t}\n\t}",
        "summary_tokens": [
            "reads",
            "auto",
            "configurations",
            "from",
            "meta",
            "inf",
            "spring",
            "org"
        ]
    },
    {
        "id": 3,
        "code": "\tstatic GitHub withCredentials(String username, String password) {\n\t\treturn new StandardGitHub(username, password);\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "new",
            "git",
            "hub",
            "that",
            "will",
            "authenticate",
            "with",
            "given",
            "username",
            "and",
            "password"
        ]
    },
    {
        "id": 4,
        "code": "\tpublic void label(List<String> labels) {\n\t\tMap<String, List<String>> body = Collections.singletonMap(\"labels\", labels);\n\t\tthis.rest.put(\"issues/\" + this.number + \"/labels\", body);\n\t}",
        "summary_tokens": [
            "labels",
            "the",
            "issue",
            "with",
            "the",
            "given",
            "labels"
        ]
    },
    {
        "id": 5,
        "code": "\tpublic String getName() {\n\t\treturn this.name;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "name",
            "of",
            "the",
            "milestone"
        ]
    },
    {
        "id": 6,
        "code": "\tpublic int getNumber() {\n\t\treturn this.number;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "number",
            "of",
            "the",
            "milestone"
        ]
    },
    {
        "id": 7,
        "code": "\tpublic void promote(String targetRepo, ReleaseInfo releaseInfo) {\n\t\tPromotionRequest request = getPromotionRequest(targetRepo);\n\t\tString buildName = releaseInfo.getBuildName();\n\t\tString buildNumber = releaseInfo.getBuildNumber();\n\t\tlogger.info(\"Promoting \" + buildName + \"/\" + buildNumber + \" to \" + request.getTargetRepo());\n\t\tRequestEntity<PromotionRequest> requestEntity = RequestEntity\n\t\t\t\t.post(URI.create(PROMOTION_URL + buildName + \"/\" + buildNumber)).contentType(MediaType.APPLICATION_JSON)\n\t\t\t\t.body(request);\n\t\ttry {\n\t\t\tthis.restTemplate.exchange(requestEntity, String.class);\n\t\t\tlogger.debug(\"Promotion complete\");\n\t\t}\n\t\tcatch (HttpClientErrorException ex) {\n\t\t\tboolean isAlreadyPromoted = isAlreadyPromoted(buildName, buildNumber, request.getTargetRepo());\n\t\t\tif (isAlreadyPromoted) {\n\t\t\t\tlogger.info(\"Already promoted.\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlogger.info(\"Promotion failed.\");\n\t\t\t\tthrow ex;\n\t\t\t}\n\t\t}\n\t}",
        "summary_tokens": [
            "move",
            "artifacts",
            "to",
            "a",
            "target",
            "repository",
            "in",
            "artifactory"
        ]
    },
    {
        "id": 8,
        "code": "\tprotected ConditionOutcome getDefaultOutcome(ConditionContext context, AnnotationAttributes annotationAttributes) {\n\t\tboolean match = Boolean\n\t\t\t\t.parseBoolean(context.getEnvironment().getProperty(this.prefix + \"defaults.enabled\", \"true\"));\n\t\treturn new ConditionOutcome(match, ConditionMessage.forCondition(this.annotationType)\n\t\t\t\t.because(this.prefix + \"defaults.enabled is considered \" + match));\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "default",
            "outcome",
            "that",
            "should",
            "be",
            "used",
            "if",
            "property",
            "is",
            "not",
            "set"
        ]
    },
    {
        "id": 9,
        "code": "\tpublic HttpStatus getStatusCode() {\n\t\treturn getReason().getStatus();\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "status",
            "code",
            "that",
            "should",
            "be",
            "returned",
            "to",
            "the",
            "client"
        ]
    },
    {
        "id": 10,
        "code": "\tpublic Reason getReason() {\n\t\treturn this.reason;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "reason",
            "why",
            "the",
            "authorization",
            "exception",
            "was",
            "thrown"
        ]
    },
    {
        "id": 11,
        "code": "\tAccessLevel getAccessLevel(String token, String applicationId) throws CloudFoundryAuthorizationException {\n\t\ttry {\n\t\t\tURI uri = getPermissionsUri(applicationId);\n\t\t\tRequestEntity<?> request = RequestEntity.get(uri).header(\"Authorization\", \"bearer \" + token).build();\n\t\t\tMap<?, ?> body = this.restTemplate.exchange(request, Map.class).getBody();\n\t\t\tif (Boolean.TRUE.equals(body.get(\"read_sensitive_data\"))) {\n\t\t\t\treturn AccessLevel.FULL;\n\t\t\t}\n\t\t\treturn AccessLevel.RESTRICTED;\n\t\t}\n\t\tcatch (HttpClientErrorException ex) {\n\t\t\tif (ex.getStatusCode().equals(HttpStatus.FORBIDDEN)) {\n\t\t\t\tthrow new CloudFoundryAuthorizationException(Reason.ACCESS_DENIED, \"Access denied\");\n\t\t\t}\n\t\t\tthrow new CloudFoundryAuthorizationException(Reason.INVALID_TOKEN, \"Invalid token\", ex);\n\t\t}\n\t\tcatch (HttpServerErrorException ex) {\n\t\t\tthrow new CloudFoundryAuthorizationException(Reason.SERVICE_UNAVAILABLE, \"Cloud controller not reachable\");\n\t\t}\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "access",
            "level",
            "that",
            "should",
            "be",
            "granted",
            "to",
            "the",
            "given",
            "token"
        ]
    },
    {
        "id": 12,
        "code": "\tMap<String, String> fetchTokenKeys() {\n\t\ttry {\n\t\t\treturn extractTokenKeys(this.restTemplate.getForObject(getUaaUrl() + \"/token_keys\", Map.class));\n\t\t}\n\t\tcatch (HttpStatusCodeException ex) {\n\t\t\tthrow new CloudFoundryAuthorizationException(Reason.SERVICE_UNAVAILABLE, \"UAA not reachable\");\n\t\t}\n\t}",
        "summary_tokens": [
            "return",
            "all",
            "token",
            "keys",
            "known",
            "by",
            "the",
            "uaa"
        ]
    },
    {
        "id": 13,
        "code": "\tString getUaaUrl() {\n\t\tif (this.uaaUrl == null) {\n\t\t\ttry {\n\t\t\t\tMap<?, ?> response = this.restTemplate.getForObject(this.cloudControllerUrl + \"/info\", Map.class);\n\t\t\t\tthis.uaaUrl = (String) response.get(\"token_endpoint\");\n\t\t\t}\n\t\t\tcatch (HttpStatusCodeException ex) {\n\t\t\t\tthrow new CloudFoundryAuthorizationException(Reason.SERVICE_UNAVAILABLE,\n\t\t\t\t\t\t\"Unable to fetch token keys from UAA\");\n\t\t\t}\n\t\t}\n\t\treturn this.uaaUrl;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "url",
            "of",
            "the",
            "uaa"
        ]
    },
    {
        "id": 14,
        "code": "\tpublic final boolean match(EndpointId endpointId) {\n\t\treturn isIncluded(endpointId) && !isExcluded(endpointId);\n\t}",
        "summary_tokens": [
            "return",
            "true",
            "if",
            "the",
            "filter",
            "matches"
        ]
    },
    {
        "id": 15,
        "code": "\tpublic Double getValue(Meter.Type meterType) {\n\t\treturn this.value.getValue(meterType);\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "underlying",
            "value",
            "of",
            "the",
            "slo",
            "in",
            "form",
            "suitable",
            "to",
            "apply",
            "to",
            "the",
            "given",
            "meter",
            "type"
        ]
    },
    {
        "id": 16,
        "code": "\tpublic static ServiceLevelObjectiveBoundary valueOf(String value) {\n\t\treturn new ServiceLevelObjectiveBoundary(MeterValue.valueOf(value));\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "new",
            "service",
            "level",
            "objective",
            "boundary",
            "instance",
            "for",
            "the",
            "given",
            "string",
            "value"
        ]
    },
    {
        "id": 17,
        "code": "\tprivate String getCacheManagerName(String beanName) {\n\t\tif (beanName.length() > CACHE_MANAGER_SUFFIX.length()\n\t\t\t\t&& StringUtils.endsWithIgnoreCase(beanName, CACHE_MANAGER_SUFFIX)) {\n\t\t\treturn beanName.substring(0, beanName.length() - CACHE_MANAGER_SUFFIX.length());\n\t\t}\n\t\treturn beanName;\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "name",
            "of",
            "a",
            "cache",
            "manager",
            "based",
            "on",
            "its",
            "bean",
            "name"
        ]
    },
    {
        "id": 18,
        "code": "\tprivate ConditionOutcome getDefaultOutcome(ConditionContext context) {\n\t\tboolean match = Boolean.parseBoolean(context.getEnvironment().getProperty(DEFAULT_PROPERTY_NAME, \"true\"));\n\t\treturn new ConditionOutcome(match, ConditionMessage.forCondition(ConditionalOnEnabledMetricsExport.class)\n\t\t\t\t.because(DEFAULT_PROPERTY_NAME + \" is considered \" + match));\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "default",
            "outcome",
            "that",
            "should",
            "be",
            "used",
            "if",
            "property",
            "is",
            "not",
            "set"
        ]
    },
    {
        "id": 19,
        "code": "\tprotected final <V> V get(Function<T, V> getter, Supplier<V> fallback) {\n\t\tV value = getter.apply(this.properties);\n\t\treturn (value != null) ? value : fallback.get();\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "value",
            "from",
            "the",
            "properties",
            "or",
            "use",
            "a",
            "fallback",
            "from",
            "the",
            "defaults"
        ]
    },
    {
        "id": 20,
        "code": "\tprivate String getEntityManagerFactoryName(String beanName) {\n\t\tif (beanName.length() > ENTITY_MANAGER_FACTORY_SUFFIX.length()\n\t\t\t\t&& StringUtils.endsWithIgnoreCase(beanName, ENTITY_MANAGER_FACTORY_SUFFIX)) {\n\t\t\treturn beanName.substring(0, beanName.length() - ENTITY_MANAGER_FACTORY_SUFFIX.length());\n\t\t}\n\t\treturn beanName;\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "name",
            "of",
            "an",
            "entity",
            "manager",
            "factory",
            "based",
            "on",
            "its",
            "bean",
            "name"
        ]
    },
    {
        "id": 21,
        "code": "\tpublic URI getEffectiveUri() {\n\t\tif (usesProxy()) {\n\t\t\t\n\t\t\treturn URI.create(this.uri.toString().replace(\"proxy://\", \"http://\"));\n\t\t}\n\t\treturn this.uri;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "effective",
            "uri",
            "of",
            "the",
            "wavefront",
            "instance"
        ]
    },
    {
        "id": 22,
        "code": "\tpublic String getApiTokenOrThrow() {\n\t\tif (this.apiToken == null && !usesProxy()) {\n\t\t\tthrow new InvalidConfigurationPropertyValueException(\"management.wavefront.api-token\", null,\n\t\t\t\t\t\"This property is mandatory whenever publishing directly to the Wavefront API\");\n\t\t}\n\t\treturn this.apiToken;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "api",
            "token",
            "or",
            "throws",
            "an",
            "exception",
            "if",
            "the",
            "api",
            "token",
            "is",
            "mandatory"
        ]
    },
    {
        "id": 23,
        "code": "\tpublic Integer getPort() {\n\t\treturn this.port;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "management",
            "port",
            "or",
            "null",
            "if",
            "the",
            "server",
            "properties",
            "get",
            "port",
            "server",
            "port",
            "should",
            "be",
            "used"
        ]
    },
    {
        "id": 24,
        "code": "\tpublic void setPort(Integer port) {\n\t\tthis.port = port;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "port",
            "of",
            "the",
            "management",
            "server",
            "use",
            "null",
            "if",
            "the",
            "server",
            "properties",
            "get",
            "port",
            "server",
            "port",
            "should",
            "be",
            "used"
        ]
    },
    {
        "id": 25,
        "code": "\tpublic static <T extends AbstractApplicationContextRunner<?, ?, ?>> Function<T, T> simple() {\n\t\treturn limitedTo(SimpleMetricsExportAutoConfiguration.class);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "function",
            "that",
            "configures",
            "the",
            "run",
            "to",
            "be",
            "limited",
            "to",
            "the",
            "simple",
            "implementation"
        ]
    },
    {
        "id": 26,
        "code": "\tpublic static <T extends AbstractApplicationContextRunner<?, ?, ?>> Function<T, T> limitedTo(\n\t\t\tClass<?>... exportAutoConfigurations) {\n\t\treturn (contextRunner) -> apply(contextRunner, exportAutoConfigurations);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "function",
            "that",
            "configures",
            "the",
            "run",
            "to",
            "be",
            "limited",
            "to",
            "the",
            "specified",
            "implementations"
        ]
    },
    {
        "id": 27,
        "code": "\tpublic Instant getTimestamp() {\n\t\treturn this.timestamp;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "date",
            "time",
            "that",
            "the",
            "event",
            "was",
            "logged"
        ]
    },
    {
        "id": 28,
        "code": "\tpublic String getPrincipal() {\n\t\treturn this.principal;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "user",
            "principal",
            "responsible",
            "for",
            "the",
            "event",
            "or",
            "an",
            "empty",
            "string",
            "if",
            "the",
            "principal",
            "is",
            "not",
            "available"
        ]
    },
    {
        "id": 29,
        "code": "\tpublic String getType() {\n\t\treturn this.type;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "type",
            "of",
            "event"
        ]
    },
    {
        "id": 30,
        "code": "\tpublic Map<String, Object> getData() {\n\t\treturn this.data;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "event",
            "data"
        ]
    },
    {
        "id": 31,
        "code": "\tpublic void setCapacity(int capacity) {\n\t\tsynchronized (this.monitor) {\n\t\t\tthis.events = new AuditEvent[capacity];\n\t\t}\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "capacity",
            "of",
            "this",
            "event",
            "repository"
        ]
    },
    {
        "id": 32,
        "code": "\tpublic AuditEvent getAuditEvent() {\n\t\treturn this.auditEvent;\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "audit",
            "event"
        ]
    },
    {
        "id": 33,
        "code": "\tprotected AvailabilityState getState(ApplicationAvailability applicationAvailability) {\n\t\treturn applicationAvailability.getState(this.stateType);\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "current",
            "availability",
            "state"
        ]
    },
    {
        "id": 34,
        "code": "\tpublic CachesReport caches() {\n\t\tMap<String, Map<String, CacheDescriptor>> descriptors = new LinkedHashMap<>();\n\t\tgetCacheEntries(matchAll(), matchAll()).forEach((entry) -> {\n\t\t\tString cacheName = entry.getName();\n\t\t\tString cacheManager = entry.getCacheManager();\n\t\t\tMap<String, CacheDescriptor> cacheManagerDescriptors = descriptors.computeIfAbsent(cacheManager,\n\t\t\t\t\t(key) -> new LinkedHashMap<>());\n\t\t\tcacheManagerDescriptors.put(cacheName, new CacheDescriptor(entry.getTarget()));\n\t\t});\n\t\tMap<String, CacheManagerDescriptor> cacheManagerDescriptors = new LinkedHashMap<>();\n\t\tdescriptors.forEach((name, entries) -> cacheManagerDescriptors.put(name, new CacheManagerDescriptor(entries)));\n\t\treturn new CachesReport(cacheManagerDescriptors);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "caches",
            "report",
            "of",
            "all",
            "available",
            "cache",
            "caches"
        ]
    },
    {
        "id": 35,
        "code": "\tpublic CacheEntry cache(@Selector String cache, @Nullable String cacheManager) {\n\t\treturn extractUniqueCacheEntry(cache, getCacheEntries((name) -> name.equals(cache), isNameMatch(cacheManager)));\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "cache",
            "descriptor",
            "for",
            "the",
            "specified",
            "cache"
        ]
    },
    {
        "id": 36,
        "code": "\tpublic void clearCaches() {\n\t\tgetCacheEntries(matchAll(), matchAll()).forEach(this::clearCache);\n\t}",
        "summary_tokens": [
            "clear",
            "all",
            "the",
            "available",
            "cache",
            "caches"
        ]
    },
    {
        "id": 37,
        "code": "\tpublic boolean clearCache(@Selector String cache, @Nullable String cacheManager) {\n\t\tCacheEntry entry = extractUniqueCacheEntry(cache,\n\t\t\t\tgetCacheEntries((name) -> name.equals(cache), isNameMatch(cacheManager)));\n\t\treturn (entry != null && clearCache(entry));\n\t}",
        "summary_tokens": [
            "clear",
            "the",
            "specific",
            "cache"
        ]
    },
    {
        "id": 38,
        "code": "\tpublic String toLowerCaseString() {\n\t\treturn this.lowerCaseValue;\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "lower",
            "case",
            "version",
            "of",
            "the",
            "endpoint",
            "id"
        ]
    },
    {
        "id": 39,
        "code": "\tpublic static EndpointId of(Environment environment, String value) {\n\t\tAssert.notNull(environment, \"Environment must not be null\");\n\t\treturn new EndpointId(migrateLegacyId(environment, value));\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "create",
            "a",
            "new",
            "endpoint",
            "id",
            "of",
            "the",
            "specified",
            "value"
        ]
    },
    {
        "id": 40,
        "code": "\tpublic static EndpointId fromPropertyValue(String value) {\n\t\treturn new EndpointId(value.replace(\"-\", \"\"));\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "create",
            "a",
            "new",
            "endpoint",
            "id",
            "from",
            "a",
            "property",
            "value"
        ]
    },
    {
        "id": 41,
        "code": "\tpublic String getReason() {\n\t\treturn this.reason;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "reason",
            "explaining",
            "why",
            "the",
            "request",
            "is",
            "invalid",
            "potentially",
            "null"
        ]
    },
    {
        "id": 42,
        "code": "\tpublic Map<String, Object> getArguments() {\n\t\treturn this.arguments;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "invocation",
            "arguments"
        ]
    },
    {
        "id": 43,
        "code": "\tpublic <T> T resolveArgument(Class<T> argumentType) {\n\t\tfor (OperationArgumentResolver argumentResolver : this.argumentResolvers) {\n\t\t\tif (argumentResolver.canResolve(argumentType)) {\n\t\t\t\tT result = argumentResolver.resolve(argumentType);\n\t\t\t\tif (result != null) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "resolves",
            "an",
            "argument",
            "with",
            "the",
            "given",
            "argument",
            "type"
        ]
    },
    {
        "id": 44,
        "code": "\tpublic boolean canResolve(Class<?> type) {\n\t\tfor (OperationArgumentResolver argumentResolver : this.argumentResolvers) {\n\t\t\tif (argumentResolver.canResolve(type)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}",
        "summary_tokens": [
            "returns",
            "whether",
            "the",
            "context",
            "is",
            "capable",
            "of",
            "resolving",
            "an",
            "argument",
            "of",
            "the",
            "given",
            "type"
        ]
    },
    {
        "id": 45,
        "code": "\tstatic <T> OperationArgumentResolver of(Class<T> type, Supplier<? extends T> supplier) {\n\t\tAssert.notNull(type, \"Type must not be null\");\n\t\tAssert.notNull(supplier, \"Supplier must not be null\");\n\t\treturn new OperationArgumentResolver() {\n\n\t\t\t@Override\n\t\t\tpublic boolean canResolve(Class<?> actualType) {\n\t\t\t\treturn actualType.equals(type);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tpublic <R> R resolve(Class<R> argumentType) {\n\t\t\t\treturn (R) supplier.get();\n\t\t\t}\n\n\t\t};\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "that",
            "creates",
            "an",
            "operation",
            "argument",
            "resolver",
            "for",
            "a",
            "specific",
            "type",
            "using",
            "a",
            "supplier"
        ]
    },
    {
        "id": 46,
        "code": "\tdefault boolean isDefault() {\n\t\treturn false;\n\t}",
        "summary_tokens": [
            "return",
            "if",
            "this",
            "enum",
            "value",
            "should",
            "be",
            "used",
            "as",
            "the",
            "default",
            "value",
            "when",
            "an",
            "accept",
            "header",
            "of",
            "0",
            "0",
            "0",
            "is",
            "provided",
            "or",
            "if",
            "the",
            "accept",
            "header",
            "is",
            "missing"
        ]
    },
    {
        "id": 47,
        "code": "\tpublic PropertySource<?> getPropertySource() {\n\t\treturn this.propertySource;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "property",
            "source",
            "that",
            "provided",
            "the",
            "data",
            "or",
            "null",
            "if",
            "the",
            "data",
            "was",
            "not",
            "from",
            "a",
            "property",
            "source"
        ]
    },
    {
        "id": 48,
        "code": "\tpublic String getKey() {\n\t\treturn this.key;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "key",
            "of",
            "the",
            "data"
        ]
    },
    {
        "id": 49,
        "code": "\tpublic Object getValue() {\n\t\treturn this.value;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "value",
            "of",
            "the",
            "data"
        ]
    },
    {
        "id": 50,
        "code": "\tpublic SanitizableData withValue(Object value) {\n\t\treturn new SanitizableData(this.propertySource, this.key, value);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "new",
            "sanitizable",
            "data",
            "instance",
            "with",
            "a",
            "different",
            "value"
        ]
    },
    {
        "id": 51,
        "code": "\tpublic Object sanitize(SanitizableData data, boolean showUnsanitized) {\n\t\tObject value = data.getValue();\n\t\tif (value == null) {\n\t\t\treturn null;\n\t\t}\n\t\tif (!showUnsanitized) {\n\t\t\treturn SanitizableData.SANITIZED_VALUE;\n\t\t}\n\t\tfor (SanitizingFunction sanitizingFunction : this.sanitizingFunctions) {\n\t\t\tdata = sanitizingFunction.apply(data);\n\t\t\tObject sanitizedValue = data.getValue();\n\t\t\tif (!value.equals(sanitizedValue)) {\n\t\t\t\treturn sanitizedValue;\n\t\t\t}\n\t\t}\n\t\treturn value;\n\t}",
        "summary_tokens": [
            "sanitize",
            "the",
            "value",
            "from",
            "the",
            "given",
            "sanitizable",
            "data",
            "using",
            "the",
            "available",
            "sanitizing",
            "function",
            "s"
        ]
    },
    {
        "id": 52,
        "code": "\tprotected boolean isExtensionTypeExposed(Class<?> extensionBeanType) {\n\t\treturn true;\n\t}",
        "summary_tokens": [
            "determine",
            "if",
            "an",
            "extension",
            "bean",
            "should",
            "be",
            "exposed"
        ]
    },
    {
        "id": 53,
        "code": "\tprotected boolean isEndpointTypeExposed(Class<?> beanType) {\n\t\treturn true;\n\t}",
        "summary_tokens": [
            "determine",
            "if",
            "an",
            "endpoint",
            "bean",
            "should",
            "be",
            "exposed"
        ]
    },
    {
        "id": 54,
        "code": "\tpublic Set<OperationParameter> getMissingParameters() {\n\t\treturn this.missingParameters;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "parameters",
            "that",
            "were",
            "missing"
        ]
    },
    {
        "id": 55,
        "code": "\tdefault boolean hasParameters() {\n\t\treturn getParameterCount() > 0;\n\t}",
        "summary_tokens": [
            "return",
            "true",
            "if",
            "there",
            "is",
            "at",
            "least",
            "one",
            "parameter"
        ]
    },
    {
        "id": 56,
        "code": "\tdefault boolean hasMandatoryParameter() {\n\t\treturn stream().anyMatch(OperationParameter::isMandatory);\n\t}",
        "summary_tokens": [
            "return",
            "if",
            "any",
            "of",
            "the",
            "contained",
            "parameters",
            "are",
            "operation",
            "parameter",
            "is",
            "mandatory",
            "mandatory"
        ]
    },
    {
        "id": 57,
        "code": "\tpublic OperationParameter getParameter() {\n\t\treturn this.parameter;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "parameter",
            "being",
            "mapped"
        ]
    },
    {
        "id": 58,
        "code": "\tpublic Object getValue() {\n\t\treturn this.value;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "value",
            "being",
            "mapped"
        ]
    },
    {
        "id": 59,
        "code": "\tpublic Method getMethod() {\n\t\treturn this.method;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "source",
            "java",
            "method"
        ]
    },
    {
        "id": 60,
        "code": "\tpublic OperationType getOperationType() {\n\t\treturn this.operationType;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "operation",
            "type"
        ]
    },
    {
        "id": 61,
        "code": "\tpublic OperationParameters getParameters() {\n\t\treturn this.operationParameters;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "operation",
            "parameters"
        ]
    },
    {
        "id": 62,
        "code": "\tpublic long getTimeToLive() {\n\t\treturn this.timeToLive;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "maximum",
            "time",
            "in",
            "milliseconds",
            "that",
            "a",
            "response",
            "can",
            "be",
            "cached"
        ]
    },
    {
        "id": 63,
        "code": "\tpublic String getPath() {\n\t\treturn this.path;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "path",
            "to",
            "which",
            "endpoints",
            "should",
            "be",
            "mapped"
        ]
    },
    {
        "id": 64,
        "code": "\tpublic List<String> getProduced() {\n\t\treturn this.produced;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "media",
            "types",
            "produced",
            "by",
            "an",
            "endpoint"
        ]
    },
    {
        "id": 65,
        "code": "\tpublic List<String> getConsumed() {\n\t\treturn this.consumed;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "media",
            "types",
            "consumed",
            "by",
            "an",
            "endpoint"
        ]
    },
    {
        "id": 66,
        "code": "\tpublic EndpointServlet withLoadOnStartup(int loadOnStartup) {\n\t\treturn new EndpointServlet(this.servlet, this.initParameters, loadOnStartup);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "load",
            "on",
            "startup",
            "priority",
            "that",
            "will",
            "be",
            "set",
            "on",
            "servlet",
            "registration"
        ]
    },
    {
        "id": 67,
        "code": "\tpublic String getHref() {\n\t\treturn this.href;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "href",
            "of",
            "the",
            "link"
        ]
    },
    {
        "id": 68,
        "code": "\tpublic boolean isTemplated() {\n\t\treturn this.templated;\n\t}",
        "summary_tokens": [
            "returns",
            "whether",
            "the",
            "get",
            "href",
            "href",
            "is",
            "templated"
        ]
    },
    {
        "id": 69,
        "code": "\tstatic String getRootPath(List<PathMapper> pathMappers, EndpointId endpointId) {\n\t\tAssert.notNull(endpointId, \"EndpointId must not be null\");\n\t\tif (pathMappers != null) {\n\t\t\tfor (PathMapper mapper : pathMappers) {\n\t\t\t\tString path = mapper.getRootPath(endpointId);\n\t\t\t\tif (StringUtils.hasText(path)) {\n\t\t\t\t\treturn path;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn endpointId.toString();\n\t}",
        "summary_tokens": [
            "resolve",
            "the",
            "root",
            "path",
            "for",
            "the",
            "specified",
            "endpoint",
            "id",
            "from",
            "the",
            "given",
            "path",
            "mappers"
        ]
    },
    {
        "id": 70,
        "code": "\tpublic MimeType getContentType() {\n\t\treturn this.contentType;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "content",
            "type",
            "of",
            "the",
            "response"
        ]
    },
    {
        "id": 71,
        "code": "\tpublic T getBody() {\n\t\treturn this.body;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "body",
            "for",
            "the",
            "response"
        ]
    },
    {
        "id": 72,
        "code": "\tpublic int getStatus() {\n\t\treturn this.status;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "status",
            "for",
            "the",
            "response"
        ]
    },
    {
        "id": 73,
        "code": "\tpublic String getPath() {\n\t\treturn this.path;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "path",
            "for",
            "the",
            "operation"
        ]
    },
    {
        "id": 74,
        "code": "\tpublic String getMatchAllRemainingPathSegmentsVariable() {\n\t\treturn this.matchAllRemainingPathSegmentsVariable;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "name",
            "of",
            "the",
            "variable",
            "used",
            "to",
            "catch",
            "all",
            "remaining",
            "path",
            "segments",
            "null"
        ]
    },
    {
        "id": 75,
        "code": "\tpublic WebEndpointHttpMethod getHttpMethod() {\n\t\treturn this.httpMethod;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "http",
            "method",
            "for",
            "the",
            "operation"
        ]
    },
    {
        "id": 76,
        "code": "\tpublic Collection<String> getConsumes() {\n\t\treturn Collections.unmodifiableCollection(this.consumes);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "media",
            "types",
            "that",
            "the",
            "operation",
            "consumes"
        ]
    },
    {
        "id": 77,
        "code": "\tpublic Collection<String> getProduces() {\n\t\treturn Collections.unmodifiableCollection(this.produces);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "media",
            "types",
            "that",
            "the",
            "operation",
            "produces"
        ]
    },
    {
        "id": 78,
        "code": "\tpublic Collection<Resource> createEndpointResources(EndpointMapping endpointMapping,\n\t\t\tCollection<ExposableWebEndpoint> endpoints, EndpointMediaTypes endpointMediaTypes,\n\t\t\tEndpointLinksResolver linksResolver, boolean shouldRegisterLinks) {\n\t\tList<Resource> resources = new ArrayList<>();\n\t\tendpoints.stream().flatMap((endpoint) -> endpoint.getOperations().stream())\n\t\t\t\t.map((operation) -> createResource(endpointMapping, operation)).forEach(resources::add);\n\t\tif (shouldRegisterLinks) {\n\t\t\tResource resource = createEndpointLinksResource(endpointMapping.getPath(), endpointMediaTypes,\n\t\t\t\t\tlinksResolver);\n\t\t\tresources.add(resource);\n\t\t}\n\t\treturn resources;\n\t}",
        "summary_tokens": [
            "creates",
            "resource",
            "resources",
            "for",
            "the",
            "operations",
            "of",
            "the",
            "given",
            "web",
            "endpoints"
        ]
    },
    {
        "id": 79,
        "code": "\tprotected ReactiveWebOperation wrapReactiveWebOperation(ExposableWebEndpoint endpoint, WebOperation operation,\n\t\t\tReactiveWebOperation reactiveWebOperation) {\n\t\treturn reactiveWebOperation;\n\t}",
        "summary_tokens": [
            "hook",
            "point",
            "that",
            "allows",
            "subclasses",
            "to",
            "wrap",
            "the",
            "reactive",
            "web",
            "operation",
            "before",
            "it",
            "s",
            "called"
        ]
    },
    {
        "id": 80,
        "code": "\tpublic Collection<ExposableWebEndpoint> getEndpoints() {\n\t\treturn this.endpoints;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "web",
            "endpoints",
            "being",
            "mapped"
        ]
    },
    {
        "id": 81,
        "code": "\tprotected ServletWebOperation wrapServletWebOperation(ExposableWebEndpoint endpoint, WebOperation operation,\n\t\t\tServletWebOperation servletWebOperation) {\n\t\treturn servletWebOperation;\n\t}",
        "summary_tokens": [
            "hook",
            "point",
            "that",
            "allows",
            "subclasses",
            "to",
            "wrap",
            "the",
            "servlet",
            "web",
            "operation",
            "before",
            "it",
            "s",
            "called"
        ]
    },
    {
        "id": 82,
        "code": "\tpublic Collection<ExposableWebEndpoint> getEndpoints() {\n\t\treturn this.endpoints;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "web",
            "endpoints",
            "being",
            "mapped"
        ]
    },
    {
        "id": 83,
        "code": "\tpublic WebServerNamespace getNamespace() {\n\t\treturn this.namespace;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "web",
            "server",
            "namespace",
            "associated",
            "with",
            "this",
            "path"
        ]
    },
    {
        "id": 84,
        "code": "\tpublic String getValue() {\n\t\treturn this.value;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "corresponding",
            "to",
            "this",
            "path"
        ]
    },
    {
        "id": 85,
        "code": "\tpublic boolean hasNamespace(WebServerNamespace webServerNamespace) {\n\t\treturn this.namespace.equals(webServerNamespace);\n\t}",
        "summary_tokens": [
            "returns",
            "true",
            "if",
            "this",
            "path",
            "has",
            "the",
            "given",
            "web",
            "server",
            "namespace"
        ]
    },
    {
        "id": 86,
        "code": "\tpublic static AdditionalHealthEndpointPath from(String value) {\n\t\tAssert.hasText(value, \"Value must not be null\");\n\t\tString[] values = value.split(\":\");\n\t\tAssert.isTrue(values.length == 2, \"Value must contain a valid namespace and value separated by ':'.\");\n\t\tAssert.isTrue(StringUtils.hasText(values[0]), \"Value must contain a valid namespace.\");\n\t\tWebServerNamespace namespace = WebServerNamespace.from(values[0]);\n\t\tvalidateValue(values[1]);\n\t\treturn new AdditionalHealthEndpointPath(namespace, values[1]);\n\t}",
        "summary_tokens": [
            "creates",
            "an",
            "additional",
            "health",
            "endpoint",
            "path",
            "from",
            "the",
            "given",
            "input"
        ]
    },
    {
        "id": 87,
        "code": "\tpublic static AdditionalHealthEndpointPath of(WebServerNamespace webServerNamespace, String value) {\n\t\tAssert.notNull(webServerNamespace, \"The server namespace must not be null.\");\n\t\tAssert.notNull(value, \"The value must not be null.\");\n\t\tvalidateValue(value);\n\t\treturn new AdditionalHealthEndpointPath(webServerNamespace, value);\n\t}",
        "summary_tokens": [
            "creates",
            "an",
            "additional",
            "health",
            "endpoint",
            "path",
            "from",
            "the",
            "given",
            "web",
            "server",
            "namespace",
            "and",
            "value"
        ]
    },
    {
        "id": 88,
        "code": "\tstatic <V> CompositeHealthContributor fromMap(Map<String, V> map,\n\t\t\tFunction<V, ? extends HealthContributor> valueAdapter) {\n\t\treturn new CompositeHealthContributorMapAdapter<>(map, valueAdapter);\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "that",
            "will",
            "create",
            "a",
            "composite",
            "health",
            "contributor",
            "from",
            "the",
            "specified",
            "map"
        ]
    },
    {
        "id": 89,
        "code": "\tstatic <V> CompositeReactiveHealthContributor fromMap(Map<String, V> map,\n\t\t\tFunction<V, ? extends ReactiveHealthContributor> valueAdapter) {\n\t\treturn new CompositeReactiveHealthContributorMapAdapter<>(map, valueAdapter);\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "that",
            "will",
            "create",
            "a",
            "composite",
            "reactive",
            "health",
            "contributor",
            "from",
            "the",
            "specified",
            "map"
        ]
    },
    {
        "id": 90,
        "code": "\tdefault HealthEndpointGroup get(AdditionalHealthEndpointPath path) {\n\t\tAssert.notNull(path, \"Path must not be null\");\n\t\tfor (String name : getNames()) {\n\t\t\tHealthEndpointGroup group = get(name);\n\t\t\tif (path.equals(group.getAdditionalPath())) {\n\t\t\t\treturn group;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "group",
            "with",
            "the",
            "specified",
            "additional",
            "path",
            "or",
            "null",
            "if",
            "no",
            "group",
            "with",
            "that",
            "path",
            "is",
            "found"
        ]
    },
    {
        "id": 91,
        "code": "\tdefault Set<HealthEndpointGroup> getAllWithAdditionalPath(WebServerNamespace namespace) {\n\t\tAssert.notNull(namespace, \"Namespace must not be null\");\n\t\tSet<HealthEndpointGroup> filteredGroups = new LinkedHashSet<>();\n\t\tgetNames().stream().map(this::get).filter(\n\t\t\t\t(group) -> group.getAdditionalPath() != null && group.getAdditionalPath().hasNamespace(namespace))\n\t\t\t\t.forEach(filteredGroups::add);\n\t\treturn filteredGroups;\n\t}",
        "summary_tokens": [
            "return",
            "all",
            "the",
            "groups",
            "with",
            "an",
            "additional",
            "path",
            "on",
            "the",
            "specified",
            "web",
            "server",
            "namespace"
        ]
    },
    {
        "id": 92,
        "code": "\tstatic HealthEndpointGroups of(HealthEndpointGroup primary, Map<String, HealthEndpointGroup> additional) {\n\t\tAssert.notNull(primary, \"Primary must not be null\");\n\t\tAssert.notNull(additional, \"Additional must not be null\");\n\t\treturn new HealthEndpointGroups() {\n\n\t\t\t@Override\n\t\t\tpublic HealthEndpointGroup getPrimary() {\n\t\t\t\treturn primary;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic Set<String> getNames() {\n\t\t\t\treturn additional.keySet();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic HealthEndpointGroup get(String name) {\n\t\t\t\treturn additional.get(name);\n\t\t\t}\n\n\t\t};\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "create",
            "a",
            "health",
            "endpoint",
            "groups",
            "instance"
        ]
    },
    {
        "id": 93,
        "code": "\tdefault Health getHealth(boolean includeDetails) {\n\t\tHealth health = health();\n\t\treturn includeDetails ? health : health.withoutDetails();\n\t}",
        "summary_tokens": [
            "return",
            "an",
            "indication",
            "of",
            "health"
        ]
    },
    {
        "id": 94,
        "code": "\tdefault Stream<NamedContributor<C>> stream() {\n\t\treturn StreamSupport.stream(spliterator(), false);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "stream",
            "of",
            "the",
            "named",
            "contributor",
            "named",
            "contributors"
        ]
    },
    {
        "id": 95,
        "code": "\tdefault Mono<Health> getHealth(boolean includeDetails) {\n\t\tMono<Health> health = health();\n\t\treturn includeDetails ? health : health.map(Health::withoutDetails);\n\t}",
        "summary_tokens": [
            "provide",
            "the",
            "indicator",
            "of",
            "health"
        ]
    },
    {
        "id": 96,
        "code": "\tstatic StatusAggregator getDefault() {\n\t\treturn SimpleStatusAggregator.INSTANCE;\n\t}",
        "summary_tokens": [
            "return",
            "status",
            "aggregator",
            "instance",
            "using",
            "default",
            "ordering",
            "rules"
        ]
    },
    {
        "id": 97,
        "code": "\tdefault Status getAggregateStatus(Status... statuses) {\n\t\treturn getAggregateStatus(new LinkedHashSet<>(Arrays.asList(statuses)));\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "aggregate",
            "status",
            "for",
            "the",
            "given",
            "set",
            "of",
            "statuses"
        ]
    },
    {
        "id": 98,
        "code": "\tprotected void postProcessContent(Map<String, Object> content) {\n\t\treplaceValue(getNestedMap(content, \"commit\"), \"time\", getProperties().getCommitTime());\n\t\treplaceValue(getNestedMap(content, \"build\"), \"time\", getProperties().getInstant(\"build.time\"));\n\t}",
        "summary_tokens": [
            "post",
            "process",
            "the",
            "content",
            "to",
            "expose"
        ]
    },
    {
        "id": 99,
        "code": "\tprotected final T getProperties() {\n\t\treturn this.properties;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "properties",
            "that",
            "this",
            "instance",
            "manages"
        ]
    },
    {
        "id": 100,
        "code": "\tprotected final Mode getMode() {\n\t\treturn this.mode;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "mode",
            "that",
            "should",
            "be",
            "used",
            "to",
            "expose",
            "the",
            "content"
        ]
    },
    {
        "id": 101,
        "code": "\tprotected Map<String, Object> generateContent() {\n\t\tMap<String, Object> content = extractContent(toPropertySource());\n\t\tpostProcessContent(content);\n\t\treturn content;\n\t}",
        "summary_tokens": [
            "extract",
            "the",
            "content",
            "to",
            "contribute",
            "to",
            "the",
            "info",
            "endpoint"
        ]
    },
    {
        "id": 102,
        "code": "\tprotected Map<String, Object> extractContent(PropertySource<?> propertySource) {\n\t\treturn new Binder(ConfigurationPropertySources.from(propertySource)).bind(\"\", STRING_OBJECT_MAP)\n\t\t\t\t.orElseGet(LinkedHashMap::new);\n\t}",
        "summary_tokens": [
            "extract",
            "the",
            "raw",
            "content",
            "based",
            "on",
            "the",
            "specified",
            "property",
            "source"
        ]
    },
    {
        "id": 103,
        "code": "\tprotected void postProcessContent(Map<String, Object> content) {\n\n\t}",
        "summary_tokens": [
            "post",
            "process",
            "the",
            "content",
            "to",
            "expose"
        ]
    },
    {
        "id": 104,
        "code": "\tprotected PropertySource<?> toPropertySource() {\n\t\tif (this.mode.equals(Mode.FULL)) {\n\t\t\treturn this.properties.toPropertySource();\n\t\t}\n\t\treturn toSimplePropertySource();\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "property",
            "source",
            "to",
            "use",
            "based",
            "on",
            "the",
            "chosen",
            "mode"
        ]
    },
    {
        "id": 105,
        "code": "\tprotected void copyIfSet(Properties target, String key) {\n\t\tString value = this.properties.get(key);\n\t\tif (StringUtils.hasText(value)) {\n\t\t\ttarget.put(key, value);\n\t\t}\n\t}",
        "summary_tokens": [
            "copy",
            "the",
            "specified",
            "key",
            "to",
            "the",
            "target",
            "properties",
            "if",
            "it",
            "is",
            "set"
        ]
    },
    {
        "id": 106,
        "code": "\tprotected void replaceValue(Map<String, Object> content, String key, Object value) {\n\t\tif (content.containsKey(key) && value != null) {\n\t\t\tcontent.put(key, value);\n\t\t}\n\t}",
        "summary_tokens": [
            "replace",
            "the",
            "value",
            "for",
            "the",
            "specified",
            "key",
            "if",
            "the",
            "value",
            "is",
            "not",
            "null"
        ]
    },
    {
        "id": 107,
        "code": "\tprotected Map<String, Object> getNestedMap(Map<String, Object> map, String key) {\n\t\tObject value = map.get(key);\n\t\tif (value == null) {\n\t\t\treturn Collections.emptyMap();\n\t\t}\n\t\treturn (Map<String, Object>) value;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "nested",
            "map",
            "with",
            "the",
            "specified",
            "key",
            "or",
            "empty",
            "map",
            "if",
            "the",
            "specified",
            "map",
            "contains",
            "no",
            "mapping",
            "for",
            "the",
            "key"
        ]
    },
    {
        "id": 108,
        "code": "\tpublic void setDataSource(DataSource dataSource) {\n\t\tthis.dataSource = dataSource;\n\t\tthis.jdbcTemplate = new JdbcTemplate(dataSource);\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "data",
            "source",
            "to",
            "use"
        ]
    },
    {
        "id": 109,
        "code": "\tpublic void setQuery(String query) {\n\t\tthis.query = query;\n\t}",
        "summary_tokens": [
            "set",
            "a",
            "specific",
            "validation",
            "query",
            "to",
            "use",
            "to",
            "validate",
            "a",
            "connection"
        ]
    },
    {
        "id": 110,
        "code": "\tpublic String getQuery() {\n\t\treturn this.query;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "validation",
            "query",
            "or",
            "null"
        ]
    },
    {
        "id": 111,
        "code": "\tprotected HeapDumper createHeapDumper() throws HeapDumperUnavailableException {\n\t\ttry {\n\t\t\treturn new HotSpotDiagnosticMXBeanHeapDumper();\n\t\t}\n\t\tcatch (HeapDumperUnavailableException ex) {\n\t\t\treturn new OpenJ9DiagnosticsMXBeanHeapDumper();\n\t\t}\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "used",
            "to",
            "create",
            "the",
            "heap",
            "dumper"
        ]
    },
    {
        "id": 112,
        "code": "\tdefault boolean isEnabled() {\n\t\treturn true;\n\t}",
        "summary_tokens": [
            "return",
            "if",
            "the",
            "auto",
            "timer",
            "is",
            "enabled",
            "and",
            "metrics",
            "should",
            "be",
            "recorded"
        ]
    },
    {
        "id": 113,
        "code": "\tdefault Timer.Builder builder(Supplier<Timer.Builder> supplier) {\n\t\tTimer.Builder builder = supplier.get();\n\t\tapply(builder);\n\t\treturn builder;\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "create",
            "a",
            "new",
            "builder",
            "timer"
        ]
    },
    {
        "id": 114,
        "code": "\tpublic static Set<Timed> get(Method method, Class<?> type) {\n\t\tSet<Timed> methodAnnotations = findTimedAnnotations(method);\n\t\tif (!methodAnnotations.isEmpty()) {\n\t\t\treturn methodAnnotations;\n\t\t}\n\t\treturn findTimedAnnotations(type);\n\t}",
        "summary_tokens": [
            "return",
            "timed",
            "annotations",
            "that",
            "should",
            "be",
            "used",
            "for",
            "the",
            "given",
            "method",
            "and",
            "type"
        ]
    },
    {
        "id": 115,
        "code": "\tpublic static Tag method(HttpRequest request) {\n\t\treturn Tag.of(\"method\", request.getMethod().name());\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "method",
            "tag",
            "for",
            "the",
            "http",
            "request",
            "get",
            "method",
            "method",
            "of",
            "the",
            "given",
            "request"
        ]
    },
    {
        "id": 116,
        "code": "\tpublic static Tag uri(String uriTemplate) {\n\t\tString uri = (StringUtils.hasText(uriTemplate) ? uriTemplate : \"none\");\n\t\treturn Tag.of(\"uri\", ensureLeadingSlash(stripUri(uri)));\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "uri",
            "tag",
            "from",
            "the",
            "given",
            "uri",
            "template"
        ]
    },
    {
        "id": 117,
        "code": "\tpublic static Tag status(ClientHttpResponse response) {\n\t\treturn Tag.of(\"status\", getStatusMessage(response));\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "status",
            "tag",
            "derived",
            "from",
            "the",
            "client",
            "http",
            "response",
            "get",
            "status",
            "code",
            "status",
            "of",
            "the",
            "given",
            "response"
        ]
    },
    {
        "id": 118,
        "code": "\tpublic static Tag outcome(ClientHttpResponse response) {\n\t\ttry {\n\t\t\tif (response != null) {\n\t\t\t\treturn Outcome.forStatus(response.getStatusCode().value()).asTag();\n\t\t\t}\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\t\n\t\t}\n\t\treturn Outcome.UNKNOWN.asTag();\n\t}",
        "summary_tokens": [
            "creates",
            "an",
            "outcome",
            "tag",
            "derived",
            "from",
            "the",
            "client",
            "http",
            "response",
            "get",
            "status",
            "code",
            "status",
            "of",
            "the",
            "given",
            "response"
        ]
    },
    {
        "id": 119,
        "code": "\tpublic static Tag method(ClientRequest request) {\n\t\treturn Tag.of(\"method\", request.method().name());\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "method",
            "tag",
            "for",
            "the",
            "client",
            "http",
            "request",
            "get",
            "method",
            "method",
            "of",
            "the",
            "given",
            "request"
        ]
    },
    {
        "id": 120,
        "code": "\tpublic static Tag uri(ClientRequest request) {\n\t\tString uri = (String) request.attribute(URI_TEMPLATE_ATTRIBUTE).orElseGet(() -> request.url().toString());\n\t\treturn Tag.of(\"uri\", extractPath(uri));\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "uri",
            "tag",
            "for",
            "the",
            "uri",
            "path",
            "of",
            "the",
            "given",
            "request"
        ]
    },
    {
        "id": 121,
        "code": "\tpublic static Tag status(ClientResponse response, Throwable throwable) {\n\t\tif (response != null) {\n\t\t\treturn Tag.of(\"status\", String.valueOf(response.statusCode().value()));\n\t\t}\n\t\tif (throwable != null) {\n\t\t\treturn (throwable instanceof IOException) ? IO_ERROR : CLIENT_ERROR;\n\t\t}\n\t\treturn CLIENT_ERROR;\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "status",
            "tag",
            "derived",
            "from",
            "the",
            "client",
            "response",
            "status",
            "code",
            "of",
            "the",
            "given",
            "response",
            "if",
            "available",
            "the",
            "thrown",
            "exception",
            "otherwise",
            "or",
            "considers",
            "the",
            "request",
            "as",
            "cancelled",
            "as",
            "a",
            "last",
            "resort"
        ]
    },
    {
        "id": 122,
        "code": "\tpublic static Tag outcome(ClientResponse response) {\n\t\tOutcome outcome = (response != null) ? Outcome.forStatus(response.statusCode().value()) : Outcome.UNKNOWN;\n\t\treturn outcome.asTag();\n\t}",
        "summary_tokens": [
            "creates",
            "an",
            "outcome",
            "tag",
            "derived",
            "from",
            "the",
            "client",
            "response",
            "status",
            "code",
            "status",
            "of",
            "the",
            "given",
            "response"
        ]
    },
    {
        "id": 123,
        "code": "\tpublic static Tag method(ServerWebExchange exchange) {\n\t\treturn Tag.of(\"method\", exchange.getRequest().getMethod().name());\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "method",
            "tag",
            "based",
            "on",
            "the",
            "org"
        ]
    },
    {
        "id": 124,
        "code": "\tpublic static Tag status(ServerWebExchange exchange) {\n\t\tHttpStatusCode status = exchange.getResponse().getStatusCode();\n\t\tif (status == null) {\n\t\t\tstatus = HttpStatus.OK;\n\t\t}\n\t\treturn Tag.of(\"status\", String.valueOf(status.value()));\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "status",
            "tag",
            "based",
            "on",
            "the",
            "response",
            "status",
            "of",
            "the",
            "given",
            "exchange"
        ]
    },
    {
        "id": 125,
        "code": "\tpublic static Tag uri(ServerWebExchange exchange, boolean ignoreTrailingSlash) {\n\t\tPathPattern pathPattern = exchange.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE);\n\t\tif (pathPattern != null) {\n\t\t\tString patternString = pathPattern.getPatternString();\n\t\t\tif (ignoreTrailingSlash && patternString.length() > 1) {\n\t\t\t\tpatternString = removeTrailingSlash(patternString);\n\t\t\t}\n\t\t\tif (patternString.isEmpty()) {\n\t\t\t\treturn URI_ROOT;\n\t\t\t}\n\t\t\treturn Tag.of(\"uri\", patternString);\n\t\t}\n\t\tHttpStatusCode status = exchange.getResponse().getStatusCode();\n\t\tif (status != null) {\n\t\t\tif (status.is3xxRedirection()) {\n\t\t\t\treturn URI_REDIRECTION;\n\t\t\t}\n\t\t\tif (status == HttpStatus.NOT_FOUND) {\n\t\t\t\treturn URI_NOT_FOUND;\n\t\t\t}\n\t\t}\n\t\tString path = getPathInfo(exchange);\n\t\tif (path.isEmpty()) {\n\t\t\treturn URI_ROOT;\n\t\t}\n\t\treturn URI_UNKNOWN;\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "uri",
            "tag",
            "based",
            "on",
            "the",
            "uri",
            "of",
            "the",
            "given",
            "exchange"
        ]
    },
    {
        "id": 126,
        "code": "\tpublic static Tag exception(Throwable exception) {\n\t\tif (exception != null) {\n\t\t\tString simpleName = exception.getClass().getSimpleName();\n\t\t\treturn Tag.of(\"exception\", StringUtils.hasText(simpleName) ? simpleName : exception.getClass().getName());\n\t\t}\n\t\treturn EXCEPTION_NONE;\n\t}",
        "summary_tokens": [
            "creates",
            "an",
            "exception",
            "tag",
            "based",
            "on",
            "the",
            "class",
            "get",
            "simple",
            "name",
            "simple",
            "name",
            "of",
            "the",
            "class",
            "of",
            "the",
            "given",
            "exception"
        ]
    },
    {
        "id": 127,
        "code": "\tpublic static Tag outcome(ServerWebExchange exchange, Throwable exception) {\n\t\tif (exception != null) {\n\t\t\tif (exception instanceof CancelledServerWebExchangeException\n\t\t\t\t\t|| DISCONNECTED_CLIENT_EXCEPTIONS.contains(exception.getClass().getSimpleName())) {\n\t\t\t\treturn Outcome.UNKNOWN.asTag();\n\t\t\t}\n\t\t}\n\t\tHttpStatusCode statusCode = exchange.getResponse().getStatusCode();\n\t\tOutcome outcome = (statusCode != null) ? Outcome.forStatus(statusCode.value()) : Outcome.SUCCESS;\n\t\treturn outcome.asTag();\n\t}",
        "summary_tokens": [
            "creates",
            "an",
            "outcome",
            "tag",
            "based",
            "on",
            "the",
            "response",
            "status",
            "of",
            "the",
            "given",
            "exchange",
            "and",
            "the",
            "exception",
            "thrown",
            "during",
            "request",
            "processing"
        ]
    },
    {
        "id": 128,
        "code": "\tpublic static Tag method(HttpServletRequest request) {\n\t\treturn (request != null) ? Tag.of(\"method\", request.getMethod()) : METHOD_UNKNOWN;\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "method",
            "tag",
            "based",
            "on",
            "the",
            "http",
            "servlet",
            "request",
            "get",
            "method",
            "method",
            "of",
            "the",
            "given",
            "request"
        ]
    },
    {
        "id": 129,
        "code": "\tpublic static Tag status(HttpServletResponse response) {\n\t\treturn (response != null) ? Tag.of(\"status\", Integer.toString(response.getStatus())) : STATUS_UNKNOWN;\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "status",
            "tag",
            "based",
            "on",
            "the",
            "status",
            "of",
            "the",
            "given",
            "response"
        ]
    },
    {
        "id": 130,
        "code": "\tpublic static Tag uri(HttpServletRequest request, HttpServletResponse response, boolean ignoreTrailingSlash) {\n\t\tif (request != null) {\n\t\t\tString pattern = getMatchingPattern(request);\n\t\t\tif (pattern != null) {\n\t\t\t\tif (ignoreTrailingSlash && pattern.length() > 1) {\n\t\t\t\t\tpattern = TRAILING_SLASH_PATTERN.matcher(pattern).replaceAll(\"\");\n\t\t\t\t}\n\t\t\t\tif (pattern.isEmpty()) {\n\t\t\t\t\treturn URI_ROOT;\n\t\t\t\t}\n\t\t\t\treturn Tag.of(\"uri\", pattern);\n\t\t\t}\n\t\t\tif (response != null) {\n\t\t\t\tHttpStatus status = extractStatus(response);\n\t\t\t\tif (status != null) {\n\t\t\t\t\tif (status.is3xxRedirection()) {\n\t\t\t\t\t\treturn URI_REDIRECTION;\n\t\t\t\t\t}\n\t\t\t\t\tif (status == HttpStatus.NOT_FOUND) {\n\t\t\t\t\t\treturn URI_NOT_FOUND;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tString pathInfo = getPathInfo(request);\n\t\t\tif (pathInfo.isEmpty()) {\n\t\t\t\treturn URI_ROOT;\n\t\t\t}\n\t\t}\n\t\treturn URI_UNKNOWN;\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "uri",
            "tag",
            "based",
            "on",
            "the",
            "uri",
            "of",
            "the",
            "given",
            "request"
        ]
    },
    {
        "id": 131,
        "code": "\tpublic static Tag exception(Throwable exception) {\n\t\tif (exception != null) {\n\t\t\tString simpleName = exception.getClass().getSimpleName();\n\t\t\treturn Tag.of(\"exception\", StringUtils.hasText(simpleName) ? simpleName : exception.getClass().getName());\n\t\t}\n\t\treturn EXCEPTION_NONE;\n\t}",
        "summary_tokens": [
            "creates",
            "an",
            "exception",
            "tag",
            "based",
            "on",
            "the",
            "class",
            "get",
            "simple",
            "name",
            "simple",
            "name",
            "of",
            "the",
            "class",
            "of",
            "the",
            "given",
            "exception"
        ]
    },
    {
        "id": 132,
        "code": "\tpublic static Tag outcome(HttpServletResponse response) {\n\t\tOutcome outcome = (response != null) ? Outcome.forStatus(response.getStatus()) : Outcome.UNKNOWN;\n\t\treturn outcome.asTag();\n\t}",
        "summary_tokens": [
            "creates",
            "an",
            "outcome",
            "tag",
            "based",
            "on",
            "the",
            "status",
            "of",
            "the",
            "given",
            "response"
        ]
    },
    {
        "id": 133,
        "code": "\tvoid addHealthDetails(Builder builder, Neo4jHealthDetails healthDetails) {\n\t\tResultSummary summary = healthDetails.getSummary();\n\t\tServerInfo serverInfo = summary.server();\n\t\tbuilder.up().withDetail(\"server\", healthDetails.getVersion() + \"@\" + serverInfo.address()).withDetail(\"edition\",\n\t\t\t\thealthDetails.getEdition());\n\t\tDatabaseInfo databaseInfo = summary.database();\n\t\tif (StringUtils.hasText(databaseInfo.name())) {\n\t\t\tbuilder.withDetail(\"database\", databaseInfo.name());\n\t\t}\n\t}",
        "summary_tokens": [
            "add",
            "health",
            "details",
            "for",
            "the",
            "specified",
            "result",
            "summary",
            "and",
            "edition"
        ]
    },
    {
        "id": 134,
        "code": "\tpublic final HttpTrace receivedRequest(TraceableRequest request) {\n\t\treturn new HttpTrace(new FilteredTraceableRequest(request));\n\t}",
        "summary_tokens": [
            "begins",
            "the",
            "tracing",
            "of",
            "the",
            "exchange",
            "that",
            "was",
            "initiated",
            "by",
            "the",
            "given",
            "request",
            "being",
            "received"
        ]
    },
    {
        "id": 135,
        "code": "\tpublic final void sendingResponse(HttpTrace trace, TraceableResponse response, Supplier<Principal> principal,\n\t\t\tSupplier<String> sessionId) {\n\t\tsetIfIncluded(Include.TIME_TAKEN, () -> calculateTimeTaken(trace), trace::setTimeTaken);\n\t\tsetIfIncluded(Include.SESSION_ID, sessionId, trace::setSessionId);\n\t\tsetIfIncluded(Include.PRINCIPAL, principal, trace::setPrincipal);\n\t\ttrace.setResponse(new HttpTrace.Response(new FilteredTraceableResponse(response)));\n\t}",
        "summary_tokens": [
            "ends",
            "the",
            "tracing",
            "of",
            "the",
            "exchange",
            "that",
            "is",
            "being",
            "concluded",
            "by",
            "sending",
            "the",
            "given",
            "response"
        ]
    },
    {
        "id": 136,
        "code": "\tprotected void postProcessRequestHeaders(Map<String, List<String>> headers) {\n\n\t}",
        "summary_tokens": [
            "post",
            "process",
            "the",
            "given",
            "mutable",
            "map",
            "of",
            "request",
            "headers"
        ]
    },
    {
        "id": 137,
        "code": "\tpublic void setReverse(boolean reverse) {\n\t\tsynchronized (this.traces) {\n\t\t\tthis.reverse = reverse;\n\t\t}\n\t}",
        "summary_tokens": [
            "flag",
            "to",
            "say",
            "that",
            "the",
            "repository",
            "lists",
            "traces",
            "in",
            "reverse",
            "order"
        ]
    },
    {
        "id": 138,
        "code": "\tpublic void setCapacity(int capacity) {\n\t\tsynchronized (this.traces) {\n\t\t\tthis.capacity = capacity;\n\t\t}\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "capacity",
            "of",
            "the",
            "in",
            "memory",
            "repository"
        ]
    },
    {
        "id": 139,
        "code": "\tpublic Collection<String> getServletNameMappings() {\n\t\treturn getRegistration().getServletNameMappings();\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "servlet",
            "name",
            "mappings",
            "for",
            "the",
            "registered",
            "filter"
        ]
    },
    {
        "id": 140,
        "code": "\tpublic Collection<String> getUrlPatternMappings() {\n\t\treturn getRegistration().getUrlPatternMappings();\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "url",
            "pattern",
            "mappings",
            "for",
            "the",
            "registered",
            "filter"
        ]
    },
    {
        "id": 141,
        "code": "\tpublic String getName() {\n\t\treturn this.registration.getName();\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "name",
            "of",
            "the",
            "registered",
            "filter",
            "or",
            "servlet"
        ]
    },
    {
        "id": 142,
        "code": "\tpublic String getClassName() {\n\t\treturn this.registration.getClassName();\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "class",
            "name",
            "of",
            "the",
            "registered",
            "filter",
            "or",
            "servlet"
        ]
    },
    {
        "id": 143,
        "code": "\tprotected final T getRegistration() {\n\t\treturn this.registration;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "registration",
            "that",
            "is",
            "being",
            "described"
        ]
    },
    {
        "id": 144,
        "code": "\tpublic Collection<String> getMappings() {\n\t\treturn getRegistration().getMappings();\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "mappings",
            "for",
            "the",
            "registered",
            "servlet"
        ]
    },
    {
        "id": 145,
        "code": "\tpublic List<String> getCandidateConfigurations() {\n\t\treturn this.candidateConfigurations;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "auto",
            "configuration",
            "candidate",
            "configurations",
            "that",
            "are",
            "going",
            "to",
            "be",
            "imported"
        ]
    },
    {
        "id": 146,
        "code": "\tpublic Set<String> getExclusions() {\n\t\treturn this.exclusions;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "exclusions",
            "that",
            "were",
            "applied"
        ]
    },
    {
        "id": 147,
        "code": "\tpublic final void configure(T connectionFactory) {\n\t\tAssert.notNull(connectionFactory, \"ConnectionFactory must not be null\");\n\t\tPropertyMapper map = PropertyMapper.get();\n\t\tmap.from(this.rabbitProperties::determineAddresses).to(connectionFactory::setAddresses);\n\t\tmap.from(this.rabbitProperties::getAddressShuffleMode).whenNonNull()\n\t\t\t\t.to(connectionFactory::setAddressShuffleMode);\n\t\tmap.from(this.connectionNameStrategy).whenNonNull().to(connectionFactory::setConnectionNameStrategy);\n\t\tconfigure(connectionFactory, this.rabbitProperties);\n\t}",
        "summary_tokens": [
            "configures",
            "the",
            "given",
            "connection",
            "factory",
            "with",
            "sensible",
            "defaults"
        ]
    },
    {
        "id": 148,
        "code": "\tprotected void setMessageConverter(MessageConverter messageConverter) {\n\t\tthis.messageConverter = messageConverter;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "message",
            "converter",
            "to",
            "use",
            "or",
            "null",
            "if",
            "the",
            "out",
            "of",
            "the",
            "box",
            "converter",
            "should",
            "be",
            "used"
        ]
    },
    {
        "id": 149,
        "code": "\tprotected void setMessageRecoverer(MessageRecoverer messageRecoverer) {\n\t\tthis.messageRecoverer = messageRecoverer;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "message",
            "recoverer",
            "to",
            "use",
            "or",
            "null",
            "to",
            "rely",
            "on",
            "the",
            "default"
        ]
    },
    {
        "id": 150,
        "code": "\tprotected void setRetryTemplateCustomizers(List<RabbitRetryTemplateCustomizer> retryTemplateCustomizers) {\n\t\tthis.retryTemplateCustomizers = retryTemplateCustomizers;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "rabbit",
            "retry",
            "template",
            "customizer",
            "instances",
            "to",
            "use"
        ]
    },
    {
        "id": 151,
        "code": "\tpublic void configure(RabbitConnectionFactoryBean factory) {\n\t\tAssert.notNull(factory, \"RabbitConnectionFactoryBean must not be null\");\n\t\tfactory.setResourceLoader(this.resourceLoader);\n\t\tPropertyMapper map = PropertyMapper.get();\n\t\tmap.from(this.rabbitProperties::determineHost).whenNonNull().to(factory::setHost);\n\t\tmap.from(this.rabbitProperties::determinePort).to(factory::setPort);\n\t\tmap.from(this.rabbitProperties::determineUsername).whenNonNull().to(factory::setUsername);\n\t\tmap.from(this.rabbitProperties::determinePassword).whenNonNull().to(factory::setPassword);\n\t\tmap.from(this.rabbitProperties::determineVirtualHost).whenNonNull().to(factory::setVirtualHost);\n\t\tmap.from(this.rabbitProperties::getRequestedHeartbeat).whenNonNull().asInt(Duration::getSeconds)\n\t\t\t\t.to(factory::setRequestedHeartbeat);\n\t\tmap.from(this.rabbitProperties::getRequestedChannelMax).to(factory::setRequestedChannelMax);\n\t\tRabbitProperties.Ssl ssl = this.rabbitProperties.getSsl();\n\t\tif (ssl.determineEnabled()) {\n\t\t\tfactory.setUseSSL(true);\n\t\t\tmap.from(ssl::getAlgorithm).whenNonNull().to(factory::setSslAlgorithm);\n\t\t\tmap.from(ssl::getKeyStoreType).to(factory::setKeyStoreType);\n\t\t\tmap.from(ssl::getKeyStore).to(factory::setKeyStore);\n\t\t\tmap.from(ssl::getKeyStorePassword).to(factory::setKeyStorePassphrase);\n\t\t\tmap.from(ssl::getKeyStoreAlgorithm).whenNonNull().to(factory::setKeyStoreAlgorithm);\n\t\t\tmap.from(ssl::getTrustStoreType).to(factory::setTrustStoreType);\n\t\t\tmap.from(ssl::getTrustStore).to(factory::setTrustStore);\n\t\t\tmap.from(ssl::getTrustStorePassword).to(factory::setTrustStorePassphrase);\n\t\t\tmap.from(ssl::getTrustStoreAlgorithm).whenNonNull().to(factory::setTrustStoreAlgorithm);\n\t\t\tmap.from(ssl::isValidateServerCertificate)\n\t\t\t\t\t.to((validate) -> factory.setSkipServerCertificateValidation(!validate));\n\t\t\tmap.from(ssl::getVerifyHostname).to(factory::setEnableHostnameVerification);\n\t\t}\n\t\tmap.from(this.rabbitProperties::getConnectionTimeout).whenNonNull().asInt(Duration::toMillis)\n\t\t\t\t.to(factory::setConnectionTimeout);\n\t\tmap.from(this.rabbitProperties::getChannelRpcTimeout).whenNonNull().asInt(Duration::toMillis)\n\t\t\t\t.to(factory::setChannelRpcTimeout);\n\t\tmap.from(this.credentialsProvider).whenNonNull().to(factory::setCredentialsProvider);\n\t\tmap.from(this.credentialsRefreshService).whenNonNull().to(factory::setCredentialsRefreshService);\n\t}",
        "summary_tokens": [
            "configure",
            "the",
            "specified",
            "rabbit",
            "connection",
            "factory",
            "bean"
        ]
    },
    {
        "id": 152,
        "code": "\tpublic String determineHost() {\n\t\tif (CollectionUtils.isEmpty(this.parsedAddresses)) {\n\t\t\treturn getHost();\n\t\t}\n\t\treturn this.parsedAddresses.get(0).host;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "host",
            "from",
            "the",
            "first",
            "address",
            "or",
            "the",
            "configured",
            "host",
            "if",
            "no",
            "addresses",
            "have",
            "been",
            "set"
        ]
    },
    {
        "id": 153,
        "code": "\tpublic int determinePort() {\n\t\tif (CollectionUtils.isEmpty(this.parsedAddresses)) {\n\t\t\tInteger port = getPort();\n\t\t\tif (port != null) {\n\t\t\t\treturn port;\n\t\t\t}\n\t\t\treturn (Optional.ofNullable(getSsl().getEnabled()).orElse(false)) ? DEFAULT_PORT_SECURE : DEFAULT_PORT;\n\t\t}\n\t\treturn this.parsedAddresses.get(0).port;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "port",
            "from",
            "the",
            "first",
            "address",
            "or",
            "the",
            "configured",
            "port",
            "if",
            "no",
            "addresses",
            "have",
            "been",
            "set"
        ]
    },
    {
        "id": 154,
        "code": "\tpublic String determineAddresses() {\n\t\tif (CollectionUtils.isEmpty(this.parsedAddresses)) {\n\t\t\treturn this.host + \":\" + determinePort();\n\t\t}\n\t\tList<String> addressStrings = new ArrayList<>();\n\t\tfor (Address parsedAddress : this.parsedAddresses) {\n\t\t\taddressStrings.add(parsedAddress.host + \":\" + parsedAddress.port);\n\t\t}\n\t\treturn StringUtils.collectionToCommaDelimitedString(addressStrings);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "comma",
            "separated",
            "addresses",
            "or",
            "a",
            "single",
            "address",
            "host",
            "port",
            "created",
            "from",
            "the",
            "configured",
            "host",
            "and",
            "port",
            "if",
            "no",
            "addresses",
            "have",
            "been",
            "set"
        ]
    },
    {
        "id": 155,
        "code": "\tpublic String determineUsername() {\n\t\tif (CollectionUtils.isEmpty(this.parsedAddresses)) {\n\t\t\treturn this.username;\n\t\t}\n\t\tAddress address = this.parsedAddresses.get(0);\n\t\treturn (address.username != null) ? address.username : this.username;\n\t}",
        "summary_tokens": [
            "if",
            "addresses",
            "have",
            "been",
            "set",
            "and",
            "the",
            "first",
            "address",
            "has",
            "a",
            "username",
            "it",
            "is",
            "returned"
        ]
    },
    {
        "id": 156,
        "code": "\tpublic String determinePassword() {\n\t\tif (CollectionUtils.isEmpty(this.parsedAddresses)) {\n\t\t\treturn getPassword();\n\t\t}\n\t\tAddress address = this.parsedAddresses.get(0);\n\t\treturn (address.password != null) ? address.password : getPassword();\n\t}",
        "summary_tokens": [
            "if",
            "addresses",
            "have",
            "been",
            "set",
            "and",
            "the",
            "first",
            "address",
            "has",
            "a",
            "password",
            "it",
            "is",
            "returned"
        ]
    },
    {
        "id": 157,
        "code": "\tpublic String determineVirtualHost() {\n\t\tif (CollectionUtils.isEmpty(this.parsedAddresses)) {\n\t\t\treturn getVirtualHost();\n\t\t}\n\t\tAddress address = this.parsedAddresses.get(0);\n\t\treturn (address.virtualHost != null) ? address.virtualHost : getVirtualHost();\n\t}",
        "summary_tokens": [
            "if",
            "addresses",
            "have",
            "been",
            "set",
            "and",
            "the",
            "first",
            "address",
            "has",
            "a",
            "virtual",
            "host",
            "it",
            "is",
            "returned"
        ]
    },
    {
        "id": 158,
        "code": "\tpublic void setMessageConverter(MessageConverter messageConverter) {\n\t\tthis.messageConverter = messageConverter;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "message",
            "converter",
            "to",
            "use",
            "or",
            "null",
            "if",
            "the",
            "out",
            "of",
            "the",
            "box",
            "converter",
            "should",
            "be",
            "used"
        ]
    },
    {
        "id": 159,
        "code": "\tpublic void setStreamMessageConverter(StreamMessageConverter streamMessageConverter) {\n\t\tthis.streamMessageConverter = streamMessageConverter;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "stream",
            "message",
            "converter",
            "to",
            "use",
            "or",
            "null",
            "if",
            "the",
            "out",
            "of",
            "the",
            "box",
            "stream",
            "message",
            "converter",
            "should",
            "be",
            "used"
        ]
    },
    {
        "id": 160,
        "code": "\tpublic void setProducerCustomizer(ProducerCustomizer producerCustomizer) {\n\t\tthis.producerCustomizer = producerCustomizer;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "producer",
            "customizer",
            "instances",
            "to",
            "use"
        ]
    },
    {
        "id": 161,
        "code": "\tpublic void configure(RabbitStreamTemplate template) {\n\t\tif (this.messageConverter != null) {\n\t\t\ttemplate.setMessageConverter(this.messageConverter);\n\t\t}\n\t\tif (this.streamMessageConverter != null) {\n\t\t\ttemplate.setStreamConverter(this.streamMessageConverter);\n\t\t}\n\t\tif (this.producerCustomizer != null) {\n\t\t\ttemplate.setProducerCustomizer(this.producerCustomizer);\n\t\t}\n\t}",
        "summary_tokens": [
            "configure",
            "the",
            "specified",
            "rabbit",
            "stream",
            "template"
        ]
    },
    {
        "id": 162,
        "code": "\tpublic void setMessageConverter(MessageConverter messageConverter) {\n\t\tthis.messageConverter = messageConverter;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "message",
            "converter",
            "to",
            "use",
            "or",
            "null",
            "if",
            "the",
            "out",
            "of",
            "the",
            "box",
            "converter",
            "should",
            "be",
            "used"
        ]
    },
    {
        "id": 163,
        "code": "\tpublic void setRetryTemplateCustomizers(List<RabbitRetryTemplateCustomizer> retryTemplateCustomizers) {\n\t\tthis.retryTemplateCustomizers = retryTemplateCustomizers;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "rabbit",
            "retry",
            "template",
            "customizer",
            "instances",
            "to",
            "use"
        ]
    },
    {
        "id": 164,
        "code": "\tpublic void configure(RabbitTemplate template, ConnectionFactory connectionFactory) {\n\t\tPropertyMapper map = PropertyMapper.get();\n\t\ttemplate.setConnectionFactory(connectionFactory);\n\t\tif (this.messageConverter != null) {\n\t\t\ttemplate.setMessageConverter(this.messageConverter);\n\t\t}\n\t\ttemplate.setMandatory(determineMandatoryFlag());\n\t\tRabbitProperties.Template templateProperties = this.rabbitProperties.getTemplate();\n\t\tif (templateProperties.getRetry().isEnabled()) {\n\t\t\ttemplate.setRetryTemplate(new RetryTemplateFactory(this.retryTemplateCustomizers)\n\t\t\t\t\t.createRetryTemplate(templateProperties.getRetry(), RabbitRetryTemplateCustomizer.Target.SENDER));\n\t\t}\n\t\tmap.from(templateProperties::getReceiveTimeout).whenNonNull().as(Duration::toMillis)\n\t\t\t\t.to(template::setReceiveTimeout);\n\t\tmap.from(templateProperties::getReplyTimeout).whenNonNull().as(Duration::toMillis)\n\t\t\t\t.to(template::setReplyTimeout);\n\t\tmap.from(templateProperties::getExchange).to(template::setExchange);\n\t\tmap.from(templateProperties::getRoutingKey).to(template::setRoutingKey);\n\t\tmap.from(templateProperties::getDefaultReceiveQueue).whenNonNull().to(template::setDefaultReceiveQueue);\n\t}",
        "summary_tokens": [
            "configure",
            "the",
            "specified",
            "rabbit",
            "template"
        ]
    },
    {
        "id": 165,
        "code": "\tprotected String determineIsolationLevel() {\n\t\tIsolation isolation = this.properties.getJdbc().getIsolationLevelForCreate();\n\t\treturn (isolation != null) ? isolation.toIsolationName() : null;\n\t}",
        "summary_tokens": [
            "determine",
            "the",
            "isolation",
            "level",
            "for",
            "create",
            "operation",
            "of",
            "the",
            "job",
            "repository"
        ]
    },
    {
        "id": 166,
        "code": "\tpublic JobExecution getJobExecution() {\n\t\treturn this.execution;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "job",
            "execution"
        ]
    },
    {
        "id": 167,
        "code": "\tpublic <T extends CacheManager> T customize(T cacheManager) {\n\t\tLambdaSafe.callbacks(CacheManagerCustomizer.class, this.customizers, cacheManager)\n\t\t\t\t.withLogger(CacheManagerCustomizers.class).invoke((customizer) -> customizer.customize(cacheManager));\n\t\treturn cacheManager;\n\t}",
        "summary_tokens": [
            "customize",
            "the",
            "specified",
            "cache",
            "manager"
        ]
    },
    {
        "id": 168,
        "code": "\tpublic Resource resolveConfigLocation(Resource config) {\n\t\tif (config != null) {\n\t\t\tAssert.isTrue(config.exists(),\n\t\t\t\t\t() -> \"Cache configuration does not exist '\" + config.getDescription() + \"'\");\n\t\t\treturn config;\n\t\t}\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "resolve",
            "the",
            "config",
            "location",
            "if",
            "set"
        ]
    },
    {
        "id": 169,
        "code": "\tpublic void recordConditionEvaluation(String source, Condition condition, ConditionOutcome outcome) {\n\t\tAssert.notNull(source, \"Source must not be null\");\n\t\tAssert.notNull(condition, \"Condition must not be null\");\n\t\tAssert.notNull(outcome, \"Outcome must not be null\");\n\t\tthis.unconditionalClasses.remove(source);\n\t\tif (!this.outcomes.containsKey(source)) {\n\t\t\tthis.outcomes.put(source, new ConditionAndOutcomes());\n\t\t}\n\t\tthis.outcomes.get(source).add(condition, outcome);\n\t\tthis.addedAncestorOutcomes = false;\n\t}",
        "summary_tokens": [
            "record",
            "the",
            "occurrence",
            "of",
            "condition",
            "evaluation"
        ]
    },
    {
        "id": 170,
        "code": "\tpublic void recordExclusions(Collection<String> exclusions) {\n\t\tAssert.notNull(exclusions, \"exclusions must not be null\");\n\t\tthis.exclusions.addAll(exclusions);\n\t}",
        "summary_tokens": [
            "records",
            "the",
            "names",
            "of",
            "the",
            "classes",
            "that",
            "have",
            "been",
            "excluded",
            "from",
            "condition",
            "evaluation"
        ]
    },
    {
        "id": 171,
        "code": "\tpublic void recordEvaluationCandidates(List<String> evaluationCandidates) {\n\t\tAssert.notNull(evaluationCandidates, \"evaluationCandidates must not be null\");\n\t\tthis.unconditionalClasses.addAll(evaluationCandidates);\n\t}",
        "summary_tokens": [
            "records",
            "the",
            "names",
            "of",
            "the",
            "classes",
            "that",
            "are",
            "candidates",
            "for",
            "condition",
            "evaluation"
        ]
    },
    {
        "id": 172,
        "code": "\tpublic Map<String, ConditionAndOutcomes> getConditionAndOutcomesBySource() {\n\t\tif (!this.addedAncestorOutcomes) {\n\t\t\tthis.outcomes.forEach((source, sourceOutcomes) -> {\n\t\t\t\tif (!sourceOutcomes.isFullMatch()) {\n\t\t\t\t\taddNoMatchOutcomeToAncestors(source);\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.addedAncestorOutcomes = true;\n\t\t}\n\t\treturn Collections.unmodifiableMap(this.outcomes);\n\t}",
        "summary_tokens": [
            "returns",
            "condition",
            "outcomes",
            "from",
            "this",
            "report",
            "grouped",
            "by",
            "the",
            "source"
        ]
    },
    {
        "id": 173,
        "code": "\tpublic List<String> getExclusions() {\n\t\treturn Collections.unmodifiableList(this.exclusions);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "names",
            "of",
            "the",
            "classes",
            "that",
            "have",
            "been",
            "excluded",
            "from",
            "condition",
            "evaluation"
        ]
    },
    {
        "id": 174,
        "code": "\tpublic Set<String> getUnconditionalClasses() {\n\t\tSet<String> filtered = new HashSet<>(this.unconditionalClasses);\n\t\tfiltered.removeAll(this.exclusions);\n\t\treturn Collections.unmodifiableSet(filtered);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "names",
            "of",
            "the",
            "classes",
            "that",
            "were",
            "evaluated",
            "but",
            "were",
            "not",
            "conditional"
        ]
    },
    {
        "id": 175,
        "code": "\tpublic ConditionEvaluationReport getParent() {\n\t\treturn this.parent;\n\t}",
        "summary_tokens": [
            "the",
            "parent",
            "report",
            "from",
            "a",
            "parent",
            "bean",
            "factory",
            "if",
            "there",
            "is",
            "one"
        ]
    },
    {
        "id": 176,
        "code": "\tpublic static ConditionEvaluationReport find(BeanFactory beanFactory) {\n\t\tif (beanFactory != null && beanFactory instanceof ConfigurableBeanFactory) {\n\t\t\treturn ConditionEvaluationReport.get((ConfigurableListableBeanFactory) beanFactory);\n\t\t}\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "attempt",
            "to",
            "find",
            "the",
            "condition",
            "evaluation",
            "report",
            "for",
            "the",
            "specified",
            "bean",
            "factory"
        ]
    },
    {
        "id": 177,
        "code": "\tpublic static ConditionEvaluationReport get(ConfigurableListableBeanFactory beanFactory) {\n\t\tsynchronized (beanFactory) {\n\t\t\tConditionEvaluationReport report;\n\t\t\tif (beanFactory.containsSingleton(BEAN_NAME)) {\n\t\t\t\treport = beanFactory.getBean(BEAN_NAME, ConditionEvaluationReport.class);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treport = new ConditionEvaluationReport();\n\t\t\t\tbeanFactory.registerSingleton(BEAN_NAME, report);\n\t\t\t}\n\t\t\tlocateParent(beanFactory.getParentBeanFactory(), report);\n\t\t\treturn report;\n\t\t}\n\t}",
        "summary_tokens": [
            "obtain",
            "a",
            "condition",
            "evaluation",
            "report",
            "for",
            "the",
            "specified",
            "bean",
            "factory"
        ]
    },
    {
        "id": 178,
        "code": "\tpublic static ConditionOutcome match(ConditionMessage message) {\n\t\treturn new ConditionOutcome(true, message);\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "new",
            "condition",
            "outcome",
            "instance",
            "for",
            "match"
        ]
    },
    {
        "id": 179,
        "code": "\tpublic static ConditionOutcome noMatch(ConditionMessage message) {\n\t\treturn new ConditionOutcome(false, message);\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "new",
            "condition",
            "outcome",
            "instance",
            "for",
            "no",
            "match"
        ]
    },
    {
        "id": 180,
        "code": "\tpublic boolean isMatch() {\n\t\treturn this.match;\n\t}",
        "summary_tokens": [
            "return",
            "true",
            "if",
            "the",
            "outcome",
            "was",
            "a",
            "match"
        ]
    },
    {
        "id": 181,
        "code": "\tpublic String getMessage() {\n\t\treturn this.message.isEmpty() ? null : this.message.toString();\n\t}",
        "summary_tokens": [
            "return",
            "an",
            "outcome",
            "message",
            "or",
            "null"
        ]
    },
    {
        "id": 182,
        "code": "\tpublic ConditionMessage getConditionMessage() {\n\t\treturn this.message;\n\t}",
        "summary_tokens": [
            "return",
            "an",
            "outcome",
            "message",
            "or",
            "null"
        ]
    },
    {
        "id": 183,
        "code": "\tpublic static ConditionOutcome inverse(ConditionOutcome outcome) {\n\t\treturn new ConditionOutcome(!outcome.isMatch(), outcome.getConditionMessage());\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "inverse",
            "of",
            "the",
            "specified",
            "condition",
            "outcome"
        ]
    },
    {
        "id": 184,
        "code": "\tprotected static Class<?> resolve(String className, ClassLoader classLoader) throws ClassNotFoundException {\n\t\tif (classLoader != null) {\n\t\t\treturn Class.forName(className, false, classLoader);\n\t\t}\n\t\treturn Class.forName(className);\n\t}",
        "summary_tokens": [
            "slightly",
            "faster",
            "variant",
            "of",
            "class",
            "utils",
            "for",
            "name",
            "string",
            "class",
            "loader",
            "that",
            "doesn",
            "t",
            "deal",
            "with",
            "primitives",
            "arrays",
            "or",
            "inner",
            "types"
        ]
    },
    {
        "id": 185,
        "code": "\tprivate String wrapIfNecessary(String expression) {\n\t\tif (!expression.startsWith(\"#{\")) {\n\t\t\treturn \"#{\" + expression + \"}\";\n\t\t}\n\t\treturn expression;\n\t}\n\n}",
        "summary_tokens": [
            "allow",
            "user",
            "to",
            "provide",
            "bare",
            "expression",
            "with",
            "no",
            "wrapper"
        ]
    },
    {
        "id": 186,
        "code": "\tprivate boolean isWithin(JavaVersion runningVersion, Range range, JavaVersion version) {\n\t\tif (range == Range.EQUAL_OR_NEWER) {\n\t\t\treturn runningVersion.isEqualOrNewerThan(version);\n\t\t}\n\t\tif (range == Range.OLDER_THAN) {\n\t\t\treturn runningVersion.isOlderThan(version);\n\t\t}\n\t\tthrow new IllegalStateException(\"Unknown range \" + range);\n\t}",
        "summary_tokens": [
            "determines",
            "if",
            "the",
            "running",
            "version",
            "is",
            "within",
            "the",
            "specified",
            "range",
            "of",
            "versions"
        ]
    },
    {
        "id": 187,
        "code": "\tprotected ConditionOutcome getResourceOutcome(ConditionContext context, AnnotatedTypeMetadata metadata) {\n\t\tList<String> found = new ArrayList<>();\n\t\tfor (String location : this.resourceLocations) {\n\t\t\tResource resource = context.getResourceLoader().getResource(location);\n\t\t\tif (resource != null && resource.exists()) {\n\t\t\t\tfound.add(location);\n\t\t\t}\n\t\t}\n\t\tif (found.isEmpty()) {\n\t\t\tConditionMessage message = startConditionMessage().didNotFind(\"resource\", \"resources\").items(Style.QUOTE,\n\t\t\t\t\tArrays.asList(this.resourceLocations));\n\t\t\treturn ConditionOutcome.noMatch(message);\n\t\t}\n\t\tConditionMessage message = startConditionMessage().found(\"resource\", \"resources\").items(Style.QUOTE, found);\n\t\treturn ConditionOutcome.match(message);\n\t}",
        "summary_tokens": [
            "check",
            "if",
            "one",
            "of",
            "the",
            "default",
            "resource",
            "locations",
            "actually",
            "exists"
        ]
    },
    {
        "id": 188,
        "code": "\tprotected BootstrapMode getBootstrapMode() {\n\t\treturn BootstrapMode.DEFAULT;\n\t}",
        "summary_tokens": [
            "the",
            "bootstrap",
            "mode",
            "for",
            "the",
            "particular",
            "repository",
            "support"
        ]
    },
    {
        "id": 189,
        "code": "\tprotected final RedisClusterConfiguration getClusterConfiguration() {\n\t\tif (this.clusterConfiguration != null) {\n\t\t\treturn this.clusterConfiguration;\n\t\t}\n\t\tif (this.properties.getCluster() == null) {\n\t\t\treturn null;\n\t\t}\n\t\tRedisProperties.Cluster clusterProperties = this.properties.getCluster();\n\t\tRedisClusterConfiguration config = new RedisClusterConfiguration(clusterProperties.getNodes());\n\t\tif (clusterProperties.getMaxRedirects() != null) {\n\t\t\tconfig.setMaxRedirects(clusterProperties.getMaxRedirects());\n\t\t}\n\t\tconfig.setUsername(this.properties.getUsername());\n\t\tif (this.properties.getPassword() != null) {\n\t\t\tconfig.setPassword(RedisPassword.of(this.properties.getPassword()));\n\t\t}\n\t\treturn config;\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "redis",
            "cluster",
            "configuration",
            "if",
            "necessary"
        ]
    },
    {
        "id": 190,
        "code": "\tpublic List<String> getPackageNames() {\n\t\treturn this.packageNames;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "package",
            "names",
            "specified",
            "from",
            "all",
            "entity",
            "scan",
            "annotations"
        ]
    },
    {
        "id": 191,
        "code": "\tpublic static EntityScanPackages get(BeanFactory beanFactory) {\n\t\t\n\t\t\n\t\ttry {\n\t\t\treturn beanFactory.getBean(BEAN, EntityScanPackages.class);\n\t\t}\n\t\tcatch (NoSuchBeanDefinitionException ex) {\n\t\t\treturn NONE;\n\t\t}\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "entity",
            "scan",
            "packages",
            "for",
            "the",
            "given",
            "bean",
            "factory"
        ]
    },
    {
        "id": 192,
        "code": "\tpublic static void register(BeanDefinitionRegistry registry, Collection<String> packageNames) {\n\t\tAssert.notNull(registry, \"Registry must not be null\");\n\t\tAssert.notNull(packageNames, \"PackageNames must not be null\");\n\t\tif (registry.containsBeanDefinition(BEAN)) {\n\t\t\tEntityScanPackagesBeanDefinition beanDefinition = (EntityScanPackagesBeanDefinition) registry\n\t\t\t\t\t.getBeanDefinition(BEAN);\n\t\t\tbeanDefinition.addPackageNames(packageNames);\n\t\t}\n\t\telse {\n\t\t\tregistry.registerBeanDefinition(BEAN, new EntityScanPackagesBeanDefinition(packageNames));\n\t\t}\n\t}",
        "summary_tokens": [
            "register",
            "the",
            "specified",
            "entity",
            "scan",
            "packages",
            "with",
            "the",
            "system"
        ]
    },
    {
        "id": 193,
        "code": "\tpublic final Set<Class<?>> scan(Class<? extends Annotation>... annotationTypes) throws ClassNotFoundException {\n\t\tList<String> packages = getPackages();\n\t\tif (packages.isEmpty()) {\n\t\t\treturn Collections.emptySet();\n\t\t}\n\t\tClassPathScanningCandidateComponentProvider scanner = createClassPathScanningCandidateComponentProvider(\n\t\t\t\tthis.context);\n\t\tfor (Class<? extends Annotation> annotationType : annotationTypes) {\n\t\t\tscanner.addIncludeFilter(new AnnotationTypeFilter(annotationType));\n\t\t}\n\t\tSet<Class<?>> entitySet = new HashSet<>();\n\t\tfor (String basePackage : packages) {\n\t\t\tif (StringUtils.hasText(basePackage)) {\n\t\t\t\tfor (BeanDefinition candidate : scanner.findCandidateComponents(basePackage)) {\n\t\t\t\t\tentitySet.add(ClassUtils.forName(candidate.getBeanClassName(), this.context.getClassLoader()));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn entitySet;\n\t}",
        "summary_tokens": [
            "scan",
            "for",
            "entities",
            "with",
            "the",
            "specified",
            "annotations"
        ]
    },
    {
        "id": 194,
        "code": "\tprotected ClassPathScanningCandidateComponentProvider createClassPathScanningCandidateComponentProvider(\n\t\t\tApplicationContext context) {\n\t\tClassPathScanningCandidateComponentProvider scanner = new ClassPathScanningCandidateComponentProvider(false);\n\t\tscanner.setEnvironment(context.getEnvironment());\n\t\tscanner.setResourceLoader(context);\n\t\treturn scanner;\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "class",
            "path",
            "scanning",
            "candidate",
            "component",
            "provider",
            "to",
            "scan",
            "entities",
            "based",
            "on",
            "the",
            "specified",
            "application",
            "context"
        ]
    },
    {
        "id": 195,
        "code": "\tdefault void customize(HttpAsyncClientBuilder builder) {\n\t}",
        "summary_tokens": [
            "customize",
            "the",
            "http",
            "async",
            "client",
            "builder"
        ]
    },
    {
        "id": 196,
        "code": "\tpublic Resource resolveConfigLocation() {\n\t\tif (this.config == null) {\n\t\t\treturn null;\n\t\t}\n\t\tAssert.isTrue(this.config.exists(),\n\t\t\t\t() -> \"Hazelcast configuration does not exist '\" + this.config.getDescription() + \"'\");\n\t\treturn this.config;\n\t}",
        "summary_tokens": [
            "resolve",
            "the",
            "config",
            "location",
            "if",
            "set"
        ]
    },
    {
        "id": 197,
        "code": "\tpublic DataSourceBuilder<?> initializeDataSourceBuilder() {\n\t\treturn DataSourceBuilder.create(getClassLoader()).type(getType()).driverClassName(determineDriverClassName())\n\t\t\t\t.url(determineUrl()).username(determineUsername()).password(determinePassword());\n\t}",
        "summary_tokens": [
            "initialize",
            "a",
            "data",
            "source",
            "builder",
            "with",
            "the",
            "state",
            "of",
            "this",
            "instance"
        ]
    },
    {
        "id": 198,
        "code": "\tpublic String getDriverClassName() {\n\t\treturn this.driverClassName;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "configured",
            "driver",
            "or",
            "null",
            "if",
            "none",
            "was",
            "configured"
        ]
    },
    {
        "id": 199,
        "code": "\tpublic String determineDriverClassName() {\n\t\tif (StringUtils.hasText(this.driverClassName)) {\n\t\t\tAssert.state(driverClassIsLoadable(), () -> \"Cannot load driver class: \" + this.driverClassName);\n\t\t\treturn this.driverClassName;\n\t\t}\n\t\tString driverClassName = null;\n\t\tif (StringUtils.hasText(this.url)) {\n\t\t\tdriverClassName = DatabaseDriver.fromJdbcUrl(this.url).getDriverClassName();\n\t\t}\n\t\tif (!StringUtils.hasText(driverClassName)) {\n\t\t\tdriverClassName = this.embeddedDatabaseConnection.getDriverClassName();\n\t\t}\n\t\tif (!StringUtils.hasText(driverClassName)) {\n\t\t\tthrow new DataSourceBeanCreationException(\"Failed to determine a suitable driver class\", this,\n\t\t\t\t\tthis.embeddedDatabaseConnection);\n\t\t}\n\t\treturn driverClassName;\n\t}",
        "summary_tokens": [
            "determine",
            "the",
            "driver",
            "to",
            "use",
            "based",
            "on",
            "this",
            "configuration",
            "and",
            "the",
            "environment"
        ]
    },
    {
        "id": 200,
        "code": "\tpublic String getUrl() {\n\t\treturn this.url;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "configured",
            "url",
            "or",
            "null",
            "if",
            "none",
            "was",
            "configured"
        ]
    },
    {
        "id": 201,
        "code": "\tpublic String determineUrl() {\n\t\tif (StringUtils.hasText(this.url)) {\n\t\t\treturn this.url;\n\t\t}\n\t\tString databaseName = determineDatabaseName();\n\t\tString url = (databaseName != null) ? this.embeddedDatabaseConnection.getUrl(databaseName) : null;\n\t\tif (!StringUtils.hasText(url)) {\n\t\t\tthrow new DataSourceBeanCreationException(\"Failed to determine suitable jdbc url\", this,\n\t\t\t\t\tthis.embeddedDatabaseConnection);\n\t\t}\n\t\treturn url;\n\t}",
        "summary_tokens": [
            "determine",
            "the",
            "url",
            "to",
            "use",
            "based",
            "on",
            "this",
            "configuration",
            "and",
            "the",
            "environment"
        ]
    },
    {
        "id": 202,
        "code": "\tpublic String determineDatabaseName() {\n\t\tif (this.generateUniqueName) {\n\t\t\tif (this.uniqueName == null) {\n\t\t\t\tthis.uniqueName = UUID.randomUUID().toString();\n\t\t\t}\n\t\t\treturn this.uniqueName;\n\t\t}\n\t\tif (StringUtils.hasLength(this.name)) {\n\t\t\treturn this.name;\n\t\t}\n\t\tif (this.embeddedDatabaseConnection != EmbeddedDatabaseConnection.NONE) {\n\t\t\treturn \"testdb\";\n\t\t}\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "determine",
            "the",
            "name",
            "to",
            "used",
            "based",
            "on",
            "this",
            "configuration"
        ]
    },
    {
        "id": 203,
        "code": "\tpublic String getUsername() {\n\t\treturn this.username;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "configured",
            "username",
            "or",
            "null",
            "if",
            "none",
            "was",
            "configured"
        ]
    },
    {
        "id": 204,
        "code": "\tpublic String determineUsername() {\n\t\tif (StringUtils.hasText(this.username)) {\n\t\t\treturn this.username;\n\t\t}\n\t\tif (EmbeddedDatabaseConnection.isEmbedded(determineDriverClassName(), determineUrl())) {\n\t\t\treturn \"sa\";\n\t\t}\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "determine",
            "the",
            "username",
            "to",
            "use",
            "based",
            "on",
            "this",
            "configuration",
            "and",
            "the",
            "environment"
        ]
    },
    {
        "id": 205,
        "code": "\tpublic String getPassword() {\n\t\treturn this.password;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "configured",
            "password",
            "or",
            "null",
            "if",
            "none",
            "was",
            "configured"
        ]
    },
    {
        "id": 206,
        "code": "\tpublic String determinePassword() {\n\t\tif (StringUtils.hasText(this.password)) {\n\t\t\treturn this.password;\n\t\t}\n\t\tif (EmbeddedDatabaseConnection.isEmbedded(determineDriverClassName(), determineUrl())) {\n\t\t\treturn \"\";\n\t\t}\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "determine",
            "the",
            "password",
            "to",
            "use",
            "based",
            "on",
            "this",
            "configuration",
            "and",
            "the",
            "environment"
        ]
    },
    {
        "id": 207,
        "code": "\tpublic void setJndiName(String jndiName) {\n\t\tthis.jndiName = jndiName;\n\t}",
        "summary_tokens": [
            "allows",
            "the",
            "data",
            "source",
            "to",
            "be",
            "managed",
            "by",
            "the",
            "container",
            "and",
            "obtained",
            "via",
            "jndi"
        ]
    },
    {
        "id": 208,
        "code": "\tvoid setDestinationResolver(DestinationResolver destinationResolver) {\n\t\tthis.destinationResolver = destinationResolver;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "destination",
            "resolver",
            "to",
            "use",
            "or",
            "null",
            "if",
            "no",
            "destination",
            "resolver",
            "should",
            "be",
            "associated",
            "with",
            "the",
            "factory",
            "by",
            "default"
        ]
    },
    {
        "id": 209,
        "code": "\tvoid setMessageConverter(MessageConverter messageConverter) {\n\t\tthis.messageConverter = messageConverter;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "message",
            "converter",
            "to",
            "use",
            "or",
            "null",
            "if",
            "the",
            "out",
            "of",
            "the",
            "box",
            "converter",
            "should",
            "be",
            "used"
        ]
    },
    {
        "id": 210,
        "code": "\tvoid setExceptionListener(ExceptionListener exceptionListener) {\n\t\tthis.exceptionListener = exceptionListener;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "exception",
            "listener",
            "to",
            "use",
            "or",
            "null",
            "if",
            "no",
            "exception",
            "listener",
            "should",
            "be",
            "associated",
            "by",
            "default"
        ]
    },
    {
        "id": 211,
        "code": "\tvoid setTransactionManager(JtaTransactionManager transactionManager) {\n\t\tthis.transactionManager = transactionManager;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "jta",
            "transaction",
            "manager",
            "to",
            "use",
            "or",
            "null",
            "if",
            "the",
            "jta",
            "support",
            "should",
            "not",
            "be",
            "used"
        ]
    },
    {
        "id": 212,
        "code": "\tvoid setJmsProperties(JmsProperties jmsProperties) {\n\t\tthis.jmsProperties = jmsProperties;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "jms",
            "properties",
            "to",
            "use"
        ]
    },
    {
        "id": 213,
        "code": "\tpublic void configure(DefaultJmsListenerContainerFactory factory, ConnectionFactory connectionFactory) {\n\t\tAssert.notNull(factory, \"Factory must not be null\");\n\t\tAssert.notNull(connectionFactory, \"ConnectionFactory must not be null\");\n\t\tfactory.setConnectionFactory(connectionFactory);\n\t\tfactory.setPubSubDomain(this.jmsProperties.isPubSubDomain());\n\t\tif (this.transactionManager != null) {\n\t\t\tfactory.setTransactionManager(this.transactionManager);\n\t\t}\n\t\telse {\n\t\t\tfactory.setSessionTransacted(true);\n\t\t}\n\t\tif (this.destinationResolver != null) {\n\t\t\tfactory.setDestinationResolver(this.destinationResolver);\n\t\t}\n\t\tif (this.messageConverter != null) {\n\t\t\tfactory.setMessageConverter(this.messageConverter);\n\t\t}\n\t\tif (this.exceptionListener != null) {\n\t\t\tfactory.setExceptionListener(this.exceptionListener);\n\t\t}\n\t\tJmsProperties.Listener listener = this.jmsProperties.getListener();\n\t\tfactory.setAutoStartup(listener.isAutoStartup());\n\t\tif (listener.getAcknowledgeMode() != null) {\n\t\t\tfactory.setSessionAcknowledgeMode(listener.getAcknowledgeMode().getMode());\n\t\t}\n\t\tString concurrency = listener.formatConcurrency();\n\t\tif (concurrency != null) {\n\t\t\tfactory.setConcurrency(concurrency);\n\t\t}\n\t\tDuration receiveTimeout = listener.getReceiveTimeout();\n\t\tif (receiveTimeout != null) {\n\t\t\tfactory.setReceiveTimeout(receiveTimeout.toMillis());\n\t\t}\n\t}",
        "summary_tokens": [
            "configure",
            "the",
            "specified",
            "jms",
            "listener",
            "container",
            "factory"
        ]
    },
    {
        "id": 214,
        "code": "\tpublic JmsPoolConnectionFactory createPooledConnectionFactory(ConnectionFactory connectionFactory) {\n\t\tJmsPoolConnectionFactory pooledConnectionFactory = new JmsPoolConnectionFactory();\n\t\tpooledConnectionFactory.setConnectionFactory(connectionFactory);\n\n\t\tpooledConnectionFactory.setBlockIfSessionPoolIsFull(this.properties.isBlockIfFull());\n\t\tif (this.properties.getBlockIfFullTimeout() != null) {\n\t\t\tpooledConnectionFactory\n\t\t\t\t\t.setBlockIfSessionPoolIsFullTimeout(this.properties.getBlockIfFullTimeout().toMillis());\n\t\t}\n\t\tif (this.properties.getIdleTimeout() != null) {\n\t\t\tpooledConnectionFactory.setConnectionIdleTimeout((int) this.properties.getIdleTimeout().toMillis());\n\t\t}\n\t\tpooledConnectionFactory.setMaxConnections(this.properties.getMaxConnections());\n\t\tpooledConnectionFactory.setMaxSessionsPerConnection(this.properties.getMaxSessionsPerConnection());\n\t\tif (this.properties.getTimeBetweenExpirationCheck() != null) {\n\t\t\tpooledConnectionFactory\n\t\t\t\t\t.setConnectionCheckInterval(this.properties.getTimeBetweenExpirationCheck().toMillis());\n\t\t}\n\t\tpooledConnectionFactory.setUseAnonymousProducers(this.properties.isUseAnonymousProducers());\n\t\treturn pooledConnectionFactory;\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "jms",
            "pool",
            "connection",
            "factory",
            "based",
            "on",
            "the",
            "specified",
            "connection",
            "factory"
        ]
    },
    {
        "id": 215,
        "code": "\tprivate ArtemisMode deduceMode() {\n\t\tif (this.properties.getEmbedded().isEnabled() && isEmbeddedJmsClassPresent()) {\n\t\t\treturn ArtemisMode.EMBEDDED;\n\t\t}\n\t\treturn ArtemisMode.NATIVE;\n\t}",
        "summary_tokens": [
            "deduce",
            "the",
            "artemis",
            "mode",
            "to",
            "use",
            "if",
            "none",
            "has",
            "been",
            "set"
        ]
    },
    {
        "id": 216,
        "code": "\tpublic void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames) {\n\t\tthis.ensureUniqueRuntimeObjectNames = ensureUniqueRuntimeObjectNames;\n\t}",
        "summary_tokens": [
            "set",
            "if",
            "unique",
            "runtime",
            "object",
            "names",
            "should",
            "be",
            "ensured"
        ]
    },
    {
        "id": 217,
        "code": "\tprivate void handle(ExecuteContext context, SQLExceptionTranslator translator, SQLException exception) {\n\t\tDataAccessException translated = translate(context, translator, exception);\n\t\tif (exception.getNextException() == null) {\n\t\t\tif (translated != null) {\n\t\t\t\tcontext.exception(translated);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tlogger.error(\"Execution of SQL statement failed.\", (translated != null) ? translated : exception);\n\t\t}\n\t}",
        "summary_tokens": [
            "handle",
            "a",
            "single",
            "exception",
            "in",
            "the",
            "chain"
        ]
    },
    {
        "id": 218,
        "code": "\tpublic SQLDialect determineSqlDialect(DataSource dataSource) {\n\t\tif (this.sqlDialect != null) {\n\t\t\treturn this.sqlDialect;\n\t\t}\n\t\treturn SqlDialectLookup.getDialect(dataSource);\n\t}",
        "summary_tokens": [
            "determine",
            "the",
            "sqldialect",
            "to",
            "use",
            "based",
            "on",
            "this",
            "configuration",
            "and",
            "the",
            "primary",
            "data",
            "source"
        ]
    },
    {
        "id": 219,
        "code": "\tstatic SQLDialect getDialect(DataSource dataSource) {\n\t\tif (dataSource == null) {\n\t\t\treturn SQLDialect.DEFAULT;\n\t\t}\n\t\ttry {\n\t\t\tString url = JdbcUtils.extractDatabaseMetaData(dataSource, DatabaseMetaData::getURL);\n\t\t\tSQLDialect sqlDialect = JDBCUtils.dialect(url);\n\t\t\tif (sqlDialect != null) {\n\t\t\t\treturn sqlDialect;\n\t\t\t}\n\t\t}\n\t\tcatch (MetaDataAccessException ex) {\n\t\t\tlogger.warn(\"Unable to determine jdbc url from datasource\", ex);\n\t\t}\n\t\treturn SQLDialect.DEFAULT;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "most",
            "suitable",
            "sqldialect",
            "for",
            "the",
            "given",
            "data",
            "source"
        ]
    },
    {
        "id": 220,
        "code": "\tvoid setKafkaProperties(KafkaProperties properties) {\n\t\tthis.properties = properties;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "kafka",
            "properties",
            "to",
            "use"
        ]
    },
    {
        "id": 221,
        "code": "\tvoid setMessageConverter(MessageConverter messageConverter) {\n\t\tthis.messageConverter = messageConverter;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "message",
            "converter",
            "to",
            "use"
        ]
    },
    {
        "id": 222,
        "code": "\tvoid setRecordFilterStrategy(RecordFilterStrategy<Object, Object> recordFilterStrategy) {\n\t\tthis.recordFilterStrategy = recordFilterStrategy;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "record",
            "filter",
            "strategy",
            "to",
            "use",
            "to",
            "filter",
            "incoming",
            "records"
        ]
    },
    {
        "id": 223,
        "code": "\tvoid setReplyTemplate(KafkaTemplate<Object, Object> replyTemplate) {\n\t\tthis.replyTemplate = replyTemplate;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "kafka",
            "template",
            "to",
            "use",
            "to",
            "send",
            "replies"
        ]
    },
    {
        "id": 224,
        "code": "\tvoid setTransactionManager(KafkaAwareTransactionManager<Object, Object> transactionManager) {\n\t\tthis.transactionManager = transactionManager;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "kafka",
            "aware",
            "transaction",
            "manager",
            "to",
            "use"
        ]
    },
    {
        "id": 225,
        "code": "\tvoid setRebalanceListener(ConsumerAwareRebalanceListener rebalanceListener) {\n\t\tthis.rebalanceListener = rebalanceListener;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "consumer",
            "aware",
            "rebalance",
            "listener",
            "to",
            "use"
        ]
    },
    {
        "id": 226,
        "code": "\tpublic void setCommonErrorHandler(CommonErrorHandler commonErrorHandler) {\n\t\tthis.commonErrorHandler = commonErrorHandler;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "common",
            "error",
            "handler",
            "to",
            "use"
        ]
    },
    {
        "id": 227,
        "code": "\tvoid setAfterRollbackProcessor(AfterRollbackProcessor<Object, Object> afterRollbackProcessor) {\n\t\tthis.afterRollbackProcessor = afterRollbackProcessor;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "after",
            "rollback",
            "processor",
            "to",
            "use"
        ]
    },
    {
        "id": 228,
        "code": "\tvoid setRecordInterceptor(RecordInterceptor<Object, Object> recordInterceptor) {\n\t\tthis.recordInterceptor = recordInterceptor;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "record",
            "interceptor",
            "to",
            "use"
        ]
    },
    {
        "id": 229,
        "code": "\tpublic void configure(ConcurrentKafkaListenerContainerFactory<Object, Object> listenerFactory,\n\t\t\tConsumerFactory<Object, Object> consumerFactory) {\n\t\tlistenerFactory.setConsumerFactory(consumerFactory);\n\t\tconfigureListenerFactory(listenerFactory);\n\t\tconfigureContainer(listenerFactory.getContainerProperties());\n\t}",
        "summary_tokens": [
            "configure",
            "the",
            "specified",
            "kafka",
            "listener",
            "container",
            "factory"
        ]
    },
    {
        "id": 230,
        "code": "\tpublic Map<String, Object> buildConsumerProperties() {\n\t\tMap<String, Object> properties = buildCommonProperties();\n\t\tproperties.putAll(this.consumer.buildProperties());\n\t\treturn properties;\n\t}",
        "summary_tokens": [
            "create",
            "an",
            "initial",
            "map",
            "of",
            "consumer",
            "properties",
            "from",
            "the",
            "state",
            "of",
            "this",
            "instance"
        ]
    },
    {
        "id": 231,
        "code": "\tpublic Map<String, Object> buildProducerProperties() {\n\t\tMap<String, Object> properties = buildCommonProperties();\n\t\tproperties.putAll(this.producer.buildProperties());\n\t\treturn properties;\n\t}",
        "summary_tokens": [
            "create",
            "an",
            "initial",
            "map",
            "of",
            "producer",
            "properties",
            "from",
            "the",
            "state",
            "of",
            "this",
            "instance"
        ]
    },
    {
        "id": 232,
        "code": "\tpublic Map<String, Object> buildAdminProperties() {\n\t\tMap<String, Object> properties = buildCommonProperties();\n\t\tproperties.putAll(this.admin.buildProperties());\n\t\treturn properties;\n\t}",
        "summary_tokens": [
            "create",
            "an",
            "initial",
            "map",
            "of",
            "admin",
            "properties",
            "from",
            "the",
            "state",
            "of",
            "this",
            "instance"
        ]
    },
    {
        "id": 233,
        "code": "\tpublic Map<String, Object> buildStreamsProperties() {\n\t\tMap<String, Object> properties = buildCommonProperties();\n\t\tproperties.putAll(this.streams.buildProperties());\n\t\treturn properties;\n\t}",
        "summary_tokens": [
            "create",
            "an",
            "initial",
            "map",
            "of",
            "streams",
            "properties",
            "from",
            "the",
            "state",
            "of",
            "this",
            "instance"
        ]
    },
    {
        "id": 234,
        "code": "\tpublic void setOrder(int order) {\n\t\tthis.order = order;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "order",
            "value",
            "of",
            "this",
            "object"
        ]
    },
    {
        "id": 235,
        "code": "\tpublic void setResourceLoader(ResourceLoader resourceLoader) {\n\t\tthis.resourceLoader = resourceLoader;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "resource",
            "loader"
        ]
    },
    {
        "id": 236,
        "code": "\tpublic Map<String, Object> determineHibernateProperties(Map<String, String> jpaProperties,\n\t\t\tHibernateSettings settings) {\n\t\tAssert.notNull(jpaProperties, \"JpaProperties must not be null\");\n\t\tAssert.notNull(settings, \"Settings must not be null\");\n\t\treturn getAdditionalProperties(jpaProperties, settings);\n\t}",
        "summary_tokens": [
            "determine",
            "the",
            "configuration",
            "properties",
            "for",
            "the",
            "initialization",
            "of",
            "the",
            "main",
            "hibernate",
            "entity",
            "manager",
            "factory",
            "based",
            "on",
            "standard",
            "jpa",
            "properties",
            "and",
            "hibernate",
            "settings"
        ]
    },
    {
        "id": 237,
        "code": "\tprotected void customizeVendorProperties(Map<String, Object> vendorProperties) {\n\t}",
        "summary_tokens": [
            "customize",
            "vendor",
            "properties",
            "before",
            "they",
            "are",
            "used"
        ]
    },
    {
        "id": 238,
        "code": "\tprotected JtaTransactionManager getJtaTransactionManager() {\n\t\treturn this.jtaTransactionManager;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "jta",
            "transaction",
            "manager"
        ]
    },
    {
        "id": 239,
        "code": "\tprotected final boolean isJta() {\n\t\treturn (this.jtaTransactionManager != null);\n\t}",
        "summary_tokens": [
            "returns",
            "if",
            "a",
            "jta",
            "platform",
            "transaction",
            "manager",
            "is",
            "being",
            "used"
        ]
    },
    {
        "id": 240,
        "code": "\tprotected final JpaProperties getProperties() {\n\t\treturn this.properties;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "jpa",
            "properties"
        ]
    },
    {
        "id": 241,
        "code": "\tprotected final DataSource getDataSource() {\n\t\treturn this.dataSource;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "data",
            "source"
        ]
    },
    {
        "id": 242,
        "code": "\tpublic static DatabaseInitializationSettings getSettings(DataSource dataSource, QuartzProperties properties) {\n\t\tDatabaseInitializationSettings settings = new DatabaseInitializationSettings();\n\t\tsettings.setSchemaLocations(resolveSchemaLocations(dataSource, properties.getJdbc()));\n\t\tsettings.setMode(properties.getJdbc().getInitializeSchema());\n\t\tsettings.setContinueOnError(true);\n\t\treturn settings;\n\t}",
        "summary_tokens": [
            "adapts",
            "quartz",
            "properties",
            "quartz",
            "properties",
            "to",
            "database",
            "initialization",
            "settings",
            "replacing",
            "any",
            "placeholders"
        ]
    },
    {
        "id": 243,
        "code": "\tConnectionFactoryOptions.Builder initialize(R2dbcProperties properties,\n\t\t\tSupplier<EmbeddedDatabaseConnection> embeddedDatabaseConnection) {\n\t\tif (StringUtils.hasText(properties.getUrl())) {\n\t\t\treturn initializeRegularOptions(properties);\n\t\t}\n\t\tEmbeddedDatabaseConnection embeddedConnection = embeddedDatabaseConnection.get();\n\t\tif (embeddedConnection != EmbeddedDatabaseConnection.NONE) {\n\t\t\treturn initializeEmbeddedOptions(properties, embeddedConnection);\n\t\t}\n\t\tthrow connectionFactoryBeanCreationException(\"Failed to determine a suitable R2DBC Connection URL\", properties,\n\t\t\t\tembeddedConnection);\n\t}",
        "summary_tokens": [
            "initialize",
            "a",
            "builder",
            "connection",
            "factory",
            "options"
        ]
    },
    {
        "id": 244,
        "code": "\tpublic String determineUniqueName() {\n\t\tif (this.uniqueName == null) {\n\t\t\tthis.uniqueName = UUID.randomUUID().toString();\n\t\t}\n\t\treturn this.uniqueName;\n\t}",
        "summary_tokens": [
            "provide",
            "a",
            "unique",
            "name",
            "specific",
            "to",
            "this",
            "instance"
        ]
    },
    {
        "id": 245,
        "code": "\tpublic static StaticResourceRequest toStaticResources() {\n\t\treturn StaticResourceRequest.INSTANCE;\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "static",
            "resource",
            "request",
            "that",
            "can",
            "be",
            "used",
            "to",
            "create",
            "a",
            "matcher",
            "for",
            "static",
            "resource",
            "location",
            "locations"
        ]
    },
    {
        "id": 246,
        "code": "\tpublic StaticResourceServerWebExchange atCommonLocations() {\n\t\treturn at(EnumSet.allOf(StaticResourceLocation.class));\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "matcher",
            "that",
            "includes",
            "all",
            "commonly",
            "used",
            "static",
            "resource",
            "location",
            "locations"
        ]
    },
    {
        "id": 247,
        "code": "\tpublic StaticResourceServerWebExchange at(Set<StaticResourceLocation> locations) {\n\t\tAssert.notNull(locations, \"Locations must not be null\");\n\t\treturn new StaticResourceServerWebExchange(new LinkedHashSet<>(locations));\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "matcher",
            "that",
            "includes",
            "the",
            "specified",
            "static",
            "resource",
            "location",
            "locations"
        ]
    },
    {
        "id": 248,
        "code": "\tpublic static StaticResourceRequest toStaticResources() {\n\t\treturn StaticResourceRequest.INSTANCE;\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "static",
            "resource",
            "request",
            "that",
            "can",
            "be",
            "used",
            "to",
            "create",
            "a",
            "matcher",
            "for",
            "static",
            "resource",
            "location",
            "locations"
        ]
    },
    {
        "id": 249,
        "code": "\tpublic static H2ConsoleRequestMatcher toH2Console() {\n\t\treturn new H2ConsoleRequestMatcher();\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "matcher",
            "that",
            "includes",
            "the",
            "h",
            "0",
            "console",
            "location"
        ]
    },
    {
        "id": 250,
        "code": "\tpublic StaticResourceRequestMatcher atCommonLocations() {\n\t\treturn at(EnumSet.allOf(StaticResourceLocation.class));\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "matcher",
            "that",
            "includes",
            "all",
            "commonly",
            "used",
            "static",
            "resource",
            "location",
            "locations"
        ]
    },
    {
        "id": 251,
        "code": "\tpublic StaticResourceRequestMatcher at(Set<StaticResourceLocation> locations) {\n\t\tAssert.notNull(locations, \"Locations must not be null\");\n\t\treturn new StaticResourceRequestMatcher(new LinkedHashSet<>(locations));\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "matcher",
            "that",
            "includes",
            "the",
            "specified",
            "static",
            "resource",
            "location",
            "locations"
        ]
    },
    {
        "id": 252,
        "code": "\tstatic DatabaseInitializationSettings getSettings(DataSource dataSource, JdbcSessionProperties properties) {\n\t\tDatabaseInitializationSettings settings = new DatabaseInitializationSettings();\n\t\tsettings.setSchemaLocations(resolveSchemaLocations(dataSource, properties));\n\t\tsettings.setMode(properties.getInitializeSchema());\n\t\tsettings.setContinueOnError(true);\n\t\treturn settings;\n\t}",
        "summary_tokens": [
            "adapts",
            "jdbc",
            "session",
            "properties",
            "spring",
            "session",
            "jdbc",
            "properties",
            "to",
            "database",
            "initialization",
            "settings",
            "replacing",
            "any",
            "placeholders"
        ]
    },
    {
        "id": 253,
        "code": "\tpublic Duration determineTimeout(Supplier<Duration> fallbackTimeout) {\n\t\treturn (this.timeout != null) ? this.timeout : fallbackTimeout.get();\n\t}",
        "summary_tokens": [
            "determine",
            "the",
            "session",
            "timeout"
        ]
    },
    {
        "id": 254,
        "code": "\tpublic static DatabaseInitializationSettings getSettings(SqlInitializationProperties properties) {\n\t\treturn SettingsCreator.createFrom(properties);\n\t}",
        "summary_tokens": [
            "adapts",
            "sql",
            "initialization",
            "properties",
            "sql",
            "initialization",
            "properties",
            "to",
            "database",
            "initialization",
            "settings"
        ]
    },
    {
        "id": 255,
        "code": "\tpublic static DatabaseInitializationSettings getSettings(SqlInitializationProperties properties) {\n\t\treturn SettingsCreator.createFrom(properties);\n\t}",
        "summary_tokens": [
            "adapts",
            "sql",
            "initialization",
            "properties",
            "sql",
            "initialization",
            "properties",
            "to",
            "database",
            "initialization",
            "settings"
        ]
    },
    {
        "id": 256,
        "code": "\tpublic void applyToMvcViewResolver(Object viewResolver) {\n\t\tAssert.isInstanceOf(AbstractTemplateViewResolver.class, viewResolver,\n\t\t\t\t() -> \"ViewResolver is not an instance of AbstractTemplateViewResolver :\" + viewResolver);\n\t\tAbstractTemplateViewResolver resolver = (AbstractTemplateViewResolver) viewResolver;\n\t\tresolver.setPrefix(getPrefix());\n\t\tresolver.setSuffix(getSuffix());\n\t\tresolver.setCache(isCache());\n\t\tif (getContentType() != null) {\n\t\t\tresolver.setContentType(getContentType().toString());\n\t\t}\n\t\tresolver.setViewNames(getViewNames());\n\t\tresolver.setExposeRequestAttributes(isExposeRequestAttributes());\n\t\tresolver.setAllowRequestOverride(isAllowRequestOverride());\n\t\tresolver.setAllowSessionOverride(isAllowSessionOverride());\n\t\tresolver.setExposeSessionAttributes(isExposeSessionAttributes());\n\t\tresolver.setExposeSpringMacroHelpers(isExposeSpringMacroHelpers());\n\t\tresolver.setRequestContextAttribute(getRequestContextAttribute());\n\t\t\n\t\t\n\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 5);\n\t}",
        "summary_tokens": [
            "apply",
            "the",
            "given",
            "properties",
            "to",
            "a",
            "abstract",
            "template",
            "view",
            "resolver"
        ]
    },
    {
        "id": 257,
        "code": "\tpublic List<TemplateAvailabilityProvider> getProviders() {\n\t\treturn this.providers;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "underlying",
            "providers",
            "being",
            "used"
        ]
    },
    {
        "id": 258,
        "code": "\tpublic TemplateAvailabilityProvider getProvider(String view, Environment environment, ClassLoader classLoader,\n\t\t\tResourceLoader resourceLoader) {\n\t\tAssert.notNull(view, \"View must not be null\");\n\t\tAssert.notNull(environment, \"Environment must not be null\");\n\t\tAssert.notNull(classLoader, \"ClassLoader must not be null\");\n\t\tAssert.notNull(resourceLoader, \"ResourceLoader must not be null\");\n\t\tBoolean useCache = environment.getProperty(\"spring.template.provider.cache\", Boolean.class, true);\n\t\tif (!useCache) {\n\t\t\treturn findProvider(view, environment, classLoader, resourceLoader);\n\t\t}\n\t\tTemplateAvailabilityProvider provider = this.resolved.get(view);\n\t\tif (provider == null) {\n\t\t\tsynchronized (this.cache) {\n\t\t\t\tprovider = findProvider(view, environment, classLoader, resourceLoader);\n\t\t\t\tprovider = (provider != null) ? provider : NONE;\n\t\t\t\tthis.resolved.put(view, provider);\n\t\t\t\tthis.cache.put(view, provider);\n\t\t\t}\n\t\t}\n\t\treturn (provider != NONE) ? provider : null;\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "provider",
            "that",
            "can",
            "be",
            "used",
            "to",
            "render",
            "the",
            "given",
            "view"
        ]
    },
    {
        "id": 259,
        "code": "\tpublic boolean exists(ResourcePatternResolver resolver) {\n\t\tAssert.notNull(resolver, \"Resolver must not be null\");\n\t\tif (resolver.getResource(this.path).exists()) {\n\t\t\treturn true;\n\t\t}\n\t\ttry {\n\t\t\treturn anyExists(resolver);\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\treturn false;\n\t\t}\n\t}",
        "summary_tokens": [
            "determine",
            "if",
            "this",
            "template",
            "location",
            "exists",
            "using",
            "the",
            "specified",
            "resource",
            "pattern",
            "resolver"
        ]
    },
    {
        "id": 260,
        "code": "\tpublic RestTemplateBuilder configure(RestTemplateBuilder builder) {\n\t\tif (this.httpMessageConverters != null) {\n\t\t\tbuilder = builder.messageConverters(this.httpMessageConverters.getConverters());\n\t\t}\n\t\tbuilder = addCustomizers(builder, this.restTemplateCustomizers, RestTemplateBuilder::customizers);\n\t\tbuilder = addCustomizers(builder, this.restTemplateRequestCustomizers, RestTemplateBuilder::requestCustomizers);\n\t\treturn builder;\n\t}",
        "summary_tokens": [
            "configure",
            "the",
            "specified",
            "rest",
            "template",
            "builder"
        ]
    },
    {
        "id": 261,
        "code": "\tpublic DateTimeFormatters dateFormat(String pattern) {\n\t\tif (isIso(pattern)) {\n\t\t\tthis.dateFormatter = DateTimeFormatter.ISO_LOCAL_DATE;\n\t\t\tthis.datePattern = \"yyyy-MM-dd\";\n\t\t}\n\t\telse {\n\t\t\tthis.dateFormatter = formatter(pattern);\n\t\t\tthis.datePattern = pattern;\n\t\t}\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "configures",
            "the",
            "date",
            "format",
            "using",
            "the",
            "given",
            "pattern"
        ]
    },
    {
        "id": 262,
        "code": "\tpublic DateTimeFormatters timeFormat(String pattern) {\n\t\tthis.timeFormatter = isIso(pattern) ? DateTimeFormatter.ISO_LOCAL_TIME\n\t\t\t\t: (isIsoOffset(pattern) ? DateTimeFormatter.ISO_OFFSET_TIME : formatter(pattern));\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "configures",
            "the",
            "time",
            "format",
            "using",
            "the",
            "given",
            "pattern"
        ]
    },
    {
        "id": 263,
        "code": "\tpublic DateTimeFormatters dateTimeFormat(String pattern) {\n\t\tthis.dateTimeFormatter = isIso(pattern) ? DateTimeFormatter.ISO_LOCAL_DATE_TIME\n\t\t\t\t: (isIsoOffset(pattern) ? DateTimeFormatter.ISO_OFFSET_DATE_TIME : formatter(pattern));\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "configures",
            "the",
            "date",
            "time",
            "format",
            "using",
            "the",
            "given",
            "pattern"
        ]
    },
    {
        "id": 264,
        "code": "\tdefault RequestMappingHandlerMapping getRequestMappingHandlerMapping() {\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "custom",
            "request",
            "mapping",
            "handler",
            "mapping",
            "that",
            "should",
            "be",
            "used",
            "and",
            "processed",
            "by",
            "the",
            "web",
            "flux",
            "configuration"
        ]
    },
    {
        "id": 265,
        "code": "\tdefault RequestMappingHandlerAdapter getRequestMappingHandlerAdapter() {\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "custom",
            "request",
            "mapping",
            "handler",
            "adapter",
            "that",
            "should",
            "be",
            "used",
            "and",
            "processed",
            "by",
            "the",
            "web",
            "flux",
            "configuration"
        ]
    },
    {
        "id": 266,
        "code": "\tpublic void setMessageWriters(List<HttpMessageWriter<?>> messageWriters) {\n\t\tAssert.notNull(messageWriters, \"'messageWriters' must not be null\");\n\t\tthis.messageWriters = messageWriters;\n\t}",
        "summary_tokens": [
            "configure",
            "http",
            "message",
            "writers",
            "to",
            "serialize",
            "the",
            "response",
            "body",
            "with"
        ]
    },
    {
        "id": 267,
        "code": "\tpublic void setMessageReaders(List<HttpMessageReader<?>> messageReaders) {\n\t\tAssert.notNull(messageReaders, \"'messageReaders' must not be null\");\n\t\tthis.messageReaders = messageReaders;\n\t}",
        "summary_tokens": [
            "configure",
            "http",
            "message",
            "readers",
            "to",
            "deserialize",
            "the",
            "request",
            "body",
            "with"
        ]
    },
    {
        "id": 268,
        "code": "\tpublic void setViewResolvers(List<ViewResolver> viewResolvers) {\n\t\tthis.viewResolvers = viewResolvers;\n\t}",
        "summary_tokens": [
            "configure",
            "the",
            "view",
            "resolver",
            "to",
            "use",
            "for",
            "rendering",
            "views"
        ]
    },
    {
        "id": 269,
        "code": "\tprotected Map<String, Object> getErrorAttributes(ServerRequest request, ErrorAttributeOptions options) {\n\t\treturn this.errorAttributes.getErrorAttributes(request, options);\n\t}",
        "summary_tokens": [
            "extract",
            "the",
            "error",
            "attributes",
            "from",
            "the",
            "current",
            "request",
            "to",
            "be",
            "used",
            "to",
            "populate",
            "error",
            "views",
            "or",
            "json",
            "payloads"
        ]
    },
    {
        "id": 270,
        "code": "\tprotected Throwable getError(ServerRequest request) {\n\t\treturn this.errorAttributes.getError(request);\n\t}",
        "summary_tokens": [
            "extract",
            "the",
            "original",
            "error",
            "from",
            "the",
            "current",
            "request"
        ]
    },
    {
        "id": 271,
        "code": "\tprotected boolean isTraceEnabled(ServerRequest request) {\n\t\treturn getBooleanParameter(request, \"trace\");\n\t}",
        "summary_tokens": [
            "check",
            "whether",
            "the",
            "trace",
            "attribute",
            "has",
            "been",
            "set",
            "on",
            "the",
            "given",
            "request"
        ]
    },
    {
        "id": 272,
        "code": "\tprotected boolean isMessageEnabled(ServerRequest request) {\n\t\treturn getBooleanParameter(request, \"message\");\n\t}",
        "summary_tokens": [
            "check",
            "whether",
            "the",
            "message",
            "attribute",
            "has",
            "been",
            "set",
            "on",
            "the",
            "given",
            "request"
        ]
    },
    {
        "id": 273,
        "code": "\tprotected boolean isBindingErrorsEnabled(ServerRequest request) {\n\t\treturn getBooleanParameter(request, \"errors\");\n\t}",
        "summary_tokens": [
            "check",
            "whether",
            "the",
            "errors",
            "attribute",
            "has",
            "been",
            "set",
            "on",
            "the",
            "given",
            "request"
        ]
    },
    {
        "id": 274,
        "code": "\tprotected Mono<ServerResponse> renderErrorView(String viewName, ServerResponse.BodyBuilder responseBody,\n\t\t\tMap<String, Object> error) {\n\t\tif (isTemplateAvailable(viewName)) {\n\t\t\treturn responseBody.render(viewName, error);\n\t\t}\n\t\tResource resource = resolveResource(viewName);\n\t\tif (resource != null) {\n\t\t\treturn responseBody.body(BodyInserters.fromResource(resource));\n\t\t}\n\t\treturn Mono.empty();\n\t}",
        "summary_tokens": [
            "render",
            "the",
            "given",
            "error",
            "data",
            "as",
            "a",
            "view",
            "using",
            "a",
            "template",
            "view",
            "if",
            "available",
            "or",
            "a",
            "static",
            "html",
            "file",
            "if",
            "available",
            "otherwise"
        ]
    },
    {
        "id": 275,
        "code": "\tprotected Mono<ServerResponse> renderDefaultErrorView(ServerResponse.BodyBuilder responseBody,\n\t\t\tMap<String, Object> error) {\n\t\tStringBuilder builder = new StringBuilder();\n\t\tDate timestamp = (Date) error.get(\"timestamp\");\n\t\tObject message = error.get(\"message\");\n\t\tObject trace = error.get(\"trace\");\n\t\tObject requestId = error.get(\"requestId\");\n\t\tbuilder.append(\"<html><body><h1>Whitelabel Error Page</h1>\")\n\t\t\t\t.append(\"<p>This application has no configured error view, so you are seeing this as a fallback.</p>\")\n\t\t\t\t.append(\"<div id='created'>\").append(timestamp).append(\"</div>\").append(\"<div>[\").append(requestId)\n\t\t\t\t.append(\"] There was an unexpected error (type=\").append(htmlEscape(error.get(\"error\")))\n\t\t\t\t.append(\", status=\").append(htmlEscape(error.get(\"status\"))).append(\").</div>\");\n\t\tif (message != null) {\n\t\t\tbuilder.append(\"<div>\").append(htmlEscape(message)).append(\"</div>\");\n\t\t}\n\t\tif (trace != null) {\n\t\t\tbuilder.append(\"<div style='white-space:pre-wrap;'>\").append(htmlEscape(trace)).append(\"</div>\");\n\t\t}\n\t\tbuilder.append(\"</body></html>\");\n\t\treturn responseBody.bodyValue(builder.toString());\n\t}",
        "summary_tokens": [
            "render",
            "a",
            "default",
            "html",
            "whitelabel",
            "error",
            "page"
        ]
    },
    {
        "id": 276,
        "code": "\tprotected void logError(ServerRequest request, ServerResponse response, Throwable throwable) {\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(request.exchange().getLogPrefix() + formatError(throwable, request));\n\t\t}\n\t\tif (HttpStatus.resolve(response.statusCode().value()) != null\n\t\t\t\t&& response.statusCode().equals(HttpStatus.INTERNAL_SERVER_ERROR)) {\n\t\t\tlogger.error(LogMessage.of(() -> String.format(\"%s 500 Server Error for %s\",\n\t\t\t\t\trequest.exchange().getLogPrefix(), formatRequest(request))), throwable);\n\t\t}\n\t}",
        "summary_tokens": [
            "logs",
            "the",
            "throwable",
            "error",
            "for",
            "the",
            "given",
            "request",
            "and",
            "response",
            "exchange"
        ]
    },
    {
        "id": 277,
        "code": "\tdefault String getRelativePath(String path) {\n\t\tString prefix = getPrefix();\n\t\tif (!path.startsWith(\"/\")) {\n\t\t\tpath = \"/\" + path;\n\t\t}\n\t\treturn prefix + path;\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "form",
            "of",
            "the",
            "given",
            "path",
            "that",
            "s",
            "relative",
            "to",
            "the",
            "dispatcher",
            "servlet",
            "path"
        ]
    },
    {
        "id": 278,
        "code": "\tdefault String getPrefix() {\n\t\tString result = getPath();\n\t\tint index = result.indexOf('*');\n\t\tif (index != -1) {\n\t\t\tresult = result.substring(0, index);\n\t\t}\n\t\tif (result.endsWith(\"/\")) {\n\t\t\tresult = result.substring(0, result.length() - 1);\n\t\t}\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "cleaned",
            "up",
            "version",
            "of",
            "the",
            "path",
            "that",
            "can",
            "be",
            "used",
            "as",
            "a",
            "prefix",
            "for",
            "urls"
        ]
    },
    {
        "id": 279,
        "code": "\tdefault String getServletUrlMapping() {\n\t\tif (getPath().equals(\"\") || getPath().equals(\"/\")) {\n\t\t\treturn \"/\";\n\t\t}\n\t\tif (getPath().contains(\"*\")) {\n\t\t\treturn getPath();\n\t\t}\n\t\tif (getPath().endsWith(\"/\")) {\n\t\t\treturn getPath() + \"*\";\n\t\t}\n\t\treturn getPath() + \"/*\";\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "url",
            "mapping",
            "pattern",
            "that",
            "can",
            "be",
            "used",
            "with",
            "a",
            "servlet",
            "registration",
            "bean",
            "to",
            "map",
            "the",
            "dispatcher",
            "servlet"
        ]
    },
    {
        "id": 280,
        "code": "\tdefault String getRelativePath(String path) {\n\t\tString prefix = getPrefix();\n\t\tif (!path.startsWith(\"/\")) {\n\t\t\tpath = \"/\" + path;\n\t\t}\n\t\treturn prefix + path;\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "form",
            "of",
            "the",
            "given",
            "path",
            "that",
            "s",
            "relative",
            "to",
            "the",
            "jersey",
            "application",
            "path"
        ]
    },
    {
        "id": 281,
        "code": "\tdefault String getPrefix() {\n\t\tString result = getPath();\n\t\tint index = result.indexOf('*');\n\t\tif (index != -1) {\n\t\t\tresult = result.substring(0, index);\n\t\t}\n\t\tif (result.endsWith(\"/\")) {\n\t\t\tresult = result.substring(0, result.length() - 1);\n\t\t}\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "cleaned",
            "up",
            "version",
            "of",
            "the",
            "path",
            "that",
            "can",
            "be",
            "used",
            "as",
            "a",
            "prefix",
            "for",
            "urls"
        ]
    },
    {
        "id": 282,
        "code": "\tdefault String getUrlMapping() {\n\t\tString path = getPath();\n\t\tif (!path.startsWith(\"/\")) {\n\t\t\tpath = \"/\" + path;\n\t\t}\n\t\tif (path.equals(\"/\")) {\n\t\t\treturn \"/*\";\n\t\t}\n\t\tif (path.contains(\"*\")) {\n\t\t\treturn path;\n\t\t}\n\t\tif (path.endsWith(\"/\")) {\n\t\t\treturn path + \"*\";\n\t\t}\n\t\treturn path + \"/*\";\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "url",
            "mapping",
            "pattern",
            "that",
            "can",
            "be",
            "used",
            "with",
            "a",
            "servlet",
            "registration",
            "bean",
            "to",
            "map",
            "jersey",
            "s",
            "servlet"
        ]
    },
    {
        "id": 283,
        "code": "\tpublic MultipartConfigElement createMultipartConfig() {\n\t\tMultipartConfigFactory factory = new MultipartConfigFactory();\n\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n\t\tmap.from(this.fileSizeThreshold).to(factory::setFileSizeThreshold);\n\t\tmap.from(this.location).whenHasText().to(factory::setLocation);\n\t\tmap.from(this.maxRequestSize).to(factory::setMaxRequestSize);\n\t\tmap.from(this.maxFileSize).to(factory::setMaxFileSize);\n\t\treturn factory.createMultipartConfig();\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "new",
            "multipart",
            "config",
            "element",
            "using",
            "the",
            "properties"
        ]
    },
    {
        "id": 284,
        "code": "\tdefault RequestMappingHandlerMapping getRequestMappingHandlerMapping() {\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "custom",
            "request",
            "mapping",
            "handler",
            "mapping",
            "that",
            "should",
            "be",
            "used",
            "and",
            "processed",
            "by",
            "the",
            "mvc",
            "configuration"
        ]
    },
    {
        "id": 285,
        "code": "\tdefault RequestMappingHandlerAdapter getRequestMappingHandlerAdapter() {\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "custom",
            "request",
            "mapping",
            "handler",
            "adapter",
            "that",
            "should",
            "be",
            "used",
            "and",
            "processed",
            "by",
            "the",
            "mvc",
            "configuration"
        ]
    },
    {
        "id": 286,
        "code": "\tdefault ExceptionHandlerExceptionResolver getExceptionHandlerExceptionResolver() {\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "custom",
            "exception",
            "handler",
            "exception",
            "resolver",
            "that",
            "should",
            "be",
            "used",
            "and",
            "processed",
            "by",
            "the",
            "mvc",
            "configuration"
        ]
    },
    {
        "id": 287,
        "code": "\tprotected ModelAndView resolveErrorView(HttpServletRequest request, HttpServletResponse response, HttpStatus status,\n\t\t\tMap<String, Object> model) {\n\t\tfor (ErrorViewResolver resolver : this.errorViewResolvers) {\n\t\t\tModelAndView modelAndView = resolver.resolveErrorView(request, status, model);\n\t\t\tif (modelAndView != null) {\n\t\t\t\treturn modelAndView;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "resolve",
            "any",
            "specific",
            "error",
            "views"
        ]
    },
    {
        "id": 288,
        "code": "\tvoid defaultValuesInManualMetadataAreConsistent() {\n\t\tOptionsMap driverDefaults = OptionsMap.driverDefaults();\n\t\t\n\t\tassertThat(driverDefaults.get(TypedDriverOption.CONNECTION_CONNECT_TIMEOUT)).isEqualTo(Duration.ofSeconds(5));\n\t\t\n\t\tassertThat(driverDefaults.get(TypedDriverOption.CONNECTION_INIT_QUERY_TIMEOUT))\n\t\t\t\t.isEqualTo(Duration.ofSeconds(5));\n\t\t\n\t\tassertThat(driverDefaults.get(TypedDriverOption.REQUEST_TIMEOUT)).isEqualTo(Duration.ofSeconds(2));\n\t\t\n\t\tassertThat(driverDefaults.get(TypedDriverOption.REQUEST_PAGE_SIZE)).isEqualTo(5000);\n\t\t\n\t\tassertThat(driverDefaults.get(TypedDriverOption.REQUEST_THROTTLER_CLASS))\n\t\t\t\t.isEqualTo(\"PassThroughRequestThrottler\"); \n\t\t\n\t\tassertThat(driverDefaults.get(TypedDriverOption.HEARTBEAT_INTERVAL)).isEqualTo(Duration.ofSeconds(30));\n\t\t\n\t\tassertThat(driverDefaults.get(TypedDriverOption.HEARTBEAT_TIMEOUT)).isEqualTo(Duration.ofSeconds(5));\n\t}",
        "summary_tokens": [
            "to",
            "let",
            "a",
            "configuration",
            "file",
            "override",
            "values",
            "cassandra",
            "properties",
            "can",
            "t",
            "have",
            "any",
            "default",
            "hardcoded"
        ]
    },
    {
        "id": 289,
        "code": "\tvoid dataSourceWhenNoConnectionPoolsAreAvailableWithUrlAndTypeCreatesDataSource() {\n\t\tthis.contextRunner.with(hideConnectionPools())\n\t\t\t\t.withPropertyValues(\"spring.datasource.driverClassName:org.hsqldb.jdbcDriver\",\n\t\t\t\t\t\t\"spring.datasource.url:jdbc:hsqldb:mem:testdb\",\n\t\t\t\t\t\t\"spring.datasource.type:\" + SimpleDriverDataSource.class.getName())\n\t\t\t\t.run(this::containsOnlySimpleDriverDataSource);\n\t}",
        "summary_tokens": [
            "this",
            "test",
            "makes",
            "sure",
            "that",
            "if",
            "no",
            "supported",
            "data",
            "source",
            "is",
            "present",
            "a",
            "datasource",
            "is",
            "still",
            "created",
            "if",
            "spring"
        ]
    },
    {
        "id": 290,
        "code": "\tpublic Object launch(Class<?>[] sources, String[] args) throws Exception {\n\t\tMap<String, Object> defaultProperties = new HashMap<>();\n\t\tdefaultProperties.put(\"spring.groovy.template.check-template-location\", \"false\");\n\t\tClass<?> applicationClass = Class.forName(getSpringApplicationClassName(), false, this.classLoader);\n\t\tConstructor<?> constructor = applicationClass.getDeclaredConstructor(Class[].class);\n\t\tconstructor.setAccessible(true);\n\t\tObject application = constructor.newInstance((Object) sources);\n\t\tapplicationClass.getMethod(\"setDefaultProperties\", Map.class).invoke(application, defaultProperties);\n\t\tMethod method = applicationClass.getMethod(\"run\", String[].class);\n\t\treturn method.invoke(application, (Object) args);\n\t}",
        "summary_tokens": [
            "launches",
            "the",
            "application",
            "created",
            "using",
            "the",
            "given",
            "sources"
        ]
    },
    {
        "id": 291,
        "code": "\tpublic Set<Option> getOptions() {\n\t\treturn Collections.unmodifiableSet(this.options);\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "set",
            "of",
            "options",
            "that",
            "are",
            "understood",
            "by",
            "the",
            "command",
            "runner"
        ]
    },
    {
        "id": 292,
        "code": "\tProjectGenerationResponse generate(ProjectGenerationRequest request) throws IOException {\n\t\tLog.info(\"Using service at \" + request.getServiceUrl());\n\t\tInitializrServiceMetadata metadata = loadMetadata(request.getServiceUrl());\n\t\tURI url = request.generateUrl(metadata);\n\t\tCloseableHttpResponse httpResponse = executeProjectGenerationRequest(url);\n\t\tHttpEntity httpEntity = httpResponse.getEntity();\n\t\tvalidateResponse(httpResponse, request.getServiceUrl());\n\t\treturn createResponse(httpResponse, httpEntity);\n\t}",
        "summary_tokens": [
            "generate",
            "a",
            "project",
            "based",
            "on",
            "the",
            "specified",
            "project",
            "generation",
            "request"
        ]
    },
    {
        "id": 293,
        "code": "\tInitializrServiceMetadata loadMetadata(String serviceUrl) throws IOException {\n\t\tCloseableHttpResponse httpResponse = executeInitializrMetadataRetrieval(serviceUrl);\n\t\tvalidateResponse(httpResponse, serviceUrl);\n\t\treturn parseJsonMetadata(httpResponse.getEntity());\n\t}",
        "summary_tokens": [
            "load",
            "the",
            "initializr",
            "service",
            "metadata",
            "at",
            "the",
            "specified",
            "url"
        ]
    },
    {
        "id": 294,
        "code": "\tObject loadServiceCapabilities(String serviceUrl) throws IOException {\n\t\tHttpGet request = new HttpGet(serviceUrl);\n\t\trequest.setHeader(new BasicHeader(HttpHeaders.ACCEPT, ACCEPT_SERVICE_CAPABILITIES));\n\t\tCloseableHttpResponse httpResponse = execute(request, serviceUrl, \"retrieve help\");\n\t\tvalidateResponse(httpResponse, serviceUrl);\n\t\tHttpEntity httpEntity = httpResponse.getEntity();\n\t\tContentType contentType = ContentType.getOrDefault(httpEntity);\n\t\tif (contentType.getMimeType().equals(\"text/plain\")) {\n\t\t\treturn getContent(httpEntity);\n\t\t}\n\t\treturn parseJsonMetadata(httpEntity);\n\t}",
        "summary_tokens": [
            "loads",
            "the",
            "service",
            "capabilities",
            "of",
            "the",
            "service",
            "at",
            "the",
            "specified",
            "url"
        ]
    },
    {
        "id": 295,
        "code": "\tprivate CloseableHttpResponse executeProjectGenerationRequest(URI url) {\n\t\treturn execute(new HttpGet(url), url, \"generate project\");\n\t}",
        "summary_tokens": [
            "request",
            "the",
            "creation",
            "of",
            "the",
            "project",
            "using",
            "the",
            "specified",
            "url"
        ]
    },
    {
        "id": 296,
        "code": "\tprivate CloseableHttpResponse executeInitializrMetadataRetrieval(String url) {\n\t\tHttpGet request = new HttpGet(url);\n\t\trequest.setHeader(new BasicHeader(HttpHeaders.ACCEPT, ACCEPT_META_DATA));\n\t\treturn execute(request, url, \"retrieve metadata\");\n\t}",
        "summary_tokens": [
            "retrieves",
            "the",
            "meta",
            "data",
            "of",
            "the",
            "service",
            "at",
            "the",
            "specified",
            "url"
        ]
    },
    {
        "id": 297,
        "code": "\tString getServiceUrl() {\n\t\treturn this.serviceUrl;\n\t}",
        "summary_tokens": [
            "the",
            "url",
            "of",
            "the",
            "service",
            "to",
            "use"
        ]
    },
    {
        "id": 298,
        "code": "\tString getOutput() {\n\t\treturn this.output;\n\t}",
        "summary_tokens": [
            "the",
            "location",
            "of",
            "the",
            "generated",
            "project"
        ]
    },
    {
        "id": 299,
        "code": "\tboolean isExtract() {\n\t\treturn this.extract;\n\t}",
        "summary_tokens": [
            "whether",
            "the",
            "project",
            "archive",
            "should",
            "be",
            "extracted",
            "in",
            "the",
            "output",
            "location"
        ]
    },
    {
        "id": 300,
        "code": "\tString getGroupId() {\n\t\treturn this.groupId;\n\t}",
        "summary_tokens": [
            "the",
            "group",
            "id",
            "to",
            "use",
            "or",
            "null",
            "if",
            "it",
            "should",
            "not",
            "be",
            "customized"
        ]
    },
    {
        "id": 301,
        "code": "\tString getArtifactId() {\n\t\treturn this.artifactId;\n\t}",
        "summary_tokens": [
            "the",
            "artifact",
            "id",
            "to",
            "use",
            "or",
            "null",
            "if",
            "it",
            "should",
            "not",
            "be",
            "customized"
        ]
    },
    {
        "id": 302,
        "code": "\tString getVersion() {\n\t\treturn this.version;\n\t}",
        "summary_tokens": [
            "the",
            "artifact",
            "version",
            "to",
            "use",
            "or",
            "null",
            "if",
            "it",
            "should",
            "not",
            "be",
            "customized"
        ]
    },
    {
        "id": 303,
        "code": "\tString getName() {\n\t\treturn this.name;\n\t}",
        "summary_tokens": [
            "the",
            "name",
            "to",
            "use",
            "or",
            "null",
            "if",
            "it",
            "should",
            "not",
            "be",
            "customized"
        ]
    },
    {
        "id": 304,
        "code": "\tString getDescription() {\n\t\treturn this.description;\n\t}",
        "summary_tokens": [
            "the",
            "description",
            "to",
            "use",
            "or",
            "null",
            "if",
            "it",
            "should",
            "not",
            "be",
            "customized"
        ]
    },
    {
        "id": 305,
        "code": "\tString getPackageName() {\n\t\treturn this.packageName;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "package",
            "name",
            "or",
            "null",
            "if",
            "it",
            "should",
            "not",
            "be",
            "customized"
        ]
    },
    {
        "id": 306,
        "code": "\tString getType() {\n\t\treturn this.type;\n\t}",
        "summary_tokens": [
            "the",
            "type",
            "of",
            "project",
            "to",
            "generate"
        ]
    },
    {
        "id": 307,
        "code": "\tString getPackaging() {\n\t\treturn this.packaging;\n\t}",
        "summary_tokens": [
            "the",
            "packaging",
            "type",
            "or",
            "null",
            "if",
            "it",
            "should",
            "not",
            "be",
            "customized"
        ]
    },
    {
        "id": 308,
        "code": "\tString getBuild() {\n\t\treturn this.build;\n\t}",
        "summary_tokens": [
            "the",
            "build",
            "type",
            "to",
            "use"
        ]
    },
    {
        "id": 309,
        "code": "\tString getFormat() {\n\t\treturn this.format;\n\t}",
        "summary_tokens": [
            "the",
            "project",
            "format",
            "to",
            "use"
        ]
    },
    {
        "id": 310,
        "code": "\tboolean isDetectType() {\n\t\treturn this.detectType;\n\t}",
        "summary_tokens": [
            "whether",
            "the",
            "type",
            "should",
            "be",
            "detected",
            "based",
            "on",
            "the",
            "build",
            "and",
            "format",
            "value"
        ]
    },
    {
        "id": 311,
        "code": "\tString getJavaVersion() {\n\t\treturn this.javaVersion;\n\t}",
        "summary_tokens": [
            "the",
            "java",
            "version",
            "to",
            "use",
            "or",
            "null",
            "if",
            "it",
            "should",
            "not",
            "be",
            "customized"
        ]
    },
    {
        "id": 312,
        "code": "\tString getLanguage() {\n\t\treturn this.language;\n\t}",
        "summary_tokens": [
            "the",
            "programming",
            "language",
            "to",
            "use",
            "or",
            "null",
            "if",
            "it",
            "should",
            "not",
            "be",
            "customized"
        ]
    },
    {
        "id": 313,
        "code": "\tString getBootVersion() {\n\t\treturn this.bootVersion;\n\t}",
        "summary_tokens": [
            "the",
            "spring",
            "boot",
            "version",
            "to",
            "use",
            "or",
            "null",
            "if",
            "it",
            "should",
            "not",
            "be",
            "customized"
        ]
    },
    {
        "id": 314,
        "code": "\tList<String> getDependencies() {\n\t\treturn this.dependencies;\n\t}",
        "summary_tokens": [
            "the",
            "identifiers",
            "of",
            "the",
            "dependencies",
            "to",
            "include",
            "in",
            "the",
            "project"
        ]
    },
    {
        "id": 315,
        "code": "\tURI generateUrl(InitializrServiceMetadata metadata) {\n\t\ttry {\n\t\t\tURIBuilder builder = new URIBuilder(this.serviceUrl);\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tif (builder.getPath() != null) {\n\t\t\t\tsb.append(builder.getPath());\n\t\t\t}\n\n\t\t\tProjectType projectType = determineProjectType(metadata);\n\t\t\tthis.type = projectType.getId();\n\t\t\tsb.append(projectType.getAction());\n\t\t\tbuilder.setPath(sb.toString());\n\n\t\t\tif (!this.dependencies.isEmpty()) {\n\t\t\t\tbuilder.setParameter(\"dependencies\", StringUtils.collectionToCommaDelimitedString(this.dependencies));\n\t\t\t}\n\n\t\t\tif (this.groupId != null) {\n\t\t\t\tbuilder.setParameter(\"groupId\", this.groupId);\n\t\t\t}\n\t\t\tString resolvedArtifactId = resolveArtifactId();\n\t\t\tif (resolvedArtifactId != null) {\n\t\t\t\tbuilder.setParameter(\"artifactId\", resolvedArtifactId);\n\t\t\t}\n\t\t\tif (this.version != null) {\n\t\t\t\tbuilder.setParameter(\"version\", this.version);\n\t\t\t}\n\t\t\tif (this.name != null) {\n\t\t\t\tbuilder.setParameter(\"name\", this.name);\n\t\t\t}\n\t\t\tif (this.description != null) {\n\t\t\t\tbuilder.setParameter(\"description\", this.description);\n\t\t\t}\n\t\t\tif (this.packageName != null) {\n\t\t\t\tbuilder.setParameter(\"packageName\", this.packageName);\n\t\t\t}\n\t\t\tif (this.type != null) {\n\t\t\t\tbuilder.setParameter(\"type\", projectType.getId());\n\t\t\t}\n\t\t\tif (this.packaging != null) {\n\t\t\t\tbuilder.setParameter(\"packaging\", this.packaging);\n\t\t\t}\n\t\t\tif (this.javaVersion != null) {\n\t\t\t\tbuilder.setParameter(\"javaVersion\", this.javaVersion);\n\t\t\t}\n\t\t\tif (this.language != null) {\n\t\t\t\tbuilder.setParameter(\"language\", this.language);\n\t\t\t}\n\t\t\tif (this.bootVersion != null) {\n\t\t\t\tbuilder.setParameter(\"bootVersion\", this.bootVersion);\n\t\t\t}\n\n\t\t\treturn builder.build();\n\t\t}\n\t\tcatch (URISyntaxException ex) {\n\t\t\tthrow new ReportableException(\"Invalid service URL (\" + ex.getMessage() + \")\");\n\t\t}\n\t}",
        "summary_tokens": [
            "generates",
            "the",
            "uri",
            "to",
            "use",
            "to",
            "generate",
            "a",
            "project",
            "represented",
            "by",
            "this",
            "request"
        ]
    },
    {
        "id": 316,
        "code": "\tprotected String resolveArtifactId() {\n\t\tif (this.artifactId != null) {\n\t\t\treturn this.artifactId;\n\t\t}\n\t\tif (this.output != null) {\n\t\t\tint i = this.output.lastIndexOf('.');\n\t\t\treturn (i != -1) ? this.output.substring(0, i) : this.output;\n\t\t}\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "resolve",
            "the",
            "artifact",
            "id",
            "to",
            "use",
            "or",
            "null",
            "if",
            "it",
            "should",
            "not",
            "be",
            "customized"
        ]
    },
    {
        "id": 317,
        "code": "\tContentType getContentType() {\n\t\treturn this.contentType;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "content",
            "type",
            "of",
            "this",
            "instance"
        ]
    },
    {
        "id": 318,
        "code": "\tbyte[] getContent() {\n\t\treturn this.content;\n\t}",
        "summary_tokens": [
            "the",
            "generated",
            "project",
            "archive",
            "or",
            "file"
        ]
    },
    {
        "id": 319,
        "code": "\tString getFileName() {\n\t\treturn this.fileName;\n\t}",
        "summary_tokens": [
            "the",
            "preferred",
            "file",
            "name",
            "to",
            "use",
            "to",
            "store",
            "the",
            "entity",
            "on",
            "disk",
            "or",
            "null",
            "if",
            "no",
            "preferred",
            "value",
            "has",
            "been",
            "set"
        ]
    },
    {
        "id": 320,
        "code": "\tprivate boolean shouldExtract(ProjectGenerationRequest request, ProjectGenerationResponse response) {\n\t\tif (request.isExtract()) {\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn isZipArchive(response) && request.getOutput() != null && !request.getOutput().contains(\".\");\n\t}",
        "summary_tokens": [
            "detect",
            "if",
            "the",
            "project",
            "should",
            "be",
            "extracted"
        ]
    },
    {
        "id": 321,
        "code": "\tprotected ExitStatus run(OptionSet options) throws Exception {\n\t\treturn ExitStatus.OK;\n\t}",
        "summary_tokens": [
            "run",
            "the",
            "command",
            "using",
            "the",
            "specified",
            "parsed",
            "option",
            "set"
        ]
    },
    {
        "id": 322,
        "code": "\tpublic void compileAndRun() throws Exception {\n\t\tsynchronized (this.monitor) {\n\t\t\ttry {\n\t\t\t\tstop();\n\t\t\t\tClass<?>[] compiledSources = compile();\n\t\t\t\tmonitorForChanges();\n\t\t\t\t\n\t\t\t\tthis.runThread = new RunThread(compiledSources);\n\t\t\t\tthis.runThread.start();\n\t\t\t\tthis.runThread.join();\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tif (this.fileWatchThread == null) {\n\t\t\t\t\tthrow ex;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tex.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}",
        "summary_tokens": [
            "compile",
            "and",
            "run",
            "the",
            "application"
        ]
    },
    {
        "id": 323,
        "code": "\tAnsiString append(String text, Code... codes) {\n\t\tif (codes.length == 0 || !isAnsiSupported()) {\n\t\t\tthis.value.append(text);\n\t\t\treturn this;\n\t\t}\n\t\tAnsi ansi = Ansi.ansi();\n\t\tfor (Code code : codes) {\n\t\t\tansi = applyCode(ansi, code);\n\t\t}\n\t\tthis.value.append(ansi.a(text).reset().toString());\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "append",
            "text",
            "with",
            "the",
            "given",
            "ansi",
            "codes"
        ]
    },
    {
        "id": 324,
        "code": "\tpublic void pushPrompt(String prompt) {\n\t\tthis.prompts.push(prompt);\n\t}",
        "summary_tokens": [
            "push",
            "a",
            "new",
            "prompt",
            "to",
            "be",
            "used",
            "by",
            "the",
            "shell"
        ]
    },
    {
        "id": 325,
        "code": "\tpublic void popPrompt() {\n\t\tif (!this.prompts.isEmpty()) {\n\t\t\tthis.prompts.pop();\n\t\t}\n\t}",
        "summary_tokens": [
            "pop",
            "a",
            "previously",
            "pushed",
            "prompt",
            "returning",
            "to",
            "the",
            "previous",
            "value"
        ]
    },
    {
        "id": 326,
        "code": "\tpublic String getPrompt() {\n\t\treturn this.prompts.isEmpty() ? DEFAULT_PROMPT : this.prompts.peek();\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "current",
            "prompt"
        ]
    },
    {
        "id": 327,
        "code": "\tpublic int getCode() {\n\t\treturn this.code;\n\t}",
        "summary_tokens": [
            "an",
            "exit",
            "code",
            "appropriate",
            "for",
            "use",
            "in",
            "system"
        ]
    },
    {
        "id": 328,
        "code": "\tpublic String getName() {\n\t\treturn this.name;\n\t}",
        "summary_tokens": [
            "a",
            "name",
            "describing",
            "the",
            "outcome"
        ]
    },
    {
        "id": 329,
        "code": "\tpublic boolean isHangup() {\n\t\treturn this.hangup;\n\t}",
        "summary_tokens": [
            "flag",
            "to",
            "signal",
            "that",
            "the",
            "caller",
            "can",
            "or",
            "should",
            "hangup"
        ]
    },
    {
        "id": 330,
        "code": "\tpublic ExitStatus hangup() {\n\t\treturn new ExitStatus(this.code, this.name, true);\n\t}",
        "summary_tokens": [
            "convert",
            "the",
            "existing",
            "code",
            "to",
            "a",
            "hangup"
        ]
    },
    {
        "id": 331,
        "code": "\tpublic boolean matches(ClassNode classNode) {\n\t\treturn true;\n\t}",
        "summary_tokens": [
            "strategy",
            "method",
            "used",
            "to",
            "determine",
            "when",
            "compiler",
            "auto",
            "configuration",
            "should",
            "be",
            "applied"
        ]
    },
    {
        "id": 332,
        "code": "\tpublic void applyDependencies(DependencyCustomizer dependencies) throws CompilationFailedException {\n\t}",
        "summary_tokens": [
            "apply",
            "any",
            "dependency",
            "customizations"
        ]
    },
    {
        "id": 333,
        "code": "\tpublic void applyImports(ImportCustomizer imports) throws CompilationFailedException {\n\t}",
        "summary_tokens": [
            "apply",
            "any",
            "import",
            "customizations"
        ]
    },
    {
        "id": 334,
        "code": "\tpublic void applyToMainClass(GroovyClassLoader loader, GroovyCompilerConfiguration configuration,\n\t\t\tGeneratorContext generatorContext, SourceUnit source, ClassNode classNode)",
        "summary_tokens": [
            "apply",
            "any",
            "customizations",
            "to",
            "the",
            "main",
            "class"
        ]
    },
    {
        "id": 335,
        "code": "\tpublic void apply(GroovyClassLoader loader, GroovyCompilerConfiguration configuration,\n\t\t\tGeneratorContext generatorContext, SourceUnit source, ClassNode classNode)",
        "summary_tokens": [
            "apply",
            "any",
            "additional",
            "configuration"
        ]
    },
    {
        "id": 336,
        "code": "\tpublic DependencyCustomizer ifAnyMissingClasses(String... classNames) {\n\t\treturn new DependencyCustomizer(this) {\n\t\t\t@Override\n\t\t\tprotected boolean canAdd() {\n\t\t\t\tfor (String className : classNames) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tClass.forName(className, false, DependencyCustomizer.this.loader);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception ex) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t};\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "nested",
            "dependency",
            "customizer",
            "that",
            "only",
            "applies",
            "if",
            "any",
            "of",
            "the",
            "specified",
            "class",
            "names",
            "are",
            "not",
            "on",
            "the",
            "class",
            "path"
        ]
    },
    {
        "id": 337,
        "code": "\tpublic DependencyCustomizer ifAllMissingClasses(String... classNames) {\n\t\treturn new DependencyCustomizer(this) {\n\t\t\t@Override\n\t\t\tprotected boolean canAdd() {\n\t\t\t\tfor (String className : classNames) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tClass.forName(className, false, DependencyCustomizer.this.loader);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception ex) {\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn DependencyCustomizer.this.canAdd();\n\t\t\t}\n\t\t};\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "nested",
            "dependency",
            "customizer",
            "that",
            "only",
            "applies",
            "if",
            "all",
            "the",
            "specified",
            "class",
            "names",
            "are",
            "not",
            "on",
            "the",
            "class",
            "path"
        ]
    },
    {
        "id": 338,
        "code": "\tpublic DependencyCustomizer ifAllResourcesPresent(String... paths) {\n\t\treturn new DependencyCustomizer(this) {\n\t\t\t@Override\n\t\t\tprotected boolean canAdd() {\n\t\t\t\tfor (String path : paths) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (DependencyCustomizer.this.loader.getResource(path) == null) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception ex) {\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn DependencyCustomizer.this.canAdd();\n\t\t\t}\n\t\t};\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "nested",
            "dependency",
            "customizer",
            "that",
            "only",
            "applies",
            "if",
            "the",
            "specified",
            "paths",
            "are",
            "on",
            "the",
            "class",
            "path"
        ]
    },
    {
        "id": 339,
        "code": "\tpublic DependencyCustomizer ifAnyResourcesPresent(String... paths) {\n\t\treturn new DependencyCustomizer(this) {\n\t\t\t@Override\n\t\t\tprotected boolean canAdd() {\n\t\t\t\tfor (String path : paths) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn DependencyCustomizer.this.loader.getResource(path) != null;\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception ex) {\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn DependencyCustomizer.this.canAdd();\n\t\t\t}\n\t\t};\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "nested",
            "dependency",
            "customizer",
            "that",
            "only",
            "applies",
            "at",
            "least",
            "one",
            "of",
            "the",
            "specified",
            "paths",
            "is",
            "on",
            "the",
            "class",
            "path"
        ]
    },
    {
        "id": 340,
        "code": "\tpublic DependencyCustomizer add(String module, String classifier, String type, boolean transitive) {\n\t\tif (canAdd()) {\n\t\t\tArtifactCoordinatesResolver artifactCoordinatesResolver = this.dependencyResolutionContext\n\t\t\t\t\t.getArtifactCoordinatesResolver();\n\t\t\tthis.classNode.addAnnotation(createGrabAnnotation(artifactCoordinatesResolver.getGroupId(module),\n\t\t\t\t\tartifactCoordinatesResolver.getArtifactId(module), artifactCoordinatesResolver.getVersion(module),\n\t\t\t\t\tclassifier, type, transitive));\n\t\t}\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "add",
            "a",
            "single",
            "dependency",
            "with",
            "the",
            "specified",
            "classifier",
            "and",
            "type",
            "and",
            "optionally",
            "all",
            "of",
            "its",
            "dependencies"
        ]
    },
    {
        "id": 341,
        "code": "\tprotected boolean canAdd() {\n\t\treturn true;\n\t}",
        "summary_tokens": [
            "strategy",
            "called",
            "to",
            "test",
            "if",
            "dependencies",
            "can",
            "be",
            "added"
        ]
    },
    {
        "id": 342,
        "code": "\tpublic DependencyResolutionContext getDependencyResolutionContext() {\n\t\treturn this.dependencyResolutionContext;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "dependency",
            "resolution",
            "context"
        ]
    },
    {
        "id": 343,
        "code": "\tpublic static List<RepositoryConfiguration> createDefaultRepositoryConfiguration() {\n\t\tMavenSettings mavenSettings = new MavenSettingsReader().readSettings();\n\t\tList<RepositoryConfiguration> repositoryConfiguration = new ArrayList<>();\n\t\trepositoryConfiguration.add(MAVEN_CENTRAL);\n\t\tif (!Boolean.getBoolean(\"disableSpringSnapshotRepos\")) {\n\t\t\trepositoryConfiguration.add(SPRING_MILESTONE);\n\t\t\trepositoryConfiguration.add(SPRING_SNAPSHOT);\n\t\t}\n\t\taddDefaultCacheAsRepository(mavenSettings.getLocalRepository(), repositoryConfiguration);\n\t\taddActiveProfileRepositories(mavenSettings.getActiveProfiles(), repositoryConfiguration);\n\t\treturn repositoryConfiguration;\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "new",
            "default",
            "repository",
            "configuration"
        ]
    },
    {
        "id": 344,
        "code": "\tpublic String getGroupId() {\n\t\treturn this.groupId;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "dependency",
            "group",
            "id"
        ]
    },
    {
        "id": 345,
        "code": "\tpublic String getArtifactId() {\n\t\treturn this.artifactId;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "dependency",
            "artifact",
            "id"
        ]
    },
    {
        "id": 346,
        "code": "\tpublic String getVersion() {\n\t\treturn this.version;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "dependency",
            "version"
        ]
    },
    {
        "id": 347,
        "code": "\tpublic List<Exclusion> getExclusions() {\n\t\treturn this.exclusions;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "dependency",
            "exclusions"
        ]
    },
    {
        "id": 348,
        "code": "\tpublic String getName() {\n\t\treturn this.name;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "name",
            "of",
            "the",
            "repository"
        ]
    },
    {
        "id": 349,
        "code": "\tpublic URI getUri() {\n\t\treturn this.uri;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "uri",
            "of",
            "the",
            "repository"
        ]
    },
    {
        "id": 350,
        "code": "\tpublic boolean getSnapshotsEnabled() {\n\t\treturn this.snapshotsEnabled;\n\t}",
        "summary_tokens": [
            "return",
            "if",
            "the",
            "repository",
            "should",
            "enable",
            "access",
            "to",
            "snapshots"
        ]
    },
    {
        "id": 351,
        "code": "\tpublic static List<String> getUrls(String path, ClassLoader classLoader) {\n\t\tif (classLoader == null) {\n\t\t\tclassLoader = ClassUtils.getDefaultClassLoader();\n\t\t}\n\t\tpath = StringUtils.cleanPath(path);\n\t\ttry {\n\t\t\treturn getUrlsFromWildcardPath(path, classLoader);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tthrow new IllegalArgumentException(\"Cannot create URL from path [\" + path + \"]\", ex);\n\t\t}\n\t}",
        "summary_tokens": [
            "return",
            "urls",
            "from",
            "a",
            "given",
            "source",
            "path"
        ]
    },
    {
        "id": 352,
        "code": "\tpublic static void main(String[] args) {\n\t\tnew RemoteSpringApplication().run(args);\n\t}",
        "summary_tokens": [
            "run",
            "the",
            "remote",
            "spring",
            "application"
        ]
    },
    {
        "id": 353,
        "code": "\tpublic void triggerReload() {\n\t\tif (this.server != null) {\n\t\t\tthis.server.triggerReload();\n\t\t}\n\t}",
        "summary_tokens": [
            "trigger",
            "live",
            "reload",
            "if",
            "the",
            "server",
            "is",
            "up",
            "and",
            "running"
        ]
    },
    {
        "id": 354,
        "code": "\tpublic Set<ChangedFiles> getChangeSet() {\n\t\treturn this.changeSet;\n\t}",
        "summary_tokens": [
            "return",
            "details",
            "of",
            "the",
            "files",
            "that",
            "changed"
        ]
    },
    {
        "id": 355,
        "code": "\tpublic boolean isRestartRequired() {\n\t\treturn this.restartRequired;\n\t}",
        "summary_tokens": [
            "return",
            "if",
            "an",
            "application",
            "restart",
            "is",
            "required",
            "due",
            "to",
            "the",
            "change"
        ]
    },
    {
        "id": 356,
        "code": "\tpublic String overview() {\n\t\tint added = 0;\n\t\tint deleted = 0;\n\t\tint modified = 0;\n\t\tfor (ChangedFiles changedFiles : this.changeSet) {\n\t\t\tfor (ChangedFile changedFile : changedFiles) {\n\t\t\t\tType type = changedFile.getType();\n\t\t\t\tif (type == Type.ADD) {\n\t\t\t\t\tadded++;\n\t\t\t\t}\n\t\t\t\telse if (type == Type.DELETE) {\n\t\t\t\t\tdeleted++;\n\t\t\t\t}\n\t\t\t\telse if (type == Type.MODIFY) {\n\t\t\t\t\tmodified++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint size = added + deleted + modified;\n\t\treturn String.format(\"%s (%s, %s, %s)\", quantityOfUnit(size, \"class path change\"),\n\t\t\t\tquantityOfUnit(added, \"addition\"), quantityOfUnit(deleted, \"deletion\"),\n\t\t\t\tquantityOfUnit(modified, \"modification\"));\n\t}",
        "summary_tokens": [
            "return",
            "an",
            "overview",
            "of",
            "the",
            "changes",
            "that",
            "triggered",
            "this",
            "event"
        ]
    },
    {
        "id": 357,
        "code": "\tpublic void setStopWatcherOnRestart(boolean stopWatcherOnRestart) {\n\t\tthis.stopWatcherOnRestart = stopWatcherOnRestart;\n\t}",
        "summary_tokens": [
            "set",
            "if",
            "the",
            "file",
            "system",
            "watcher",
            "should",
            "be",
            "stopped",
            "when",
            "a",
            "full",
            "restart",
            "occurs"
        ]
    },
    {
        "id": 358,
        "code": "\tpublic void addListener(FileChangeListener fileChangeListener) {\n\t\tAssert.notNull(fileChangeListener, \"FileChangeListener must not be null\");\n\t\tsynchronized (this.monitor) {\n\t\t\tcheckNotStarted();\n\t\t\tthis.listeners.add(fileChangeListener);\n\t\t}\n\t}",
        "summary_tokens": [
            "add",
            "listener",
            "for",
            "file",
            "change",
            "events"
        ]
    },
    {
        "id": 359,
        "code": "\tpublic void addSourceDirectories(Iterable<File> directories) {\n\t\tAssert.notNull(directories, \"Directories must not be null\");\n\t\tsynchronized (this.monitor) {\n\t\t\tdirectories.forEach(this::addSourceDirectory);\n\t\t}\n\t}",
        "summary_tokens": [
            "add",
            "source",
            "directories",
            "to",
            "monitor"
        ]
    },
    {
        "id": 360,
        "code": "\tpublic void addSourceDirectory(File directory) {\n\t\tAssert.notNull(directory, \"Directory must not be null\");\n\t\tAssert.isTrue(!directory.isFile(), () -> \"Directory '\" + directory + \"' must not be a file\");\n\t\tsynchronized (this.monitor) {\n\t\t\tcheckNotStarted();\n\t\t\tthis.directories.put(directory, null);\n\t\t}\n\t}",
        "summary_tokens": [
            "add",
            "a",
            "source",
            "directory",
            "to",
            "monitor"
        ]
    },
    {
        "id": 361,
        "code": "\tpublic void setTriggerFilter(FileFilter triggerFilter) {\n\t\tsynchronized (this.monitor) {\n\t\t\tthis.triggerFilter = triggerFilter;\n\t\t}\n\t}",
        "summary_tokens": [
            "set",
            "an",
            "optional",
            "file",
            "filter",
            "used",
            "to",
            "limit",
            "the",
            "files",
            "that",
            "trigger",
            "a",
            "change"
        ]
    },
    {
        "id": 362,
        "code": "\tpublic void start() {\n\t\tsynchronized (this.monitor) {\n\t\t\tcreateOrRestoreInitialSnapshots();\n\t\t\tif (this.watchThread == null) {\n\t\t\t\tMap<File, DirectorySnapshot> localDirectories = new HashMap<>(this.directories);\n\t\t\t\tWatcher watcher = new Watcher(this.remainingScans, new ArrayList<>(this.listeners), this.triggerFilter,\n\t\t\t\t\t\tthis.pollInterval, this.quietPeriod, localDirectories, this.snapshotStateRepository);\n\t\t\t\tthis.watchThread = new Thread(watcher);\n\t\t\t\tthis.watchThread.setName(\"File Watcher\");\n\t\t\t\tthis.watchThread.setDaemon(this.daemon);\n\t\t\t\tthis.watchThread.start();\n\t\t\t}\n\t\t}\n\t}",
        "summary_tokens": [
            "start",
            "monitoring",
            "the",
            "source",
            "directory",
            "for",
            "changes"
        ]
    },
    {
        "id": 363,
        "code": "\tpublic void stop() {\n\t\tstopAfter(0);\n\t}",
        "summary_tokens": [
            "stop",
            "monitoring",
            "the",
            "source",
            "directories"
        ]
    },
    {
        "id": 364,
        "code": "\tvoid stopAfter(int remainingScans) {\n\t\tThread thread;\n\t\tsynchronized (this.monitor) {\n\t\t\tthread = this.watchThread;\n\t\t\tif (thread != null) {\n\t\t\t\tthis.remainingScans.set(remainingScans);\n\t\t\t\tif (remainingScans <= 0) {\n\t\t\t\t\tthread.interrupt();\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.watchThread = null;\n\t\t}\n\t\tif (thread != null && Thread.currentThread() != thread) {\n\t\t\ttry {\n\t\t\t\tthread.join();\n\t\t\t}\n\t\t\tcatch (InterruptedException ex) {\n\t\t\t\tThread.currentThread().interrupt();\n\t\t\t}\n\t\t}\n\t}",
        "summary_tokens": [
            "stop",
            "monitoring",
            "the",
            "source",
            "directories"
        ]
    },
    {
        "id": 365,
        "code": "\tvoid triggerReload() throws IOException {\n\t\tif (this.webSocket) {\n\t\t\tlogger.debug(\"Triggering LiveReload\");\n\t\t\twriteWebSocketFrame(new Frame(\"{\\\"command\\\":\\\"reload\\\",\\\"path\\\":\\\"/\\\"}\"));\n\t\t}\n\t}",
        "summary_tokens": [
            "trigger",
            "livereload",
            "for",
            "the",
            "client",
            "using",
            "this",
            "connection"
        ]
    },
    {
        "id": 366,
        "code": "\tString readHeader() throws IOException {\n\t\tbyte[] buffer = new byte[BUFFER_SIZE];\n\t\tStringBuilder content = new StringBuilder(BUFFER_SIZE);\n\t\twhile (content.indexOf(HEADER_END) == -1) {\n\t\t\tint amountRead = checkedRead(buffer, 0, BUFFER_SIZE);\n\t\t\tcontent.append(new String(buffer, 0, amountRead));\n\t\t}\n\t\treturn content.substring(0, content.indexOf(HEADER_END));\n\t}",
        "summary_tokens": [
            "read",
            "the",
            "http",
            "header",
            "from",
            "the",
            "input",
            "stream"
        ]
    },
    {
        "id": 367,
        "code": "\tvoid readFully(byte[] buffer, int offset, int length) throws IOException {\n\t\twhile (length > 0) {\n\t\t\tint amountRead = checkedRead(buffer, offset, length);\n\t\t\toffset += amountRead;\n\t\t\tlength -= amountRead;\n\t\t}\n\t}",
        "summary_tokens": [
            "repeatedly",
            "read",
            "the",
            "underlying",
            "input",
            "stream",
            "until",
            "the",
            "requested",
            "number",
            "of",
            "bytes",
            "have",
            "been",
            "loaded"
        ]
    },
    {
        "id": 368,
        "code": "\tint checkedRead(byte[] buffer, int offset, int length) throws IOException {\n\t\tint amountRead = read(buffer, offset, length);\n\t\tif (amountRead == -1) {\n\t\t\tthrow new IOException(\"End of stream\");\n\t\t}\n\t\treturn amountRead;\n\t}",
        "summary_tokens": [
            "read",
            "a",
            "number",
            "of",
            "bytes",
            "from",
            "the",
            "stream",
            "checking",
            "that",
            "the",
            "end",
            "of",
            "the",
            "stream",
            "hasn",
            "t",
            "been",
            "reached"
        ]
    },
    {
        "id": 369,
        "code": "\tpublic int start() throws IOException {\n\t\tsynchronized (this.monitor) {\n\t\t\tAssert.state(!isStarted(), \"Server already started\");\n\t\t\tlogger.debug(LogMessage.format(\"Starting live reload server on port %s\", this.port));\n\t\t\tthis.serverSocket = new ServerSocket(this.port);\n\t\t\tint localPort = this.serverSocket.getLocalPort();\n\t\t\tthis.listenThread = this.threadFactory.newThread(this::acceptConnections);\n\t\t\tthis.listenThread.setDaemon(true);\n\t\t\tthis.listenThread.setName(\"Live Reload Server\");\n\t\t\tthis.listenThread.start();\n\t\t\treturn localPort;\n\t\t}\n\t}",
        "summary_tokens": [
            "start",
            "the",
            "livereload",
            "server",
            "and",
            "accept",
            "incoming",
            "connections"
        ]
    },
    {
        "id": 370,
        "code": "\tpublic boolean isStarted() {\n\t\tsynchronized (this.monitor) {\n\t\t\treturn this.listenThread != null;\n\t\t}\n\t}",
        "summary_tokens": [
            "return",
            "if",
            "the",
            "server",
            "has",
            "been",
            "started"
        ]
    },
    {
        "id": 371,
        "code": "\tpublic int getPort() {\n\t\treturn this.port;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "port",
            "that",
            "the",
            "server",
            "is",
            "listening",
            "on"
        ]
    },
    {
        "id": 372,
        "code": "\tpublic void stop() throws IOException {\n\t\tsynchronized (this.monitor) {\n\t\t\tif (this.listenThread != null) {\n\t\t\t\tcloseAllConnections();\n\t\t\t\ttry {\n\t\t\t\t\tthis.executor.shutdown();\n\t\t\t\t\tthis.executor.awaitTermination(1, TimeUnit.MINUTES);\n\t\t\t\t}\n\t\t\t\tcatch (InterruptedException ex) {\n\t\t\t\t\tThread.currentThread().interrupt();\n\t\t\t\t}\n\t\t\t\tthis.serverSocket.close();\n\t\t\t\ttry {\n\t\t\t\t\tthis.listenThread.join();\n\t\t\t\t}\n\t\t\t\tcatch (InterruptedException ex) {\n\t\t\t\t\tThread.currentThread().interrupt();\n\t\t\t\t}\n\t\t\t\tthis.listenThread = null;\n\t\t\t\tthis.serverSocket = null;\n\t\t\t}\n\t\t}\n\t}",
        "summary_tokens": [
            "gracefully",
            "stop",
            "the",
            "livereload",
            "server"
        ]
    },
    {
        "id": 373,
        "code": "\tpublic void triggerReload() {\n\t\tsynchronized (this.monitor) {\n\t\t\tsynchronized (this.connections) {\n\t\t\t\tfor (Connection connection : this.connections) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconnection.triggerReload();\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception ex) {\n\t\t\t\t\t\tlogger.debug(\"Unable to send reload message\", ex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}",
        "summary_tokens": [
            "trigger",
            "livereload",
            "of",
            "all",
            "connected",
            "clients"
        ]
    },
    {
        "id": 374,
        "code": "\tprotected Connection createConnection(Socket socket, InputStream inputStream, OutputStream outputStream)\n\t\t\tthrows IOException {\n\t\treturn new Connection(socket, inputStream, outputStream);\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "used",
            "to",
            "create",
            "the",
            "connection"
        ]
    },
    {
        "id": 375,
        "code": "\tpublic boolean handle(ServerHttpRequest request, ServerHttpResponse response) throws IOException {\n\t\tfor (HandlerMapper mapper : this.mappers) {\n\t\t\tHandler handler = mapper.getHandler(request);\n\t\t\tif (handler != null) {\n\t\t\t\thandle(handler, request, response);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}",
        "summary_tokens": [
            "dispatch",
            "the",
            "specified",
            "request",
            "to",
            "an",
            "appropriate",
            "handler"
        ]
    },
    {
        "id": 376,
        "code": "\tpublic static boolean isActive() {\n\t\treturn isActive(null) || isActive(AgentReloader.class.getClassLoader())\n\t\t\t\t|| isActive(ClassLoader.getSystemClassLoader());\n\t}",
        "summary_tokens": [
            "determine",
            "if",
            "any",
            "agent",
            "reloader",
            "is",
            "active"
        ]
    },
    {
        "id": 377,
        "code": "\tprotected boolean isMain(Thread thread) {\n\t\treturn isMainThread(thread) && isDevelopmentClassLoader(thread.getContextClassLoader());\n\t}",
        "summary_tokens": [
            "returns",
            "if",
            "the",
            "thread",
            "is",
            "for",
            "a",
            "main",
            "invocation"
        ]
    },
    {
        "id": 378,
        "code": "\tprotected boolean isMainThread(Thread thread) {\n\t\treturn thread.getName().equals(\"main\");\n\t}",
        "summary_tokens": [
            "returns",
            "whether",
            "the",
            "given",
            "thread",
            "is",
            "considered",
            "to",
            "be",
            "the",
            "main",
            "thread"
        ]
    },
    {
        "id": 379,
        "code": "\tprotected boolean isDevelopmentClassLoader(ClassLoader classLoader) {\n\t\treturn classLoader.getClass().getName().contains(\"AppClassLoader\");\n\t}",
        "summary_tokens": [
            "returns",
            "whether",
            "the",
            "given",
            "class",
            "loader",
            "is",
            "one",
            "that",
            "is",
            "typically",
            "used",
            "during",
            "development"
        ]
    },
    {
        "id": 380,
        "code": "\tprotected URL[] getUrls(Thread thread) {\n\t\treturn ChangeableUrls.fromClassLoader(thread.getContextClassLoader()).toArray();\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "urls",
            "that",
            "should",
            "be",
            "used",
            "with",
            "initialization"
        ]
    },
    {
        "id": 381,
        "code": "\tMethod getMethod() {\n\t\treturn this.method;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "actual",
            "main",
            "method"
        ]
    },
    {
        "id": 382,
        "code": "\tString getDeclaringClassName() {\n\t\treturn this.method.getDeclaringClass().getName();\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "name",
            "of",
            "the",
            "declaring",
            "class"
        ]
    },
    {
        "id": 383,
        "code": "\tpublic Kind getKind() {\n\t\treturn this.kind;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "file",
            "kind",
            "added",
            "modified",
            "deleted"
        ]
    },
    {
        "id": 384,
        "code": "\tpublic long getLastModified() {\n\t\treturn this.lastModified;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "time",
            "that",
            "the",
            "file",
            "was",
            "last",
            "modified"
        ]
    },
    {
        "id": 385,
        "code": "\tpublic byte[] getContents() {\n\t\treturn this.contents;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "contents",
            "of",
            "the",
            "file",
            "as",
            "a",
            "byte",
            "array",
            "or",
            "null",
            "if",
            "get",
            "kind",
            "is",
            "kind",
            "deleted"
        ]
    },
    {
        "id": 386,
        "code": "\tpublic void addAll(ClassLoaderFiles files) {\n\t\tAssert.notNull(files, \"Files must not be null\");\n\t\tfor (SourceDirectory directory : files.getSourceDirectories()) {\n\t\t\tfor (Map.Entry<String, ClassLoaderFile> entry : directory.getFilesEntrySet()) {\n\t\t\t\taddFile(directory.getName(), entry.getKey(), entry.getValue());\n\t\t\t}\n\t\t}\n\t}",
        "summary_tokens": [
            "add",
            "all",
            "elements",
            "items",
            "from",
            "the",
            "specified",
            "class",
            "loader",
            "files",
            "to",
            "this",
            "instance"
        ]
    },
    {
        "id": 387,
        "code": "\tpublic void addFile(String sourceDirectory, String name, ClassLoaderFile file) {\n\t\tAssert.notNull(sourceDirectory, \"SourceDirectory must not be null\");\n\t\tAssert.notNull(name, \"Name must not be null\");\n\t\tAssert.notNull(file, \"File must not be null\");\n\t\tremoveAll(name);\n\t\tgetOrCreateSourceDirectory(sourceDirectory).add(name, file);\n\t}",
        "summary_tokens": [
            "add",
            "a",
            "single",
            "class",
            "loader",
            "file",
            "to",
            "the",
            "collection"
        ]
    },
    {
        "id": 388,
        "code": "\tprotected final SourceDirectory getOrCreateSourceDirectory(String name) {\n\t\tSourceDirectory sourceDirectory = this.sourceDirectories.get(name);\n\t\tif (sourceDirectory == null) {\n\t\t\tsourceDirectory = new SourceDirectory(name);\n\t\t\tthis.sourceDirectories.put(name, sourceDirectory);\n\t\t}\n\t\treturn sourceDirectory;\n\t}",
        "summary_tokens": [
            "get",
            "or",
            "create",
            "a",
            "source",
            "directory",
            "with",
            "the",
            "given",
            "name"
        ]
    },
    {
        "id": 389,
        "code": "\tpublic Collection<SourceDirectory> getSourceDirectories() {\n\t\treturn Collections.unmodifiableCollection(this.sourceDirectories.values());\n\t}",
        "summary_tokens": [
            "return",
            "all",
            "source",
            "directory",
            "source",
            "directories",
            "that",
            "have",
            "been",
            "added",
            "to",
            "the",
            "collection"
        ]
    },
    {
        "id": 390,
        "code": "\tpublic int size() {\n\t\tint size = 0;\n\t\tfor (SourceDirectory sourceDirectory : this.sourceDirectories.values()) {\n\t\t\tsize += sourceDirectory.getFiles().size();\n\t\t}\n\t\treturn size;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "size",
            "of",
            "the",
            "collection"
        ]
    },
    {
        "id": 391,
        "code": "\tpublic void handle(ServerHttpRequest request, ServerHttpResponse response) throws IOException {\n\t\ttry {\n\t\t\tAssert.state(request.getHeaders().getContentLength() > 0, \"No content\");\n\t\t\tObjectInputStream objectInputStream = new ObjectInputStream(request.getBody());\n\t\t\tClassLoaderFiles files = (ClassLoaderFiles) objectInputStream.readObject();\n\t\t\tobjectInputStream.close();\n\t\t\tthis.server.updateAndRestart(files);\n\t\t\tresponse.setStatusCode(HttpStatus.OK);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tlogger.warn(\"Unable to handler restart server HTTP request\", ex);\n\t\t\tresponse.setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n\t\t}\n\t}",
        "summary_tokens": [
            "handle",
            "a",
            "server",
            "request"
        ]
    },
    {
        "id": 392,
        "code": "\tpublic static boolean shouldEnable(Thread thread) {\n\t\tfor (StackTraceElement element : thread.getStackTrace()) {\n\t\t\tif (isSkippedStackElement(element)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}",
        "summary_tokens": [
            "checks",
            "if",
            "a",
            "specific",
            "stack",
            "trace",
            "element",
            "in",
            "the",
            "current",
            "thread",
            "s",
            "stacktrace",
            "should",
            "cause",
            "devtools",
            "to",
            "be",
            "disabled"
        ]
    },
    {
        "id": 393,
        "code": "\tpublic int start() throws IOException {\n\t\tsynchronized (this.monitor) {\n\t\t\tAssert.state(this.serverThread == null, \"Server already started\");\n\t\t\tServerSocketChannel serverSocketChannel = ServerSocketChannel.open();\n\t\t\tserverSocketChannel.socket().bind(new InetSocketAddress(this.listenPort));\n\t\t\tint port = serverSocketChannel.socket().getLocalPort();\n\t\t\tlogger.trace(LogMessage.format(\"Listening for TCP traffic to tunnel on port %s\", port));\n\t\t\tthis.serverThread = new ServerThread(serverSocketChannel);\n\t\t\tthis.serverThread.start();\n\t\t\treturn port;\n\t\t}\n\t}",
        "summary_tokens": [
            "start",
            "the",
            "client",
            "and",
            "accept",
            "incoming",
            "connections"
        ]
    },
    {
        "id": 394,
        "code": "\tpublic void stop() throws IOException {\n\t\tsynchronized (this.monitor) {\n\t\t\tif (this.serverThread != null) {\n\t\t\t\tthis.serverThread.close();\n\t\t\t\ttry {\n\t\t\t\t\tthis.serverThread.join(2000);\n\t\t\t\t}\n\t\t\t\tcatch (InterruptedException ex) {\n\t\t\t\t\tThread.currentThread().interrupt();\n\t\t\t\t}\n\t\t\t\tthis.serverThread = null;\n\t\t\t}\n\t\t}\n\t}",
        "summary_tokens": [
            "stop",
            "the",
            "client",
            "disconnecting",
            "any",
            "servers"
        ]
    },
    {
        "id": 395,
        "code": "\tpublic long getSequence() {\n\t\treturn this.sequence;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "sequence",
            "number",
            "of",
            "the",
            "payload"
        ]
    },
    {
        "id": 396,
        "code": "\tpublic void assignTo(HttpOutputMessage message) throws IOException {\n\t\tAssert.notNull(message, \"Message must not be null\");\n\t\tHttpHeaders headers = message.getHeaders();\n\t\theaders.setContentLength(this.data.remaining());\n\t\theaders.add(SEQ_HEADER, Long.toString(getSequence()));\n\t\theaders.setContentType(MediaType.APPLICATION_OCTET_STREAM);\n\t\ttry (WritableByteChannel body = Channels.newChannel(message.getBody())) {\n\t\t\twhile (this.data.hasRemaining()) {\n\t\t\t\tbody.write(this.data);\n\t\t\t}\n\t\t}\n\t}",
        "summary_tokens": [
            "assign",
            "this",
            "payload",
            "to",
            "the",
            "given",
            "http",
            "output",
            "message"
        ]
    },
    {
        "id": 397,
        "code": "\tpublic void writeTo(WritableByteChannel channel) throws IOException {\n\t\tAssert.notNull(channel, \"Channel must not be null\");\n\t\twhile (this.data.hasRemaining()) {\n\t\t\tchannel.write(this.data);\n\t\t}\n\t}",
        "summary_tokens": [
            "write",
            "the",
            "content",
            "of",
            "this",
            "payload",
            "to",
            "the",
            "given",
            "target",
            "channel"
        ]
    },
    {
        "id": 398,
        "code": "\tpublic static HttpTunnelPayload get(HttpInputMessage message) throws IOException {\n\t\tlong length = message.getHeaders().getContentLength();\n\t\tif (length <= 0) {\n\t\t\treturn null;\n\t\t}\n\t\tString seqHeader = message.getHeaders().getFirst(SEQ_HEADER);\n\t\tAssert.state(StringUtils.hasLength(seqHeader), \"Missing sequence header\");\n\t\ttry (ReadableByteChannel body = Channels.newChannel(message.getBody())) {\n\t\t\tByteBuffer payload = ByteBuffer.allocate((int) length);\n\t\t\twhile (payload.hasRemaining()) {\n\t\t\t\tbody.read(payload);\n\t\t\t}\n\t\t\tpayload.flip();\n\t\t\treturn new HttpTunnelPayload(Long.parseLong(seqHeader), payload);\n\t\t}\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "http",
            "tunnel",
            "payload",
            "for",
            "the",
            "given",
            "message",
            "or",
            "null",
            "if",
            "there",
            "is",
            "no",
            "payload"
        ]
    },
    {
        "id": 399,
        "code": "\tpublic static ByteBuffer getPayloadData(ReadableByteChannel channel) throws IOException {\n\t\tByteBuffer buffer = ByteBuffer.allocate(BUFFER_SIZE);\n\t\ttry {\n\t\t\tint amountRead = channel.read(buffer);\n\t\t\tAssert.state(amountRead != -1, \"Target server connection closed\");\n\t\t\tbuffer.flip();\n\t\t\treturn buffer;\n\t\t}\n\t\tcatch (InterruptedIOException ex) {\n\t\t\treturn null;\n\t\t}\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "payload",
            "data",
            "for",
            "the",
            "given",
            "source",
            "readable",
            "byte",
            "channel",
            "or",
            "null",
            "if",
            "the",
            "channel",
            "timed",
            "out",
            "whilst",
            "reading"
        ]
    },
    {
        "id": 400,
        "code": "\tpublic void logIncoming() {\n\t\tlog(\"< \");\n\t}",
        "summary_tokens": [
            "log",
            "incoming",
            "payload",
            "information",
            "at",
            "trace",
            "level",
            "to",
            "aid",
            "diagnostics"
        ]
    },
    {
        "id": 401,
        "code": "\tpublic void logOutgoing() {\n\t\tlog(\"> \");\n\t}",
        "summary_tokens": [
            "log",
            "incoming",
            "payload",
            "information",
            "at",
            "trace",
            "level",
            "to",
            "aid",
            "diagnostics"
        ]
    },
    {
        "id": 402,
        "code": "\tpublic String toHexString() {\n\t\tbyte[] bytes = this.data.array();\n\t\treturn HEX_FORMAT.formatHex(bytes);\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "payload",
            "as",
            "a",
            "hexadecimal",
            "string"
        ]
    },
    {
        "id": 403,
        "code": "\tprotected void handle(HttpConnection httpConnection) throws IOException {\n\t\ttry {\n\t\t\tgetServerThread().handleIncomingHttp(httpConnection);\n\t\t\thttpConnection.waitForResponse();\n\t\t}\n\t\tcatch (ConnectException ex) {\n\t\t\thttpConnection.respond(HttpStatus.GONE);\n\t\t}\n\t}",
        "summary_tokens": [
            "handle",
            "an",
            "incoming",
            "http",
            "connection"
        ]
    },
    {
        "id": 404,
        "code": "\tprotected ServerThread getServerThread() throws IOException {\n\t\tsynchronized (this) {\n\t\t\tif (this.serverThread == null) {\n\t\t\t\tByteChannel channel = this.serverConnection.open(this.longPollTimeout);\n\t\t\t\tthis.serverThread = new ServerThread(channel);\n\t\t\t\tthis.serverThread.start();\n\t\t\t}\n\t\t\treturn this.serverThread;\n\t\t}\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "active",
            "server",
            "thread",
            "creating",
            "and",
            "starting",
            "it",
            "if",
            "necessary"
        ]
    },
    {
        "id": 405,
        "code": "\tvoid clearServerThread() {\n\t\tsynchronized (this) {\n\t\t\tthis.serverThread = null;\n\t\t}\n\t}",
        "summary_tokens": [
            "called",
            "when",
            "the",
            "server",
            "thread",
            "exits"
        ]
    },
    {
        "id": 406,
        "code": "\tpublic void setLongPollTimeout(int longPollTimeout) {\n\t\tAssert.isTrue(longPollTimeout > 0, \"LongPollTimeout must be a positive value\");\n\t\tthis.longPollTimeout = longPollTimeout;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "long",
            "poll",
            "timeout",
            "for",
            "the",
            "server"
        ]
    },
    {
        "id": 407,
        "code": "\tpublic void setDisconnectTimeout(long disconnectTimeout) {\n\t\tAssert.isTrue(disconnectTimeout > 0, \"DisconnectTimeout must be a positive value\");\n\t\tthis.disconnectTimeout = disconnectTimeout;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "maximum",
            "amount",
            "of",
            "time",
            "to",
            "wait",
            "for",
            "a",
            "client",
            "before",
            "closing",
            "the",
            "connection"
        ]
    },
    {
        "id": 408,
        "code": "\tString getWarningReport() {\n\t\tMap<String, List<PropertyMigration>> content = getContent(LegacyProperties::getRenamed);\n\t\tif (content.isEmpty()) {\n\t\t\treturn null;\n\t\t}\n\t\tStringBuilder report = new StringBuilder();\n\t\treport.append(String\n\t\t\t\t.format(\"%nThe use of configuration keys that have been renamed was found in the environment:%n%n\"));\n\t\tappend(report, content);\n\t\treport.append(String.format(\"%n\"));\n\t\treport.append(\"Each configuration key has been temporarily mapped to its \"\n\t\t\t\t+ \"replacement for your convenience. To silence this warning, please \"\n\t\t\t\t+ \"update your configuration to use the new keys.\");\n\t\treport.append(String.format(\"%n\"));\n\t\treturn report.toString();\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "report",
            "for",
            "all",
            "the",
            "properties",
            "that",
            "were",
            "automatically",
            "renamed"
        ]
    },
    {
        "id": 409,
        "code": "\tString getErrorReport() {\n\t\tMap<String, List<PropertyMigration>> content = getContent(LegacyProperties::getUnsupported);\n\t\tif (content.isEmpty()) {\n\t\t\treturn null;\n\t\t}\n\t\tStringBuilder report = new StringBuilder();\n\t\treport.append(String.format(\n\t\t\t\t\"%nThe use of configuration keys that are no longer supported was found in the environment:%n%n\"));\n\t\tappend(report, content);\n\t\treport.append(String.format(\"%n\"));\n\t\treport.append(\"Please refer to the release notes or reference guide for potential alternatives.\");\n\t\treport.append(String.format(\"%n\"));\n\t\treturn report.toString();\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "report",
            "for",
            "all",
            "the",
            "properties",
            "that",
            "are",
            "no",
            "longer",
            "supported"
        ]
    },
    {
        "id": 410,
        "code": "\tvoid add(String name, List<PropertyMigration> properties) {\n\t\tthis.content.put(name, new LegacyProperties(properties));\n\t}",
        "summary_tokens": [
            "register",
            "a",
            "new",
            "property",
            "source"
        ]
    },
    {
        "id": 411,
        "code": "\tPropertiesMigrationReport getReport() {\n\t\tPropertiesMigrationReport report = new PropertiesMigrationReport();\n\t\tMap<String, List<PropertyMigration>> properties = getMatchingProperties(\n\t\t\t\tConfigurationMetadataProperty::isDeprecated);\n\t\tif (properties.isEmpty()) {\n\t\t\treturn report;\n\t\t}\n\t\tproperties.forEach((name, candidates) -> {\n\t\t\tPropertySource<?> propertySource = mapPropertiesWithReplacement(report, name, candidates);\n\t\t\tif (propertySource != null) {\n\t\t\t\tthis.environment.getPropertySources().addBefore(name, propertySource);\n\t\t\t}\n\t\t});\n\t\treturn report;\n\t}",
        "summary_tokens": [
            "analyse",
            "the",
            "configurable",
            "environment",
            "environment",
            "and",
            "attempt",
            "to",
            "rename",
            "legacy",
            "properties",
            "if",
            "a",
            "replacement",
            "exists"
        ]
    },
    {
        "id": 412,
        "code": "\tpublic <T> T persistAndGetId(Object entity, Class<T> idType) {\n\t\tpersist(entity);\n\t\treturn getId(entity, idType);\n\t}",
        "summary_tokens": [
            "make",
            "an",
            "instance",
            "managed",
            "and",
            "persistent",
            "then",
            "return",
            "its",
            "id"
        ]
    },
    {
        "id": 413,
        "code": "\tpublic <E> E persist(E entity) {\n\t\tgetEntityManager().persist(entity);\n\t\treturn entity;\n\t}",
        "summary_tokens": [
            "make",
            "an",
            "instance",
            "managed",
            "and",
            "persistent"
        ]
    },
    {
        "id": 414,
        "code": "\tpublic <E> E persistFlushFind(E entity) {\n\t\tEntityManager entityManager = getEntityManager();\n\t\tpersistAndFlush(entity);\n\t\tObject id = getId(entity);\n\t\tentityManager.detach(entity);\n\t\treturn (E) entityManager.find(entity.getClass(), id);\n\t}",
        "summary_tokens": [
            "make",
            "an",
            "instance",
            "managed",
            "and",
            "persistent",
            "synchronize",
            "the",
            "persistence",
            "context",
            "to",
            "the",
            "underlying",
            "database",
            "and",
            "finally",
            "find",
            "the",
            "persisted",
            "entity",
            "by",
            "its",
            "id"
        ]
    },
    {
        "id": 415,
        "code": "\tpublic <E> E persistAndFlush(E entity) {\n\t\tpersist(entity);\n\t\tflush();\n\t\treturn entity;\n\t}",
        "summary_tokens": [
            "make",
            "an",
            "instance",
            "managed",
            "and",
            "persistent",
            "then",
            "synchronize",
            "the",
            "persistence",
            "context",
            "to",
            "the",
            "underlying",
            "database"
        ]
    },
    {
        "id": 416,
        "code": "\tpublic <E> E merge(E entity) {\n\t\treturn getEntityManager().merge(entity);\n\t}",
        "summary_tokens": [
            "merge",
            "the",
            "state",
            "of",
            "the",
            "given",
            "entity",
            "into",
            "the",
            "current",
            "persistence",
            "context"
        ]
    },
    {
        "id": 417,
        "code": "\tpublic void remove(Object entity) {\n\t\tgetEntityManager().remove(entity);\n\t}",
        "summary_tokens": [
            "remove",
            "the",
            "entity",
            "instance"
        ]
    },
    {
        "id": 418,
        "code": "\tpublic <E> E find(Class<E> entityClass, Object primaryKey) {\n\t\treturn getEntityManager().find(entityClass, primaryKey);\n\t}",
        "summary_tokens": [
            "find",
            "by",
            "primary",
            "key"
        ]
    },
    {
        "id": 419,
        "code": "\tpublic void flush() {\n\t\tgetEntityManager().flush();\n\t}",
        "summary_tokens": [
            "synchronize",
            "the",
            "persistence",
            "context",
            "to",
            "the",
            "underlying",
            "database"
        ]
    },
    {
        "id": 420,
        "code": "\tpublic <E> E refresh(E entity) {\n\t\tgetEntityManager().refresh(entity);\n\t\treturn entity;\n\t}",
        "summary_tokens": [
            "refresh",
            "the",
            "state",
            "of",
            "the",
            "instance",
            "from",
            "the",
            "database",
            "overwriting",
            "changes",
            "made",
            "to",
            "the",
            "entity",
            "if",
            "any"
        ]
    },
    {
        "id": 421,
        "code": "\tpublic void clear() {\n\t\tgetEntityManager().clear();\n\t}",
        "summary_tokens": [
            "clear",
            "the",
            "persistence",
            "context",
            "causing",
            "all",
            "managed",
            "entities",
            "to",
            "become",
            "detached"
        ]
    },
    {
        "id": 422,
        "code": "\tpublic void detach(Object entity) {\n\t\tgetEntityManager().detach(entity);\n\t}",
        "summary_tokens": [
            "remove",
            "the",
            "given",
            "entity",
            "from",
            "the",
            "persistence",
            "context",
            "causing",
            "a",
            "managed",
            "entity",
            "to",
            "become",
            "detached"
        ]
    },
    {
        "id": 423,
        "code": "\tpublic <T> T getId(Object entity, Class<T> idType) {\n\t\tObject id = getId(entity);\n\t\tAssert.isInstanceOf(idType, id, \"ID mismatch:\");\n\t\treturn (T) id;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "id",
            "of",
            "the",
            "given",
            "entity",
            "cast",
            "to",
            "a",
            "specific",
            "type"
        ]
    },
    {
        "id": 424,
        "code": "\tpublic final EntityManager getEntityManager() {\n\t\tEntityManager manager = EntityManagerFactoryUtils.getTransactionalEntityManager(this.entityManagerFactory);\n\t\tAssert.state(manager != null, \"No transactional EntityManager found, is your test running in a transaction?\");\n\t\treturn manager;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "underlying",
            "entity",
            "manager",
            "that",
            "s",
            "actually",
            "used",
            "to",
            "perform",
            "all",
            "operations"
        ]
    },
    {
        "id": 425,
        "code": "\tpublic static AutoConfigurationImportedCondition importedAutoConfiguration(Class<?> autoConfigurationClass) {\n\t\treturn new AutoConfigurationImportedCondition(autoConfigurationClass);\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "condition",
            "that",
            "verifies",
            "that",
            "the",
            "given",
            "auto",
            "configuration",
            "class",
            "has",
            "been",
            "imported"
        ]
    },
    {
        "id": 426,
        "code": "\tpublic Class<?> findFromClass(Class<?> source) {\n\t\tAssert.notNull(source, \"Source must not be null\");\n\t\treturn findFromPackage(ClassUtils.getPackageName(source));\n\t}",
        "summary_tokens": [
            "find",
            "the",
            "first",
            "class",
            "that",
            "is",
            "annotated",
            "with",
            "the",
            "target",
            "annotation",
            "starting",
            "from",
            "the",
            "package",
            "defined",
            "by",
            "the",
            "given",
            "source",
            "up",
            "to",
            "the",
            "root"
        ]
    },
    {
        "id": 427,
        "code": "\tpublic Class<?> findFromPackage(String source) {\n\t\tAssert.notNull(source, \"Source must not be null\");\n\t\tClass<?> configuration = cache.get(source);\n\t\tif (configuration == null) {\n\t\t\tconfiguration = scanPackage(source);\n\t\t\tcache.put(source, configuration);\n\t\t}\n\t\treturn configuration;\n\t}",
        "summary_tokens": [
            "find",
            "the",
            "first",
            "class",
            "that",
            "is",
            "annotated",
            "with",
            "the",
            "target",
            "annotation",
            "starting",
            "from",
            "the",
            "package",
            "defined",
            "by",
            "the",
            "given",
            "source",
            "up",
            "to",
            "the",
            "root"
        ]
    },
    {
        "id": 428,
        "code": "\tprotected String determineResourceBasePath(MergedContextConfiguration configuration) {\n\t\treturn MergedAnnotations.from(configuration.getTestClass(), SearchStrategy.TYPE_HIERARCHY)\n\t\t\t\t.get(WebAppConfiguration.class).getValue(MergedAnnotation.VALUE, String.class)\n\t\t\t\t.orElse(\"src/main/webapp\");\n\t}",
        "summary_tokens": [
            "determines",
            "the",
            "resource",
            "base",
            "path",
            "for",
            "web",
            "applications",
            "using",
            "the",
            "value",
            "of",
            "web",
            "app",
            "configuration",
            "if",
            "any",
            "on",
            "the",
            "test",
            "class",
            "of",
            "the",
            "given",
            "configuration"
        ]
    },
    {
        "id": 429,
        "code": "\tprotected String getDifferentiatorPropertySourceProperty() {\n\t\treturn getClass().getName() + \"=true\";\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "differentiator",
            "property",
            "to",
            "ensure",
            "that",
            "there",
            "is",
            "something",
            "to",
            "differentiate",
            "regular",
            "tests",
            "and",
            "bootstrapped",
            "tests"
        ]
    },
    {
        "id": 430,
        "code": "\tprotected void processPropertySourceProperties(MergedContextConfiguration mergedConfig,\n\t\t\tList<String> propertySourceProperties) {\n\t\tClass<?> testClass = mergedConfig.getTestClass();\n\t\tString[] properties = getProperties(testClass);\n\t\tif (!ObjectUtils.isEmpty(properties)) {\n\t\t\t\n\t\t\t\n\t\t\tpropertySourceProperties.addAll(0, Arrays.asList(properties));\n\t\t}\n\t\tWebEnvironment webEnvironment = getWebEnvironment(testClass);\n\t\tif (webEnvironment == WebEnvironment.RANDOM_PORT) {\n\t\t\tpropertySourceProperties.add(\"server.port=0\");\n\t\t}\n\t\telse if (webEnvironment == WebEnvironment.NONE) {\n\t\t\tpropertySourceProperties.add(\"spring.main.web-application-type=none\");\n\t\t}\n\t}",
        "summary_tokens": [
            "post",
            "process",
            "the",
            "property",
            "source",
            "properties",
            "adding",
            "or",
            "removing",
            "elements",
            "as",
            "required"
        ]
    },
    {
        "id": 431,
        "code": "\tprotected WebEnvironment getWebEnvironment(Class<?> testClass) {\n\t\tSpringBootTest annotation = getAnnotation(testClass);\n\t\treturn (annotation != null) ? annotation.webEnvironment() : null;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "web",
            "environment",
            "type",
            "for",
            "this",
            "test",
            "or",
            "null",
            "if",
            "undefined"
        ]
    },
    {
        "id": 432,
        "code": "\tprotected final MergedContextConfiguration createModifiedConfig(MergedContextConfiguration mergedConfig,\n\t\t\tClass<?>[] classes, String[] propertySourceProperties) {\n\t\tSet<ContextCustomizer> contextCustomizers = new LinkedHashSet<>(mergedConfig.getContextCustomizers());\n\t\tcontextCustomizers.add(new SpringBootTestArgs(mergedConfig.getTestClass()));\n\t\tcontextCustomizers.add(new SpringBootTestWebEnvironment(mergedConfig.getTestClass()));\n\t\treturn new MergedContextConfiguration(mergedConfig.getTestClass(), mergedConfig.getLocations(), classes,\n\t\t\t\tmergedConfig.getContextInitializerClasses(), mergedConfig.getActiveProfiles(),\n\t\t\t\tmergedConfig.getPropertySourceLocations(), propertySourceProperties, contextCustomizers,\n\t\t\t\tmergedConfig.getContextLoader(), getCacheAwareContextLoaderDelegate(), mergedConfig.getParent());\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "new",
            "merged",
            "context",
            "configuration",
            "with",
            "different",
            "classes",
            "and",
            "properties"
        ]
    },
    {
        "id": 433,
        "code": "\tstatic <T extends ApplicationContextAssertProvider<C>, C extends ApplicationContext> T get(Class<T> type,\n\t\t\tClass<? extends C> contextType, Supplier<? extends C> contextSupplier) {\n\t\tAssert.notNull(type, \"Type must not be null\");\n\t\tAssert.isTrue(type.isInterface(), \"Type must be an interface\");\n\t\tAssert.notNull(contextType, \"ContextType must not be null\");\n\t\tAssert.isTrue(contextType.isInterface(), \"ContextType must be an interface\");\n\t\tClass<?>[] interfaces = { type, contextType };\n\t\treturn (T) Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), interfaces,\n\t\t\t\tnew AssertProviderApplicationContextInvocationHandler(contextType, contextSupplier));\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "create",
            "a",
            "new",
            "application",
            "context",
            "assert",
            "provider",
            "instance"
        ]
    },
    {
        "id": 434,
        "code": "\tstatic AssertableApplicationContext get(Supplier<? extends ConfigurableApplicationContext> contextSupplier) {\n\t\treturn ApplicationContextAssertProvider.get(AssertableApplicationContext.class,\n\t\t\t\tConfigurableApplicationContext.class, contextSupplier);\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "create",
            "a",
            "new",
            "assertable",
            "application",
            "context",
            "instance"
        ]
    },
    {
        "id": 435,
        "code": "\tstatic AssertableReactiveWebApplicationContext get(\n\t\t\tSupplier<? extends ConfigurableReactiveWebApplicationContext> contextSupplier) {\n\t\treturn ApplicationContextAssertProvider.get(AssertableReactiveWebApplicationContext.class,\n\t\t\t\tConfigurableReactiveWebApplicationContext.class, contextSupplier);\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "create",
            "a",
            "new",
            "assertable",
            "reactive",
            "web",
            "application",
            "context",
            "instance"
        ]
    },
    {
        "id": 436,
        "code": "\tstatic AssertableWebApplicationContext get(Supplier<? extends ConfigurableWebApplicationContext> contextSupplier) {\n\t\treturn ApplicationContextAssertProvider.get(AssertableWebApplicationContext.class,\n\t\t\t\tConfigurableWebApplicationContext.class, contextSupplier);\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "create",
            "a",
            "new",
            "assertable",
            "web",
            "application",
            "context",
            "instance"
        ]
    },
    {
        "id": 437,
        "code": "\tdefault ContextConsumer<C> andThen(ContextConsumer<? super C> after) {\n\t\tAssert.notNull(after, \"After must not be null\");\n\t\treturn (context) -> {\n\t\t\taccept(context);\n\t\t\tafter.accept(context);\n\t\t};\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "composed",
            "context",
            "consumer",
            "that",
            "performs",
            "in",
            "sequence",
            "this",
            "operation",
            "followed",
            "by",
            "the",
            "after",
            "operation"
        ]
    },
    {
        "id": 438,
        "code": "\tpublic static Supplier<ConfigurableWebApplicationContext> withMockServletContext(\n\t\t\tSupplier<ConfigurableWebApplicationContext> contextFactory) {\n\t\treturn (contextFactory != null) ? () -> {\n\t\t\tConfigurableWebApplicationContext context = contextFactory.get();\n\t\t\tcontext.setServletContext(new MockServletContext());\n\t\t\treturn context;\n\t\t} : null;\n\t}",
        "summary_tokens": [
            "decorate",
            "the",
            "specified",
            "context",
            "factory",
            "to",
            "set",
            "a",
            "mock",
            "servlet",
            "context",
            "on",
            "each",
            "newly",
            "created",
            "web",
            "application",
            "context"
        ]
    },
    {
        "id": 439,
        "code": "\tprotected final void initialize(Class<?> resourceLoadClass, ResolvableType type) {\n\t\tif (this.resourceLoadClass == null && this.type == null) {\n\t\t\tthis.resourceLoadClass = resourceLoadClass;\n\t\t\tthis.type = type;\n\t\t}\n\t}",
        "summary_tokens": [
            "initialize",
            "the",
            "marshal",
            "tester",
            "for",
            "use"
        ]
    },
    {
        "id": 440,
        "code": "\tprotected final ResolvableType getType() {\n\t\treturn this.type;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "type",
            "under",
            "test"
        ]
    },
    {
        "id": 441,
        "code": "\tprotected final Class<?> getResourceLoadClass() {\n\t\treturn this.resourceLoadClass;\n\t}",
        "summary_tokens": [
            "return",
            "class",
            "used",
            "to",
            "load",
            "relative",
            "resources"
        ]
    },
    {
        "id": 442,
        "code": "\tpublic JsonContent<T> write(T value) throws IOException {\n\t\tverify();\n\t\tAssert.notNull(value, \"Value must not be null\");\n\t\tString json = writeObject(value, this.type);\n\t\treturn getJsonContent(json);\n\t}",
        "summary_tokens": [
            "return",
            "json",
            "content",
            "from",
            "writing",
            "the",
            "specific",
            "value"
        ]
    },
    {
        "id": 443,
        "code": "\tprotected JsonContent<T> getJsonContent(String json) {\n\t\treturn new JsonContent<>(getResourceLoadClass(), getType(), json);\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "used",
            "to",
            "get",
            "a",
            "json",
            "content",
            "instance",
            "from",
            "a",
            "source",
            "json",
            "string"
        ]
    },
    {
        "id": 444,
        "code": "\tpublic T parseObject(String jsonString) throws IOException {\n\t\tverify();\n\t\treturn parse(jsonString).getObject();\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "object",
            "created",
            "from",
            "parsing",
            "the",
            "specific",
            "json",
            "string"
        ]
    },
    {
        "id": 445,
        "code": "\tpublic ObjectContent<T> parse(String jsonString) throws IOException {\n\t\tverify();\n\t\tAssert.notNull(jsonString, \"JsonString must not be null\");\n\t\treturn read(new StringReader(jsonString));\n\t}",
        "summary_tokens": [
            "return",
            "object",
            "content",
            "from",
            "parsing",
            "the",
            "specific",
            "json",
            "string"
        ]
    },
    {
        "id": 446,
        "code": "\tprotected T readObject(InputStream inputStream, ResolvableType type) throws IOException {\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));\n\t\treturn readObject(reader, type);\n\t}",
        "summary_tokens": [
            "read",
            "from",
            "the",
            "specified",
            "input",
            "stream",
            "to",
            "create",
            "an",
            "object",
            "of",
            "the",
            "specified",
            "type"
        ]
    },
    {
        "id": 447,
        "code": "\tpublic ObjectContent<T> read(Reader reader) throws IOException {\n\t\tverify();\n\t\tAssert.notNull(reader, \"Reader must not be null\");\n\t\tT object = readObject(reader, this.type);\n\t\tcloseQuietly(reader);\n\t\treturn new ObjectContent<>(this.type, object);\n\t}",
        "summary_tokens": [
            "return",
            "object",
            "content",
            "from",
            "reading",
            "from",
            "the",
            "specified",
            "reader"
        ]
    },
    {
        "id": 448,
        "code": "\tprotected final void initialize(Class<?> resourceLoadClass, Charset charset) {\n\t\tif (this.loader == null) {\n\t\t\tthis.loader = new JsonLoader(resourceLoadClass, charset);\n\t\t}\n\t}",
        "summary_tokens": [
            "initialize",
            "the",
            "marshal",
            "tester",
            "for",
            "use"
        ]
    },
    {
        "id": 449,
        "code": "\tpublic JsonContent<Object> from(Resource source) {\n\t\tverify();\n\t\treturn getJsonContent(this.loader.getJson(source));\n\t}",
        "summary_tokens": [
            "create",
            "json",
            "content",
            "from",
            "the",
            "specified",
            "json",
            "resource"
        ]
    },
    {
        "id": 450,
        "code": "\tpublic static void initFields(Object testInstance, ObjectFactory<Gson> gson) {\n\t\tnew GsonFieldInitializer().initFields(testInstance, gson);\n\t}",
        "summary_tokens": [
            "utility",
            "method",
            "to",
            "initialize",
            "gson",
            "tester",
            "fields"
        ]
    },
    {
        "id": 451,
        "code": "\tpublic static void initFields(Object testInstance, ObjectFactory<ObjectMapper> objectMapperFactory) {\n\t\tnew JacksonFieldInitializer().initFields(testInstance, objectMapperFactory);\n\t}",
        "summary_tokens": [
            "utility",
            "method",
            "to",
            "initialize",
            "jackson",
            "tester",
            "fields"
        ]
    },
    {
        "id": 452,
        "code": "\tpublic JacksonTester<T> forView(Class<?> view) {\n\t\treturn new JacksonTester<>(getResourceLoadClass(), getType(), this.objectMapper, view);\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "new",
            "instance",
            "of",
            "jackson",
            "tester",
            "with",
            "the",
            "view",
            "that",
            "should",
            "be",
            "used",
            "for",
            "json",
            "serialization",
            "deserialization"
        ]
    },
    {
        "id": 453,
        "code": "\tpublic JsonContentAssert assertThat() {\n\t\treturn new JsonContentAssert(this.resourceLoadClass, null, this.json, this.configuration);\n\t}",
        "summary_tokens": [
            "use",
            "assert",
            "j",
            "s",
            "org"
        ]
    },
    {
        "id": 454,
        "code": "\tpublic String getJson() {\n\t\treturn this.json;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "actual",
            "json",
            "content",
            "string"
        ]
    },
    {
        "id": 455,
        "code": "\tpublic static void initFields(Object testInstance, ObjectFactory<Jsonb> jsonb) {\n\t\tnew JsonbTester.JsonbFieldInitializer().initFields(testInstance, jsonb);\n\t}",
        "summary_tokens": [
            "utility",
            "method",
            "to",
            "initialize",
            "jsonb",
            "tester",
            "fields"
        ]
    },
    {
        "id": 456,
        "code": "\tpublic T getObject() {\n\t\treturn this.object;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "actual",
            "object",
            "content"
        ]
    },
    {
        "id": 457,
        "code": "\tpublic AbstractObjectArrayAssert<?, Object> asArray() {\n\t\tObjects.instance().assertIsInstanceOf(this.info, this.actual, Object[].class);\n\t\treturn Assertions.assertThat((Object[]) this.actual);\n\t}",
        "summary_tokens": [
            "verifies",
            "that",
            "the",
            "actual",
            "value",
            "is",
            "an",
            "array",
            "and",
            "returns",
            "an",
            "array",
            "assertion",
            "to",
            "allow",
            "chaining",
            "of",
            "array",
            "specific",
            "assertions",
            "from",
            "this",
            "call"
        ]
    },
    {
        "id": 458,
        "code": "\tpublic AbstractMapAssert<?, ?, Object, Object> asMap() {\n\t\tObjects.instance().assertIsInstanceOf(this.info, this.actual, Map.class);\n\t\treturn Assertions.assertThat((Map<Object, Object>) this.actual);\n\t}",
        "summary_tokens": [
            "verifies",
            "that",
            "the",
            "actual",
            "value",
            "is",
            "a",
            "map",
            "and",
            "returns",
            "a",
            "map",
            "assertion",
            "to",
            "allow",
            "chaining",
            "of",
            "map",
            "specific",
            "assertions",
            "from",
            "this",
            "call"
        ]
    },
    {
        "id": 459,
        "code": "\tString getName() {\n\t\treturn this.name;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "name",
            "for",
            "bean"
        ]
    },
    {
        "id": 460,
        "code": "\tMockReset getReset() {\n\t\treturn this.reset;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "mock",
            "reset",
            "mode"
        ]
    },
    {
        "id": 461,
        "code": "\tboolean isProxyTargetAware() {\n\t\treturn this.proxyTargetAware;\n\t}",
        "summary_tokens": [
            "return",
            "if",
            "aop",
            "advised",
            "beans",
            "should",
            "be",
            "proxy",
            "target",
            "aware"
        ]
    },
    {
        "id": 462,
        "code": "\tQualifierDefinition getQualifier() {\n\t\treturn this.qualifier;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "qualifier",
            "or",
            "null"
        ]
    },
    {
        "id": 463,
        "code": "\tResolvableType getTypeToMock() {\n\t\treturn this.typeToMock;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "type",
            "that",
            "should",
            "be",
            "mocked"
        ]
    },
    {
        "id": 464,
        "code": "\tSet<Class<?>> getExtraInterfaces() {\n\t\treturn this.extraInterfaces;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "extra",
            "interfaces"
        ]
    },
    {
        "id": 465,
        "code": "\tAnswers getAnswer() {\n\t\treturn this.answer;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "answers",
            "mode"
        ]
    },
    {
        "id": 466,
        "code": "\tboolean isSerializable() {\n\t\treturn this.serializable;\n\t}",
        "summary_tokens": [
            "return",
            "if",
            "the",
            "mock",
            "is",
            "serializable"
        ]
    },
    {
        "id": 467,
        "code": "\tpublic void expect(Matcher<? super String> matcher) {\n\t\tthis.matchers.add(matcher);\n\t}",
        "summary_tokens": [
            "verify",
            "that",
            "the",
            "output",
            "is",
            "matched",
            "by",
            "the",
            "supplied",
            "matcher"
        ]
    },
    {
        "id": 468,
        "code": "\tpublic <T> TestPropertyValues and(Stream<T> stream, Function<T, Pair> mapper) {\n\t\tif (stream == null) {\n\t\t\treturn this;\n\t\t}\n\t\tMap<String, Object> properties = new LinkedHashMap<>(this.properties);\n\t\tstream.map(mapper).filter(Objects::nonNull).forEach((pair) -> pair.addTo(properties));\n\t\treturn new TestPropertyValues(properties);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "new",
            "test",
            "property",
            "values",
            "instance",
            "with",
            "additional",
            "entries"
        ]
    },
    {
        "id": 469,
        "code": "\tpublic void applyTo(ConfigurableEnvironment environment, Type type, String name) {\n\t\tAssert.notNull(environment, \"Environment must not be null\");\n\t\tAssert.notNull(type, \"Property source type must not be null\");\n\t\tAssert.notNull(name, \"Property source name must not be null\");\n\t\tMutablePropertySources sources = environment.getPropertySources();\n\t\taddToSources(sources, type, name);\n\t\tConfigurationPropertySources.attach(environment);\n\t}",
        "summary_tokens": [
            "add",
            "the",
            "properties",
            "from",
            "the",
            "underlying",
            "map",
            "to",
            "the",
            "environment",
            "using",
            "the",
            "specified",
            "property",
            "source",
            "type",
            "and",
            "name"
        ]
    },
    {
        "id": 470,
        "code": "\tpublic <T> T applyToSystemProperties(Callable<T> call) {\n\t\ttry (SystemPropertiesHandler handler = new SystemPropertiesHandler()) {\n\t\t\treturn call.call();\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\trethrow(ex);\n\t\t\tthrow new IllegalStateException(\"Original cause not rethrown\", ex);\n\t\t}\n\t}",
        "summary_tokens": [
            "add",
            "the",
            "properties",
            "to",
            "the",
            "system",
            "get",
            "properties",
            "system",
            "properties",
            "for",
            "the",
            "duration",
            "of",
            "the",
            "call",
            "restoring",
            "previous",
            "values",
            "when",
            "it",
            "completes"
        ]
    },
    {
        "id": 471,
        "code": "\tpublic static <T> TestPropertyValues of(Stream<T> stream, Function<T, Pair> mapper) {\n\t\treturn (stream != null) ? empty().and(stream, mapper) : empty();\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "new",
            "test",
            "property",
            "values",
            "with",
            "the",
            "underlying",
            "map",
            "populated",
            "with",
            "the",
            "given",
            "stream"
        ]
    },
    {
        "id": 472,
        "code": "\tpublic static TestPropertyValues empty() {\n\t\treturn EMPTY;\n\t}",
        "summary_tokens": [
            "return",
            "an",
            "empty",
            "test",
            "property",
            "values",
            "instance"
        ]
    },
    {
        "id": 473,
        "code": "\tpublic void setDetectRootUri(boolean detectRootUri) {\n\t\tthis.detectRootUri = detectRootUri;\n\t}",
        "summary_tokens": [
            "set",
            "if",
            "root",
            "uris",
            "from",
            "root",
            "uri",
            "request",
            "expectation",
            "manager",
            "should",
            "be",
            "detected",
            "and",
            "applied",
            "to",
            "the",
            "mock",
            "rest",
            "service",
            "server"
        ]
    },
    {
        "id": 474,
        "code": "\tpublic void setMainClass(String mainClass) {\n\t\tthis.mainClass = mainClass;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "main",
            "class",
            "which",
            "will",
            "cause",
            "the",
            "search",
            "to",
            "be",
            "bypassed"
        ]
    },
    {
        "id": 475,
        "code": "\tpublic void setClassesRoot(File classesRoot) {\n\t\tthis.classesRoot = classesRoot;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "root",
            "location",
            "of",
            "classes",
            "to",
            "be",
            "searched"
        ]
    },
    {
        "id": 476,
        "code": "\tpublic void setProperty(String property) {\n\t\tthis.property = property;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "ant",
            "property",
            "to",
            "set",
            "if",
            "left",
            "unset",
            "result",
            "will",
            "be",
            "printed",
            "to",
            "the",
            "log"
        ]
    },
    {
        "id": 477,
        "code": "\tint getMajor() {\n\t\treturn this.major;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "major",
            "version",
            "number"
        ]
    },
    {
        "id": 478,
        "code": "\tint getMinor() {\n\t\treturn this.minor;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "minor",
            "version",
            "number"
        ]
    },
    {
        "id": 479,
        "code": "\tvoid assertSupports(ApiVersion other) {\n\t\tif (!supports(other)) {\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\"Detected platform API version '\" + other + \"' does not match supported version '\" + this + \"'\");\n\t\t}\n\t}",
        "summary_tokens": [
            "assert",
            "that",
            "this",
            "api",
            "version",
            "supports",
            "the",
            "specified",
            "version"
        ]
    },
    {
        "id": 480,
        "code": "\tboolean supports(ApiVersion other) {\n\t\tif (equals(other)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this.major == 0 || this.major != other.major) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.minor >= other.minor;\n\t}",
        "summary_tokens": [
            "returns",
            "if",
            "this",
            "api",
            "version",
            "supports",
            "the",
            "given",
            "version"
        ]
    },
    {
        "id": 481,
        "code": "\tboolean supportsAny(ApiVersion... others) {\n\t\tfor (ApiVersion other : others) {\n\t\t\tif (supports(other)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}",
        "summary_tokens": [
            "returns",
            "if",
            "this",
            "api",
            "version",
            "supports",
            "any",
            "of",
            "the",
            "given",
            "versions"
        ]
    },
    {
        "id": 482,
        "code": "\tstatic ApiVersion parse(String value) {\n\t\tAssert.hasText(value, \"Value must not be empty\");\n\t\tMatcher matcher = PATTERN.matcher(value);\n\t\tAssert.isTrue(matcher.matches(), () -> \"Malformed version number '\" + value + \"'\");\n\t\ttry {\n\t\t\tint major = Integer.parseInt(matcher.group(1));\n\t\t\tint minor = Integer.parseInt(matcher.group(2));\n\t\t\treturn new ApiVersion(major, minor);\n\t\t}\n\t\tcatch (NumberFormatException ex) {\n\t\t\tthrow new IllegalArgumentException(\"Malformed version number '\" + value + \"'\", ex);\n\t\t}\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "parse",
            "a",
            "string",
            "into",
            "an",
            "api",
            "version",
            "instance"
        ]
    },
    {
        "id": 483,
        "code": "\tstatic BuildLog toSystemOut() {\n\t\treturn to(System.out);\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "that",
            "returns",
            "a",
            "build",
            "log",
            "the",
            "outputs",
            "to",
            "system",
            "out"
        ]
    },
    {
        "id": 484,
        "code": "\tstatic BuildLog to(PrintStream out) {\n\t\treturn new PrintStreamBuildLog(out);\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "that",
            "returns",
            "a",
            "build",
            "log",
            "the",
            "outputs",
            "to",
            "a",
            "given",
            "print",
            "stream"
        ]
    },
    {
        "id": 485,
        "code": "\tstatic BuildOwner fromEnv(Map<String, String> env) {\n\t\tAssert.notNull(env, \"Env must not be null\");\n\t\treturn new BuildOwner(env);\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "create",
            "the",
            "build",
            "owner",
            "by",
            "inspecting",
            "the",
            "image",
            "env",
            "for",
            "cnb",
            "user",
            "id",
            "cnb",
            "group",
            "id",
            "variables"
        ]
    },
    {
        "id": 486,
        "code": "\tstatic BuildOwner of(long uid, long gid) {\n\t\treturn new BuildOwner(uid, gid);\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "create",
            "a",
            "new",
            "build",
            "owner",
            "with",
            "specified",
            "user",
            "group",
            "identifier"
        ]
    },
    {
        "id": 487,
        "code": "\tpublic BuildRequest withBuilder(ImageReference builder) {\n\t\tAssert.notNull(builder, \"Builder must not be null\");\n\t\treturn new BuildRequest(this.name, this.applicationContent, builder.inTaggedOrDigestForm(), this.runImage,\n\t\t\t\tthis.creator, this.env, this.cleanCache, this.verboseLogging, this.pullPolicy, this.publish,\n\t\t\t\tthis.buildpacks, this.bindings, this.network, this.tags, this.buildCache, this.launchCache);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "new",
            "build",
            "request",
            "with",
            "an",
            "updated",
            "builder"
        ]
    },
    {
        "id": 488,
        "code": "\tpublic BuildRequest withRunImage(ImageReference runImageName) {\n\t\treturn new BuildRequest(this.name, this.applicationContent, this.builder, runImageName.inTaggedOrDigestForm(),\n\t\t\t\tthis.creator, this.env, this.cleanCache, this.verboseLogging, this.pullPolicy, this.publish,\n\t\t\t\tthis.buildpacks, this.bindings, this.network, this.tags, this.buildCache, this.launchCache);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "new",
            "build",
            "request",
            "with",
            "an",
            "updated",
            "run",
            "image"
        ]
    },
    {
        "id": 489,
        "code": "\tpublic BuildRequest withCreator(Creator creator) {\n\t\tAssert.notNull(creator, \"Creator must not be null\");\n\t\treturn new BuildRequest(this.name, this.applicationContent, this.builder, this.runImage, creator, this.env,\n\t\t\t\tthis.cleanCache, this.verboseLogging, this.pullPolicy, this.publish, this.buildpacks, this.bindings,\n\t\t\t\tthis.network, this.tags, this.buildCache, this.launchCache);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "new",
            "build",
            "request",
            "with",
            "an",
            "updated",
            "creator"
        ]
    },
    {
        "id": 490,
        "code": "\tpublic BuildRequest withEnv(Map<String, String> env) {\n\t\tAssert.notNull(env, \"Env must not be null\");\n\t\tMap<String, String> updatedEnv = new LinkedHashMap<>(this.env);\n\t\tupdatedEnv.putAll(env);\n\t\treturn new BuildRequest(this.name, this.applicationContent, this.builder, this.runImage, this.creator,\n\t\t\t\tCollections.unmodifiableMap(updatedEnv), this.cleanCache, this.verboseLogging, this.pullPolicy,\n\t\t\t\tthis.publish, this.buildpacks, this.bindings, this.network, this.tags, this.buildCache,\n\t\t\t\tthis.launchCache);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "new",
            "build",
            "request",
            "with",
            "additional",
            "env",
            "variables"
        ]
    },
    {
        "id": 491,
        "code": "\tpublic BuildRequest withCleanCache(boolean cleanCache) {\n\t\treturn new BuildRequest(this.name, this.applicationContent, this.builder, this.runImage, this.creator, this.env,\n\t\t\t\tcleanCache, this.verboseLogging, this.pullPolicy, this.publish, this.buildpacks, this.bindings,\n\t\t\t\tthis.network, this.tags, this.buildCache, this.launchCache);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "new",
            "build",
            "request",
            "with",
            "an",
            "updated",
            "clean",
            "cache",
            "setting"
        ]
    },
    {
        "id": 492,
        "code": "\tpublic BuildRequest withVerboseLogging(boolean verboseLogging) {\n\t\treturn new BuildRequest(this.name, this.applicationContent, this.builder, this.runImage, this.creator, this.env,\n\t\t\t\tthis.cleanCache, verboseLogging, this.pullPolicy, this.publish, this.buildpacks, this.bindings,\n\t\t\t\tthis.network, this.tags, this.buildCache, this.launchCache);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "new",
            "build",
            "request",
            "with",
            "an",
            "updated",
            "verbose",
            "logging",
            "setting"
        ]
    },
    {
        "id": 493,
        "code": "\tpublic BuildRequest withPullPolicy(PullPolicy pullPolicy) {\n\t\treturn new BuildRequest(this.name, this.applicationContent, this.builder, this.runImage, this.creator, this.env,\n\t\t\t\tthis.cleanCache, this.verboseLogging, pullPolicy, this.publish, this.buildpacks, this.bindings,\n\t\t\t\tthis.network, this.tags, this.buildCache, this.launchCache);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "new",
            "build",
            "request",
            "with",
            "the",
            "updated",
            "image",
            "pull",
            "policy"
        ]
    },
    {
        "id": 494,
        "code": "\tpublic BuildRequest withPublish(boolean publish) {\n\t\treturn new BuildRequest(this.name, this.applicationContent, this.builder, this.runImage, this.creator, this.env,\n\t\t\t\tthis.cleanCache, this.verboseLogging, this.pullPolicy, publish, this.buildpacks, this.bindings,\n\t\t\t\tthis.network, this.tags, this.buildCache, this.launchCache);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "new",
            "build",
            "request",
            "with",
            "an",
            "updated",
            "publish",
            "setting"
        ]
    },
    {
        "id": 495,
        "code": "\tpublic BuildRequest withBuildpacks(List<BuildpackReference> buildpacks) {\n\t\tAssert.notNull(buildpacks, \"Buildpacks must not be null\");\n\t\treturn new BuildRequest(this.name, this.applicationContent, this.builder, this.runImage, this.creator, this.env,\n\t\t\t\tthis.cleanCache, this.verboseLogging, this.pullPolicy, this.publish, buildpacks, this.bindings,\n\t\t\t\tthis.network, this.tags, this.buildCache, this.launchCache);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "new",
            "build",
            "request",
            "with",
            "an",
            "updated",
            "buildpacks",
            "setting"
        ]
    },
    {
        "id": 496,
        "code": "\tpublic BuildRequest withBindings(List<Binding> bindings) {\n\t\tAssert.notNull(bindings, \"Bindings must not be null\");\n\t\treturn new BuildRequest(this.name, this.applicationContent, this.builder, this.runImage, this.creator, this.env,\n\t\t\t\tthis.cleanCache, this.verboseLogging, this.pullPolicy, this.publish, this.buildpacks, bindings,\n\t\t\t\tthis.network, this.tags, this.buildCache, this.launchCache);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "new",
            "build",
            "request",
            "with",
            "updated",
            "bindings"
        ]
    },
    {
        "id": 497,
        "code": "\tpublic BuildRequest withNetwork(String network) {\n\t\treturn new BuildRequest(this.name, this.applicationContent, this.builder, this.runImage, this.creator, this.env,\n\t\t\t\tthis.cleanCache, this.verboseLogging, this.pullPolicy, this.publish, this.buildpacks, this.bindings,\n\t\t\t\tnetwork, this.tags, this.buildCache, this.launchCache);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "new",
            "build",
            "request",
            "with",
            "an",
            "updated",
            "network",
            "setting"
        ]
    },
    {
        "id": 498,
        "code": "\tpublic BuildRequest withTags(List<ImageReference> tags) {\n\t\tAssert.notNull(tags, \"Tags must not be null\");\n\t\treturn new BuildRequest(this.name, this.applicationContent, this.builder, this.runImage, this.creator, this.env,\n\t\t\t\tthis.cleanCache, this.verboseLogging, this.pullPolicy, this.publish, this.buildpacks, this.bindings,\n\t\t\t\tthis.network, tags, this.buildCache, this.launchCache);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "new",
            "build",
            "request",
            "with",
            "updated",
            "tags"
        ]
    },
    {
        "id": 499,
        "code": "\tpublic BuildRequest withBuildCache(Cache buildCache) {\n\t\tAssert.notNull(buildCache, \"BuildCache must not be null\");\n\t\treturn new BuildRequest(this.name, this.applicationContent, this.builder, this.runImage, this.creator, this.env,\n\t\t\t\tthis.cleanCache, this.verboseLogging, this.pullPolicy, this.publish, this.buildpacks, this.bindings,\n\t\t\t\tthis.network, this.tags, buildCache, this.launchCache);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "new",
            "build",
            "request",
            "with",
            "an",
            "updated",
            "build",
            "cache"
        ]
    },
    {
        "id": 500,
        "code": "\tpublic BuildRequest withLaunchCache(Cache launchCache) {\n\t\tAssert.notNull(launchCache, \"LaunchCache must not be null\");\n\t\treturn new BuildRequest(this.name, this.applicationContent, this.builder, this.runImage, this.creator, this.env,\n\t\t\t\tthis.cleanCache, this.verboseLogging, this.pullPolicy, this.publish, this.buildpacks, this.bindings,\n\t\t\t\tthis.network, this.tags, this.buildCache, launchCache);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "new",
            "build",
            "request",
            "with",
            "an",
            "updated",
            "launch",
            "cache"
        ]
    },
    {
        "id": 501,
        "code": "\tpublic ImageReference getName() {\n\t\treturn this.name;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "name",
            "of",
            "the",
            "image",
            "that",
            "should",
            "be",
            "created"
        ]
    },
    {
        "id": 502,
        "code": "\tpublic TarArchive getApplicationContent(Owner owner) {\n\t\treturn this.applicationContent.apply(owner);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "tar",
            "archive",
            "containing",
            "the",
            "application",
            "content",
            "that",
            "the",
            "buildpack",
            "should",
            "package"
        ]
    },
    {
        "id": 503,
        "code": "\tpublic ImageReference getBuilder() {\n\t\treturn this.builder;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "builder",
            "that",
            "should",
            "be",
            "used"
        ]
    },
    {
        "id": 504,
        "code": "\tpublic ImageReference getRunImage() {\n\t\treturn this.runImage;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "run",
            "image",
            "that",
            "should",
            "be",
            "used",
            "if",
            "provided"
        ]
    },
    {
        "id": 505,
        "code": "\tpublic Creator getCreator() {\n\t\treturn this.creator;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "creator",
            "the",
            "builder",
            "should",
            "use"
        ]
    },
    {
        "id": 506,
        "code": "\tpublic Map<String, String> getEnv() {\n\t\treturn this.env;\n\t}",
        "summary_tokens": [
            "return",
            "any",
            "env",
            "variable",
            "that",
            "should",
            "be",
            "passed",
            "to",
            "the",
            "builder"
        ]
    },
    {
        "id": 507,
        "code": "\tpublic boolean isCleanCache() {\n\t\treturn this.cleanCache;\n\t}",
        "summary_tokens": [
            "return",
            "if",
            "caches",
            "should",
            "be",
            "cleaned",
            "before",
            "packaging"
        ]
    },
    {
        "id": 508,
        "code": "\tpublic boolean isVerboseLogging() {\n\t\treturn this.verboseLogging;\n\t}",
        "summary_tokens": [
            "return",
            "if",
            "verbose",
            "logging",
            "output",
            "should",
            "be",
            "used"
        ]
    },
    {
        "id": 509,
        "code": "\tpublic boolean isPublish() {\n\t\treturn this.publish;\n\t}",
        "summary_tokens": [
            "return",
            "if",
            "the",
            "built",
            "image",
            "should",
            "be",
            "pushed",
            "to",
            "a",
            "registry"
        ]
    },
    {
        "id": 510,
        "code": "\tpublic PullPolicy getPullPolicy() {\n\t\treturn this.pullPolicy;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "image",
            "pull",
            "policy",
            "that",
            "the",
            "builder",
            "should",
            "use"
        ]
    },
    {
        "id": 511,
        "code": "\tpublic List<BuildpackReference> getBuildpacks() {\n\t\treturn this.buildpacks;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "collection",
            "of",
            "buildpacks",
            "to",
            "use",
            "when",
            "building",
            "the",
            "image",
            "if",
            "provided"
        ]
    },
    {
        "id": 512,
        "code": "\tpublic List<Binding> getBindings() {\n\t\treturn this.bindings;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "collection",
            "of",
            "bindings",
            "to",
            "mount",
            "to",
            "the",
            "build",
            "container"
        ]
    },
    {
        "id": 513,
        "code": "\tpublic String getNetwork() {\n\t\treturn this.network;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "network",
            "the",
            "build",
            "container",
            "will",
            "connect",
            "to"
        ]
    },
    {
        "id": 514,
        "code": "\tpublic List<ImageReference> getTags() {\n\t\treturn this.tags;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "collection",
            "of",
            "tags",
            "that",
            "should",
            "be",
            "created"
        ]
    },
    {
        "id": 515,
        "code": "\tpublic Cache getBuildCache() {\n\t\treturn this.buildCache;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "custom",
            "build",
            "cache",
            "that",
            "should",
            "be",
            "used",
            "by",
            "the",
            "lifecycle"
        ]
    },
    {
        "id": 516,
        "code": "\tpublic Cache getLaunchCache() {\n\t\treturn this.launchCache;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "custom",
            "launch",
            "cache",
            "that",
            "should",
            "be",
            "used",
            "by",
            "the",
            "lifecycle"
        ]
    },
    {
        "id": 517,
        "code": "\tpublic static BuildRequest forJarFile(ImageReference name, File jarFile) {\n\t\tassertJarFile(jarFile);\n\t\treturn new BuildRequest(name, (owner) -> TarArchive.fromZip(jarFile, owner));\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "create",
            "a",
            "new",
            "build",
            "request",
            "from",
            "a",
            "jar",
            "file"
        ]
    },
    {
        "id": 518,
        "code": "\tpublic static BuildRequest of(ImageReference name, Function<Owner, TarArchive> applicationContent) {\n\t\treturn new BuildRequest(name, applicationContent);\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "create",
            "a",
            "new",
            "build",
            "request",
            "with",
            "specific",
            "content"
        ]
    },
    {
        "id": 519,
        "code": "\tstatic Buildpack resolve(BuildpackResolverContext context, BuildpackReference reference) {\n\t\tboolean unambiguous = reference.hasPrefix(PREFIX);\n\t\tBuilderReference builderReference = BuilderReference\n\t\t\t\t.of(unambiguous ? reference.getSubReference(PREFIX) : reference.toString());\n\t\tBuildpackMetadata buildpackMetadata = findBuildpackMetadata(context, builderReference);\n\t\tif (unambiguous) {\n\t\t\tAssert.isTrue(buildpackMetadata != null, () -> \"Buildpack '\" + reference + \"' not found in builder\");\n\t\t}\n\t\treturn (buildpackMetadata != null) ? new BuilderBuildpack(buildpackMetadata) : null;\n\t}",
        "summary_tokens": [
            "a",
            "buildpack",
            "resolver",
            "compatible",
            "method",
            "to",
            "resolve",
            "builder",
            "buildpacks"
        ]
    },
    {
        "id": 520,
        "code": "\tpublic String getOperation() {\n\t\treturn this.operation;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "builder",
            "operation",
            "that",
            "failed"
        ]
    },
    {
        "id": 521,
        "code": "\tpublic int getStatusCode() {\n\t\treturn this.statusCode;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "status",
            "code",
            "returned",
            "from",
            "a",
            "builder",
            "operation"
        ]
    },
    {
        "id": 522,
        "code": "\tCreatedBy getCreatedBy() {\n\t\treturn this.createdBy;\n\t}",
        "summary_tokens": [
            "return",
            "information",
            "about",
            "who",
            "created",
            "the",
            "builder"
        ]
    },
    {
        "id": 523,
        "code": "\tList<BuildpackMetadata> getBuildpacks() {\n\t\treturn this.buildpacks;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "buildpacks",
            "that",
            "are",
            "bundled",
            "in",
            "the",
            "builder"
        ]
    },
    {
        "id": 524,
        "code": "\tBuilderMetadata copy(Consumer<Update> update) {\n\t\treturn new Update(this).run(update);\n\t}",
        "summary_tokens": [
            "create",
            "an",
            "updated",
            "copy",
            "of",
            "this",
            "metadata"
        ]
    },
    {
        "id": 525,
        "code": "\tvoid attachTo(ImageConfig.Update update) {\n\t\ttry {\n\t\t\tString json = SharedObjectMapper.get().writeValueAsString(getNode());\n\t\t\tupdate.withLabel(LABEL_NAME, json);\n\t\t}\n\t\tcatch (JsonProcessingException ex) {\n\t\t\tthrow new IllegalStateException(ex);\n\t\t}\n\t}",
        "summary_tokens": [
            "attach",
            "this",
            "metadata",
            "to",
            "the",
            "given",
            "update",
            "callback"
        ]
    },
    {
        "id": 526,
        "code": "\tstatic BuilderMetadata fromImage(Image image) throws IOException {\n\t\tAssert.notNull(image, \"Image must not be null\");\n\t\treturn fromImageConfig(image.getConfig());\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "extract",
            "builder",
            "metadata",
            "from",
            "an",
            "image"
        ]
    },
    {
        "id": 527,
        "code": "\tstatic BuilderMetadata fromImageConfig(ImageConfig imageConfig) throws IOException {\n\t\tAssert.notNull(imageConfig, \"ImageConfig must not be null\");\n\t\tString json = imageConfig.getLabels().get(LABEL_NAME);\n\t\tAssert.notNull(json, () -> \"No '\" + LABEL_NAME + \"' label found in image config labels '\"\n\t\t\t\t+ StringUtils.collectionToCommaDelimitedString(imageConfig.getLabels().keySet()) + \"'\");\n\t\treturn fromJson(json);\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "extract",
            "builder",
            "metadata",
            "from",
            "image",
            "config"
        ]
    },
    {
        "id": 528,
        "code": "\tstatic BuilderMetadata fromJson(String json) throws IOException {\n\t\treturn new BuilderMetadata(SharedObjectMapper.get().readTree(json));\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "create",
            "builder",
            "metadata",
            "from",
            "some",
            "json"
        ]
    },
    {
        "id": 529,
        "code": "\tString getSanitizedId() {\n\t\treturn this.id.replace(\"/\", \"_\");\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "buildpack",
            "id",
            "with",
            "all",
            "replaced",
            "by"
        ]
    },
    {
        "id": 530,
        "code": "\tstatic BuildpackCoordinates fromToml(InputStream inputStream, Path path) throws IOException {\n\t\treturn fromToml(Toml.parse(inputStream), path);\n\t}",
        "summary_tokens": [
            "create",
            "buildpack",
            "coordinates",
            "from",
            "a",
            "a",
            "href",
            "https",
            "github"
        ]
    },
    {
        "id": 531,
        "code": "\tstatic BuildpackCoordinates fromBuildpackMetadata(BuildpackMetadata buildpackMetadata) {\n\t\tAssert.notNull(buildpackMetadata, \"BuildpackMetadata must not be null\");\n\t\treturn new BuildpackCoordinates(buildpackMetadata.getId(), buildpackMetadata.getVersion());\n\t}",
        "summary_tokens": [
            "create",
            "buildpack",
            "coordinates",
            "by",
            "extracting",
            "values",
            "from",
            "buildpack",
            "metadata"
        ]
    },
    {
        "id": 532,
        "code": "\tstatic BuildpackCoordinates of(String id, String version) {\n\t\treturn new BuildpackCoordinates(id, version);\n\t}",
        "summary_tokens": [
            "create",
            "buildpack",
            "coordinates",
            "from",
            "an",
            "id",
            "and",
            "version"
        ]
    },
    {
        "id": 533,
        "code": "\tBuildpackLayerDetails getBuildpack(String id, String version) {\n\t\treturn this.buildpacks.getBuildpack(id, version);\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "metadata",
            "details",
            "of",
            "a",
            "buildpack",
            "with",
            "the",
            "given",
            "id",
            "and",
            "version"
        ]
    },
    {
        "id": 534,
        "code": "\tstatic BuildpackLayersMetadata fromImage(Image image) throws IOException {\n\t\tAssert.notNull(image, \"Image must not be null\");\n\t\treturn fromImageConfig(image.getConfig());\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "buildpack",
            "layers",
            "metadata",
            "from",
            "an",
            "image"
        ]
    },
    {
        "id": 535,
        "code": "\tstatic BuildpackLayersMetadata fromImageConfig(ImageConfig imageConfig) throws IOException {\n\t\tAssert.notNull(imageConfig, \"ImageConfig must not be null\");\n\t\tString json = imageConfig.getLabels().get(LABEL_NAME);\n\t\tAssert.notNull(json, () -> \"No '\" + LABEL_NAME + \"' label found in image config labels '\"\n\t\t\t\t+ StringUtils.collectionToCommaDelimitedString(imageConfig.getLabels().keySet()) + \"'\");\n\t\treturn fromJson(json);\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "buildpack",
            "layers",
            "metadata",
            "from",
            "image",
            "config"
        ]
    },
    {
        "id": 536,
        "code": "\tstatic BuildpackLayersMetadata fromJson(JsonNode node) {\n\t\treturn new BuildpackLayersMetadata(node);\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "buildpack",
            "layers",
            "metadata",
            "from",
            "json"
        ]
    },
    {
        "id": 537,
        "code": "\tString getId() {\n\t\treturn this.id;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "buildpack",
            "id"
        ]
    },
    {
        "id": 538,
        "code": "\tString getVersion() {\n\t\treturn this.version;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "buildpack",
            "version"
        ]
    },
    {
        "id": 539,
        "code": "\tString getHomepage() {\n\t\treturn this.homepage;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "buildpack",
            "homepage",
            "address"
        ]
    },
    {
        "id": 540,
        "code": "\tstatic BuildpackMetadata fromImage(Image image) throws IOException {\n\t\tAssert.notNull(image, \"Image must not be null\");\n\t\treturn fromImageConfig(image.getConfig());\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "extract",
            "buildpack",
            "metadata",
            "from",
            "an",
            "image"
        ]
    },
    {
        "id": 541,
        "code": "\tstatic BuildpackMetadata fromImageConfig(ImageConfig imageConfig) throws IOException {\n\t\tAssert.notNull(imageConfig, \"ImageConfig must not be null\");\n\t\tString json = imageConfig.getLabels().get(LABEL_NAME);\n\t\tAssert.notNull(json, () -> \"No '\" + LABEL_NAME + \"' label found in image config labels '\"\n\t\t\t\t+ StringUtils.collectionToCommaDelimitedString(imageConfig.getLabels().keySet()) + \"'\");\n\t\treturn fromJson(json);\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "extract",
            "buildpack",
            "metadata",
            "from",
            "image",
            "config"
        ]
    },
    {
        "id": 542,
        "code": "\tstatic BuildpackMetadata fromJson(JsonNode node) {\n\t\treturn new BuildpackMetadata(node);\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "create",
            "buildpack",
            "metadata",
            "from",
            "json"
        ]
    },
    {
        "id": 543,
        "code": "\tpublic static BuildpackReference of(String value) {\n\t\tAssert.hasText(value, \"Value must not be empty\");\n\t\treturn new BuildpackReference(value);\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "new",
            "buildpack",
            "reference",
            "from",
            "the",
            "given",
            "value"
        ]
    },
    {
        "id": 544,
        "code": "\tstatic Buildpacks resolveAll(BuildpackResolverContext context, Collection<BuildpackReference> references) {\n\t\tAssert.notNull(context, \"Context must not be null\");\n\t\tif (CollectionUtils.isEmpty(references)) {\n\t\t\treturn Buildpacks.EMPTY;\n\t\t}\n\t\tList<Buildpack> buildpacks = new ArrayList<>(references.size());\n\t\tfor (BuildpackReference reference : references) {\n\t\t\tbuildpacks.add(resolve(context, reference));\n\t\t}\n\t\treturn Buildpacks.of(buildpacks);\n\t}",
        "summary_tokens": [
            "resolve",
            "a",
            "collection",
            "of",
            "buildpack",
            "reference",
            "buildpack",
            "references",
            "to",
            "a",
            "buildpacks",
            "instance"
        ]
    },
    {
        "id": 545,
        "code": "\tpublic Volume getVolume() {\n\t\treturn (this.format.equals(Format.VOLUME)) ? (Volume) this : null;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "details",
            "of",
            "the",
            "cache",
            "if",
            "it",
            "is",
            "a",
            "volume",
            "cache"
        ]
    },
    {
        "id": 546,
        "code": "\tpublic static Cache volume(String name) {\n\t\tAssert.notNull(name, \"Name must not be null\");\n\t\treturn new Volume(name);\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "new",
            "cache",
            "that",
            "uses",
            "a",
            "volume",
            "with",
            "the",
            "provided",
            "name"
        ]
    },
    {
        "id": 547,
        "code": "\tpublic String getName() {\n\t\treturn \"Spring Boot\";\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "name",
            "of",
            "the",
            "builder",
            "creator"
        ]
    },
    {
        "id": 548,
        "code": "\tpublic String getVersion() {\n\t\treturn this.version;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "version",
            "of",
            "the",
            "builder",
            "creator"
        ]
    },
    {
        "id": 549,
        "code": "\tpublic static Creator withVersion(String version) {\n\t\tAssert.notNull(version, \"Version must not be null\");\n\t\treturn new Creator(version);\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "new",
            "creator",
            "using",
            "the",
            "provided",
            "version"
        ]
    },
    {
        "id": 550,
        "code": "\tstatic Buildpack resolve(BuildpackResolverContext context, BuildpackReference reference) {\n\t\tPath path = reference.asPath();\n\t\tif (path != null && Files.exists(path) && Files.isDirectory(path)) {\n\t\t\treturn new DirectoryBuildpack(path);\n\t\t}\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "a",
            "buildpack",
            "resolver",
            "compatible",
            "method",
            "to",
            "resolve",
            "directory",
            "buildpacks"
        ]
    },
    {
        "id": 551,
        "code": "\tImageReference getName() {\n\t\treturn this.archive.getTag();\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "name",
            "of",
            "this",
            "archive",
            "as",
            "tagged",
            "in",
            "docker"
        ]
    },
    {
        "id": 552,
        "code": "\tOwner getBuildOwner() {\n\t\treturn this.buildOwner;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "build",
            "owner",
            "that",
            "should",
            "be",
            "used",
            "for",
            "written",
            "content"
        ]
    },
    {
        "id": 553,
        "code": "\tBuilderMetadata getBuilderMetadata() {\n\t\treturn this.builderMetadata;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "builder",
            "meta",
            "data",
            "that",
            "was",
            "used",
            "to",
            "create",
            "this",
            "ephemeral",
            "builder"
        ]
    },
    {
        "id": 554,
        "code": "\tImageArchive getArchive() {\n\t\treturn this.archive;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "contents",
            "of",
            "ephemeral",
            "builder",
            "for",
            "passing",
            "to",
            "docker"
        ]
    },
    {
        "id": 555,
        "code": "\tstatic Buildpack resolve(BuildpackResolverContext context, BuildpackReference reference) {\n\t\tboolean unambiguous = reference.hasPrefix(PREFIX);\n\t\ttry {\n\t\t\tImageReference imageReference = ImageReference\n\t\t\t\t\t.of((unambiguous) ? reference.getSubReference(PREFIX) : reference.toString());\n\t\t\treturn new ImageBuildpack(context, imageReference);\n\t\t}\n\t\tcatch (IllegalArgumentException ex) {\n\t\t\tif (unambiguous) {\n\t\t\t\tthrow ex;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}",
        "summary_tokens": [
            "a",
            "buildpack",
            "resolver",
            "compatible",
            "method",
            "to",
            "resolve",
            "image",
            "buildpacks"
        ]
    },
    {
        "id": 556,
        "code": "\tvoid execute() throws IOException {\n\t\tAssert.state(!this.executed, \"Lifecycle has already been executed\");\n\t\tthis.executed = true;\n\t\tthis.log.executingLifecycle(this.request, this.lifecycleVersion, this.buildCacheVolume);\n\t\tif (this.request.isCleanCache()) {\n\t\t\tdeleteVolume(this.buildCacheVolume);\n\t\t}\n\t\trun(createPhase());\n\t\tthis.log.executedLifecycle(this.request);\n\t}",
        "summary_tokens": [
            "execute",
            "this",
            "lifecycle",
            "by",
            "running",
            "each",
            "phase",
            "in",
            "turn"
        ]
    },
    {
        "id": 557,
        "code": "\tboolean isEqualOrGreaterThan(LifecycleVersion other) {\n\t\treturn compareTo(other) >= 0;\n\t}",
        "summary_tokens": [
            "return",
            "if",
            "this",
            "version",
            "is",
            "greater",
            "than",
            "or",
            "equal",
            "to",
            "the",
            "specified",
            "version"
        ]
    },
    {
        "id": 558,
        "code": "\tint getMajor() {\n\t\treturn this.major;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "major",
            "version",
            "number"
        ]
    },
    {
        "id": 559,
        "code": "\tint getMinor() {\n\t\treturn this.minor;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "minor",
            "version",
            "number"
        ]
    },
    {
        "id": 560,
        "code": "\tint getPatch() {\n\t\treturn this.patch;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "patch",
            "version",
            "number"
        ]
    },
    {
        "id": 561,
        "code": "\tstatic LifecycleVersion parse(String value) {\n\t\tAssert.hasText(value, \"Value must not be empty\");\n\t\tif (value.startsWith(\"v\") || value.startsWith(\"V\")) {\n\t\t\tvalue = value.substring(1);\n\t\t}\n\t\tString[] components = value.split(\"\\\\.\");\n\t\tAssert.isTrue(components.length <= 3, \"Malformed version number '\" + value + \"'\");\n\t\tint[] versions = new int[3];\n\t\tfor (int i = 0; i < components.length; i++) {\n\t\t\ttry {\n\t\t\t\tversions[i] = Integer.parseInt(components[i]);\n\t\t\t}\n\t\t\tcatch (NumberFormatException ex) {\n\t\t\t\tthrow new IllegalArgumentException(\"Malformed version number '\" + value + \"'\", ex);\n\t\t\t}\n\t\t}\n\t\treturn new LifecycleVersion(versions[0], versions[1], versions[2]);\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "parse",
            "a",
            "string",
            "into",
            "a",
            "lifecycle",
            "version",
            "instance"
        ]
    },
    {
        "id": 562,
        "code": "\tvoid withDaemonAccess() {\n\t\tthis.daemonAccess = true;\n\t}",
        "summary_tokens": [
            "update",
            "this",
            "phase",
            "with",
            "docker",
            "daemon",
            "access"
        ]
    },
    {
        "id": 563,
        "code": "\tvoid withLogLevelArg() {\n\t\tif (this.verboseLogging) {\n\t\t\tthis.args.add(\"-log-level\");\n\t\t\tthis.args.add(\"debug\");\n\t\t}\n\t}",
        "summary_tokens": [
            "update",
            "this",
            "phase",
            "with",
            "a",
            "debug",
            "log",
            "level",
            "arguments",
            "if",
            "verbose",
            "logging",
            "has",
            "been",
            "requested"
        ]
    },
    {
        "id": 564,
        "code": "\tvoid withArgs(Object... args) {\n\t\tArrays.stream(args).map(Object::toString).forEach(this.args::add);\n\t}",
        "summary_tokens": [
            "update",
            "this",
            "phase",
            "with",
            "additional",
            "run",
            "arguments"
        ]
    },
    {
        "id": 565,
        "code": "\tvoid withBinding(Binding binding) {\n\t\tthis.bindings.add(binding);\n\t}",
        "summary_tokens": [
            "update",
            "this",
            "phase",
            "with",
            "an",
            "addition",
            "volume",
            "binding"
        ]
    },
    {
        "id": 566,
        "code": "\tvoid withEnv(String name, String value) {\n\t\tthis.env.put(name, value);\n\t}",
        "summary_tokens": [
            "update",
            "this",
            "phase",
            "with",
            "an",
            "additional",
            "environment",
            "variable"
        ]
    },
    {
        "id": 567,
        "code": "\tvoid withNetworkMode(String networkMode) {\n\t\tthis.networkMode = networkMode;\n\t}",
        "summary_tokens": [
            "update",
            "this",
            "phase",
            "with",
            "the",
            "network",
            "the",
            "build",
            "container",
            "will",
            "connect",
            "to"
        ]
    },
    {
        "id": 568,
        "code": "\tvoid withSecurityOption(String option) {\n\t\tthis.securityOptions.add(option);\n\t}",
        "summary_tokens": [
            "update",
            "this",
            "phase",
            "with",
            "a",
            "security",
            "option"
        ]
    },
    {
        "id": 569,
        "code": "\tString getName() {\n\t\treturn this.name;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "name",
            "of",
            "the",
            "phase"
        ]
    },
    {
        "id": 570,
        "code": "\tvoid apply(ContainerConfig.Update update) {\n\t\tif (this.daemonAccess) {\n\t\t\tupdate.withUser(\"root\");\n\t\t}\n\t\tupdate.withCommand(\"/cnb/lifecycle/\" + this.name, StringUtils.toStringArray(this.args));\n\t\tupdate.withLabel(\"author\", \"spring-boot\");\n\t\tthis.bindings.forEach(update::withBinding);\n\t\tthis.env.forEach(update::withEnv);\n\t\tif (this.networkMode != null) {\n\t\t\tupdate.withNetworkMode(this.networkMode);\n\t\t}\n\t\tthis.securityOptions.forEach(update::withSecurityOption);\n\t}",
        "summary_tokens": [
            "apply",
            "this",
            "phase",
            "settings",
            "to",
            "a",
            "container",
            "config",
            "update"
        ]
    },
    {
        "id": 571,
        "code": "\tstatic StackId fromImage(Image image) {\n\t\tAssert.notNull(image, \"Image must not be null\");\n\t\treturn fromImageConfig(image.getConfig());\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "create",
            "a",
            "stack",
            "id",
            "from",
            "an",
            "image"
        ]
    },
    {
        "id": 572,
        "code": "\tprivate static StackId fromImageConfig(ImageConfig imageConfig) {\n\t\tString value = imageConfig.getLabels().get(LABEL_NAME);\n\t\tAssert.state(StringUtils.hasText(value), () -> \"Missing '\" + LABEL_NAME + \"' stack label\");\n\t\treturn new StackId(value);\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "create",
            "a",
            "stack",
            "id",
            "from",
            "an",
            "image",
            "config"
        ]
    },
    {
        "id": 573,
        "code": "\tstatic StackId of(String value) {\n\t\tAssert.hasText(value, \"Value must not be empty\");\n\t\treturn new StackId(value);\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "create",
            "a",
            "stack",
            "id",
            "with",
            "a",
            "given",
            "value"
        ]
    },
    {
        "id": 574,
        "code": "\tstatic Buildpack resolve(BuildpackResolverContext context, BuildpackReference reference) {\n\t\tPath path = reference.asPath();\n\t\tif (path != null && Files.exists(path) && Files.isRegularFile(path)) {\n\t\t\treturn new TarGzipBuildpack(path);\n\t\t}\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "a",
            "buildpack",
            "resolver",
            "compatible",
            "method",
            "to",
            "resolve",
            "tar",
            "gzip",
            "buildpacks"
        ]
    },
    {
        "id": 575,
        "code": "\tpublic ImageApi image() {\n\t\treturn this.image;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "docker",
            "api",
            "for",
            "image",
            "operations"
        ]
    },
    {
        "id": 576,
        "code": "\tpublic ContainerApi container() {\n\t\treturn this.container;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "docker",
            "api",
            "for",
            "container",
            "operations"
        ]
    },
    {
        "id": 577,
        "code": "\tpublic String getId() {\n\t\treturn this.id;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "id",
            "of",
            "the",
            "image",
            "layer",
            "being",
            "updated",
            "if",
            "available"
        ]
    },
    {
        "id": 578,
        "code": "\tpublic String getStream() {\n\t\treturn this.stream;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "stream",
            "response",
            "or",
            "null",
            "if",
            "no",
            "response",
            "is",
            "available"
        ]
    },
    {
        "id": 579,
        "code": "\tpublic String getStatus() {\n\t\treturn this.status;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "status",
            "for",
            "the",
            "update"
        ]
    },
    {
        "id": 580,
        "code": "\tpublic ProgressDetail getProgressDetail() {\n\t\treturn this.progressDetail;\n\t}",
        "summary_tokens": [
            "return",
            "progress",
            "details",
            "if",
            "available"
        ]
    },
    {
        "id": 581,
        "code": "\tpublic String getProgress() {\n\t\treturn this.progress;\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "text",
            "based",
            "progress",
            "bar",
            "if",
            "progress",
            "information",
            "is",
            "available"
        ]
    },
    {
        "id": 582,
        "code": "\tpublic ErrorDetail getErrorDetail() {\n\t\treturn this.errorDetail;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "details",
            "of",
            "any",
            "error",
            "encountered",
            "during",
            "processing"
        ]
    },
    {
        "id": 583,
        "code": "\tpublic int getPercent() {\n\t\treturn this.percent;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "total",
            "progress"
        ]
    },
    {
        "id": 584,
        "code": "\tdefault void onStart() {\n\t}",
        "summary_tokens": [
            "called",
            "when",
            "the",
            "operation",
            "starts"
        ]
    },
    {
        "id": 585,
        "code": "\tdefault void onFinish() {\n\t}",
        "summary_tokens": [
            "called",
            "when",
            "the",
            "operation",
            "finishes",
            "with",
            "or",
            "without",
            "error"
        ]
    },
    {
        "id": 586,
        "code": "\tstatic <E extends UpdateEvent> UpdateListener<E> none() {\n\t\treturn (UpdateListener<E>) NONE;\n\t}",
        "summary_tokens": [
            "a",
            "no",
            "op",
            "update",
            "listener",
            "that",
            "does",
            "nothing"
        ]
    },
    {
        "id": 587,
        "code": "\tstatic X509Certificate[] parse(Path... paths) {\n\t\tCertificateFactory factory = getCertificateFactory();\n\t\tList<X509Certificate> certificates = new ArrayList<>();\n\t\tfor (Path path : paths) {\n\t\t\treadCertificates(path, factory, certificates::add);\n\t\t}\n\t\treturn certificates.toArray(new X509Certificate[0]);\n\t}",
        "summary_tokens": [
            "load",
            "certificates",
            "from",
            "the",
            "specified",
            "file",
            "paths"
        ]
    },
    {
        "id": 588,
        "code": "\tstatic KeyStore create(Path certPath, Path keyPath, String alias) {\n\t\ttry {\n\t\t\tKeyStore keyStore = getKeyStore();\n\t\t\tX509Certificate[] certificates = CertificateParser.parse(certPath);\n\t\t\tPrivateKey privateKey = getPrivateKey(keyPath);\n\t\t\ttry {\n\t\t\t\taddCertificates(keyStore, certificates, privateKey, alias);\n\t\t\t}\n\t\t\tcatch (KeyStoreException ex) {\n\t\t\t\tthrow new IllegalStateException(\"Error adding certificates to KeyStore: \" + ex.getMessage(), ex);\n\t\t\t}\n\t\t\treturn keyStore;\n\t\t}\n\t\tcatch (GeneralSecurityException | IOException ex) {\n\t\t\tthrow new IllegalStateException(\"Error creating KeyStore: \" + ex.getMessage(), ex);\n\t\t}\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "new",
            "key",
            "store",
            "populated",
            "with",
            "the",
            "certificate",
            "stored",
            "at",
            "the",
            "specified",
            "file",
            "path",
            "and",
            "an",
            "optional",
            "private",
            "key"
        ]
    },
    {
        "id": 589,
        "code": "\tstatic PrivateKey parse(Path path) {\n\t\ttry {\n\t\t\tString text = Files.readString(path);\n\t\t\tMatcher matcher = PKCS1_PATTERN.matcher(text);\n\t\t\tif (matcher.find()) {\n\t\t\t\treturn parsePkcs1(decodeBase64(matcher.group(1)));\n\t\t\t}\n\t\t\tmatcher = PKCS8_KEY_PATTERN.matcher(text);\n\t\t\tif (matcher.find()) {\n\t\t\t\treturn parsePkcs8(decodeBase64(matcher.group(1)));\n\t\t\t}\n\t\t\tthrow new IllegalStateException(\"Unrecognized private key format in \" + path);\n\t\t}\n\t\tcatch (GeneralSecurityException | IOException ex) {\n\t\t\tthrow new IllegalStateException(\"Error loading private key file \" + path, ex);\n\t\t}\n\t}",
        "summary_tokens": [
            "load",
            "a",
            "private",
            "key",
            "from",
            "the",
            "specified",
            "file",
            "paths"
        ]
    },
    {
        "id": 590,
        "code": "\tpublic SSLContext forDirectory(String directory) {\n\t\ttry {\n\t\t\tPath keyPath = Paths.get(directory, \"key.pem\");\n\t\t\tPath certPath = Paths.get(directory, \"cert.pem\");\n\t\t\tPath caPath = Paths.get(directory, \"ca.pem\");\n\t\t\tPath caKeyPath = Paths.get(directory, \"ca-key.pem\");\n\t\t\tverifyCertificateFiles(keyPath, certPath, caPath);\n\t\t\tKeyManagerFactory keyManagerFactory = getKeyManagerFactory(keyPath, certPath);\n\t\t\tTrustManagerFactory trustManagerFactory = getTrustManagerFactory(caPath, caKeyPath);\n\t\t\tSSLContext sslContext = SSLContext.getInstance(\"TLS\");\n\t\t\tsslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), null);\n\t\t\treturn sslContext;\n\t\t}\n\t\tcatch (RuntimeException ex) {\n\t\t\tthrow ex;\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tthrow new RuntimeException(ex.getMessage(), ex);\n\t\t}\n\t}",
        "summary_tokens": [
            "create",
            "an",
            "sslcontext",
            "from",
            "files",
            "in",
            "the",
            "specified",
            "directory"
        ]
    },
    {
        "id": 591,
        "code": "\tpublic int getStatusCode() {\n\t\treturn this.statusCode;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "status",
            "code",
            "returned",
            "by",
            "the",
            "docker",
            "api"
        ]
    },
    {
        "id": 592,
        "code": "\tpublic String getReasonPhrase() {\n\t\treturn this.reasonPhrase;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "reason",
            "phrase",
            "returned",
            "by",
            "the",
            "docker",
            "api"
        ]
    },
    {
        "id": 593,
        "code": "\tpublic Errors getErrors() {\n\t\treturn this.errors;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "errors",
            "from",
            "the",
            "body",
            "of",
            "the",
            "docker",
            "api",
            "response",
            "or",
            "null",
            "if",
            "the",
            "errors",
            "json",
            "could",
            "not",
            "be",
            "read"
        ]
    },
    {
        "id": 594,
        "code": "\tpublic Message getResponseMessage() {\n\t\treturn this.responseMessage;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "message",
            "from",
            "the",
            "body",
            "of",
            "the",
            "docker",
            "api",
            "response",
            "or",
            "null",
            "if",
            "the",
            "message",
            "json",
            "could",
            "not",
            "be",
            "read"
        ]
    },
    {
        "id": 595,
        "code": "\tpublic Stream<Error> stream() {\n\t\treturn this.errors.stream();\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "sequential",
            "stream",
            "of",
            "the",
            "errors"
        ]
    },
    {
        "id": 596,
        "code": "\tpublic boolean isEmpty() {\n\t\treturn this.errors.isEmpty();\n\t}",
        "summary_tokens": [
            "return",
            "if",
            "there",
            "are",
            "any",
            "contained",
            "errors"
        ]
    },
    {
        "id": 597,
        "code": "\tpublic Response get(URI uri) {\n\t\treturn execute(new HttpGet(uri));\n\t}",
        "summary_tokens": [
            "perform",
            "an",
            "http",
            "get",
            "operation"
        ]
    },
    {
        "id": 598,
        "code": "\tpublic Response post(URI uri, String contentType, IOConsumer<OutputStream> writer) {\n\t\treturn execute(new HttpPost(uri), contentType, writer);\n\t}",
        "summary_tokens": [
            "perform",
            "an",
            "http",
            "post",
            "operation"
        ]
    },
    {
        "id": 599,
        "code": "\tpublic Response put(URI uri, String contentType, IOConsumer<OutputStream> writer) {\n\t\treturn execute(new HttpPut(uri), contentType, writer);\n\t}",
        "summary_tokens": [
            "perform",
            "an",
            "http",
            "put",
            "operation"
        ]
    },
    {
        "id": 600,
        "code": "\tpublic Response delete(URI uri) {\n\t\treturn execute(new HttpDelete(uri));\n\t}",
        "summary_tokens": [
            "perform",
            "an",
            "http",
            "delete",
            "operation"
        ]
    },
    {
        "id": 601,
        "code": "\tstatic HttpTransport create(DockerHost dockerHost) {\n\t\tResolvedDockerHost host = ResolvedDockerHost.from(dockerHost);\n\t\tHttpTransport remote = RemoteHttpClientTransport.createIfPossible(host);\n\t\treturn (remote != null) ? remote : LocalHttpClientTransport.create(host);\n\t}",
        "summary_tokens": [
            "create",
            "the",
            "most",
            "suitable",
            "http",
            "transport",
            "based",
            "on",
            "the",
            "docker",
            "host"
        ]
    },
    {
        "id": 602,
        "code": "\tpublic String getMessage() {\n\t\treturn this.message;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "message",
            "contained",
            "in",
            "the",
            "response"
        ]
    },
    {
        "id": 603,
        "code": "\tpublic void writeTo(OutputStream outputStream) throws IOException {\n\t\tStreamUtils.copy(this.json, StandardCharsets.UTF_8, outputStream);\n\t}",
        "summary_tokens": [
            "write",
            "this",
            "container",
            "configuration",
            "to",
            "the",
            "specified",
            "output",
            "stream"
        ]
    },
    {
        "id": 604,
        "code": "\tpublic static ContainerConfig of(ImageReference imageReference, Consumer<Update> update) {\n\t\tAssert.notNull(imageReference, \"ImageReference must not be null\");\n\t\tAssert.notNull(update, \"Update must not be null\");\n\t\treturn new Update(imageReference).run(update);\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "create",
            "a",
            "container",
            "config",
            "with",
            "specific",
            "settings"
        ]
    },
    {
        "id": 605,
        "code": "\tstatic ContainerContent of(TarArchive archive, String destinationPath) {\n\t\tAssert.notNull(archive, \"Archive must not be null\");\n\t\tAssert.hasText(destinationPath, \"DestinationPath must not be empty\");\n\t\treturn new ContainerContent() {\n\n\t\t\t@Override\n\t\t\tpublic TarArchive getArchive() {\n\t\t\t\treturn archive;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String getDestinationPath() {\n\t\t\t\treturn destinationPath;\n\t\t\t}\n\n\t\t};\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "create",
            "a",
            "new",
            "container",
            "content",
            "instance"
        ]
    },
    {
        "id": 606,
        "code": "\tpublic static ContainerReference of(String value) {\n\t\treturn new ContainerReference(value);\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "create",
            "a",
            "container",
            "reference",
            "with",
            "a",
            "specific",
            "value"
        ]
    },
    {
        "id": 607,
        "code": "\tpublic int getStatusCode() {\n\t\treturn this.statusCode;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "container",
            "exit",
            "status",
            "code"
        ]
    },
    {
        "id": 608,
        "code": "\tpublic String getWaitingErrorMessage() {\n\t\treturn this.waitingErrorMessage;\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "message",
            "indicating",
            "an",
            "error",
            "waiting",
            "for",
            "a",
            "container",
            "to",
            "stop"
        ]
    },
    {
        "id": 609,
        "code": "\tpublic static ContainerStatus of(int statusCode, String errorMessage) {\n\t\treturn new ContainerStatus(statusCode, errorMessage);\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "new",
            "container",
            "status",
            "instance",
            "with",
            "the",
            "specified",
            "values"
        ]
    },
    {
        "id": 610,
        "code": "\tpublic List<String> getDigests() {\n\t\treturn this.digests;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "digests",
            "of",
            "the",
            "image"
        ]
    },
    {
        "id": 611,
        "code": "\tpublic ImageConfig getConfig() {\n\t\treturn this.config;\n\t}",
        "summary_tokens": [
            "return",
            "image",
            "config",
            "information"
        ]
    },
    {
        "id": 612,
        "code": "\tpublic List<LayerId> getLayers() {\n\t\treturn this.layers;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "layer",
            "ids",
            "contained",
            "in",
            "the",
            "image"
        ]
    },
    {
        "id": 613,
        "code": "\tpublic String getOs() {\n\t\treturn (this.os != null) ? this.os : \"linux\";\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "os",
            "of",
            "the",
            "image"
        ]
    },
    {
        "id": 614,
        "code": "\tpublic static Image of(InputStream content) throws IOException {\n\t\treturn of(content, Image::new);\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "new",
            "image",
            "instance",
            "from",
            "the",
            "specified",
            "json",
            "content"
        ]
    },
    {
        "id": 615,
        "code": "\tpublic ImageConfig getImageConfig() {\n\t\treturn this.imageConfig;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "image",
            "config",
            "for",
            "the",
            "archive"
        ]
    },
    {
        "id": 616,
        "code": "\tpublic Instant getCreateDate() {\n\t\treturn this.createDate;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "create",
            "date",
            "of",
            "the",
            "archive"
        ]
    },
    {
        "id": 617,
        "code": "\tpublic ImageReference getTag() {\n\t\treturn this.tag;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "tag",
            "of",
            "the",
            "archive"
        ]
    },
    {
        "id": 618,
        "code": "\tpublic static ImageArchive from(Image image, IOConsumer<Update> update) throws IOException {\n\t\treturn new Update(image).applyTo(update);\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "new",
            "image",
            "archive",
            "based",
            "on",
            "an",
            "existing",
            "image"
        ]
    },
    {
        "id": 619,
        "code": "\tpublic Map<String, String> getLabels() {\n\t\treturn this.labels;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "image",
            "labels"
        ]
    },
    {
        "id": 620,
        "code": "\tpublic Map<String, String> getEnv() {\n\t\treturn this.configEnv;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "image",
            "environment",
            "variables"
        ]
    },
    {
        "id": 621,
        "code": "\tpublic ImageConfig copy(Consumer<Update> update) {\n\t\treturn new Update(this).run(update);\n\n\t}",
        "summary_tokens": [
            "create",
            "an",
            "updated",
            "copy",
            "of",
            "this",
            "image",
            "config"
        ]
    },
    {
        "id": 622,
        "code": "\tpublic String getDomain() {\n\t\treturn this.domain;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "domain",
            "for",
            "this",
            "image",
            "name"
        ]
    },
    {
        "id": 623,
        "code": "\tpublic String getName() {\n\t\treturn this.name;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "name",
            "of",
            "this",
            "image"
        ]
    },
    {
        "id": 624,
        "code": "\tpublic static ImageName of(String value) {\n\t\tAssert.hasText(value, \"Value must not be empty\");\n\t\tString domain = parseDomain(value);\n\t\tString path = (domain != null) ? value.substring(domain.length() + 1) : value;\n\t\tAssert.isTrue(Regex.PATH.matcher(path).matches(),\n\t\t\t\t() -> \"Unable to parse name \\\"\" + value + \"\\\". \"\n\t\t\t\t\t\t+ \"Image name must be in the form '[domainHost:port/][path/]name', \"\n\t\t\t\t\t\t+ \"with 'path' and 'name' containing only [a-z0-9][.][_][-]\");\n\t\treturn new ImageName(domain, path);\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "new",
            "image",
            "name",
            "from",
            "the",
            "given",
            "value"
        ]
    },
    {
        "id": 625,
        "code": "\tpublic String getDomain() {\n\t\treturn this.name.getDomain();\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "domain",
            "for",
            "this",
            "image",
            "name"
        ]
    },
    {
        "id": 626,
        "code": "\tpublic String getName() {\n\t\treturn this.name.getName();\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "name",
            "of",
            "this",
            "image"
        ]
    },
    {
        "id": 627,
        "code": "\tpublic String getTag() {\n\t\treturn this.tag;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "tag",
            "from",
            "the",
            "reference",
            "or",
            "null"
        ]
    },
    {
        "id": 628,
        "code": "\tpublic String getDigest() {\n\t\treturn this.digest;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "digest",
            "from",
            "the",
            "reference",
            "or",
            "null"
        ]
    },
    {
        "id": 629,
        "code": "\tpublic ImageReference withDigest(String digest) {\n\t\treturn new ImageReference(this.name, null, digest);\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "new",
            "image",
            "reference",
            "with",
            "an",
            "updated",
            "digest"
        ]
    },
    {
        "id": 630,
        "code": "\tpublic ImageReference inTaggedForm() {\n\t\tAssert.state(this.digest == null, () -> \"Image reference '\" + this + \"' cannot contain a digest\");\n\t\treturn new ImageReference(this.name, (this.tag != null) ? this.tag : LATEST, null);\n\t}",
        "summary_tokens": [
            "return",
            "an",
            "image",
            "reference",
            "in",
            "the",
            "form",
            "imagename",
            "tag"
        ]
    },
    {
        "id": 631,
        "code": "\tpublic ImageReference inTaggedOrDigestForm() {\n\t\tif (this.digest != null) {\n\t\t\treturn this;\n\t\t}\n\t\treturn inTaggedForm();\n\t}",
        "summary_tokens": [
            "return",
            "an",
            "image",
            "reference",
            "containing",
            "either",
            "a",
            "tag",
            "or",
            "a",
            "digest"
        ]
    },
    {
        "id": 632,
        "code": "\tpublic static ImageReference forJarFile(File jarFile) {\n\t\tString filename = jarFile.getName();\n\t\tAssert.isTrue(filename.toLowerCase().endsWith(\".jar\"), () -> \"File '\" + jarFile + \"' is not a JAR\");\n\t\tfilename = filename.substring(0, filename.length() - 4);\n\t\tint firstDot = filename.indexOf('.');\n\t\tif (firstDot == -1) {\n\t\t\treturn of(filename);\n\t\t}\n\t\tString name = filename.substring(0, firstDot);\n\t\tString version = filename.substring(firstDot + 1);\n\t\tMatcher matcher = JAR_VERSION_PATTERN.matcher(name);\n\t\tif (matcher.matches()) {\n\t\t\tname = matcher.group(1);\n\t\t\tversion = matcher.group(2).substring(1) + \".\" + version;\n\t\t}\n\t\treturn of(ImageName.of(name), version);\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "new",
            "image",
            "reference",
            "instance",
            "deduced",
            "from",
            "a",
            "source",
            "jar",
            "file",
            "that",
            "follows",
            "common",
            "java",
            "naming",
            "conventions"
        ]
    },
    {
        "id": 633,
        "code": "\tpublic static ImageReference random(String prefix, int randomLength) {\n\t\treturn of(RandomString.generate(prefix, randomLength));\n\t}",
        "summary_tokens": [
            "generate",
            "an",
            "image",
            "name",
            "with",
            "a",
            "random",
            "suffix"
        ]
    },
    {
        "id": 634,
        "code": "\tpublic static ImageReference of(ImageName name, String tag, String digest) {\n\t\treturn new ImageReference(name, tag, digest);\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "new",
            "image",
            "reference",
            "from",
            "the",
            "given",
            "image",
            "name",
            "tag",
            "and",
            "digest"
        ]
    },
    {
        "id": 635,
        "code": "\tpublic LayerId getId() {\n\t\treturn this.id;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "id",
            "of",
            "the",
            "layer"
        ]
    },
    {
        "id": 636,
        "code": "\tpublic static Layer of(IOConsumer<Layout> layout) throws IOException {\n\t\tAssert.notNull(layout, \"Layout must not be null\");\n\t\treturn fromTarArchive(TarArchive.of(layout));\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "create",
            "a",
            "new",
            "layer",
            "with",
            "a",
            "specific",
            "layout"
        ]
    },
    {
        "id": 637,
        "code": "\tpublic static Layer fromTarArchive(TarArchive tarArchive) throws IOException {\n\t\tAssert.notNull(tarArchive, \"TarArchive must not be null\");\n\t\ttry {\n\t\t\treturn new Layer(tarArchive);\n\t\t}\n\t\tcatch (NoSuchAlgorithmException ex) {\n\t\t\tthrow new IllegalStateException(ex);\n\t\t}\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "create",
            "a",
            "new",
            "layer",
            "from",
            "a",
            "tar",
            "archive"
        ]
    },
    {
        "id": 638,
        "code": "\tpublic String getAlgorithm() {\n\t\treturn this.algorithm;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "algorithm",
            "of",
            "layer"
        ]
    },
    {
        "id": 639,
        "code": "\tpublic String getHash() {\n\t\treturn this.hash;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "hash",
            "of",
            "the",
            "layer"
        ]
    },
    {
        "id": 640,
        "code": "\tpublic static LayerId of(String value) {\n\t\tAssert.hasText(value, \"Value must not be empty\");\n\t\tint i = value.indexOf(':');\n\t\tAssert.isTrue(i >= 0, () -> \"Invalid layer ID '\" + value + \"'\");\n\t\treturn new LayerId(value, value.substring(0, i), value.substring(i + 1));\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "new",
            "layer",
            "id",
            "with",
            "the",
            "specified",
            "value"
        ]
    },
    {
        "id": 641,
        "code": "\tpublic static LayerId ofSha256Digest(byte[] digest) {\n\t\tAssert.notNull(digest, \"Digest must not be null\");\n\t\tAssert.isTrue(digest.length == 32, \"Digest must be exactly 32 bytes\");\n\t\tString algorithm = \"sha256\";\n\t\tString hash = String.format(\"%064x\", new BigInteger(1, digest));\n\t\treturn new LayerId(algorithm + \":\" + hash, algorithm, hash);\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "new",
            "layer",
            "id",
            "from",
            "a",
            "sha",
            "0",
            "digest"
        ]
    },
    {
        "id": 642,
        "code": "\tpublic static VolumeName random(String prefix, int randomLength) {\n\t\treturn of(RandomString.generate(prefix, randomLength));\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "create",
            "a",
            "new",
            "volume",
            "name",
            "with",
            "a",
            "random",
            "name"
        ]
    },
    {
        "id": 643,
        "code": "\tpublic static <S> VolumeName basedOn(S source, Function<S, String> nameExtractor, String prefix, String suffix,\n\t\t\tint digestLength) {\n\t\tAssert.notNull(source, \"Source must not be null\");\n\t\tAssert.notNull(nameExtractor, \"NameExtractor must not be null\");\n\t\tAssert.notNull(prefix, \"Prefix must not be null\");\n\t\tAssert.notNull(suffix, \"Suffix must not be null\");\n\t\treturn of(prefix + getDigest(nameExtractor.apply(source), digestLength) + suffix);\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "create",
            "a",
            "new",
            "volume",
            "name",
            "based",
            "on",
            "an",
            "object"
        ]
    },
    {
        "id": 644,
        "code": "\tpublic static VolumeName of(String value) {\n\t\tAssert.notNull(value, \"Value must not be null\");\n\t\treturn new VolumeName(value);\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "create",
            "a",
            "volume",
            "name",
            "with",
            "a",
            "specific",
            "value"
        ]
    },
    {
        "id": 645,
        "code": "\tstatic Content of(int size, IOSupplier<InputStream> supplier) {\n\t\tAssert.isTrue(size >= 0, \"Size must not be negative\");\n\t\tAssert.notNull(supplier, \"Supplier must not be null\");\n\t\treturn new Content() {\n\n\t\t\t@Override\n\t\t\tpublic int size() {\n\t\t\t\treturn size;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void writeTo(OutputStream outputStream) throws IOException {\n\t\t\t\tFileCopyUtils.copy(supplier.get(), outputStream);\n\t\t\t}\n\n\t\t};\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "new",
            "content",
            "from",
            "the",
            "given",
            "input",
            "stream"
        ]
    },
    {
        "id": 646,
        "code": "\tpublic static int umaskForPath(Path path) throws IOException {\n\t\tAssert.notNull(path, \"Path must not be null\");\n\t\tPosixFileAttributeView attributeView = Files.getFileAttributeView(path, PosixFileAttributeView.class);\n\t\tAssert.state(attributeView != null, \"Unsupported file type for retrieving Posix attributes\");\n\t\treturn posixPermissionsToUmask(attributeView.readAttributes().permissions());\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "integer",
            "representation",
            "of",
            "the",
            "file",
            "permissions",
            "for",
            "a",
            "path",
            "where",
            "the",
            "integer",
            "value",
            "conforms",
            "to",
            "the",
            "a",
            "href",
            "https",
            "en"
        ]
    },
    {
        "id": 647,
        "code": "\tpublic static int posixPermissionsToUmask(Collection<PosixFilePermission> permissions) {\n\t\tAssert.notNull(permissions, \"Permissions must not be null\");\n\t\tint owner = permissionToUmask(permissions, PosixFilePermission.OWNER_EXECUTE, PosixFilePermission.OWNER_WRITE,\n\t\t\t\tPosixFilePermission.OWNER_READ);\n\t\tint group = permissionToUmask(permissions, PosixFilePermission.GROUP_EXECUTE, PosixFilePermission.GROUP_WRITE,\n\t\t\t\tPosixFilePermission.GROUP_READ);\n\t\tint other = permissionToUmask(permissions, PosixFilePermission.OTHERS_EXECUTE, PosixFilePermission.OTHERS_WRITE,\n\t\t\t\tPosixFilePermission.OTHERS_READ);\n\t\treturn Integer.parseInt(\"\" + owner + group + other, 8);\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "integer",
            "representation",
            "of",
            "a",
            "set",
            "of",
            "posix",
            "file",
            "permissions",
            "where",
            "the",
            "integer",
            "value",
            "conforms",
            "to",
            "the",
            "a",
            "href",
            "https",
            "en"
        ]
    },
    {
        "id": 648,
        "code": "\tdefault void directory(String name, Owner owner) throws IOException {\n\t\tdirectory(name, owner, 0755);\n\t}",
        "summary_tokens": [
            "add",
            "a",
            "directory",
            "to",
            "the",
            "content"
        ]
    },
    {
        "id": 649,
        "code": "\tdefault void file(String name, Owner owner, Content content) throws IOException {\n\t\tfile(name, owner, 0644, content);\n\t}",
        "summary_tokens": [
            "write",
            "a",
            "file",
            "to",
            "the",
            "content"
        ]
    },
    {
        "id": 650,
        "code": "\tstatic Owner of(long uid, long gid) {\n\t\treturn new DefaultOwner(uid, gid);\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "create",
            "a",
            "new",
            "owner",
            "with",
            "specified",
            "user",
            "group",
            "identifier"
        ]
    },
    {
        "id": 651,
        "code": "\tstatic TarArchive of(IOConsumer<Layout> layout) {\n\t\treturn (outputStream) -> {\n\t\t\tTarLayoutWriter writer = new TarLayoutWriter(outputStream);\n\t\t\tlayout.accept(writer);\n\t\t\twriter.finish();\n\t\t};\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "create",
            "a",
            "new",
            "tar",
            "archive",
            "instance",
            "with",
            "a",
            "specific",
            "layout"
        ]
    },
    {
        "id": 652,
        "code": "\tstatic TarArchive fromZip(File zip, Owner owner) {\n\t\treturn new ZipFileTarArchive(zip, owner);\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "adapt",
            "a",
            "zip",
            "file",
            "to",
            "tar",
            "archive"
        ]
    },
    {
        "id": 653,
        "code": "\tpublic <T> void get(InputStream content, Class<T> type, Consumer<T> consumer) throws IOException {\n\t\tJsonFactory jsonFactory = this.objectMapper.getFactory();\n\t\tJsonParser parser = jsonFactory.createParser(content);\n\t\twhile (!parser.isClosed()) {\n\t\t\tJsonToken token = parser.nextToken();\n\t\t\tif (token != null && token != JsonToken.END_OBJECT) {\n\t\t\t\tT node = read(parser, type);\n\t\t\t\tif (node != null) {\n\t\t\t\t\tconsumer.accept(node);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}",
        "summary_tokens": [
            "stream",
            "objects",
            "from",
            "the",
            "content",
            "as",
            "they",
            "become",
            "available"
        ]
    },
    {
        "id": 654,
        "code": "\tprotected final JsonNode getNode() {\n\t\treturn this.node;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "source",
            "node",
            "of",
            "the",
            "mapped",
            "object"
        ]
    },
    {
        "id": 655,
        "code": "\tprotected <T> T valueAt(String expression, Class<T> type) {\n\t\treturn valueAt(this, this.node, this.lookup, expression, type);\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "value",
            "at",
            "the",
            "given",
            "json",
            "path",
            "expression",
            "as",
            "a",
            "specific",
            "type"
        ]
    },
    {
        "id": 656,
        "code": "\tprotected static <T extends MappedObject, C> T of(C content, ContentReader<C> reader, Function<JsonNode, T> factory)\n\t\t\tthrows IOException {\n\t\tObjectMapper objectMapper = SharedObjectMapper.get();\n\t\tJsonNode node = reader.read(objectMapper, content);\n\t\treturn factory.apply(node);\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "create",
            "a",
            "new",
            "mapped",
            "object",
            "instance"
        ]
    },
    {
        "id": 657,
        "code": "\tpublic static DomainSocket get(String path) throws IOException {\n\t\tif (Platform.isMac() || isBsdPlatform()) {\n\t\t\treturn new BsdDomainSocket(path);\n\t\t}\n\t\treturn new LinuxDomainSocket(path);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "new",
            "domain",
            "socket",
            "for",
            "the",
            "given",
            "path"
        ]
    },
    {
        "id": 658,
        "code": "\tsynchronized Handle acquire() {\n\t\tthis.referenceCount++;\n\t\treturn (this.status != Status.OPEN) ? this.closedHandler : this.openHandle;\n\t}",
        "summary_tokens": [
            "acquire",
            "an",
            "instance",
            "of",
            "the",
            "actual",
            "handle"
        ]
    },
    {
        "id": 659,
        "code": "\tsynchronized void close() {\n\t\tif (this.status == Status.OPEN) {\n\t\t\tif (this.referenceCount == 0) {\n\t\t\t\tthis.closer.accept(this.openHandle.value);\n\t\t\t\tthis.status = Status.CLOSED;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.status = Status.CLOSE_PENDING;\n\t\t\t}\n\t\t}\n\t}",
        "summary_tokens": [
            "close",
            "the",
            "underlying",
            "file",
            "when",
            "all",
            "handles",
            "have",
            "been",
            "released"
        ]
    },
    {
        "id": 660,
        "code": "\tpublic static NamedPipeSocket get(String path) throws IOException {\n\t\treturn new NamedPipeSocket(path);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "new",
            "named",
            "pipe",
            "socket",
            "for",
            "the",
            "given",
            "path"
        ]
    },
    {
        "id": 661,
        "code": "\tpublic String getId() {\n\t\treturn this.id;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "id",
            "of",
            "the",
            "group",
            "used",
            "as",
            "a",
            "common",
            "prefix",
            "for",
            "all",
            "properties",
            "associated",
            "to",
            "it"
        ]
    },
    {
        "id": 662,
        "code": "\tpublic Map<String, ConfigurationMetadataSource> getSources() {\n\t\treturn this.sources;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "configuration",
            "metadata",
            "source",
            "sources",
            "defining",
            "the",
            "properties",
            "of",
            "this",
            "group"
        ]
    },
    {
        "id": 663,
        "code": "\tpublic Map<String, ConfigurationMetadataProperty> getProperties() {\n\t\treturn this.properties;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "configuration",
            "metadata",
            "property",
            "properties",
            "defined",
            "in",
            "this",
            "group"
        ]
    },
    {
        "id": 664,
        "code": "\tString getSourceType() {\n\t\treturn this.sourceType;\n\t}",
        "summary_tokens": [
            "the",
            "class",
            "name",
            "of",
            "the",
            "source",
            "that",
            "contributed",
            "this",
            "property"
        ]
    },
    {
        "id": 665,
        "code": "\tString getSourceMethod() {\n\t\treturn this.sourceMethod;\n\t}",
        "summary_tokens": [
            "the",
            "full",
            "name",
            "of",
            "the",
            "method",
            "including",
            "parenthesis",
            "and",
            "argument",
            "types",
            "that",
            "contributed",
            "this",
            "property"
        ]
    },
    {
        "id": 666,
        "code": "\tpublic String getId() {\n\t\treturn this.id;\n\t}",
        "summary_tokens": [
            "the",
            "full",
            "identifier",
            "of",
            "the",
            "property",
            "in",
            "lowercase",
            "dashed",
            "form",
            "e"
        ]
    },
    {
        "id": 667,
        "code": "\tpublic String getName() {\n\t\treturn this.name;\n\t}",
        "summary_tokens": [
            "the",
            "name",
            "of",
            "the",
            "property",
            "in",
            "lowercase",
            "dashed",
            "form",
            "e"
        ]
    },
    {
        "id": 668,
        "code": "\tpublic String getType() {\n\t\treturn this.type;\n\t}",
        "summary_tokens": [
            "the",
            "class",
            "name",
            "of",
            "the",
            "data",
            "type",
            "of",
            "the",
            "property"
        ]
    },
    {
        "id": 669,
        "code": "\tpublic String getDescription() {\n\t\treturn this.description;\n\t}",
        "summary_tokens": [
            "a",
            "description",
            "of",
            "the",
            "property",
            "if",
            "any"
        ]
    },
    {
        "id": 670,
        "code": "\tpublic String getShortDescription() {\n\t\treturn this.shortDescription;\n\t}",
        "summary_tokens": [
            "a",
            "single",
            "line",
            "single",
            "sentence",
            "description",
            "of",
            "this",
            "property",
            "if",
            "any"
        ]
    },
    {
        "id": 671,
        "code": "\tpublic Object getDefaultValue() {\n\t\treturn this.defaultValue;\n\t}",
        "summary_tokens": [
            "the",
            "default",
            "value",
            "if",
            "any"
        ]
    },
    {
        "id": 672,
        "code": "\tpublic Hints getHints() {\n\t\treturn this.hints;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "hints",
            "of",
            "this",
            "item"
        ]
    },
    {
        "id": 673,
        "code": "\tpublic Deprecation getDeprecation() {\n\t\treturn this.deprecation;\n\t}",
        "summary_tokens": [
            "the",
            "deprecation",
            "for",
            "this",
            "property",
            "if",
            "any"
        ]
    },
    {
        "id": 674,
        "code": "\tpublic boolean isDeprecated() {\n\t\treturn this.deprecation != null;\n\t}",
        "summary_tokens": [
            "specify",
            "if",
            "the",
            "property",
            "is",
            "deprecated"
        ]
    },
    {
        "id": 675,
        "code": "\tpublic ConfigurationMetadataRepositoryJsonBuilder withJsonResource(InputStream inputStream, Charset charset)\n\t\t\tthrows IOException {\n\t\tif (inputStream == null) {\n\t\t\tthrow new IllegalArgumentException(\"InputStream must not be null.\");\n\t\t}\n\t\tthis.repositories.add(add(inputStream, charset));\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "add",
            "the",
            "content",
            "of",
            "a",
            "configuration",
            "metadata",
            "repository",
            "defined",
            "by",
            "the",
            "specified",
            "input",
            "stream",
            "json",
            "document",
            "using",
            "the",
            "specified",
            "charset"
        ]
    },
    {
        "id": 676,
        "code": "\tpublic ConfigurationMetadataRepository build() {\n\t\tSimpleConfigurationMetadataRepository result = new SimpleConfigurationMetadataRepository();\n\t\tfor (SimpleConfigurationMetadataRepository repository : this.repositories) {\n\t\t\tresult.include(repository);\n\t\t}\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "build",
            "a",
            "configuration",
            "metadata",
            "repository",
            "with",
            "the",
            "current",
            "state",
            "of",
            "this",
            "builder"
        ]
    },
    {
        "id": 677,
        "code": "\tpublic static ConfigurationMetadataRepositoryJsonBuilder create(Charset defaultCharset) {\n\t\treturn new ConfigurationMetadataRepositoryJsonBuilder(defaultCharset);\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "new",
            "builder",
            "instance",
            "using",
            "the",
            "specified",
            "default",
            "charset"
        ]
    },
    {
        "id": 678,
        "code": "\tpublic String getGroupId() {\n\t\treturn this.groupId;\n\t}",
        "summary_tokens": [
            "the",
            "identifier",
            "of",
            "the",
            "group",
            "to",
            "which",
            "this",
            "source",
            "is",
            "associated"
        ]
    },
    {
        "id": 679,
        "code": "\tpublic String getType() {\n\t\treturn this.type;\n\t}",
        "summary_tokens": [
            "the",
            "type",
            "of",
            "the",
            "source"
        ]
    },
    {
        "id": 680,
        "code": "\tpublic String getDescription() {\n\t\treturn this.description;\n\t}",
        "summary_tokens": [
            "a",
            "description",
            "of",
            "this",
            "source",
            "if",
            "any"
        ]
    },
    {
        "id": 681,
        "code": "\tpublic String getShortDescription() {\n\t\treturn this.shortDescription;\n\t}",
        "summary_tokens": [
            "a",
            "single",
            "line",
            "single",
            "sentence",
            "description",
            "of",
            "this",
            "source",
            "if",
            "any"
        ]
    },
    {
        "id": 682,
        "code": "\tpublic String getSourceType() {\n\t\treturn this.sourceType;\n\t}",
        "summary_tokens": [
            "the",
            "type",
            "where",
            "this",
            "source",
            "is",
            "defined"
        ]
    },
    {
        "id": 683,
        "code": "\tpublic String getSourceMethod() {\n\t\treturn this.sourceMethod;\n\t}",
        "summary_tokens": [
            "the",
            "method",
            "name",
            "that",
            "defines",
            "this",
            "source",
            "if",
            "any"
        ]
    },
    {
        "id": 684,
        "code": "\tpublic Map<String, ConfigurationMetadataProperty> getProperties() {\n\t\treturn this.properties;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "properties",
            "defined",
            "by",
            "this",
            "source"
        ]
    },
    {
        "id": 685,
        "code": "\tpublic Level getLevel() {\n\t\treturn this.level;\n\t}",
        "summary_tokens": [
            "define",
            "the",
            "level",
            "of",
            "deprecation"
        ]
    },
    {
        "id": 686,
        "code": "\tpublic String getReason() {\n\t\treturn this.reason;\n\t}",
        "summary_tokens": [
            "a",
            "reason",
            "why",
            "the",
            "related",
            "property",
            "is",
            "deprecated",
            "if",
            "any"
        ]
    },
    {
        "id": 687,
        "code": "\tpublic String getShortReason() {\n\t\treturn this.shortReason;\n\t}",
        "summary_tokens": [
            "a",
            "single",
            "line",
            "single",
            "sentence",
            "reason",
            "why",
            "the",
            "related",
            "property",
            "is",
            "deprecated",
            "if",
            "any"
        ]
    },
    {
        "id": 688,
        "code": "\tpublic String getReplacement() {\n\t\treturn this.replacement;\n\t}",
        "summary_tokens": [
            "the",
            "full",
            "name",
            "of",
            "the",
            "property",
            "that",
            "replaces",
            "the",
            "related",
            "deprecated",
            "property",
            "if",
            "any"
        ]
    },
    {
        "id": 689,
        "code": "\tpublic List<ValueHint> getKeyHints() {\n\t\treturn this.keyHints;\n\t}",
        "summary_tokens": [
            "the",
            "list",
            "of",
            "well",
            "defined",
            "keys",
            "if",
            "any"
        ]
    },
    {
        "id": 690,
        "code": "\tpublic List<ValueProvider> getKeyProviders() {\n\t\treturn this.keyProviders;\n\t}",
        "summary_tokens": [
            "the",
            "value",
            "providers",
            "that",
            "are",
            "applicable",
            "to",
            "the",
            "keys",
            "of",
            "this",
            "item"
        ]
    },
    {
        "id": 691,
        "code": "\tpublic List<ValueHint> getValueHints() {\n\t\treturn this.valueHints;\n\t}",
        "summary_tokens": [
            "the",
            "list",
            "of",
            "well",
            "defined",
            "values",
            "if",
            "any"
        ]
    },
    {
        "id": 692,
        "code": "\tpublic List<ValueProvider> getValueProviders() {\n\t\treturn this.valueProviders;\n\t}",
        "summary_tokens": [
            "the",
            "value",
            "providers",
            "that",
            "are",
            "applicable",
            "to",
            "this",
            "item"
        ]
    },
    {
        "id": 693,
        "code": "\tprivate void resolveName(ConfigurationMetadataItem item) {\n\t\titem.setName(item.getId()); \n\t\tConfigurationMetadataSource source = getSource(item);\n\t\tif (source != null) {\n\t\t\tString groupId = source.getGroupId();\n\t\t\tString dottedPrefix = groupId + \".\";\n\t\t\tString id = item.getId();\n\t\t\tif (hasLength(groupId) && id.startsWith(dottedPrefix)) {\n\t\t\t\tString name = id.substring(dottedPrefix.length());\n\t\t\t\titem.setName(name);\n\t\t\t}\n\t\t}\n\t}",
        "summary_tokens": [
            "resolve",
            "the",
            "name",
            "of",
            "an",
            "item",
            "against",
            "this",
            "instance"
        ]
    },
    {
        "id": 694,
        "code": "\tpublic void add(ConfigurationMetadataProperty property, ConfigurationMetadataSource source) {\n\t\tif (source != null) {\n\t\t\tputIfAbsent(source.getProperties(), property.getId(), property);\n\t\t}\n\t\tputIfAbsent(getGroup(source).getProperties(), property.getId(), property);\n\t}",
        "summary_tokens": [
            "add",
            "a",
            "configuration",
            "metadata",
            "property",
            "with",
            "the",
            "configuration",
            "metadata",
            "source",
            "source",
            "that",
            "defines",
            "it",
            "if",
            "any"
        ]
    },
    {
        "id": 695,
        "code": "\tpublic void include(ConfigurationMetadataRepository repository) {\n\t\tfor (ConfigurationMetadataGroup group : repository.getAllGroups().values()) {\n\t\t\tConfigurationMetadataGroup existingGroup = this.allGroups.get(group.getId());\n\t\t\tif (existingGroup == null) {\n\t\t\t\tthis.allGroups.put(group.getId(), group);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t\n\t\t\t\tgroup.getProperties().forEach((name, value) -> putIfAbsent(existingGroup.getProperties(), name, value));\n\t\t\t\t\n\t\t\t\tgroup.getSources().forEach((name, value) -> addOrMergeSource(existingGroup.getSources(), name, value));\n\t\t\t}\n\t\t}\n\n\t}",
        "summary_tokens": [
            "merge",
            "the",
            "content",
            "of",
            "the",
            "specified",
            "repository",
            "to",
            "this",
            "repository"
        ]
    },
    {
        "id": 696,
        "code": "\tpublic Object getValue() {\n\t\treturn this.value;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "hint",
            "value"
        ]
    },
    {
        "id": 697,
        "code": "\tpublic String getDescription() {\n\t\treturn this.description;\n\t}",
        "summary_tokens": [
            "a",
            "description",
            "of",
            "this",
            "value",
            "if",
            "any"
        ]
    },
    {
        "id": 698,
        "code": "\tpublic String getShortDescription() {\n\t\treturn this.shortDescription;\n\t}",
        "summary_tokens": [
            "a",
            "single",
            "line",
            "single",
            "sentence",
            "description",
            "of",
            "this",
            "hint",
            "if",
            "any"
        ]
    },
    {
        "id": 699,
        "code": "\tpublic String getName() {\n\t\treturn this.name;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "name",
            "of",
            "the",
            "provider"
        ]
    },
    {
        "id": 700,
        "code": "\tpublic int length() {\n\t\treturn this.values.size();\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "number",
            "of",
            "values",
            "in",
            "this",
            "array"
        ]
    },
    {
        "id": 701,
        "code": "\tpublic JSONArray put(int index, Object value) throws JSONException {\n\t\tif (value instanceof Number) {\n\t\t\t\n\t\t\t\n\t\t\tJSON.checkDouble(((Number) value).doubleValue());\n\t\t}\n\t\twhile (this.values.size() <= index) {\n\t\t\tthis.values.add(null);\n\t\t}\n\t\tthis.values.set(index, value);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "value",
            "at",
            "index",
            "to",
            "value",
            "null",
            "padding",
            "this",
            "array",
            "to",
            "the",
            "required",
            "length",
            "if",
            "necessary"
        ]
    },
    {
        "id": 702,
        "code": "\tpublic boolean isNull(int index) {\n\t\tObject value = opt(index);\n\t\treturn value == null || value == JSONObject.NULL;\n\t}",
        "summary_tokens": [
            "returns",
            "true",
            "if",
            "this",
            "array",
            "has",
            "no",
            "value",
            "at",
            "index",
            "or",
            "if",
            "its",
            "value",
            "is",
            "the",
            "null",
            "reference",
            "or",
            "jsonobject",
            "null"
        ]
    },
    {
        "id": 703,
        "code": "\tpublic Object get(int index) throws JSONException {\n\t\ttry {\n\t\t\tObject value = this.values.get(index);\n\t\t\tif (value == null) {\n\t\t\t\tthrow new JSONException(\"Value at \" + index + \" is null.\");\n\t\t\t}\n\t\t\treturn value;\n\t\t}\n\t\tcatch (IndexOutOfBoundsException e) {\n\t\t\tthrow new JSONException(\"Index \" + index + \" out of range [0..\" + this.values.size() + \")\");\n\t\t}\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "at",
            "index"
        ]
    },
    {
        "id": 704,
        "code": "\tpublic Object opt(int index) {\n\t\tif (index < 0 || index >= this.values.size()) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.values.get(index);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "at",
            "index",
            "or",
            "null",
            "if",
            "the",
            "array",
            "has",
            "no",
            "value",
            "at",
            "index"
        ]
    },
    {
        "id": 705,
        "code": "\tpublic Object remove(int index) {\n\t\tif (index < 0 || index >= this.values.size()) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.values.remove(index);\n\t}",
        "summary_tokens": [
            "removes",
            "and",
            "returns",
            "the",
            "value",
            "at",
            "index",
            "or",
            "null",
            "if",
            "the",
            "array",
            "has",
            "no",
            "value",
            "at",
            "index"
        ]
    },
    {
        "id": 706,
        "code": "\tpublic boolean getBoolean(int index) throws JSONException {\n\t\tObject object = get(index);\n\t\tBoolean result = JSON.toBoolean(object);\n\t\tif (result == null) {\n\t\t\tthrow JSON.typeMismatch(index, object, \"boolean\");\n\t\t}\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "at",
            "index",
            "if",
            "it",
            "exists",
            "and",
            "is",
            "a",
            "boolean",
            "or",
            "can",
            "be",
            "coerced",
            "to",
            "a",
            "boolean"
        ]
    },
    {
        "id": 707,
        "code": "\tpublic boolean optBoolean(int index, boolean fallback) {\n\t\tObject object = opt(index);\n\t\tBoolean result = JSON.toBoolean(object);\n\t\treturn result != null ? result : fallback;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "at",
            "index",
            "if",
            "it",
            "exists",
            "and",
            "is",
            "a",
            "boolean",
            "or",
            "can",
            "be",
            "coerced",
            "to",
            "a",
            "boolean"
        ]
    },
    {
        "id": 708,
        "code": "\tpublic double getDouble(int index) throws JSONException {\n\t\tObject object = get(index);\n\t\tDouble result = JSON.toDouble(object);\n\t\tif (result == null) {\n\t\t\tthrow JSON.typeMismatch(index, object, \"double\");\n\t\t}\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "at",
            "index",
            "if",
            "it",
            "exists",
            "and",
            "is",
            "a",
            "double",
            "or",
            "can",
            "be",
            "coerced",
            "to",
            "a",
            "double"
        ]
    },
    {
        "id": 709,
        "code": "\tpublic double optDouble(int index, double fallback) {\n\t\tObject object = opt(index);\n\t\tDouble result = JSON.toDouble(object);\n\t\treturn result != null ? result : fallback;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "at",
            "index",
            "if",
            "it",
            "exists",
            "and",
            "is",
            "a",
            "double",
            "or",
            "can",
            "be",
            "coerced",
            "to",
            "a",
            "double"
        ]
    },
    {
        "id": 710,
        "code": "\tpublic int getInt(int index) throws JSONException {\n\t\tObject object = get(index);\n\t\tInteger result = JSON.toInteger(object);\n\t\tif (result == null) {\n\t\t\tthrow JSON.typeMismatch(index, object, \"int\");\n\t\t}\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "at",
            "index",
            "if",
            "it",
            "exists",
            "and",
            "is",
            "an",
            "int",
            "or",
            "can",
            "be",
            "coerced",
            "to",
            "an",
            "int"
        ]
    },
    {
        "id": 711,
        "code": "\tpublic int optInt(int index, int fallback) {\n\t\tObject object = opt(index);\n\t\tInteger result = JSON.toInteger(object);\n\t\treturn result != null ? result : fallback;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "at",
            "index",
            "if",
            "it",
            "exists",
            "and",
            "is",
            "an",
            "int",
            "or",
            "can",
            "be",
            "coerced",
            "to",
            "an",
            "int"
        ]
    },
    {
        "id": 712,
        "code": "\tpublic long getLong(int index) throws JSONException {\n\t\tObject object = get(index);\n\t\tLong result = JSON.toLong(object);\n\t\tif (result == null) {\n\t\t\tthrow JSON.typeMismatch(index, object, \"long\");\n\t\t}\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "at",
            "index",
            "if",
            "it",
            "exists",
            "and",
            "is",
            "a",
            "long",
            "or",
            "can",
            "be",
            "coerced",
            "to",
            "a",
            "long"
        ]
    },
    {
        "id": 713,
        "code": "\tpublic long optLong(int index, long fallback) {\n\t\tObject object = opt(index);\n\t\tLong result = JSON.toLong(object);\n\t\treturn result != null ? result : fallback;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "at",
            "index",
            "if",
            "it",
            "exists",
            "and",
            "is",
            "a",
            "long",
            "or",
            "can",
            "be",
            "coerced",
            "to",
            "a",
            "long"
        ]
    },
    {
        "id": 714,
        "code": "\tpublic String getString(int index) throws JSONException {\n\t\tObject object = get(index);\n\t\tString result = JSON.toString(object);\n\t\tif (result == null) {\n\t\t\tthrow JSON.typeMismatch(index, object, \"String\");\n\t\t}\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "at",
            "index",
            "if",
            "it",
            "exists",
            "coercing",
            "it",
            "if",
            "necessary"
        ]
    },
    {
        "id": 715,
        "code": "\tpublic String optString(int index, String fallback) {\n\t\tObject object = opt(index);\n\t\tString result = JSON.toString(object);\n\t\treturn result != null ? result : fallback;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "at",
            "index",
            "if",
            "it",
            "exists",
            "coercing",
            "it",
            "if",
            "necessary"
        ]
    },
    {
        "id": 716,
        "code": "\tpublic JSONArray getJSONArray(int index) throws JSONException {\n\t\tObject object = get(index);\n\t\tif (object instanceof JSONArray) {\n\t\t\treturn (JSONArray) object;\n\t\t}\n\t\telse {\n\t\t\tthrow JSON.typeMismatch(index, object, \"JSONArray\");\n\t\t}\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "at",
            "index",
            "if",
            "it",
            "exists",
            "and",
            "is",
            "a",
            "jsonarray"
        ]
    },
    {
        "id": 717,
        "code": "\tpublic JSONArray optJSONArray(int index) {\n\t\tObject object = opt(index);\n\t\treturn object instanceof JSONArray ? (JSONArray) object : null;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "at",
            "index",
            "if",
            "it",
            "exists",
            "and",
            "is",
            "a",
            "jsonarray"
        ]
    },
    {
        "id": 718,
        "code": "\tpublic JSONObject getJSONObject(int index) throws JSONException {\n\t\tObject object = get(index);\n\t\tif (object instanceof JSONObject) {\n\t\t\treturn (JSONObject) object;\n\t\t}\n\t\telse {\n\t\t\tthrow JSON.typeMismatch(index, object, \"JSONObject\");\n\t\t}\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "at",
            "index",
            "if",
            "it",
            "exists",
            "and",
            "is",
            "a",
            "jsonobject"
        ]
    },
    {
        "id": 719,
        "code": "\tpublic JSONObject optJSONObject(int index) {\n\t\tObject object = opt(index);\n\t\treturn object instanceof JSONObject ? (JSONObject) object : null;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "at",
            "index",
            "if",
            "it",
            "exists",
            "and",
            "is",
            "a",
            "jsonobject"
        ]
    },
    {
        "id": 720,
        "code": "\tpublic JSONObject toJSONObject(JSONArray names) throws JSONException {\n\t\tJSONObject result = new JSONObject();\n\t\tint length = Math.min(names.length(), this.values.size());\n\t\tif (length == 0) {\n\t\t\treturn null;\n\t\t}\n\t\tfor (int i = 0; i < length; i++) {\n\t\t\tString name = JSON.toString(names.opt(i));\n\t\t\tresult.put(name, opt(i));\n\t\t}\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "new",
            "object",
            "whose",
            "values",
            "are",
            "the",
            "values",
            "in",
            "this",
            "array",
            "and",
            "whose",
            "names",
            "are",
            "the",
            "values",
            "in",
            "names"
        ]
    },
    {
        "id": 721,
        "code": "\tpublic String join(String separator) throws JSONException {\n\t\tJSONStringer stringer = new JSONStringer();\n\t\tstringer.open(JSONStringer.Scope.NULL, \"\");\n\t\tfor (int i = 0, size = this.values.size(); i < size; i++) {\n\t\t\tif (i > 0) {\n\t\t\t\tstringer.out.append(separator);\n\t\t\t}\n\t\t\tstringer.value(this.values.get(i));\n\t\t}\n\t\tstringer.close(JSONStringer.Scope.NULL, JSONStringer.Scope.NULL, \"\");\n\t\treturn stringer.out.toString();\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "new",
            "string",
            "by",
            "alternating",
            "this",
            "array",
            "s",
            "values",
            "with",
            "separator"
        ]
    },
    {
        "id": 722,
        "code": "\tpublic String toString(int indentSpaces) throws JSONException {\n\t\tJSONStringer stringer = new JSONStringer(indentSpaces);\n\t\twriteTo(stringer);\n\t\treturn stringer.toString();\n\t}",
        "summary_tokens": [
            "encodes",
            "this",
            "array",
            "as",
            "a",
            "human",
            "readable",
            "json",
            "string",
            "for",
            "debugging",
            "such",
            "as",
            "pre",
            "0",
            "0",
            "pre",
            "indent",
            "spaces",
            "the",
            "number",
            "of",
            "spaces",
            "to",
            "indent",
            "for",
            "each",
            "level",
            "of",
            "nesting"
        ]
    },
    {
        "id": 723,
        "code": "\tpublic int length() {\n\t\treturn this.nameValuePairs.size();\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "number",
            "of",
            "name",
            "value",
            "mappings",
            "in",
            "this",
            "object"
        ]
    },
    {
        "id": 724,
        "code": "\tpublic JSONObject put(String name, Object value) throws JSONException {\n\t\tif (value == null) {\n\t\t\tthis.nameValuePairs.remove(name);\n\t\t\treturn this;\n\t\t}\n\t\tif (value instanceof Number) {\n\t\t\t\n\t\t\t\n\t\t\tJSON.checkDouble(((Number) value).doubleValue());\n\t\t}\n\t\tthis.nameValuePairs.put(checkName(name), value);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "maps",
            "name",
            "to",
            "value",
            "clobbering",
            "any",
            "existing",
            "name",
            "value",
            "mapping",
            "with",
            "the",
            "same",
            "name"
        ]
    },
    {
        "id": 725,
        "code": "\tpublic JSONObject putOpt(String name, Object value) throws JSONException {\n\t\tif (name == null || value == null) {\n\t\t\treturn this;\n\t\t}\n\t\treturn put(name, value);\n\t}",
        "summary_tokens": [
            "equivalent",
            "to",
            "put",
            "name",
            "value",
            "when",
            "both",
            "parameters",
            "are",
            "non",
            "null",
            "does",
            "nothing",
            "otherwise"
        ]
    },
    {
        "id": 726,
        "code": "\tpublic JSONObject accumulate(String name, Object value) throws JSONException {\n\t\tObject current = this.nameValuePairs.get(checkName(name));\n\t\tif (current == null) {\n\t\t\treturn put(name, value);\n\t\t}\n\n\t\t\n\t\tif (value instanceof Number) {\n\t\t\tJSON.checkDouble(((Number) value).doubleValue());\n\t\t}\n\n\t\tif (current instanceof JSONArray) {\n\t\t\tJSONArray array = (JSONArray) current;\n\t\t\tarray.put(value);\n\t\t}\n\t\telse {\n\t\t\tJSONArray array = new JSONArray();\n\t\t\tarray.put(current);\n\t\t\tarray.put(value);\n\t\t\tthis.nameValuePairs.put(name, array);\n\t\t}\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "appends",
            "value",
            "to",
            "the",
            "array",
            "already",
            "mapped",
            "to",
            "name"
        ]
    },
    {
        "id": 727,
        "code": "\tpublic Object remove(String name) {\n\t\treturn this.nameValuePairs.remove(name);\n\t}",
        "summary_tokens": [
            "removes",
            "the",
            "named",
            "mapping",
            "if",
            "it",
            "exists",
            "does",
            "nothing",
            "otherwise"
        ]
    },
    {
        "id": 728,
        "code": "\tpublic boolean isNull(String name) {\n\t\tObject value = this.nameValuePairs.get(name);\n\t\treturn value == null || value == NULL;\n\t}",
        "summary_tokens": [
            "returns",
            "true",
            "if",
            "this",
            "object",
            "has",
            "no",
            "mapping",
            "for",
            "name",
            "or",
            "if",
            "it",
            "has",
            "a",
            "mapping",
            "whose",
            "value",
            "is",
            "null"
        ]
    },
    {
        "id": 729,
        "code": "\tpublic boolean has(String name) {\n\t\treturn this.nameValuePairs.containsKey(name);\n\t}",
        "summary_tokens": [
            "returns",
            "true",
            "if",
            "this",
            "object",
            "has",
            "a",
            "mapping",
            "for",
            "name"
        ]
    },
    {
        "id": 730,
        "code": "\tpublic Object get(String name) throws JSONException {\n\t\tObject result = this.nameValuePairs.get(name);\n\t\tif (result == null) {\n\t\t\tthrow new JSONException(\"No value for \" + name);\n\t\t}\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "mapped",
            "by",
            "name"
        ]
    },
    {
        "id": 731,
        "code": "\tpublic Object opt(String name) {\n\t\treturn this.nameValuePairs.get(name);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "mapped",
            "by",
            "name",
            "or",
            "null",
            "if",
            "no",
            "such",
            "mapping",
            "exists"
        ]
    },
    {
        "id": 732,
        "code": "\tpublic boolean getBoolean(String name) throws JSONException {\n\t\tObject object = get(name);\n\t\tBoolean result = JSON.toBoolean(object);\n\t\tif (result == null) {\n\t\t\tthrow JSON.typeMismatch(name, object, \"boolean\");\n\t\t}\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "mapped",
            "by",
            "name",
            "if",
            "it",
            "exists",
            "and",
            "is",
            "a",
            "boolean",
            "or",
            "can",
            "be",
            "coerced",
            "to",
            "a",
            "boolean"
        ]
    },
    {
        "id": 733,
        "code": "\tpublic boolean optBoolean(String name, boolean fallback) {\n\t\tObject object = opt(name);\n\t\tBoolean result = JSON.toBoolean(object);\n\t\treturn result != null ? result : fallback;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "mapped",
            "by",
            "name",
            "if",
            "it",
            "exists",
            "and",
            "is",
            "a",
            "boolean",
            "or",
            "can",
            "be",
            "coerced",
            "to",
            "a",
            "boolean"
        ]
    },
    {
        "id": 734,
        "code": "\tpublic double getDouble(String name) throws JSONException {\n\t\tObject object = get(name);\n\t\tDouble result = JSON.toDouble(object);\n\t\tif (result == null) {\n\t\t\tthrow JSON.typeMismatch(name, object, \"double\");\n\t\t}\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "mapped",
            "by",
            "name",
            "if",
            "it",
            "exists",
            "and",
            "is",
            "a",
            "double",
            "or",
            "can",
            "be",
            "coerced",
            "to",
            "a",
            "double"
        ]
    },
    {
        "id": 735,
        "code": "\tpublic double optDouble(String name, double fallback) {\n\t\tObject object = opt(name);\n\t\tDouble result = JSON.toDouble(object);\n\t\treturn result != null ? result : fallback;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "mapped",
            "by",
            "name",
            "if",
            "it",
            "exists",
            "and",
            "is",
            "a",
            "double",
            "or",
            "can",
            "be",
            "coerced",
            "to",
            "a",
            "double"
        ]
    },
    {
        "id": 736,
        "code": "\tpublic int getInt(String name) throws JSONException {\n\t\tObject object = get(name);\n\t\tInteger result = JSON.toInteger(object);\n\t\tif (result == null) {\n\t\t\tthrow JSON.typeMismatch(name, object, \"int\");\n\t\t}\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "mapped",
            "by",
            "name",
            "if",
            "it",
            "exists",
            "and",
            "is",
            "an",
            "int",
            "or",
            "can",
            "be",
            "coerced",
            "to",
            "an",
            "int"
        ]
    },
    {
        "id": 737,
        "code": "\tpublic int optInt(String name, int fallback) {\n\t\tObject object = opt(name);\n\t\tInteger result = JSON.toInteger(object);\n\t\treturn result != null ? result : fallback;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "mapped",
            "by",
            "name",
            "if",
            "it",
            "exists",
            "and",
            "is",
            "an",
            "int",
            "or",
            "can",
            "be",
            "coerced",
            "to",
            "an",
            "int"
        ]
    },
    {
        "id": 738,
        "code": "\tpublic long getLong(String name) throws JSONException {\n\t\tObject object = get(name);\n\t\tLong result = JSON.toLong(object);\n\t\tif (result == null) {\n\t\t\tthrow JSON.typeMismatch(name, object, \"long\");\n\t\t}\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "mapped",
            "by",
            "name",
            "if",
            "it",
            "exists",
            "and",
            "is",
            "a",
            "long",
            "or",
            "can",
            "be",
            "coerced",
            "to",
            "a",
            "long"
        ]
    },
    {
        "id": 739,
        "code": "\tpublic long optLong(String name, long fallback) {\n\t\tObject object = opt(name);\n\t\tLong result = JSON.toLong(object);\n\t\treturn result != null ? result : fallback;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "mapped",
            "by",
            "name",
            "if",
            "it",
            "exists",
            "and",
            "is",
            "a",
            "long",
            "or",
            "can",
            "be",
            "coerced",
            "to",
            "a",
            "long"
        ]
    },
    {
        "id": 740,
        "code": "\tpublic String getString(String name) throws JSONException {\n\t\tObject object = get(name);\n\t\tString result = JSON.toString(object);\n\t\tif (result == null) {\n\t\t\tthrow JSON.typeMismatch(name, object, \"String\");\n\t\t}\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "mapped",
            "by",
            "name",
            "if",
            "it",
            "exists",
            "coercing",
            "it",
            "if",
            "necessary"
        ]
    },
    {
        "id": 741,
        "code": "\tpublic String optString(String name, String fallback) {\n\t\tObject object = opt(name);\n\t\tString result = JSON.toString(object);\n\t\treturn result != null ? result : fallback;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "mapped",
            "by",
            "name",
            "if",
            "it",
            "exists",
            "coercing",
            "it",
            "if",
            "necessary"
        ]
    },
    {
        "id": 742,
        "code": "\tpublic JSONArray getJSONArray(String name) throws JSONException {\n\t\tObject object = get(name);\n\t\tif (object instanceof JSONArray) {\n\t\t\treturn (JSONArray) object;\n\t\t}\n\t\telse {\n\t\t\tthrow JSON.typeMismatch(name, object, \"JSONArray\");\n\t\t}\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "mapped",
            "by",
            "name",
            "if",
            "it",
            "exists",
            "and",
            "is",
            "a",
            "jsonarray"
        ]
    },
    {
        "id": 743,
        "code": "\tpublic JSONArray optJSONArray(String name) {\n\t\tObject object = opt(name);\n\t\treturn object instanceof JSONArray ? (JSONArray) object : null;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "mapped",
            "by",
            "name",
            "if",
            "it",
            "exists",
            "and",
            "is",
            "a",
            "jsonarray"
        ]
    },
    {
        "id": 744,
        "code": "\tpublic JSONObject getJSONObject(String name) throws JSONException {\n\t\tObject object = get(name);\n\t\tif (object instanceof JSONObject) {\n\t\t\treturn (JSONObject) object;\n\t\t}\n\t\telse {\n\t\t\tthrow JSON.typeMismatch(name, object, \"JSONObject\");\n\t\t}\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "mapped",
            "by",
            "name",
            "if",
            "it",
            "exists",
            "and",
            "is",
            "a",
            "jsonobject"
        ]
    },
    {
        "id": 745,
        "code": "\tpublic JSONObject optJSONObject(String name) {\n\t\tObject object = opt(name);\n\t\treturn object instanceof JSONObject ? (JSONObject) object : null;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "mapped",
            "by",
            "name",
            "if",
            "it",
            "exists",
            "and",
            "is",
            "a",
            "jsonobject"
        ]
    },
    {
        "id": 746,
        "code": "\tpublic JSONArray toJSONArray(JSONArray names) {\n\t\tJSONArray result = new JSONArray();\n\t\tif (names == null) {\n\t\t\treturn null;\n\t\t}\n\t\tint length = names.length();\n\t\tif (length == 0) {\n\t\t\treturn null;\n\t\t}\n\t\tfor (int i = 0; i < length; i++) {\n\t\t\tString name = JSON.toString(names.opt(i));\n\t\t\tresult.put(opt(name));\n\t\t}\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "returns",
            "an",
            "array",
            "with",
            "the",
            "values",
            "corresponding",
            "to",
            "names"
        ]
    },
    {
        "id": 747,
        "code": "\tpublic Iterator keys() {\n\t\treturn this.nameValuePairs.keySet().iterator();\n\t}",
        "summary_tokens": [
            "returns",
            "an",
            "iterator",
            "of",
            "the",
            "string",
            "names",
            "in",
            "this",
            "object"
        ]
    },
    {
        "id": 748,
        "code": "\tpublic JSONArray names() {\n\t\treturn this.nameValuePairs.isEmpty() ? null : new JSONArray(new ArrayList<>(this.nameValuePairs.keySet()));\n\t}",
        "summary_tokens": [
            "returns",
            "an",
            "array",
            "containing",
            "the",
            "string",
            "names",
            "in",
            "this",
            "object"
        ]
    },
    {
        "id": 749,
        "code": "\tpublic String toString(int indentSpaces) throws JSONException {\n\t\tJSONStringer stringer = new JSONStringer(indentSpaces);\n\t\twriteTo(stringer);\n\t\treturn stringer.toString();\n\t}",
        "summary_tokens": [
            "encodes",
            "this",
            "object",
            "as",
            "a",
            "human",
            "readable",
            "json",
            "string",
            "for",
            "debugging",
            "such",
            "as",
            "pre",
            "query",
            "pizza",
            "locations",
            "0",
            "0",
            "pre",
            "indent",
            "spaces",
            "the",
            "number",
            "of",
            "spaces",
            "to",
            "indent",
            "for",
            "each",
            "level",
            "of",
            "nesting"
        ]
    },
    {
        "id": 750,
        "code": "\tpublic static String numberToString(Number number) throws JSONException {\n\t\tif (number == null) {\n\t\t\tthrow new JSONException(\"Number must be non-null\");\n\t\t}\n\n\t\tdouble doubleValue = number.doubleValue();\n\t\tJSON.checkDouble(doubleValue);\n\n\t\t\n\t\tif (number.equals(NEGATIVE_ZERO)) {\n\t\t\treturn \"-0\";\n\t\t}\n\n\t\tlong longValue = number.longValue();\n\t\tif (doubleValue == longValue) {\n\t\t\treturn Long.toString(longValue);\n\t\t}\n\n\t\treturn number.toString();\n\t}",
        "summary_tokens": [
            "encodes",
            "the",
            "number",
            "as",
            "a",
            "json",
            "string"
        ]
    },
    {
        "id": 751,
        "code": "\tpublic static String quote(String data) {\n\t\tif (data == null) {\n\t\t\treturn \"\\\"\\\"\";\n\t\t}\n\t\ttry {\n\t\t\tJSONStringer stringer = new JSONStringer();\n\t\t\tstringer.open(JSONStringer.Scope.NULL, \"\");\n\t\t\tstringer.value(data);\n\t\t\tstringer.close(JSONStringer.Scope.NULL, JSONStringer.Scope.NULL, \"\");\n\t\t\treturn stringer.toString();\n\t\t}\n\t\tcatch (JSONException e) {\n\t\t\tthrow new AssertionError();\n\t\t}\n\t}",
        "summary_tokens": [
            "encodes",
            "data",
            "as",
            "a",
            "json",
            "string"
        ]
    },
    {
        "id": 752,
        "code": "\tpublic static Object wrap(Object o) {\n\t\tif (o == null) {\n\t\t\treturn NULL;\n\t\t}\n\t\tif (o instanceof JSONArray || o instanceof JSONObject) {\n\t\t\treturn o;\n\t\t}\n\t\tif (o.equals(NULL)) {\n\t\t\treturn o;\n\t\t}\n\t\ttry {\n\t\t\tif (o instanceof Collection) {\n\t\t\t\treturn new JSONArray((Collection) o);\n\t\t\t}\n\t\t\telse if (o.getClass().isArray()) {\n\t\t\t\treturn new JSONArray(o);\n\t\t\t}\n\t\t\tif (o instanceof Map) {\n\t\t\t\treturn new JSONObject((Map) o);\n\t\t\t}\n\t\t\tif (o instanceof Boolean || o instanceof Byte || o instanceof Character || o instanceof Double\n\t\t\t\t\t|| o instanceof Float || o instanceof Integer || o instanceof Long || o instanceof Short\n\t\t\t\t\t|| o instanceof String) {\n\t\t\t\treturn o;\n\t\t\t}\n\t\t\tif (o.getClass().getPackage().getName().startsWith(\"java.\")) {\n\t\t\t\treturn o.toString();\n\t\t\t}\n\t\t}\n\t\tcatch (Exception ignored) {\n\t\t}\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "wraps",
            "the",
            "given",
            "object",
            "if",
            "necessary"
        ]
    },
    {
        "id": 753,
        "code": "\tpublic JSONStringer array() throws JSONException {\n\t\treturn open(Scope.EMPTY_ARRAY, \"[\");\n\t}",
        "summary_tokens": [
            "begins",
            "encoding",
            "a",
            "new",
            "array"
        ]
    },
    {
        "id": 754,
        "code": "\tpublic JSONStringer endArray() throws JSONException {\n\t\treturn close(Scope.EMPTY_ARRAY, Scope.NONEMPTY_ARRAY, \"]\");\n\t}",
        "summary_tokens": [
            "ends",
            "encoding",
            "the",
            "current",
            "array"
        ]
    },
    {
        "id": 755,
        "code": "\tpublic JSONStringer object() throws JSONException {\n\t\treturn open(Scope.EMPTY_OBJECT, \"{\");\n\t}\n\n\t\n\tpublic JSONStringer endObject() throws JSONException {\n\t\treturn close(Scope.EMPTY_OBJECT, Scope.NONEMPTY_OBJECT, \"}\");\n\t}",
        "summary_tokens": [
            "begins",
            "encoding",
            "a",
            "new",
            "object"
        ]
    },
    {
        "id": 756,
        "code": "\tpublic JSONStringer endObject() throws JSONException {\n\t\treturn close(Scope.EMPTY_OBJECT, Scope.NONEMPTY_OBJECT, \"}\");",
        "summary_tokens": [
            "ends",
            "encoding",
            "the",
            "current",
            "object"
        ]
    },
    {
        "id": 757,
        "code": "\tJSONStringer open(Scope empty, String openBracket) throws JSONException {\n\t\tif (this.stack.isEmpty() && this.out.length() > 0) {\n\t\t\tthrow new JSONException(\"Nesting problem: multiple top-level roots\");\n\t\t}\n\t\tbeforeValue();\n\t\tthis.stack.add(empty);\n\t\tthis.out.append(openBracket);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "enters",
            "a",
            "new",
            "scope",
            "by",
            "appending",
            "any",
            "necessary",
            "whitespace",
            "and",
            "the",
            "given",
            "bracket"
        ]
    },
    {
        "id": 758,
        "code": "\tJSONStringer close(Scope empty, Scope nonempty, String closeBracket) throws JSONException {\n\t\tScope context = peek();\n\t\tif (context != nonempty && context != empty) {\n\t\t\tthrow new JSONException(\"Nesting problem\");\n\t\t}\n\n\t\tthis.stack.remove(this.stack.size() - 1);\n\t\tif (context == nonempty) {\n\t\t\tnewline();\n\t\t}\n\t\tthis.out.append(closeBracket);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "closes",
            "the",
            "current",
            "scope",
            "by",
            "appending",
            "any",
            "necessary",
            "whitespace",
            "and",
            "the",
            "given",
            "bracket"
        ]
    },
    {
        "id": 759,
        "code": "\tprivate Scope peek() throws JSONException {\n\t\tif (this.stack.isEmpty()) {\n\t\t\tthrow new JSONException(\"Nesting problem\");\n\t\t}\n\t\treturn this.stack.get(this.stack.size() - 1);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "on",
            "the",
            "top",
            "of",
            "the",
            "stack"
        ]
    },
    {
        "id": 760,
        "code": "\tprivate void replaceTop(Scope topOfStack) {\n\t\tthis.stack.set(this.stack.size() - 1, topOfStack);\n\t}",
        "summary_tokens": [
            "replace",
            "the",
            "value",
            "on",
            "the",
            "top",
            "of",
            "the",
            "stack",
            "with",
            "the",
            "given",
            "value"
        ]
    },
    {
        "id": 761,
        "code": "\tpublic JSONStringer value(long value) throws JSONException {\n\t\tif (this.stack.isEmpty()) {\n\t\t\tthrow new JSONException(\"Nesting problem\");\n\t\t}\n\t\tbeforeValue();\n\t\tthis.out.append(value);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "encodes",
            "value",
            "to",
            "this",
            "stringer"
        ]
    },
    {
        "id": 762,
        "code": "\tpublic JSONStringer key(String name) throws JSONException {\n\t\tif (name == null) {\n\t\t\tthrow new JSONException(\"Names must be non-null\");\n\t\t}\n\t\tbeforeKey();\n\t\tstring(name);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "encodes",
            "the",
            "key",
            "property",
            "name",
            "to",
            "this",
            "stringer"
        ]
    },
    {
        "id": 763,
        "code": "\tprivate void beforeKey() throws JSONException {\n\t\tScope context = peek();\n\t\tif (context == Scope.NONEMPTY_OBJECT) { \n\t\t\tthis.out.append(',');\n\t\t}\n\t\telse if (context != Scope.EMPTY_OBJECT) { \n\t\t\tthrow new JSONException(\"Nesting problem\");\n\t\t}\n\t\tnewline();\n\t\treplaceTop(Scope.DANGLING_KEY);\n\t}",
        "summary_tokens": [
            "inserts",
            "any",
            "necessary",
            "separators",
            "and",
            "whitespace",
            "before",
            "a",
            "name"
        ]
    },
    {
        "id": 764,
        "code": "\tprivate void beforeValue() throws JSONException {\n\t\tif (this.stack.isEmpty()) {\n\t\t\treturn;\n\t\t}\n\n\t\tScope context = peek();\n\t\tif (context == Scope.EMPTY_ARRAY) { \n\t\t\treplaceTop(Scope.NONEMPTY_ARRAY);\n\t\t\tnewline();\n\t\t}\n\t\telse if (context == Scope.NONEMPTY_ARRAY) { \n\t\t\tthis.out.append(',');\n\t\t\tnewline();\n\t\t}\n\t\telse if (context == Scope.DANGLING_KEY) { \n\t\t\tthis.out.append(this.indent == null ? \":\" : \": \");\n\t\t\treplaceTop(Scope.NONEMPTY_OBJECT);\n\t\t}\n\t\telse if (context != Scope.NULL) {\n\t\t\tthrow new JSONException(\"Nesting problem\");\n\t\t}\n\t}",
        "summary_tokens": [
            "inserts",
            "any",
            "necessary",
            "separators",
            "and",
            "whitespace",
            "before",
            "a",
            "literal",
            "value",
            "inline",
            "array",
            "or",
            "inline",
            "object"
        ]
    },
    {
        "id": 765,
        "code": "\tpublic String toString() {\n\t\treturn this.out.length() == 0 ? null : this.out.toString();\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "encoded",
            "json",
            "string"
        ]
    },
    {
        "id": 766,
        "code": "\tpublic Object nextValue() throws JSONException {\n\t\tint c = nextCleanInternal();\n\t\tswitch (c) {\n\t\t\tcase -1:\n\t\t\t\tthrow syntaxError(\"End of input\");\n\n\t\t\tcase '{':\n\t\t\t\treturn readObject();\n\n\t\t\tcase '[':\n\t\t\t\treturn readArray();\n\n\t\t\tcase '\\'':\n\t\t\tcase '\"':\n\t\t\t\treturn nextString((char) c);\n\n\t\t\tdefault:\n\t\t\t\tthis.pos--;\n\t\t\t\treturn readLiteral();\n\t\t}\n\t}\n\n\tprivate int nextCleanInternal() throws JSONException {\n\t\twhile (this.pos < this.in.length()) {\n\t\t\tint c = this.in.charAt(this.pos++);\n\t\t\tswitch (c) {\n\t\t\t\tcase '\\t':\n\t\t\t\tcase ' ':\n\t\t\t\tcase '\\n':\n\t\t\t\tcase '\\r':\n\t\t\t\t\tcontinue;\n\n\t\t\t\tcase '/':\n\t\t\t\t\tif (this.pos == this.in.length()) {\n\t\t\t\t\t\treturn c;\n\t\t\t\t\t}\n\n\t\t\t\t\tchar peek = this.in.charAt(this.pos);\n\t\t\t\t\tswitch (peek) {\n\t\t\t\t\t\tcase '*':\n\t\t\t\t\t\t\t// skip a /* c-style comment */\n\t\t\t\t\t\t\tthis.pos++;\n\t\t\t\t\t\t\tint commentEnd = this.in.indexOf(\"*/\", this.pos);\n\t\t\t\t\t\t\tif (commentEnd == -1) {\n\t\t\t\t\t\t\t\tthrow syntaxError(\"Unterminated comment\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.pos = commentEnd + 2;\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t\tcase '/':\n\t\t\t\t\t\t\t// skip a // end-of-line comment\n\t\t\t\t\t\t\tthis.pos++;\n\t\t\t\t\t\t\tskipToEndOfLine();\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn c;\n\t\t\t\t\t}\n\n\t\t\t\tcase '#':\n\t\t\t\t\t/*\n\t\t\t\t\t * Skip a # hash end-of-line comment. The JSON RFC doesn't specify\n\t\t\t\t\t * this behavior, but it's required to parse existing documents. See\n\t\t\t\t\t * https://b/2571423.\n\t\t\t\t\t */\n\t\t\t\t\tskipToEndOfLine();\n\t\t\t\t\tcontinue;\n\n\t\t\t\tdefault:\n\t\t\t\t\treturn c;\n\t\t\t}\n\t\t}\n\n\t\treturn -1;\n\t}\n\n\t/**\n\t * Advances the position until after the next newline character. If the line is\n\t * terminated by \"\\r\\n\", the '\\n' must be consumed as whitespace by the caller.\n\t */\n\tprivate void skipToEndOfLine() {\n\t\tfor (; this.pos < this.in.length(); this.pos++) {\n\t\t\tchar c = this.in.charAt(this.pos);\n\t\t\tif (c == '\\r' || c == '\\n') {\n\t\t\t\tthis.pos++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns the string up to but not including {@code quote}, unescaping any character\n\t * escape sequences encountered along the way. The opening quote should have already\n\t * been read. This consumes the closing quote, but does not include it in the returned\n\t * string.\n\t * @param quote either ' or \".\n\t * @return the string up to but not including {@code quote}\n\t * @throws NumberFormatException if any unicode escape sequences are malformed.\n\t * @throws JSONException if processing of json failed\n\t */\n\tpublic String nextString(char quote) throws JSONException {\n\t\t\n\t\tStringBuilder builder = null;\n\n\t\t\n\t\tint start = this.pos;\n\n\t\twhile (this.pos < this.in.length()) {\n\t\t\tint c = this.in.charAt(this.pos++);\n\t\t\tif (c == quote) {\n\t\t\t\tif (builder == null) {\n\t\t\t\t\t\n\t\t\t\t\treturn new String(this.in.substring(start, this.pos - 1));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tbuilder.append(this.in, start, this.pos - 1);\n\t\t\t\t\treturn builder.toString();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (c == '\\\\') {\n\t\t\t\tif (this.pos == this.in.length()) {\n\t\t\t\t\tthrow syntaxError(\"Unterminated escape sequence\");\n\t\t\t\t}\n\t\t\t\tif (builder == null) {\n\t\t\t\t\tbuilder = new StringBuilder();\n\t\t\t\t}\n\t\t\t\tbuilder.append(this.in, start, this.pos - 1);\n\t\t\t\tbuilder.append(readEscapeCharacter());\n\t\t\t\tstart = this.pos;\n\t\t\t}\n\t\t}\n\n\t\tthrow syntaxError(\"Unterminated string\");\n\t}\n\n\t\n\tprivate char readEscapeCharacter() throws JSONException {\n\t\tchar escaped = this.in.charAt(this.pos++);\n\t\tswitch (escaped) {\n\t\t\tcase 'u':\n\t\t\t\tif (this.pos + 4 > this.in.length()) {\n\t\t\t\t\tthrow syntaxError(\"Unterminated escape sequence\");\n\t\t\t\t}\n\t\t\t\tString hex = this.in.substring(this.pos, this.pos + 4);\n\t\t\t\tthis.pos += 4;\n\t\t\t\treturn (char) Integer.parseInt(hex, 16);\n\n\t\t\tcase 't':\n\t\t\t\treturn '\\t';\n\n\t\t\tcase 'b':\n\t\t\t\treturn '\\b';\n\n\t\t\tcase 'n':\n\t\t\t\treturn '\\n';\n\n\t\t\tcase 'r':\n\t\t\t\treturn '\\r';\n\n\t\t\tcase 'f':\n\t\t\t\treturn '\\f';\n\n\t\t\tcase '\\'':\n\t\t\tcase '\"':\n\t\t\tcase '\\\\':\n\t\t\tdefault:\n\t\t\t\treturn escaped;\n\t\t}\n\t}\n\n\t/**\n\t * Reads a null, boolean, numeric or unquoted string literal value. Numeric values\n\t * will be returned as an Integer, Long, or Double, in that order of preference.\n\t * @return a literal value\n\t * @throws JSONException if processing of json failed\n\t */\n\tprivate Object readLiteral() throws JSONException {\n\t\tString literal = nextToInternal(\"{}[]/\\\\:,=;# \\t\\f\");\n\n\t\tif (literal.isEmpty()) {\n\t\t\tthrow syntaxError(\"Expected literal value\");\n\t\t}\n\t\telse if (\"null\".equalsIgnoreCase(literal)) {\n\t\t\treturn JSONObject.NULL;\n\t\t}\n\t\telse if (\"true\".equalsIgnoreCase(literal)) {\n\t\t\treturn Boolean.TRUE;\n\t\t}\n\t\telse if (\"false\".equalsIgnoreCase(literal)) {\n\t\t\treturn Boolean.FALSE;\n\t\t}\n\n\t\t/* try to parse as an integral type... */\n\t\tif (literal.indexOf('.') == -1) {\n\t\t\tint base = 10;\n\t\t\tString number = literal;\n\t\t\tif (number.startsWith(\"0x\") || number.startsWith(\"0X\")) {\n\t\t\t\tnumber = number.substring(2);\n\t\t\t\tbase = 16;\n\t\t\t}\n\t\t\telse if (number.startsWith(\"0\") && number.length() > 1) {\n\t\t\t\tnumber = number.substring(1);\n\t\t\t\tbase = 8;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tlong longValue = Long.parseLong(number, base);\n\t\t\t\tif (longValue <= Integer.MAX_VALUE && longValue >= Integer.MIN_VALUE) {\n\t\t\t\t\treturn (int) longValue;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn longValue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (NumberFormatException e) {\n\t\t\t\t\n\t\t\t}\n\t\t}\n\n\t\t\n\t\ttry {\n\t\t\treturn Double.valueOf(literal);\n\t\t}\n\t\tcatch (NumberFormatException ignored) {\n\t\t}\n\n\t\t\n\t\treturn new String(literal); \n\t}\n\n\t\n\tprivate String nextToInternal(String excluded) {\n\t\tint start = this.pos;\n\t\tfor (; this.pos < this.in.length(); this.pos++) {\n\t\t\tchar c = this.in.charAt(this.pos);\n\t\t\tif (c == '\\r' || c == '\\n' || excluded.indexOf(c) != -1) {\n\t\t\t\treturn this.in.substring(start, this.pos);\n\t\t\t}\n\t\t}\n\t\treturn this.in.substring(start);\n\t}\n\n\t/**\n\t * Reads a sequence of key/value pairs and the trailing closing brace '}' of an",
        "summary_tokens": [
            "returns",
            "the",
            "next",
            "value",
            "from",
            "the",
            "input"
        ]
    },
    {
        "id": 767,
        "code": "\tprivate void skipToEndOfLine() {\n\t\tfor (; this.pos < this.in.length(); this.pos++) {\n\t\t\tchar c = this.in.charAt(this.pos);\n\t\t\tif (c == '\\r' || c == '\\n') {\n\t\t\t\tthis.pos++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}",
        "summary_tokens": [
            "advances",
            "the",
            "position",
            "until",
            "after",
            "the",
            "next",
            "newline",
            "character"
        ]
    },
    {
        "id": 768,
        "code": "\tpublic String nextString(char quote) throws JSONException {\n\t\t\n\t\tStringBuilder builder = null;\n\n\t\t\n\t\tint start = this.pos;\n\n\t\twhile (this.pos < this.in.length()) {\n\t\t\tint c = this.in.charAt(this.pos++);\n\t\t\tif (c == quote) {\n\t\t\t\tif (builder == null) {\n\t\t\t\t\t\n\t\t\t\t\treturn new String(this.in.substring(start, this.pos - 1));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tbuilder.append(this.in, start, this.pos - 1);\n\t\t\t\t\treturn builder.toString();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (c == '\\\\') {\n\t\t\t\tif (this.pos == this.in.length()) {\n\t\t\t\t\tthrow syntaxError(\"Unterminated escape sequence\");\n\t\t\t\t}\n\t\t\t\tif (builder == null) {\n\t\t\t\t\tbuilder = new StringBuilder();\n\t\t\t\t}\n\t\t\t\tbuilder.append(this.in, start, this.pos - 1);\n\t\t\t\tbuilder.append(readEscapeCharacter());\n\t\t\t\tstart = this.pos;\n\t\t\t}\n\t\t}\n\n\t\tthrow syntaxError(\"Unterminated string\");\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "string",
            "up",
            "to",
            "but",
            "not",
            "including",
            "quote",
            "unescaping",
            "any",
            "character",
            "escape",
            "sequences",
            "encountered",
            "along",
            "the",
            "way"
        ]
    },
    {
        "id": 769,
        "code": "\tprivate char readEscapeCharacter() throws JSONException {\n\t\tchar escaped = this.in.charAt(this.pos++);\n\t\tswitch (escaped) {\n\t\t\tcase 'u':\n\t\t\t\tif (this.pos + 4 > this.in.length()) {\n\t\t\t\t\tthrow syntaxError(\"Unterminated escape sequence\");\n\t\t\t\t}\n\t\t\t\tString hex = this.in.substring(this.pos, this.pos + 4);\n\t\t\t\tthis.pos += 4;\n\t\t\t\treturn (char) Integer.parseInt(hex, 16);\n\n\t\t\tcase 't':\n\t\t\t\treturn '\\t';\n\n\t\t\tcase 'b':\n\t\t\t\treturn '\\b';\n\n\t\t\tcase 'n':\n\t\t\t\treturn '\\n';\n\n\t\t\tcase 'r':\n\t\t\t\treturn '\\r';\n\n\t\t\tcase 'f':\n\t\t\t\treturn '\\f';\n\n\t\t\tcase '\\'':\n\t\t\tcase '\"':\n\t\t\tcase '\\\\':\n\t\t\tdefault:\n\t\t\t\treturn escaped;\n\t\t}\n\t}",
        "summary_tokens": [
            "unescapes",
            "the",
            "character",
            "identified",
            "by",
            "the",
            "character",
            "or",
            "characters",
            "that",
            "immediately",
            "follow",
            "a",
            "backslash"
        ]
    },
    {
        "id": 770,
        "code": "\tprivate Object readLiteral() throws JSONException {\n\t\tString literal = nextToInternal(\"{}[]/\\\\:,=;# \\t\\f\");\n\n\t\tif (literal.isEmpty()) {\n\t\t\tthrow syntaxError(\"Expected literal value\");\n\t\t}\n\t\telse if (\"null\".equalsIgnoreCase(literal)) {\n\t\t\treturn JSONObject.NULL;\n\t\t}\n\t\telse if (\"true\".equalsIgnoreCase(literal)) {\n\t\t\treturn Boolean.TRUE;\n\t\t}\n\t\telse if (\"false\".equalsIgnoreCase(literal)) {\n\t\t\treturn Boolean.FALSE;\n\t\t}\n\n\t\t\n\t\tif (literal.indexOf('.') == -1) {\n\t\t\tint base = 10;\n\t\t\tString number = literal;\n\t\t\tif (number.startsWith(\"0x\") || number.startsWith(\"0X\")) {\n\t\t\t\tnumber = number.substring(2);\n\t\t\t\tbase = 16;\n\t\t\t}\n\t\t\telse if (number.startsWith(\"0\") && number.length() > 1) {\n\t\t\t\tnumber = number.substring(1);\n\t\t\t\tbase = 8;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tlong longValue = Long.parseLong(number, base);\n\t\t\t\tif (longValue <= Integer.MAX_VALUE && longValue >= Integer.MIN_VALUE) {\n\t\t\t\t\treturn (int) longValue;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn longValue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (NumberFormatException e) {\n\t\t\t\t\n\t\t\t}\n\t\t}\n\n\t\t\n\t\ttry {\n\t\t\treturn Double.valueOf(literal);\n\t\t}\n\t\tcatch (NumberFormatException ignored) {\n\t\t}\n\n\t\t\n\t\treturn new String(literal); \n\t}",
        "summary_tokens": [
            "reads",
            "a",
            "null",
            "boolean",
            "numeric",
            "or",
            "unquoted",
            "string",
            "literal",
            "value"
        ]
    },
    {
        "id": 771,
        "code": "\tprivate String nextToInternal(String excluded) {\n\t\tint start = this.pos;\n\t\tfor (; this.pos < this.in.length(); this.pos++) {\n\t\t\tchar c = this.in.charAt(this.pos);\n\t\t\tif (c == '\\r' || c == '\\n' || excluded.indexOf(c) != -1) {\n\t\t\t\treturn this.in.substring(start, this.pos);\n\t\t\t}\n\t\t}\n\t\treturn this.in.substring(start);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "string",
            "up",
            "to",
            "but",
            "not",
            "including",
            "any",
            "of",
            "the",
            "given",
            "characters",
            "or",
            "a",
            "newline",
            "character"
        ]
    },
    {
        "id": 772,
        "code": "\tprivate JSONObject readObject() throws JSONException {\n\t\tJSONObject result = new JSONObject();\n\n\t\t\n\t\tint first = nextCleanInternal();\n\t\tif (first == '}') {\n\t\t\treturn result;\n\t\t}\n\t\telse if (first != -1) {\n\t\t\tthis.pos--;\n\t\t}\n\n\t\twhile (true) {\n\t\t\tObject name = nextValue();\n\t\t\tif (!(name instanceof String)) {\n\t\t\t\tif (name == null) {\n\t\t\t\t\tthrow syntaxError(\"Names cannot be null\");\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthrow syntaxError(\n\t\t\t\t\t\t\t\"Names must be strings, but \" + name + \" is of type \" + name.getClass().getName());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\n\t\t\tint separator = nextCleanInternal();\n\t\t\tif (separator != ':' && separator != '=') {\n\t\t\t\tthrow syntaxError(\"Expected ':' after \" + name);\n\t\t\t}\n\t\t\tif (this.pos < this.in.length() && this.in.charAt(this.pos) == '>') {\n\t\t\t\tthis.pos++;\n\t\t\t}\n\n\t\t\tresult.put((String) name, nextValue());\n\n\t\t\tswitch (nextCleanInternal()) {\n\t\t\t\tcase '}':\n\t\t\t\t\treturn result;\n\t\t\t\tcase ';':\n\t\t\t\tcase ',':\n\t\t\t\t\tcontinue;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow syntaxError(\"Unterminated object\");\n\t\t\t}",
        "summary_tokens": [
            "reads",
            "a",
            "sequence",
            "of",
            "key",
            "value",
            "pairs",
            "and",
            "the",
            "trailing",
            "closing",
            "brace",
            "of",
            "an",
            "object"
        ]
    },
    {
        "id": 773,
        "code": "\tprivate JSONArray readArray() throws JSONException {\n\t\tJSONArray result = new JSONArray();\n\n\t\t\n\t\tboolean hasTrailingSeparator = false;\n\n\t\twhile (true) {\n\t\t\tswitch (nextCleanInternal()) {\n\t\t\t\tcase -1:\n\t\t\t\t\tthrow syntaxError(\"Unterminated array\");\n\t\t\t\tcase ']':\n\t\t\t\t\tif (hasTrailingSeparator) {\n\t\t\t\t\t\tresult.put(null);\n\t\t\t\t\t}\n\t\t\t\t\treturn result;\n\t\t\t\tcase ',':\n\t\t\t\tcase ';':\n\t\t\t\t\t\n\t\t\t\t\tresult.put(null);\n\t\t\t\t\thasTrailingSeparator = true;\n\t\t\t\t\tcontinue;\n\t\t\t\tdefault:\n\t\t\t\t\tthis.pos--;\n\t\t\t}\n\n\t\t\tresult.put(nextValue());\n\n\t\t\tswitch (nextCleanInternal()) {\n\t\t\t\tcase ']':\n\t\t\t\t\treturn result;\n\t\t\t\tcase ',':\n\t\t\t\tcase ';':\n\t\t\t\t\thasTrailingSeparator = true;\n\t\t\t\t\tcontinue;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow syntaxError(\"Unterminated array\");\n\t\t\t}\n\t\t}\n\t}",
        "summary_tokens": [
            "reads",
            "a",
            "sequence",
            "of",
            "values",
            "and",
            "the",
            "trailing",
            "closing",
            "brace",
            "of",
            "an",
            "array"
        ]
    },
    {
        "id": 774,
        "code": "\tpublic JSONException syntaxError(String message) {\n\t\treturn new JSONException(message + this);\n\t}",
        "summary_tokens": [
            "returns",
            "an",
            "exception",
            "containing",
            "the",
            "given",
            "message",
            "plus",
            "the",
            "current",
            "position",
            "and",
            "the",
            "entire",
            "input",
            "string"
        ]
    },
    {
        "id": 775,
        "code": "\tpublic String toString() {\n\t\t\n\t\treturn \" at character \" + this.pos + \" of \" + this.in;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "current",
            "position",
            "and",
            "the",
            "entire",
            "input",
            "string"
        ]
    },
    {
        "id": 776,
        "code": "\tprivate boolean hasLombokPublicAccessor(MetadataGenerationEnvironment env, boolean getter) {\n\t\tString annotation = (getter ? LOMBOK_GETTER_ANNOTATION : LOMBOK_SETTER_ANNOTATION);\n\t\tAnnotationMirror lombokMethodAnnotationOnField = env.getAnnotation(getField(), annotation);\n\t\tif (lombokMethodAnnotationOnField != null) {\n\t\t\treturn isAccessLevelPublic(env, lombokMethodAnnotationOnField);\n\t\t}\n\t\tAnnotationMirror lombokMethodAnnotationOnElement = env.getAnnotation(getOwnerElement(), annotation);\n\t\tif (lombokMethodAnnotationOnElement != null) {\n\t\t\treturn isAccessLevelPublic(env, lombokMethodAnnotationOnElement);\n\t\t}\n\t\treturn (env.hasAnnotation(getOwnerElement(), LOMBOK_DATA_ANNOTATION)\n\t\t\t\t|| env.hasAnnotation(getOwnerElement(), LOMBOK_VALUE_ANNOTATION));\n\t}",
        "summary_tokens": [
            "determine",
            "if",
            "the",
            "current",
            "get",
            "field",
            "field",
            "defines",
            "a",
            "public",
            "accessor",
            "using",
            "lombok",
            "annotations"
        ]
    },
    {
        "id": 777,
        "code": "\tObject getFieldDefaultValue(TypeElement type, String name) {\n\t\treturn this.defaultValues.computeIfAbsent(type, this::resolveFieldValues).get(name);\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "default",
            "value",
            "of",
            "the",
            "field",
            "with",
            "the",
            "specified",
            "name"
        ]
    },
    {
        "id": 778,
        "code": "\tList<Element> getElementsAnnotatedOrMetaAnnotatedWith(Element element, TypeElement annotationType) {\n\t\tLinkedList<Element> stack = new LinkedList<>();\n\t\tstack.push(element);\n\t\tcollectElementsAnnotatedOrMetaAnnotatedWith(annotationType, stack);\n\t\tstack.removeFirst();\n\t\treturn Collections.unmodifiableList(stack);\n\t}",
        "summary_tokens": [
            "collect",
            "the",
            "annotations",
            "that",
            "are",
            "annotated",
            "or",
            "meta",
            "annotated",
            "with",
            "the",
            "specified",
            "type",
            "element",
            "annotation"
        ]
    },
    {
        "id": 779,
        "code": "\tStream<PropertyDescriptor<?>> resolve(TypeElement type, ExecutableElement factoryMethod) {\n\t\tTypeElementMembers members = new TypeElementMembers(this.environment, type);\n\t\tif (factoryMethod != null) {\n\t\t\treturn resolveJavaBeanProperties(type, factoryMethod, members);\n\t\t}\n\t\treturn resolve(ConfigurationPropertiesTypeElement.of(type, this.environment), factoryMethod, members);\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "property",
            "descriptor",
            "instances",
            "that",
            "are",
            "valid",
            "candidates",
            "for",
            "the",
            "specified",
            "type",
            "element",
            "type",
            "based",
            "on",
            "the",
            "specified",
            "executable",
            "element",
            "factory",
            "method",
            "if",
            "any"
        ]
    },
    {
        "id": 780,
        "code": "\tpublic void add(ItemMetadata itemMetadata) {\n\t\tadd(this.items, itemMetadata.getName(), itemMetadata, false);\n\t}",
        "summary_tokens": [
            "add",
            "item",
            "meta",
            "data"
        ]
    },
    {
        "id": 781,
        "code": "\tpublic void addIfMissing(ItemMetadata itemMetadata) {\n\t\tadd(this.items, itemMetadata.getName(), itemMetadata, true);\n\t}",
        "summary_tokens": [
            "add",
            "item",
            "meta",
            "data",
            "if",
            "it",
            "s",
            "not",
            "already",
            "present"
        ]
    },
    {
        "id": 782,
        "code": "\tpublic void merge(ConfigurationMetadata metadata) {\n\t\tfor (ItemMetadata additionalItem : metadata.getItems()) {\n\t\t\tmergeItemMetadata(additionalItem);\n\t\t}\n\t\tfor (ItemHint itemHint : metadata.getHints()) {\n\t\t\tadd(itemHint);\n\t\t}\n\t}",
        "summary_tokens": [
            "merge",
            "the",
            "content",
            "from",
            "another",
            "configuration",
            "metadata"
        ]
    },
    {
        "id": 783,
        "code": "\tpublic List<ItemMetadata> getItems() {\n\t\treturn flattenValues(this.items);\n\t}",
        "summary_tokens": [
            "return",
            "item",
            "meta",
            "data"
        ]
    },
    {
        "id": 784,
        "code": "\tpublic List<ItemHint> getHints() {\n\t\treturn flattenValues(this.hints);\n\t}",
        "summary_tokens": [
            "return",
            "hint",
            "meta",
            "data"
        ]
    },
    {
        "id": 785,
        "code": "\tpublic File getOutputFile(String relativePath) {\n\t\tAssert.isTrue(!new File(relativePath).isAbsolute(), \"'\" + relativePath + \"' was absolute\");\n\t\treturn new File(this.compiler.getOutputLocation(), relativePath);\n\t}",
        "summary_tokens": [
            "retrieve",
            "file",
            "relative",
            "to",
            "project",
            "s",
            "output",
            "directory"
        ]
    },
    {
        "id": 786,
        "code": "\tpublic void addSourceCode(Class<?> target, InputStream snippetStream) throws Exception {\n\t\tFile targetFile = getSourceFile(target);\n\t\tString contents = getContents(targetFile);\n\t\tint insertAt = contents.lastIndexOf('}');\n\t\tString additionalSource = FileCopyUtils.copyToString(new InputStreamReader(snippetStream));\n\t\tcontents = contents.substring(0, insertAt) + additionalSource + contents.substring(insertAt);\n\t\tputContents(targetFile, contents);",
        "summary_tokens": [
            "add",
            "source",
            "code",
            "at",
            "the",
            "end",
            "of",
            "file",
            "just",
            "before",
            "last",
            "target",
            "the",
            "target",
            "snippet",
            "stream",
            "the",
            "snippet",
            "stream",
            "exception",
            "if",
            "the",
            "source",
            "cannot",
            "be",
            "added"
        ]
    },
    {
        "id": 787,
        "code": "\tpublic void delete(Class<?> type) {\n\t\tFile target = getSourceFile(type);\n\t\ttarget.delete();\n\t\tthis.sourceFiles.remove(target);\n\t}",
        "summary_tokens": [
            "delete",
            "source",
            "file",
            "for",
            "given",
            "class",
            "from",
            "project"
        ]
    },
    {
        "id": 788,
        "code": "\tpublic void revert(Class<?> type) throws IOException {\n\t\tAssert.isTrue(getSourceFile(type).exists(), \"Source file for type '\" + type + \"' does not exist\");\n\t\tcopySources(type);\n\t}",
        "summary_tokens": [
            "restore",
            "source",
            "code",
            "of",
            "given",
            "class",
            "to",
            "its",
            "original",
            "contents"
        ]
    },
    {
        "id": 789,
        "code": "\tpublic void add(Class<?> type) throws IOException {\n\t\tAssert.isTrue(!getSourceFile(type).exists(), \"Source file for type '\" + type + \"' already exists\");\n\t\tcopySources(type);\n\t}",
        "summary_tokens": [
            "add",
            "source",
            "code",
            "of",
            "given",
            "class",
            "to",
            "this",
            "project"
        ]
    },
    {
        "id": 790,
        "code": "\tprivate File getOriginalSourceFile(Class<?> type) {\n\t\treturn new File(TestCompiler.SOURCE_DIRECTORY, TestCompiler.sourcePathFor(type));\n\t}",
        "summary_tokens": [
            "find",
            "the",
            "original",
            "source",
            "code",
            "for",
            "given",
            "test",
            "class"
        ]
    },
    {
        "id": 791,
        "code": "\tpublic TypeElement getRootElement(Class<?> type) {\n\t\treturn (TypeElement) this.roundEnvironment.getRootElements().stream()\n\t\t\t\t.filter((element) -> element.toString().equals(type.getName())).findFirst()\n\t\t\t\t.orElseThrow(() -> new IllegalStateException(\"No element found for \" + type\n\t\t\t\t\t\t+ \" make sure it is included in the list of classes to compile\"));\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "root",
            "type",
            "element",
            "for",
            "the",
            "specified",
            "type"
        ]
    },
    {
        "id": 792,
        "code": "\tpublic Property<String> getMainClass() {\n\t\treturn this.mainClass;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "fully",
            "qualified",
            "name",
            "of",
            "the",
            "application",
            "s",
            "main",
            "class"
        ]
    },
    {
        "id": 793,
        "code": "\tpublic void buildInfo(Action<BuildInfo> configurer) {\n\t\tTaskContainer tasks = this.project.getTasks();\n\t\tTaskProvider<BuildInfo> bootBuildInfo = tasks.register(\"bootBuildInfo\", BuildInfo.class,\n\t\t\t\tthis::configureBuildInfoTask);\n\t\tthis.project.getPlugins().withType(JavaPlugin.class, (plugin) -> {\n\t\t\ttasks.named(JavaPlugin.CLASSES_TASK_NAME).configure((task) -> task.dependsOn(bootBuildInfo));\n\t\t\tthis.project.afterEvaluate((evaluated) -> bootBuildInfo.configure((buildInfo) -> {\n\t\t\t\tBuildInfoProperties properties = buildInfo.getProperties();\n\t\t\t\tif (properties.getArtifact() == null) {\n\t\t\t\t\tproperties.setArtifact(determineArtifactBaseName());\n\t\t\t\t}\n\t\t\t}));\n\t\t});\n\t\tif (configurer != null) {\n\t\t\tbootBuildInfo.configure(configurer);\n\t\t}\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "new",
            "build",
            "info",
            "task",
            "named",
            "boot",
            "build",
            "info",
            "and",
            "configures",
            "the",
            "java",
            "plugin",
            "s",
            "classes",
            "task",
            "to",
            "depend",
            "upon",
            "it"
        ]
    },
    {
        "id": 794,
        "code": "\tpublic FileCollection getClasspath() {\n\t\treturn this.classpath;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "classpath",
            "that",
            "the",
            "task",
            "will",
            "examine",
            "when",
            "resolving",
            "the",
            "main",
            "class",
            "name"
        ]
    },
    {
        "id": 795,
        "code": "\tpublic void setClasspath(Object classpath) {\n\t\tthis.classpath = getProject().files(classpath);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "classpath",
            "that",
            "the",
            "task",
            "will",
            "examine",
            "when",
            "resolving",
            "the",
            "main",
            "class",
            "name"
        ]
    },
    {
        "id": 796,
        "code": "\tpublic RegularFileProperty getOutputFile() {\n\t\treturn this.outputFile;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "property",
            "for",
            "the",
            "task",
            "s",
            "output",
            "file",
            "that",
            "will",
            "contain",
            "the",
            "name",
            "of",
            "the",
            "main",
            "class"
        ]
    },
    {
        "id": 797,
        "code": "\tpublic Property<String> getConfiguredMainClassName() {\n\t\treturn this.configuredMainClass;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "property",
            "for",
            "the",
            "explicitly",
            "configured",
            "main",
            "class",
            "name",
            "that",
            "should",
            "be",
            "used",
            "in",
            "favor",
            "of",
            "resolving",
            "the",
            "main",
            "class",
            "name",
            "from",
            "the",
            "classpath"
        ]
    },
    {
        "id": 798,
        "code": "\tpublic void generateBuildProperties() {\n\t\ttry {\n\t\t\tProjectDetails details = new ProjectDetails(this.properties.getGroup(), this.properties.getArtifact(),\n\t\t\t\t\tthis.properties.getVersion(), this.properties.getName(), this.properties.getTime(),\n\t\t\t\t\tcoerceToStringValues(this.properties.getAdditional()));\n\t\t\tnew BuildPropertiesWriter(new File(getDestinationDir(), \"build-info.properties\"))\n\t\t\t\t\t.writeBuildProperties(details);\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tthrow new TaskExecutionException(this, ex);\n\t\t}\n\t}",
        "summary_tokens": [
            "generates",
            "the",
            "build",
            "info"
        ]
    },
    {
        "id": 799,
        "code": "\tpublic File getDestinationDir() {\n\t\treturn this.destinationDir.getAsFile().get();\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "directory",
            "to",
            "which",
            "the",
            "build",
            "info"
        ]
    },
    {
        "id": 800,
        "code": "\tpublic void setDestinationDir(File destinationDir) {\n\t\tthis.destinationDir.set(destinationDir);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "directory",
            "to",
            "which",
            "the",
            "build",
            "info"
        ]
    },
    {
        "id": 801,
        "code": "\tpublic BuildInfoProperties getProperties() {\n\t\treturn this.properties;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "build",
            "info",
            "properties",
            "properties",
            "that",
            "will",
            "be",
            "included",
            "in",
            "the",
            "build",
            "info"
        ]
    },
    {
        "id": 802,
        "code": "\tpublic void properties(Action<BuildInfoProperties> action) {\n\t\taction.execute(this.properties);\n\t}",
        "summary_tokens": [
            "executes",
            "the",
            "given",
            "action",
            "on",
            "the",
            "get",
            "properties",
            "properties"
        ]
    },
    {
        "id": 803,
        "code": "\tpublic String getGroup() {\n\t\treturn this.group.getOrNull();\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "used",
            "for",
            "the",
            "build"
        ]
    },
    {
        "id": 804,
        "code": "\tpublic void setGroup(String group) {\n\t\tthis.group.set(group);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "value",
            "used",
            "for",
            "the",
            "build"
        ]
    },
    {
        "id": 805,
        "code": "\tpublic String getArtifact() {\n\t\treturn this.artifact.getOrNull();\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "used",
            "for",
            "the",
            "build"
        ]
    },
    {
        "id": 806,
        "code": "\tpublic void setArtifact(String artifact) {\n\t\tthis.artifact.set(artifact);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "value",
            "used",
            "for",
            "the",
            "build"
        ]
    },
    {
        "id": 807,
        "code": "\tpublic String getVersion() {\n\t\treturn this.version.getOrNull();\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "used",
            "for",
            "the",
            "build"
        ]
    },
    {
        "id": 808,
        "code": "\tpublic void setVersion(String version) {\n\t\tthis.version.set(version);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "value",
            "used",
            "for",
            "the",
            "build"
        ]
    },
    {
        "id": 809,
        "code": "\tpublic String getName() {\n\t\treturn this.name.getOrNull();\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "used",
            "for",
            "the",
            "build"
        ]
    },
    {
        "id": 810,
        "code": "\tpublic void setName(String name) {\n\t\tthis.name.set(name);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "value",
            "used",
            "for",
            "the",
            "build"
        ]
    },
    {
        "id": 811,
        "code": "\tpublic Instant getTime() {\n\t\tLong epochMillis = this.time.getOrNull();\n\t\tif (epochMillis != null) {\n\t\t\treturn Instant.ofEpochMilli(epochMillis);\n\t\t}\n\t\tif (this.timeConfigured) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.creationTime;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "value",
            "used",
            "for",
            "the",
            "build"
        ]
    },
    {
        "id": 812,
        "code": "\tpublic void setTime(Instant time) {\n\t\tthis.timeConfigured = true;\n\t\tthis.time.set((time != null) ? time.toEpochMilli() : null);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "value",
            "used",
            "for",
            "the",
            "build"
        ]
    },
    {
        "id": 813,
        "code": "\tpublic Map<String, Object> getAdditional() {\n\t\treturn this.additionalProperties;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "additional",
            "properties",
            "that",
            "will",
            "be",
            "included"
        ]
    },
    {
        "id": 814,
        "code": "\tpublic void setAdditional(Map<String, Object> additionalProperties) {\n\t\tthis.additionalProperties = additionalProperties;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "additional",
            "properties",
            "that",
            "will",
            "be",
            "included"
        ]
    },
    {
        "id": 815,
        "code": "\tpublic RegularFileProperty getArchiveFile() {\n\t\treturn this.archiveFile;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "property",
            "for",
            "the",
            "archive",
            "file",
            "from",
            "which",
            "the",
            "image",
            "will",
            "be",
            "built"
        ]
    },
    {
        "id": 816,
        "code": "\tpublic Property<JavaVersion> getTargetJavaVersion() {\n\t\treturn this.targetJavaVersion;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "target",
            "java",
            "version",
            "of",
            "the",
            "project",
            "e"
        ]
    },
    {
        "id": 817,
        "code": "\tpublic String getImageName() {\n\t\treturn determineImageReference().toString();\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "name",
            "of",
            "the",
            "image",
            "that",
            "will",
            "be",
            "built"
        ]
    },
    {
        "id": 818,
        "code": "\tpublic void setImageName(String imageName) {\n\t\tthis.imageName = imageName;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "name",
            "of",
            "the",
            "image",
            "that",
            "will",
            "be",
            "built"
        ]
    },
    {
        "id": 819,
        "code": "\tpublic String getBuilder() {\n\t\treturn this.builder;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "builder",
            "that",
            "will",
            "be",
            "used",
            "to",
            "build",
            "the",
            "image"
        ]
    },
    {
        "id": 820,
        "code": "\tpublic void setBuilder(String builder) {\n\t\tthis.builder = builder;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "builder",
            "that",
            "will",
            "be",
            "used",
            "to",
            "build",
            "the",
            "image"
        ]
    },
    {
        "id": 821,
        "code": "\tpublic String getRunImage() {\n\t\treturn this.runImage;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "run",
            "image",
            "that",
            "will",
            "be",
            "included",
            "in",
            "the",
            "built",
            "image"
        ]
    },
    {
        "id": 822,
        "code": "\tpublic void setRunImage(String runImage) {\n\t\tthis.runImage = runImage;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "run",
            "image",
            "that",
            "will",
            "be",
            "included",
            "in",
            "the",
            "built",
            "image"
        ]
    },
    {
        "id": 823,
        "code": "\tpublic Map<String, String> getEnvironment() {\n\t\treturn this.environment;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "environment",
            "that",
            "will",
            "be",
            "used",
            "when",
            "building",
            "the",
            "image"
        ]
    },
    {
        "id": 824,
        "code": "\tpublic void setEnvironment(Map<String, String> environment) {\n\t\tthis.environment = environment;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "environment",
            "that",
            "will",
            "be",
            "used",
            "when",
            "building",
            "the",
            "image"
        ]
    },
    {
        "id": 825,
        "code": "\tpublic void environment(Map<String, String> entries) {\n\t\tthis.environment.putAll(entries);\n\t}",
        "summary_tokens": [
            "adds",
            "entries",
            "to",
            "the",
            "environment",
            "that",
            "will",
            "be",
            "used",
            "when",
            "building",
            "the",
            "image"
        ]
    },
    {
        "id": 826,
        "code": "\tpublic boolean isCleanCache() {\n\t\treturn this.cleanCache;\n\t}",
        "summary_tokens": [
            "returns",
            "whether",
            "caches",
            "should",
            "be",
            "cleaned",
            "before",
            "packaging"
        ]
    },
    {
        "id": 827,
        "code": "\tpublic void setCleanCache(boolean cleanCache) {\n\t\tthis.cleanCache = cleanCache;\n\t}",
        "summary_tokens": [
            "sets",
            "whether",
            "caches",
            "should",
            "be",
            "cleaned",
            "before",
            "packaging"
        ]
    },
    {
        "id": 828,
        "code": "\tpublic boolean isVerboseLogging() {\n\t\treturn this.verboseLogging;\n\t}",
        "summary_tokens": [
            "whether",
            "verbose",
            "logging",
            "should",
            "be",
            "enabled",
            "while",
            "building",
            "the",
            "image"
        ]
    },
    {
        "id": 829,
        "code": "\tpublic void setVerboseLogging(boolean verboseLogging) {\n\t\tthis.verboseLogging = verboseLogging;\n\t}",
        "summary_tokens": [
            "sets",
            "whether",
            "verbose",
            "logging",
            "should",
            "be",
            "enabled",
            "while",
            "building",
            "the",
            "image"
        ]
    },
    {
        "id": 830,
        "code": "\tpublic PullPolicy getPullPolicy() {\n\t\treturn this.pullPolicy;\n\t}",
        "summary_tokens": [
            "returns",
            "image",
            "pull",
            "policy",
            "that",
            "will",
            "be",
            "used",
            "when",
            "building",
            "the",
            "image"
        ]
    },
    {
        "id": 831,
        "code": "\tpublic void setPullPolicy(PullPolicy pullPolicy) {\n\t\tthis.pullPolicy = pullPolicy;\n\t}",
        "summary_tokens": [
            "sets",
            "image",
            "pull",
            "policy",
            "that",
            "will",
            "be",
            "used",
            "when",
            "building",
            "the",
            "image"
        ]
    },
    {
        "id": 832,
        "code": "\tpublic boolean isPublish() {\n\t\treturn this.publish;\n\t}",
        "summary_tokens": [
            "whether",
            "the",
            "built",
            "image",
            "should",
            "be",
            "pushed",
            "to",
            "a",
            "registry"
        ]
    },
    {
        "id": 833,
        "code": "\tpublic void setPublish(boolean publish) {\n\t\tthis.publish = publish;\n\t}",
        "summary_tokens": [
            "sets",
            "whether",
            "the",
            "built",
            "image",
            "should",
            "be",
            "pushed",
            "to",
            "a",
            "registry"
        ]
    },
    {
        "id": 834,
        "code": "\tpublic List<String> getBuildpacks() {\n\t\treturn this.buildpacks.getOrNull();\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "buildpacks",
            "that",
            "will",
            "be",
            "used",
            "when",
            "building",
            "the",
            "image"
        ]
    },
    {
        "id": 835,
        "code": "\tpublic void setBuildpacks(List<String> buildpacks) {\n\t\tthis.buildpacks.set(buildpacks);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "buildpacks",
            "that",
            "will",
            "be",
            "used",
            "when",
            "building",
            "the",
            "image"
        ]
    },
    {
        "id": 836,
        "code": "\tpublic void buildpack(String buildpack) {\n\t\tthis.buildpacks.add(buildpack);\n\t}",
        "summary_tokens": [
            "add",
            "an",
            "entry",
            "to",
            "the",
            "buildpacks",
            "that",
            "will",
            "be",
            "used",
            "when",
            "building",
            "the",
            "image"
        ]
    },
    {
        "id": 837,
        "code": "\tpublic void buildpacks(List<String> buildpacks) {\n\t\tthis.buildpacks.addAll(buildpacks);\n\t}",
        "summary_tokens": [
            "adds",
            "entries",
            "to",
            "the",
            "buildpacks",
            "that",
            "will",
            "be",
            "used",
            "when",
            "building",
            "the",
            "image"
        ]
    },
    {
        "id": 838,
        "code": "\tpublic List<String> getBindings() {\n\t\treturn this.bindings.getOrNull();\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "volume",
            "bindings",
            "that",
            "will",
            "be",
            "mounted",
            "to",
            "the",
            "container",
            "when",
            "building",
            "the",
            "image"
        ]
    },
    {
        "id": 839,
        "code": "\tpublic void setBindings(List<String> bindings) {\n\t\tthis.bindings.set(bindings);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "volume",
            "bindings",
            "that",
            "will",
            "be",
            "mounted",
            "to",
            "the",
            "container",
            "when",
            "building",
            "the",
            "image"
        ]
    },
    {
        "id": 840,
        "code": "\tpublic void binding(String binding) {\n\t\tthis.bindings.add(binding);\n\t}",
        "summary_tokens": [
            "add",
            "an",
            "entry",
            "to",
            "the",
            "volume",
            "bindings",
            "that",
            "will",
            "be",
            "mounted",
            "to",
            "the",
            "container",
            "when",
            "building",
            "the",
            "image"
        ]
    },
    {
        "id": 841,
        "code": "\tpublic void bindings(List<String> bindings) {\n\t\tthis.bindings.addAll(bindings);\n\t}",
        "summary_tokens": [
            "add",
            "entries",
            "to",
            "the",
            "volume",
            "bindings",
            "that",
            "will",
            "be",
            "mounted",
            "to",
            "the",
            "container",
            "when",
            "building",
            "the",
            "image"
        ]
    },
    {
        "id": 842,
        "code": "\tpublic List<String> getTags() {\n\t\treturn this.tags.getOrNull();\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "tags",
            "that",
            "will",
            "be",
            "created",
            "for",
            "the",
            "built",
            "image"
        ]
    },
    {
        "id": 843,
        "code": "\tpublic void setTags(List<String> tags) {\n\t\tthis.tags.set(tags);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "tags",
            "that",
            "will",
            "be",
            "created",
            "for",
            "the",
            "built",
            "image"
        ]
    },
    {
        "id": 844,
        "code": "\tpublic void tag(String tag) {\n\t\tthis.tags.add(tag);\n\t}",
        "summary_tokens": [
            "add",
            "an",
            "entry",
            "to",
            "the",
            "tags",
            "that",
            "will",
            "be",
            "created",
            "for",
            "the",
            "built",
            "image"
        ]
    },
    {
        "id": 845,
        "code": "\tpublic void tags(List<String> tags) {\n\t\tthis.tags.addAll(tags);\n\t}",
        "summary_tokens": [
            "add",
            "entries",
            "to",
            "the",
            "tags",
            "that",
            "will",
            "be",
            "created",
            "for",
            "the",
            "built",
            "image"
        ]
    },
    {
        "id": 846,
        "code": "\tpublic String getNetwork() {\n\t\treturn this.network;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "network",
            "the",
            "build",
            "container",
            "will",
            "connect",
            "to"
        ]
    },
    {
        "id": 847,
        "code": "\tpublic void setNetwork(String network) {\n\t\tthis.network = network;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "network",
            "the",
            "build",
            "container",
            "will",
            "connect",
            "to"
        ]
    },
    {
        "id": 848,
        "code": "\tpublic CacheSpec getBuildCache() {\n\t\treturn this.buildCache;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "build",
            "cache",
            "that",
            "will",
            "be",
            "used",
            "when",
            "building",
            "the",
            "image"
        ]
    },
    {
        "id": 849,
        "code": "\tpublic void buildCache(Action<CacheSpec> action) {\n\t\taction.execute(this.buildCache);\n\t}",
        "summary_tokens": [
            "customizes",
            "the",
            "cache",
            "spec",
            "for",
            "the",
            "build",
            "cache",
            "using",
            "the",
            "given",
            "action"
        ]
    },
    {
        "id": 850,
        "code": "\tpublic CacheSpec getLaunchCache() {\n\t\treturn this.launchCache;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "launch",
            "cache",
            "that",
            "will",
            "be",
            "used",
            "when",
            "building",
            "the",
            "image"
        ]
    },
    {
        "id": 851,
        "code": "\tpublic void launchCache(Action<CacheSpec> action) {\n\t\taction.execute(this.launchCache);\n\t}",
        "summary_tokens": [
            "customizes",
            "the",
            "cache",
            "spec",
            "for",
            "the",
            "launch",
            "cache",
            "using",
            "the",
            "given",
            "action"
        ]
    },
    {
        "id": 852,
        "code": "\tpublic DockerSpec getDocker() {\n\t\treturn this.docker;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "docker",
            "configuration",
            "the",
            "builder",
            "will",
            "use"
        ]
    },
    {
        "id": 853,
        "code": "\tpublic void docker(Action<DockerSpec> action) {\n\t\taction.execute(this.docker);\n\t}",
        "summary_tokens": [
            "configures",
            "the",
            "docker",
            "connection",
            "using",
            "the",
            "given",
            "action"
        ]
    },
    {
        "id": 854,
        "code": "\tpublic LayeredSpec getLayered() {\n\t\treturn this.layered;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "spec",
            "that",
            "describes",
            "the",
            "layers",
            "in",
            "a",
            "layered",
            "jar"
        ]
    },
    {
        "id": 855,
        "code": "\tpublic void layered(Action<LayeredSpec> action) {\n\t\taction.execute(this.layered);\n\t}",
        "summary_tokens": [
            "configures",
            "the",
            "jar",
            "s",
            "layering",
            "using",
            "the",
            "given",
            "action"
        ]
    },
    {
        "id": 856,
        "code": "\tpublic CopySpec getBootInf() {\n\t\tCopySpec child = getProject().copySpec();\n\t\tthis.bootInfSpec.with(child);\n\t\treturn child;\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "copy",
            "spec",
            "that",
            "can",
            "be",
            "used",
            "to",
            "add",
            "content",
            "to",
            "the",
            "boot",
            "inf",
            "directory",
            "of",
            "the",
            "jar"
        ]
    },
    {
        "id": 857,
        "code": "\tpublic CopySpec bootInf(Action<CopySpec> action) {\n\t\tCopySpec bootInf = getBootInf();\n\t\taction.execute(bootInf);\n\t\treturn bootInf;\n\t}",
        "summary_tokens": [
            "calls",
            "the",
            "given",
            "action",
            "to",
            "add",
            "content",
            "to",
            "the",
            "boot",
            "inf",
            "directory",
            "of",
            "the",
            "jar"
        ]
    },
    {
        "id": 858,
        "code": "\tprotected ZipCompression resolveZipCompression(FileCopyDetails details) {\n\t\treturn isLibrary(details) ? ZipCompression.STORED : ZipCompression.DEFLATED;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "zip",
            "compression",
            "that",
            "should",
            "be",
            "used",
            "when",
            "adding",
            "the",
            "file",
            "represented",
            "by",
            "the",
            "given",
            "details",
            "to",
            "the",
            "jar"
        ]
    },
    {
        "id": 859,
        "code": "\tprotected boolean isLibrary(FileCopyDetails details) {\n\t\tString path = details.getRelativePath().getPathString();\n\t\treturn path.startsWith(LIB_DIRECTORY);\n\t}",
        "summary_tokens": [
            "return",
            "if",
            "the",
            "file",
            "copy",
            "details",
            "are",
            "for",
            "a",
            "library"
        ]
    },
    {
        "id": 860,
        "code": "\tprivate static <T> Action<CopySpec> fromCallTo(Callable<T> callable) {\n\t\treturn (spec) -> spec.from(callTo(callable));\n\t}",
        "summary_tokens": [
            "syntactic",
            "sugar",
            "that",
            "makes",
            "copy",
            "spec",
            "into",
            "calls",
            "a",
            "little",
            "easier",
            "to",
            "read"
        ]
    },
    {
        "id": 861,
        "code": "\tprivate static <T> Callable<T> callTo(Callable<T> callable) {\n\t\treturn callable;\n\t}",
        "summary_tokens": [
            "syntactic",
            "sugar",
            "that",
            "makes",
            "copy",
            "spec",
            "from",
            "calls",
            "a",
            "little",
            "easier",
            "to",
            "read"
        ]
    },
    {
        "id": 862,
        "code": "\tpublic FileCollection getProvidedClasspath() {\n\t\treturn this.providedClasspath;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "provided",
            "classpath",
            "the",
            "contents",
            "of",
            "which",
            "will",
            "be",
            "included",
            "in",
            "the",
            "web",
            "inf",
            "lib",
            "provided",
            "directory",
            "of",
            "the",
            "war"
        ]
    },
    {
        "id": 863,
        "code": "\tpublic void providedClasspath(Object... classpath) {\n\t\tFileCollection existingClasspath = this.providedClasspath;\n\t\tthis.providedClasspath = getProject()\n\t\t\t\t.files((existingClasspath != null) ? existingClasspath : Collections.emptyList(), classpath);\n\t}",
        "summary_tokens": [
            "adds",
            "files",
            "to",
            "the",
            "provided",
            "classpath",
            "to",
            "include",
            "in",
            "the",
            "web",
            "inf",
            "lib",
            "provided",
            "directory",
            "of",
            "the",
            "war"
        ]
    },
    {
        "id": 864,
        "code": "\tpublic void setProvidedClasspath(Object classpath) {\n\t\tthis.providedClasspath = getProject().files(classpath);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "provided",
            "classpath",
            "to",
            "include",
            "in",
            "the",
            "web",
            "inf",
            "lib",
            "provided",
            "directory",
            "of",
            "the",
            "war"
        ]
    },
    {
        "id": 865,
        "code": "\tprotected ZipCompression resolveZipCompression(FileCopyDetails details) {\n\t\treturn isLibrary(details) ? ZipCompression.STORED : ZipCompression.DEFLATED;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "zip",
            "compression",
            "that",
            "should",
            "be",
            "used",
            "when",
            "adding",
            "the",
            "file",
            "represented",
            "by",
            "the",
            "given",
            "details",
            "to",
            "the",
            "jar"
        ]
    },
    {
        "id": 866,
        "code": "\tpublic LayeredSpec getLayered() {\n\t\treturn this.layered;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "spec",
            "that",
            "describes",
            "the",
            "layers",
            "in",
            "a",
            "layered",
            "jar"
        ]
    },
    {
        "id": 867,
        "code": "\tpublic void layered(Action<LayeredSpec> action) {\n\t\taction.execute(this.layered);\n\t}",
        "summary_tokens": [
            "configures",
            "the",
            "war",
            "s",
            "layering",
            "using",
            "the",
            "given",
            "action"
        ]
    },
    {
        "id": 868,
        "code": "\tprotected boolean isLibrary(FileCopyDetails details) {\n\t\tString path = details.getRelativePath().getPathString();\n\t\treturn path.startsWith(LIB_DIRECTORY) || path.startsWith(LIB_PROVIDED_DIRECTORY);\n\t}",
        "summary_tokens": [
            "return",
            "if",
            "the",
            "file",
            "copy",
            "details",
            "are",
            "for",
            "a",
            "library"
        ]
    },
    {
        "id": 869,
        "code": "\tprivate static <T> Action<CopySpec> fromCallTo(Callable<T> callable) {\n\t\treturn (spec) -> spec.from(callTo(callable));\n\t}",
        "summary_tokens": [
            "syntactic",
            "sugar",
            "that",
            "makes",
            "copy",
            "spec",
            "into",
            "calls",
            "a",
            "little",
            "easier",
            "to",
            "read"
        ]
    },
    {
        "id": 870,
        "code": "\tprivate static <T> Callable<T> callTo(Callable<T> callable) {\n\t\treturn callable;\n\t}",
        "summary_tokens": [
            "syntactic",
            "sugar",
            "that",
            "makes",
            "copy",
            "spec",
            "from",
            "calls",
            "a",
            "little",
            "easier",
            "to",
            "read"
        ]
    },
    {
        "id": 871,
        "code": "\tpublic void volume(Action<VolumeCacheSpec> action) {\n\t\tif (this.cache != null) {\n\t\t\tthrow new GradleException(\"Each image building cache can be configured only once\");\n\t\t}\n\t\tVolumeCacheSpec spec = new VolumeCacheSpec();\n\t\taction.execute(spec);\n\t\tthis.cache = Cache.volume(spec.getName());\n\t}",
        "summary_tokens": [
            "configures",
            "a",
            "volume",
            "cache",
            "using",
            "the",
            "given",
            "action"
        ]
    },
    {
        "id": 872,
        "code": "\tpublic DockerRegistrySpec getBuilderRegistry() {\n\t\treturn this.builderRegistry;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "docker",
            "registry",
            "spec",
            "that",
            "configures",
            "authentication",
            "to",
            "the",
            "builder",
            "registry"
        ]
    },
    {
        "id": 873,
        "code": "\tpublic void builderRegistry(Action<DockerRegistrySpec> action) {\n\t\taction.execute(this.builderRegistry);\n\t}",
        "summary_tokens": [
            "customizes",
            "the",
            "docker",
            "registry",
            "spec",
            "that",
            "configures",
            "authentication",
            "to",
            "the",
            "builder",
            "registry"
        ]
    },
    {
        "id": 874,
        "code": "\tpublic DockerRegistrySpec getPublishRegistry() {\n\t\treturn this.publishRegistry;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "docker",
            "registry",
            "spec",
            "that",
            "configures",
            "authentication",
            "to",
            "the",
            "publishing",
            "registry"
        ]
    },
    {
        "id": 875,
        "code": "\tpublic void publishRegistry(Action<DockerRegistrySpec> action) {\n\t\taction.execute(this.publishRegistry);\n\t}",
        "summary_tokens": [
            "customizes",
            "the",
            "docker",
            "registry",
            "spec",
            "that",
            "configures",
            "authentication",
            "to",
            "the",
            "publishing",
            "registry"
        ]
    },
    {
        "id": 876,
        "code": "\tDockerConfiguration asDockerConfiguration() {\n\t\tDockerConfiguration dockerConfiguration = new DockerConfiguration();\n\t\tdockerConfiguration = customizeHost(dockerConfiguration);\n\t\tdockerConfiguration = dockerConfiguration.withBindHostToBuilder(this.bindHostToBuilder);\n\t\tdockerConfiguration = customizeBuilderAuthentication(dockerConfiguration);\n\t\tdockerConfiguration = customizePublishAuthentication(dockerConfiguration);\n\t\treturn dockerConfiguration;\n\t}",
        "summary_tokens": [
            "returns",
            "this",
            "configuration",
            "as",
            "a",
            "docker",
            "configuration",
            "instance"
        ]
    },
    {
        "id": 877,
        "code": "\tpublic Map<String, String> getProperties() {\n\t\treturn this.properties;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "properties",
            "that",
            "are",
            "applied",
            "to",
            "the",
            "launch",
            "script",
            "when",
            "it",
            "s",
            "being",
            "including",
            "in",
            "the",
            "executable",
            "archive"
        ]
    },
    {
        "id": 878,
        "code": "\tpublic void properties(Map<String, String> properties) {\n\t\tthis.properties.putAll(properties);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "properties",
            "that",
            "are",
            "applied",
            "to",
            "the",
            "launch",
            "script",
            "when",
            "it",
            "s",
            "being",
            "including",
            "in",
            "the",
            "executable",
            "archive"
        ]
    },
    {
        "id": 879,
        "code": "\tpublic File getScript() {\n\t\treturn this.script;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "script",
            "file",
            "that",
            "will",
            "be",
            "included",
            "in",
            "the",
            "executable",
            "archive"
        ]
    },
    {
        "id": 880,
        "code": "\tpublic void setScript(File script) {\n\t\tthis.script = script;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "script",
            "file",
            "that",
            "will",
            "be",
            "included",
            "in",
            "the",
            "executable",
            "archive"
        ]
    },
    {
        "id": 881,
        "code": "\tpublic boolean isIncludeLayerTools() {\n\t\treturn this.includeLayerTools;\n\t}",
        "summary_tokens": [
            "returns",
            "whether",
            "the",
            "layer",
            "tools",
            "should",
            "be",
            "included",
            "as",
            "a",
            "dependency",
            "in",
            "the",
            "layered",
            "archive"
        ]
    },
    {
        "id": 882,
        "code": "\tpublic void setIncludeLayerTools(boolean includeLayerTools) {\n\t\tthis.includeLayerTools = includeLayerTools;\n\t}",
        "summary_tokens": [
            "sets",
            "whether",
            "the",
            "layer",
            "tools",
            "should",
            "be",
            "included",
            "as",
            "a",
            "dependency",
            "in",
            "the",
            "layered",
            "archive"
        ]
    },
    {
        "id": 883,
        "code": "\tpublic boolean isEnabled() {\n\t\treturn this.enabled;\n\t}",
        "summary_tokens": [
            "returns",
            "whether",
            "the",
            "layers"
        ]
    },
    {
        "id": 884,
        "code": "\tpublic void setEnabled(boolean enabled) {\n\t\tthis.enabled = enabled;\n\t}",
        "summary_tokens": [
            "sets",
            "whether",
            "the",
            "layers"
        ]
    },
    {
        "id": 885,
        "code": "\tpublic ApplicationSpec getApplication() {\n\t\treturn this.application;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "application",
            "spec",
            "that",
            "controls",
            "the",
            "layers",
            "to",
            "which",
            "application",
            "classes",
            "and",
            "resources",
            "belong"
        ]
    },
    {
        "id": 886,
        "code": "\tpublic void setApplication(ApplicationSpec spec) {\n\t\tthis.application = spec;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "application",
            "spec",
            "that",
            "controls",
            "the",
            "layers",
            "to",
            "which",
            "application",
            "classes",
            "are",
            "resources",
            "belong"
        ]
    },
    {
        "id": 887,
        "code": "\tpublic void application(Action<ApplicationSpec> action) {\n\t\taction.execute(this.application);\n\t}",
        "summary_tokens": [
            "customizes",
            "the",
            "application",
            "spec",
            "using",
            "the",
            "given",
            "action"
        ]
    },
    {
        "id": 888,
        "code": "\tpublic DependenciesSpec getDependencies() {\n\t\treturn this.dependencies;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "dependencies",
            "spec",
            "that",
            "controls",
            "the",
            "layers",
            "to",
            "which",
            "dependencies",
            "belong"
        ]
    },
    {
        "id": 889,
        "code": "\tpublic void setDependencies(DependenciesSpec spec) {\n\t\tthis.dependencies = spec;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "dependencies",
            "spec",
            "that",
            "controls",
            "the",
            "layers",
            "to",
            "which",
            "dependencies",
            "belong"
        ]
    },
    {
        "id": 890,
        "code": "\tpublic void dependencies(Action<DependenciesSpec> action) {\n\t\taction.execute(this.dependencies);\n\t}",
        "summary_tokens": [
            "customizes",
            "the",
            "dependencies",
            "spec",
            "using",
            "the",
            "given",
            "action"
        ]
    },
    {
        "id": 891,
        "code": "\tpublic List<String> getLayerOrder() {\n\t\treturn this.layerOrder;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "order",
            "of",
            "the",
            "layers",
            "in",
            "the",
            "archive",
            "from",
            "least",
            "to",
            "most",
            "frequently",
            "changing"
        ]
    },
    {
        "id": 892,
        "code": "\tpublic void setLayerOrder(List<String> layerOrder) {\n\t\tthis.layerOrder = layerOrder;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "order",
            "of",
            "the",
            "layers",
            "in",
            "the",
            "archive",
            "from",
            "least",
            "to",
            "most",
            "frequently",
            "changing"
        ]
    },
    {
        "id": 893,
        "code": "\tLayers asLayers() {\n\t\tLayers layers = this.layers;\n\t\tif (layers == null) {\n\t\t\tlayers = createLayers();\n\t\t\tthis.layers = layers;\n\t\t}\n\t\treturn layers;\n\t}",
        "summary_tokens": [
            "return",
            "this",
            "configuration",
            "as",
            "a",
            "layers",
            "instance"
        ]
    },
    {
        "id": 894,
        "code": "\tpublic boolean isOptimizedLaunch() {\n\t\treturn this.optimizedLaunch;\n\t}",
        "summary_tokens": [
            "returns",
            "true",
            "if",
            "the",
            "jvm",
            "s",
            "launch",
            "should",
            "be",
            "optimized",
            "otherwise",
            "false"
        ]
    },
    {
        "id": 895,
        "code": "\tpublic void setOptimizedLaunch(boolean optimizedLaunch) {\n\t\tthis.optimizedLaunch = optimizedLaunch;\n\t}",
        "summary_tokens": [
            "sets",
            "whether",
            "the",
            "jvm",
            "s",
            "launch",
            "should",
            "be",
            "optimized"
        ]
    },
    {
        "id": 896,
        "code": "\tpublic void sourceResources(SourceSet sourceSet) {\n\t\tFile resourcesDir = sourceSet.getOutput().getResourcesDir();\n\t\tSet<File> srcDirs = sourceSet.getResources().getSrcDirs();\n\t\tsetClasspath(getProject().files(srcDirs, getClasspath()).filter((file) -> !file.equals(resourcesDir)));\n\t}",
        "summary_tokens": [
            "adds",
            "the",
            "source",
            "directory",
            "set",
            "get",
            "src",
            "dirs",
            "source",
            "directories",
            "of",
            "the",
            "given",
            "source",
            "set",
            "s",
            "source",
            "set",
            "get",
            "resources",
            "resources",
            "to",
            "the",
            "start",
            "of",
            "the",
            "classpath",
            "in",
            "place",
            "of",
            "the",
            "source",
            "set",
            "get",
            "output",
            "output",
            "s",
            "source",
            "set",
            "output",
            "get",
            "resources",
            "dir",
            "resources",
            "directory"
        ]
    },
    {
        "id": 897,
        "code": "\tString getName() {\n\t\treturn this.name;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "name",
            "of",
            "this",
            "command"
        ]
    },
    {
        "id": 898,
        "code": "\tString getDescription() {\n\t\treturn this.description;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "description",
            "of",
            "this",
            "command"
        ]
    },
    {
        "id": 899,
        "code": "\tOptions getOptions() {\n\t\treturn this.options;\n\t}",
        "summary_tokens": [
            "return",
            "options",
            "that",
            "this",
            "command",
            "accepts"
        ]
    },
    {
        "id": 900,
        "code": "\tParameters getParameters() {\n\t\treturn this.parameters;\n\t}",
        "summary_tokens": [
            "return",
            "parameters",
            "that",
            "this",
            "command",
            "accepts"
        ]
    },
    {
        "id": 901,
        "code": "\tfinal void run(Deque<String> args) {\n\t\tList<String> parameters = new ArrayList<>();\n\t\tMap<Option, String> options = new HashMap<>();\n\t\twhile (!args.isEmpty()) {\n\t\t\tString arg = args.removeFirst();\n\t\t\tOption option = this.options.find(arg);\n\t\t\tif (option != null) {\n\t\t\t\toptions.put(option, option.claimArg(args));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tparameters.add(arg);\n\t\t\t}\n\t\t}\n\t\trun(options, parameters);\n\t}",
        "summary_tokens": [
            "run",
            "the",
            "command",
            "by",
            "processing",
            "the",
            "remaining",
            "arguments"
        ]
    },
    {
        "id": 902,
        "code": "\tstatic Command find(Collection<? extends Command> commands, String name) {\n\t\tfor (Command command : commands) {\n\t\t\tif (command.getName().equals(name)) {\n\t\t\t\treturn command;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "static",
            "method",
            "that",
            "can",
            "be",
            "used",
            "to",
            "find",
            "a",
            "single",
            "command",
            "from",
            "a",
            "collection"
        ]
    },
    {
        "id": 903,
        "code": "\tstatic Layers get(Context context) {\n\t\tIndexedLayers indexedLayers = IndexedLayers.get(context);\n\t\tif (indexedLayers == null) {\n\t\t\tthrow new IllegalStateException(\"Failed to load layers.idx which is required by layertools\");\n\t\t}\n\t\treturn indexedLayers;\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "layers",
            "instance",
            "for",
            "the",
            "currently",
            "running",
            "application"
        ]
    },
    {
        "id": 904,
        "code": "\tvoid useLayers(Layers layers, LayersIndex layersIndex) {\n\t\tthis.layers = layers;\n\t\tthis.layersIndex = layersIndex;\n\t}",
        "summary_tokens": [
            "update",
            "this",
            "writer",
            "to",
            "use",
            "specific",
            "layers"
        ]
    },
    {
        "id": 905,
        "code": "\tpublic void writeManifest(Manifest manifest) throws IOException {\n\t\tJarArchiveEntry entry = new JarArchiveEntry(\"META-INF/MANIFEST.MF\");\n\t\twriteEntry(entry, manifest::write);\n\t}",
        "summary_tokens": [
            "write",
            "the",
            "specified",
            "manifest"
        ]
    },
    {
        "id": 906,
        "code": "\tpublic void writeNestedLibrary(String location, Library library) throws IOException {\n\t\tJarArchiveEntry entry = new JarArchiveEntry(location + library.getName());\n\t\tentry.setTime(getNestedLibraryTime(library));\n\t\tnew CrcAndSize(library::openStream).setupStoredEntry(entry);\n\t\ttry (InputStream inputStream = library.openStream()) {\n\t\t\twriteEntry(entry, library, new InputStreamEntryWriter(inputStream), new LibraryUnpackHandler(library));\n\t\t}\n\t}",
        "summary_tokens": [
            "write",
            "a",
            "nested",
            "library"
        ]
    },
    {
        "id": 907,
        "code": "\tpublic void writeIndexFile(String location, Collection<String> lines) throws IOException {\n\t\tif (location != null) {\n\t\t\tJarArchiveEntry entry = new JarArchiveEntry(location);\n\t\t\twriteEntry(entry, (outputStream) -> {\n\t\t\t\tBufferedWriter writer = new BufferedWriter(\n\t\t\t\t\t\tnew OutputStreamWriter(outputStream, StandardCharsets.UTF_8));\n\t\t\t\tfor (String line : lines) {\n\t\t\t\t\twriter.write(line);\n\t\t\t\t\twriter.write(\"\\n\");\n\t\t\t\t}\n\t\t\t\twriter.flush();\n\t\t\t});\n\t\t}\n\t}",
        "summary_tokens": [
            "write",
            "a",
            "simple",
            "index",
            "file",
            "containing",
            "the",
            "specified",
            "utf",
            "0",
            "lines"
        ]
    },
    {
        "id": 908,
        "code": "\tpublic void writeLoaderClasses(String loaderJarResourceName) throws IOException {\n\t\tURL loaderJar = getClass().getClassLoader().getResource(loaderJarResourceName);\n\t\ttry (JarInputStream inputStream = new JarInputStream(new BufferedInputStream(loaderJar.openStream()))) {\n\t\t\tJarEntry entry;\n\t\t\twhile ((entry = inputStream.getNextJarEntry()) != null) {\n\t\t\t\tif (isDirectoryEntry(entry) || isClassEntry(entry)) {\n\t\t\t\t\twriteEntry(new JarArchiveEntry(entry), new InputStreamEntryWriter(inputStream));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}",
        "summary_tokens": [
            "write",
            "the",
            "required",
            "spring",
            "boot",
            "loader",
            "classes",
            "to",
            "the",
            "jar"
        ]
    },
    {
        "id": 909,
        "code": "\tprivate void writeEntry(JarArchiveEntry entry, Library library, EntryWriter entryWriter,\n\t\t\tUnpackHandler unpackHandler) throws IOException {\n\t\tString name = entry.getName();\n\t\tif (this.writtenEntries.add(name)) {\n\t\t\twriteParentDirectoryEntries(name);\n\t\t\tentry.setUnixMode(name.endsWith(\"/\") ? UNIX_DIR_MODE : UNIX_FILE_MODE);\n\t\t\tentry.getGeneralPurposeBit().useUTF8ForNames(true);\n\t\t\tif (!entry.isDirectory() && entry.getSize() == -1) {\n\t\t\t\tentryWriter = SizeCalculatingEntryWriter.get(entryWriter);\n\t\t\t\tentry.setSize(entryWriter.size());\n\t\t\t}\n\t\t\tentryWriter = addUnpackCommentIfNecessary(entry, entryWriter, unpackHandler);\n\t\t\tupdateLayerIndex(entry, library);\n\t\t\twriteToArchive(entry, entryWriter);\n\t\t}\n\t}",
        "summary_tokens": [
            "perform",
            "the",
            "actual",
            "write",
            "of",
            "a",
            "jar",
            "entry"
        ]
    },
    {
        "id": 910,
        "code": "\tpublic String getGroupId() {\n\t\treturn this.groupId;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "group",
            "id",
            "of",
            "the",
            "coordinates"
        ]
    },
    {
        "id": 911,
        "code": "\tpublic String getArtifactId() {\n\t\treturn this.artifactId;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "artifact",
            "id",
            "of",
            "the",
            "coordinates"
        ]
    },
    {
        "id": 912,
        "code": "\tpublic String getVersion() {\n\t\treturn this.version;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "version",
            "of",
            "the",
            "coordinates"
        ]
    },
    {
        "id": 913,
        "code": "\tpublic String toString() {\n\t\treturn LibraryCoordinates.toStandardNotationString(this);\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "coordinates",
            "in",
            "the",
            "form",
            "group",
            "id",
            "artifact",
            "id",
            "version"
        ]
    },
    {
        "id": 914,
        "code": "\tstatic String sha1(InputStreamSupplier supplier) throws IOException {\n\t\ttry {\n\t\t\ttry (DigestInputStream inputStream = new DigestInputStream(supplier.openStream(),\n\t\t\t\t\tMessageDigest.getInstance(\"SHA-1\"))) {\n\t\t\t\tinputStream.readAllBytes();\n\t\t\t\treturn HexFormat.of().formatHex(inputStream.getMessageDigest().digest());\n\t\t\t}\n\t\t}\n\t\tcatch (NoSuchAlgorithmException ex) {\n\t\t\tthrow new IllegalStateException(ex);\n\t\t}\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "sha",
            "0",
            "digest",
            "from",
            "the",
            "supplied",
            "stream"
        ]
    },
    {
        "id": 915,
        "code": "\tdefault int size() {\n\t\treturn -1;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "size",
            "of",
            "the",
            "content",
            "that",
            "will",
            "be",
            "written",
            "or",
            "0",
            "if",
            "the",
            "size",
            "is",
            "not",
            "known"
        ]
    },
    {
        "id": 916,
        "code": "\tpublic static void removeDuplicatesFromOutputDirectory(File outputDirectory, File originDirectory) {\n\t\tif (originDirectory.isDirectory()) {\n\t\t\tfor (String name : originDirectory.list()) {\n\t\t\t\tFile targetFile = new File(outputDirectory, name);\n\t\t\t\tif (targetFile.exists() && targetFile.canWrite()) {\n\t\t\t\t\tif (!targetFile.isDirectory()) {\n\t\t\t\t\t\ttargetFile.delete();\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tFileUtils.removeDuplicatesFromOutputDirectory(targetFile, new File(originDirectory, name));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}",
        "summary_tokens": [
            "utility",
            "to",
            "remove",
            "duplicate",
            "files",
            "from",
            "an",
            "output",
            "directory",
            "if",
            "they",
            "already",
            "exist",
            "in",
            "an",
            "origin"
        ]
    },
    {
        "id": 917,
        "code": "\tpublic static String sha1Hash(File file) throws IOException {\n\t\treturn Digest.sha1(InputStreamSupplier.forFile(file));\n\t}",
        "summary_tokens": [
            "generate",
            "a",
            "sha",
            "0",
            "hash",
            "for",
            "a",
            "given",
            "file"
        ]
    },
    {
        "id": 918,
        "code": "\tpublic void packageImage(Libraries libraries, BiConsumer<ZipEntry, EntryWriter> exporter) throws IOException {\n\t\tpackageImage(libraries, new DelegatingJarWriter(exporter));\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "packaged",
            "image"
        ]
    },
    {
        "id": 919,
        "code": "\tstatic InputStreamSupplier forFile(File file) {\n\t\treturn () -> new FileInputStream(file);\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "create",
            "an",
            "input",
            "stream",
            "supplier",
            "for",
            "the",
            "given",
            "file"
        ]
    },
    {
        "id": 920,
        "code": "\tpublic ProcessBuilder processBuilder(String... arguments) {\n\t\tProcessBuilder processBuilder = new ProcessBuilder(toString());\n\t\tprocessBuilder.command().addAll(Arrays.asList(arguments));\n\t\treturn processBuilder;\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "new",
            "process",
            "builder",
            "that",
            "will",
            "run",
            "with",
            "the",
            "java",
            "executable"
        ]
    },
    {
        "id": 921,
        "code": "\tpublic void add(Layer layer, String name) {\n\t\tString[] segments = name.split(\"/\");\n\t\tNode node = this.root;\n\t\tfor (int i = 0; i < segments.length; i++) {\n\t\t\tboolean isDirectory = i < (segments.length - 1);\n\t\t\tnode = node.updateOrAddNode(segments[i], isDirectory, layer);\n\t\t}\n\t}",
        "summary_tokens": [
            "add",
            "an",
            "item",
            "to",
            "the",
            "index"
        ]
    },
    {
        "id": 922,
        "code": "\tpublic void writeTo(OutputStream out) throws IOException {\n\t\tMultiValueMap<Layer, String> index = new LinkedMultiValueMap<>();\n\t\tthis.root.buildIndex(\"\", index);\n\t\tindex.values().forEach(Collections::sort);\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(out, StandardCharsets.UTF_8));\n\t\tfor (Layer layer : this.layers) {\n\t\t\tList<String> names = index.get(layer);\n\t\t\twriter.write(\"- \\\"\" + layer + \"\\\":\\n\");\n\t\t\tif (names != null) {\n\t\t\t\tfor (String name : names) {\n\t\t\t\t\twriter.write(\"  - \\\"\" + name + \"\\\"\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\twriter.flush();\n\t}",
        "summary_tokens": [
            "write",
            "the",
            "layer",
            "index",
            "to",
            "an",
            "output",
            "stream"
        ]
    },
    {
        "id": 923,
        "code": "\tdefault String getClasspathIndexFileLocation() {\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "location",
            "of",
            "the",
            "classpath",
            "index",
            "file",
            "that",
            "should",
            "be",
            "written",
            "or",
            "null",
            "if",
            "not",
            "index",
            "is",
            "required"
        ]
    },
    {
        "id": 924,
        "code": "\tdefault String getLayersIndexFileLocation() {\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "location",
            "of",
            "the",
            "layer",
            "index",
            "file",
            "that",
            "should",
            "be",
            "written",
            "or",
            "null",
            "if",
            "not",
            "index",
            "is",
            "required"
        ]
    },
    {
        "id": 925,
        "code": "\tpublic static Layout forFile(File file) {\n\t\tif (file == null) {\n\t\t\tthrow new IllegalArgumentException(\"File must not be null\");\n\t\t}\n\t\tString lowerCaseFileName = file.getName().toLowerCase(Locale.ENGLISH);\n\t\tif (lowerCaseFileName.endsWith(\".jar\")) {\n\t\t\treturn new Jar();\n\t\t}\n\t\tif (lowerCaseFileName.endsWith(\".war\")) {\n\t\t\treturn new War();\n\t\t}\n\t\tif (file.isDirectory() || lowerCaseFileName.endsWith(\".zip\")) {\n\t\t\treturn new Expanded();\n\t\t}\n\t\tthrow new IllegalStateException(\"Unable to deduce layout for '\" + file + \"'\");\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "layout",
            "for",
            "the",
            "given",
            "source",
            "file"
        ]
    },
    {
        "id": 926,
        "code": "\tpublic String getName() {\n\t\treturn this.name;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "name",
            "of",
            "file",
            "as",
            "it",
            "should",
            "be",
            "written"
        ]
    },
    {
        "id": 927,
        "code": "\tpublic File getFile() {\n\t\treturn this.file;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "library",
            "file"
        ]
    },
    {
        "id": 928,
        "code": "\tInputStream openStream() throws IOException {\n\t\treturn new FileInputStream(this.file);\n\t}",
        "summary_tokens": [
            "open",
            "a",
            "stream",
            "that",
            "provides",
            "the",
            "content",
            "of",
            "the",
            "source",
            "file"
        ]
    },
    {
        "id": 929,
        "code": "\tpublic LibraryScope getScope() {\n\t\treturn this.scope;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "scope",
            "of",
            "the",
            "library"
        ]
    },
    {
        "id": 930,
        "code": "\tpublic LibraryCoordinates getCoordinates() {\n\t\treturn this.coordinates;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "library",
            "coordinates",
            "coordinates",
            "of",
            "the",
            "library"
        ]
    },
    {
        "id": 931,
        "code": "\tpublic boolean isUnpackRequired() {\n\t\treturn this.unpackRequired;\n\t}",
        "summary_tokens": [
            "return",
            "if",
            "the",
            "file",
            "cannot",
            "be",
            "used",
            "directly",
            "as",
            "a",
            "nested",
            "jar",
            "and",
            "needs",
            "to",
            "be",
            "unpacked"
        ]
    },
    {
        "id": 932,
        "code": "\tpublic boolean isLocal() {\n\t\treturn this.local;\n\t}",
        "summary_tokens": [
            "return",
            "if",
            "the",
            "library",
            "is",
            "local",
            "part",
            "of",
            "the",
            "same",
            "build",
            "to",
            "the",
            "application",
            "that",
            "is",
            "being",
            "packaged"
        ]
    },
    {
        "id": 933,
        "code": "\tpublic boolean isIncluded() {\n\t\treturn this.included;\n\t}",
        "summary_tokens": [
            "return",
            "if",
            "the",
            "library",
            "is",
            "included",
            "in",
            "the",
            "fat",
            "jar"
        ]
    },
    {
        "id": 934,
        "code": "\tstatic LibraryCoordinates of(String groupId, String artifactId, String version) {\n\t\treturn new DefaultLibraryCoordinates(groupId, artifactId, version);\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "create",
            "library",
            "coordinates",
            "with",
            "the",
            "specified",
            "values"
        ]
    },
    {
        "id": 935,
        "code": "\tstatic String toStandardNotationString(LibraryCoordinates coordinates) {\n\t\tif (coordinates == null) {\n\t\t\treturn \"::\";\n\t\t}\n\t\tStringBuilder builder = new StringBuilder();\n\t\tbuilder.append((coordinates.getGroupId() != null) ? coordinates.getGroupId() : \"\");\n\t\tbuilder.append(\":\");\n\t\tbuilder.append((coordinates.getArtifactId() != null) ? coordinates.getArtifactId() : \"\");\n\t\tbuilder.append(\":\");\n\t\tbuilder.append((coordinates.getVersion() != null) ? coordinates.getVersion() : \"\");\n\t\treturn builder.toString();\n\t}",
        "summary_tokens": [
            "utility",
            "method",
            "that",
            "returns",
            "the",
            "given",
            "coordinates",
            "using",
            "the",
            "standard",
            "group",
            "artifact",
            "version",
            "form"
        ]
    },
    {
        "id": 936,
        "code": "\tpublic static String findMainClass(JarFile jarFile, String classesLocation) throws IOException {\n\t\treturn doWithMainClasses(jarFile, classesLocation, MainClass::getName);\n\t}",
        "summary_tokens": [
            "find",
            "the",
            "main",
            "class",
            "in",
            "a",
            "given",
            "jar",
            "file"
        ]
    },
    {
        "id": 937,
        "code": "\tpublic static String findSingleMainClass(JarFile jarFile, String classesLocation, String annotationName)\n\t\t\tthrows IOException {\n\t\tSingleMainClassCallback callback = new SingleMainClassCallback(annotationName);\n\t\tMainClassFinder.doWithMainClasses(jarFile, classesLocation, callback);\n\t\treturn callback.getMainClassName();\n\t}",
        "summary_tokens": [
            "find",
            "a",
            "single",
            "main",
            "class",
            "in",
            "a",
            "given",
            "jar",
            "file"
        ]
    },
    {
        "id": 938,
        "code": "\tstatic <T> T doWithMainClasses(JarFile jarFile, String classesLocation, MainClassCallback<T> callback)\n\t\t\tthrows IOException {\n\t\tList<JarEntry> classEntries = getClassEntries(jarFile, classesLocation);\n\t\tclassEntries.sort(new ClassEntryComparator());\n\t\tfor (JarEntry entry : classEntries) {\n\t\t\ttry (InputStream inputStream = new BufferedInputStream(jarFile.getInputStream(entry))) {\n\t\t\t\tClassDescriptor classDescriptor = createClassDescriptor(inputStream);\n\t\t\t\tif (classDescriptor != null && classDescriptor.isMainMethodFound()) {\n\t\t\t\t\tString className = convertToClassName(entry.getName(), classesLocation);\n\t\t\t\t\tT result = callback.doWith(new MainClass(className, classDescriptor.getAnnotationNames()));\n\t\t\t\t\tif (result != null) {\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "perform",
            "the",
            "given",
            "callback",
            "operation",
            "on",
            "all",
            "main",
            "classes",
            "from",
            "the",
            "given",
            "jar"
        ]
    },
    {
        "id": 939,
        "code": "\tpublic void setBackupSource(boolean backupSource) {\n\t\tthis.backupSource = backupSource;\n\t}",
        "summary_tokens": [
            "sets",
            "if",
            "source",
            "files",
            "should",
            "be",
            "backed",
            "up",
            "when",
            "they",
            "would",
            "be",
            "overwritten"
        ]
    },
    {
        "id": 940,
        "code": "\tpublic void repackage(File destination, Libraries libraries, LaunchScript launchScript, FileTime lastModifiedTime)\n\t\t\tthrows IOException {\n\t\tAssert.isTrue(destination != null && !destination.isDirectory(), \"Invalid destination\");\n\t\tgetLayout(); \n\t\tdestination = destination.getAbsoluteFile();\n\t\tFile source = getSource();\n\t\tif (isAlreadyPackaged() && source.equals(destination)) {\n\t\t\treturn;\n\t\t}\n\t\tFile workingSource = source;\n\t\tif (source.equals(destination)) {\n\t\t\tworkingSource = getBackupFile();\n\t\t\tworkingSource.delete();\n\t\t\trenameFile(source, workingSource);\n\t\t}\n\t\tdestination.delete();\n\t\ttry {\n\t\t\ttry (JarFile sourceJar = new JarFile(workingSource)) {\n\t\t\t\trepackage(sourceJar, destination, libraries, launchScript, lastModifiedTime);\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tif (!this.backupSource && !source.equals(workingSource)) {\n\t\t\t\tdeleteFile(workingSource);\n\t\t\t}\n\t\t}\n\t}",
        "summary_tokens": [
            "repackage",
            "to",
            "the",
            "given",
            "destination",
            "so",
            "that",
            "it",
            "can",
            "be",
            "launched",
            "using",
            "java",
            "jar"
        ]
    },
    {
        "id": 941,
        "code": "\tpublic Process getRunningProcess() {\n\t\treturn this.process;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "running",
            "process"
        ]
    },
    {
        "id": 942,
        "code": "\tpublic boolean handleSigInt() {\n\t\tif (allowChildToHandleSigInt()) {\n\t\t\treturn true;\n\t\t}\n\t\treturn doKill();\n\t}",
        "summary_tokens": [
            "return",
            "if",
            "the",
            "process",
            "was",
            "stopped"
        ]
    },
    {
        "id": 943,
        "code": "\tpublic static void attachSignalHandler(Runnable runnable) {\n\t\tSignal.handle(SIG_INT, (signal) -> runnable.run());\n\t}",
        "summary_tokens": [
            "handle",
            "int",
            "signals",
            "by",
            "calling",
            "the",
            "specified",
            "runnable"
        ]
    },
    {
        "id": 944,
        "code": "\tprotected boolean isSearchCandidate(Archive.Entry entry) {\n\t\tif (getArchiveEntryPathPrefix() == null) {\n\t\t\treturn true;\n\t\t}\n\t\treturn entry.getName().startsWith(getArchiveEntryPathPrefix());\n\t}",
        "summary_tokens": [
            "determine",
            "if",
            "the",
            "specified",
            "entry",
            "is",
            "a",
            "candidate",
            "for",
            "further",
            "searching"
        ]
    },
    {
        "id": 945,
        "code": "\tprotected boolean isPostProcessingClassPathArchives() {\n\t\treturn true;\n\t}",
        "summary_tokens": [
            "return",
            "if",
            "post",
            "processing",
            "needs",
            "to",
            "be",
            "applied",
            "to",
            "the",
            "archives"
        ]
    },
    {
        "id": 946,
        "code": "\tprotected void postProcessClassPathArchives(List<Archive> archives) throws Exception {\n\t}",
        "summary_tokens": [
            "called",
            "to",
            "post",
            "process",
            "archive",
            "entries",
            "before",
            "they",
            "are",
            "used"
        ]
    },
    {
        "id": 947,
        "code": "\tprotected String getArchiveEntryPathPrefix() {\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "path",
            "prefix",
            "for",
            "entries",
            "in",
            "the",
            "archive"
        ]
    },
    {
        "id": 948,
        "code": "\tprotected ClassLoader createClassLoader(URL[] urls) throws Exception {\n\t\treturn new LaunchedURLClassLoader(isExploded(), getArchive(), urls, getClass().getClassLoader());\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "classloader",
            "for",
            "the",
            "specified",
            "urls"
        ]
    },
    {
        "id": 949,
        "code": "\tprotected void launch(String[] args, String launchClass, ClassLoader classLoader) throws Exception {\n\t\tThread.currentThread().setContextClassLoader(classLoader);\n\t\tcreateMainMethodRunner(launchClass, args, classLoader).run();\n\t}",
        "summary_tokens": [
            "launch",
            "the",
            "application",
            "given",
            "the",
            "archive",
            "file",
            "and",
            "a",
            "fully",
            "configured",
            "classloader"
        ]
    },
    {
        "id": 950,
        "code": "\tprotected MainMethodRunner createMainMethodRunner(String mainClass, String[] args, ClassLoader classLoader) {\n\t\treturn new MainMethodRunner(mainClass, args);\n\t}",
        "summary_tokens": [
            "create",
            "the",
            "main",
            "method",
            "runner",
            "used",
            "to",
            "launch",
            "the",
            "application"
        ]
    },
    {
        "id": 951,
        "code": "\tprotected boolean isExploded() {\n\t\treturn false;\n\t}",
        "summary_tokens": [
            "returns",
            "if",
            "the",
            "launcher",
            "is",
            "running",
            "in",
            "an",
            "exploded",
            "mode"
        ]
    },
    {
        "id": 952,
        "code": "\tprotected Archive getArchive() {\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "root",
            "archive"
        ]
    },
    {
        "id": 953,
        "code": "\tdefault boolean isExploded() {\n\t\treturn false;\n\t}",
        "summary_tokens": [
            "return",
            "if",
            "the",
            "archive",
            "is",
            "exploded",
            "already",
            "unpacked"
        ]
    },
    {
        "id": 954,
        "code": "",
        "summary_tokens": [
            "closes",
            "the",
            "archive",
            "releasing",
            "any",
            "open",
            "resources"
        ]
    },
    {
        "id": 955,
        "code": "\tpublic File getFile() {\n\t\treturn this.fileAccess.file;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "underlying",
            "file"
        ]
    },
    {
        "id": 956,
        "code": "\tlong getStartOfArchive(RandomAccessData data) {\n\t\tlong length = Bytes.littleEndianValue(this.block, this.offset + 12, 4);\n\t\tlong specifiedOffset = (this.zip64End != null) ? this.zip64End.centralDirectoryOffset\n\t\t\t\t: Bytes.littleEndianValue(this.block, this.offset + 16, 4);\n\t\tlong zip64EndSize = (this.zip64End != null) ? this.zip64End.getSize() : 0L;\n\t\tint zip64LocSize = (this.zip64End != null) ? Zip64Locator.ZIP64_LOCSIZE : 0;\n\t\tlong actualOffset = data.getSize() - this.size - length - zip64EndSize - zip64LocSize;\n\t\treturn actualOffset - specifiedOffset;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "location",
            "in",
            "the",
            "data",
            "that",
            "the",
            "archive",
            "actually",
            "starts"
        ]
    },
    {
        "id": 957,
        "code": "\tRandomAccessData getCentralDirectory(RandomAccessData data) {\n\t\tif (this.zip64End != null) {\n\t\t\treturn this.zip64End.getCentralDirectory(data);\n\t\t}\n\t\tlong offset = Bytes.littleEndianValue(this.block, this.offset + 16, 4);\n\t\tlong length = Bytes.littleEndianValue(this.block, this.offset + 12, 4);\n\t\treturn data.getSubsection(offset, length);\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "bytes",
            "of",
            "the",
            "central",
            "directory",
            "based",
            "on",
            "the",
            "offset",
            "indicated",
            "in",
            "this",
            "record"
        ]
    },
    {
        "id": 958,
        "code": "\tint getNumberOfRecords() {\n\t\tif (this.zip64End != null) {\n\t\t\treturn this.zip64End.getNumberOfRecords();\n\t\t}\n\t\tlong numberOfRecords = Bytes.littleEndianValue(this.block, this.offset + 10, 2);\n\t\treturn (int) numberOfRecords;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "number",
            "of",
            "zip",
            "entries",
            "in",
            "the",
            "file"
        ]
    },
    {
        "id": 959,
        "code": "\tprivate long decodeMsDosFormatDateTime(long datetime) {\n\t\tint year = getChronoValue(((datetime >> 25) & 0x7f) + 1980, ChronoField.YEAR);\n\t\tint month = getChronoValue((datetime >> 21) & 0x0f, ChronoField.MONTH_OF_YEAR);\n\t\tint day = getChronoValue((datetime >> 16) & 0x1f, ChronoField.DAY_OF_MONTH);\n\t\tint hour = getChronoValue((datetime >> 11) & 0x1f, ChronoField.HOUR_OF_DAY);\n\t\tint minute = getChronoValue((datetime >> 5) & 0x3f, ChronoField.MINUTE_OF_HOUR);\n\t\tint second = getChronoValue((datetime << 1) & 0x3e, ChronoField.SECOND_OF_MINUTE);\n\t\treturn ZonedDateTime.of(year, month, day, hour, minute, second, 0, ZoneId.systemDefault()).toInstant()\n\t\t\t\t.truncatedTo(ChronoUnit.SECONDS).toEpochMilli();\n\t}",
        "summary_tokens": [
            "decode",
            "ms",
            "dos",
            "date",
            "time",
            "details"
        ]
    },
    {
        "id": 960,
        "code": "\tRandomAccessData parse(RandomAccessData data, boolean skipPrefixBytes) throws IOException {\n\t\tCentralDirectoryEndRecord endRecord = new CentralDirectoryEndRecord(data);\n\t\tif (skipPrefixBytes) {\n\t\t\tdata = getArchiveData(endRecord, data);\n\t\t}\n\t\tRandomAccessData centralDirectoryData = endRecord.getCentralDirectory(data);\n\t\tvisitStart(endRecord, centralDirectoryData);\n\t\tparseEntries(endRecord, centralDirectoryData);\n\t\tvisitEnd();\n\t\treturn data;\n\t}",
        "summary_tokens": [
            "parse",
            "the",
            "source",
            "data",
            "triggering",
            "central",
            "directory",
            "visitor",
            "visitors"
        ]
    },
    {
        "id": 961,
        "code": "\tURL getUrl() throws MalformedURLException {\n\t\treturn new URL(this.jarFile.getUrl(), getName());\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "url",
            "for",
            "this",
            "jar",
            "entry"
        ]
    },
    {
        "id": 962,
        "code": "\tpublic static String getProperty(String key, String defaultValue, String text) {\n\t\ttry {\n\t\t\tString propVal = System.getProperty(key);\n\t\t\tif (propVal == null) {\n\t\t\t\t\n\t\t\t\tpropVal = System.getenv(key);\n\t\t\t}\n\t\t\tif (propVal == null) {\n\t\t\t\t\n\t\t\t\tString name = key.replace('.', '_');\n\t\t\t\tpropVal = System.getenv(name);\n\t\t\t}\n\t\t\tif (propVal == null) {\n\t\t\t\t\n\t\t\t\tString name = key.toUpperCase(Locale.ENGLISH).replace('.', '_');\n\t\t\t\tpropVal = System.getenv(name);\n\t\t\t}\n\t\t\tif (propVal != null) {\n\t\t\t\treturn propVal;\n\t\t\t}\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\tSystem.err.println(\"Could not resolve key '\" + key + \"' in '\" + text\n\t\t\t\t\t+ \"' as system property or in environment: \" + ex);\n\t\t}\n\t\treturn defaultValue;\n\t}",
        "summary_tokens": [
            "search",
            "the",
            "system",
            "properties",
            "and",
            "environment",
            "variables",
            "for",
            "a",
            "value",
            "with",
            "the",
            "provided",
            "key"
        ]
    },
    {
        "id": 963,
        "code": "\tprivate FilterArtifacts getFilters(ArtifactsFilter... additionalFilters) {\n\t\tFilterArtifacts filters = new FilterArtifacts();\n\t\tfor (ArtifactsFilter additionalFilter : additionalFilters) {\n\t\t\tfilters.addFilter(additionalFilter);\n\t\t}\n\t\tfilters.addFilter(new MatchingGroupIdFilter(cleanFilterConfig(this.excludeGroupIds)));\n\t\tif (this.includes != null && !this.includes.isEmpty()) {\n\t\t\tfilters.addFilter(new IncludeFilter(this.includes));\n\t\t}\n\t\tif (this.excludes != null && !this.excludes.isEmpty()) {\n\t\t\tfilters.addFilter(new ExcludeFilter(this.excludes));\n\t\t}\n\t\tfilters.addFilter(new JarTypeFilter());\n\t\treturn filters;\n\t}",
        "summary_tokens": [
            "return",
            "artifact",
            "filters",
            "configured",
            "for",
            "this",
            "mojo"
        ]
    },
    {
        "id": 964,
        "code": "\tprotected LayoutType getLayout() {\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "type",
            "of",
            "archive",
            "that",
            "should",
            "be",
            "packaged",
            "by",
            "this",
            "mojo"
        ]
    },
    {
        "id": 965,
        "code": "\tprotected LayoutFactory getLayoutFactory() {\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "layout",
            "factory",
            "that",
            "will",
            "be",
            "used",
            "to",
            "determine",
            "the",
            "layout",
            "type",
            "if",
            "no",
            "explicit",
            "layout",
            "is",
            "set"
        ]
    },
    {
        "id": 966,
        "code": "\tprotected <P extends Packager> P getConfiguredPackager(Supplier<P> supplier) {\n\t\tP packager = supplier.get();\n\t\tpackager.setLayoutFactory(getLayoutFactory());\n\t\tpackager.addMainClassTimeoutWarningListener(new LoggingMainClassTimeoutWarningListener(this::getLog));\n\t\tpackager.setMainClass(this.mainClass);\n\t\tLayoutType layout = getLayout();\n\t\tif (layout != null) {\n\t\t\tgetLog().info(\"Layout: \" + layout);\n\t\t\tpackager.setLayout(layout.layout());\n\t\t}\n\t\tif (this.layers == null) {\n\t\t\tpackager.setLayers(IMPLICIT_LAYERS);\n\t\t}\n\t\telse if (this.layers.isEnabled()) {\n\t\t\tpackager.setLayers((this.layers.getConfiguration() != null)\n\t\t\t\t\t? getCustomLayers(this.layers.getConfiguration()) : IMPLICIT_LAYERS);\n\t\t\tpackager.setIncludeRelevantJarModeJars(this.layers.isIncludeLayerTools());\n\t\t}\n\t\treturn packager;\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "packager",
            "configured",
            "for",
            "this",
            "mojo"
        ]
    },
    {
        "id": 967,
        "code": "\tprotected final Libraries getLibraries(Collection<Dependency> unpacks) throws MojoExecutionException {\n\t\tSet<Artifact> artifacts = this.project.getArtifacts();\n\t\tSet<Artifact> includedArtifacts = filterDependencies(artifacts, getAdditionalFilters());\n\t\treturn new ArtifactsLibraries(artifacts, includedArtifacts, this.session.getProjects(), unpacks, getLog());\n\t}",
        "summary_tokens": [
            "return",
            "libraries",
            "that",
            "the",
            "packager",
            "can",
            "use"
        ]
    },
    {
        "id": 968,
        "code": "\tprotected Artifact getSourceArtifact(String classifier) {\n\t\tArtifact sourceArtifact = getArtifact(classifier);\n\t\treturn (sourceArtifact != null) ? sourceArtifact : this.project.getArtifact();\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "source",
            "artifact",
            "to",
            "repackage"
        ]
    },
    {
        "id": 969,
        "code": "\tprotected RunArguments resolveApplicationArguments() {\n\t\tRunArguments runArguments = (this.arguments != null) ? new RunArguments(this.arguments)\n\t\t\t\t: new RunArguments(this.commandlineArguments);\n\t\taddActiveProfileArgument(runArguments);\n\t\treturn runArguments;\n\t}",
        "summary_tokens": [
            "resolve",
            "the",
            "application",
            "arguments",
            "to",
            "use"
        ]
    },
    {
        "id": 970,
        "code": "\tprotected EnvVariables resolveEnvVariables() {\n\t\treturn new EnvVariables(this.environmentVariables);\n\t}",
        "summary_tokens": [
            "resolve",
            "the",
            "environment",
            "variables",
            "to",
            "use"
        ]
    },
    {
        "id": 971,
        "code": "\tprotected RunArguments resolveJvmArguments() {\n\t\tStringBuilder stringBuilder = new StringBuilder();\n\t\tif (this.systemPropertyVariables != null) {\n\t\t\tstringBuilder.append(this.systemPropertyVariables.entrySet().stream()\n\t\t\t\t\t.map((e) -> SystemPropertyFormatter.format(e.getKey(), e.getValue()))\n\t\t\t\t\t.collect(Collectors.joining(\" \")));\n\t\t}\n\t\tif (this.jvmArguments != null) {\n\t\t\tstringBuilder.append(\" \").append(this.jvmArguments);\n\t\t}\n\t\treturn new RunArguments(stringBuilder.toString());\n\t}",
        "summary_tokens": [
            "resolve",
            "the",
            "jvm",
            "arguments",
            "to",
            "use"
        ]
    },
    {
        "id": 972,
        "code": "\tprotected LayoutType getLayout() {\n\t\treturn this.layout;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "type",
            "of",
            "archive",
            "that",
            "should",
            "be",
            "used",
            "when",
            "building",
            "the",
            "image"
        ]
    },
    {
        "id": 973,
        "code": "\tprotected LayoutFactory getLayoutFactory() {\n\t\treturn this.layoutFactory;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "layout",
            "factory",
            "that",
            "will",
            "be",
            "used",
            "to",
            "determine",
            "the",
            "abstract",
            "packager",
            "mojo"
        ]
    },
    {
        "id": 974,
        "code": "\tprivate File getBackupFile() {\n\t\tArtifact source = getSourceArtifact(null);\n\t\tif (this.classifier != null && !this.classifier.equals(source.getClassifier())) {\n\t\t\treturn source.getFile();\n\t\t}\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "file",
            "to",
            "use",
            "to",
            "back",
            "up",
            "the",
            "original",
            "source"
        ]
    },
    {
        "id": 975,
        "code": "\tprotected final boolean equals(Artifact artifact, FilterableDependency dependency) {\n\t\tif (!dependency.getGroupId().equals(artifact.getGroupId())) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!dependency.getArtifactId().equals(artifact.getArtifactId())) {\n\t\t\treturn false;\n\t\t}\n\t\treturn (dependency.getClassifier() == null\n\t\t\t\t|| artifact.getClassifier() != null && dependency.getClassifier().equals(artifact.getClassifier()));\n\t}",
        "summary_tokens": [
            "check",
            "if",
            "the",
            "specified",
            "org"
        ]
    },
    {
        "id": 976,
        "code": "\tpublic String getHost() {\n\t\treturn this.host;\n\t}",
        "summary_tokens": [
            "the",
            "host",
            "address",
            "of",
            "the",
            "docker",
            "daemon"
        ]
    },
    {
        "id": 977,
        "code": "\tpublic boolean isTlsVerify() {\n\t\treturn this.tlsVerify;\n\t}",
        "summary_tokens": [
            "whether",
            "the",
            "docker",
            "daemon",
            "requires",
            "tls",
            "communication"
        ]
    },
    {
        "id": 978,
        "code": "\tpublic String getCertPath() {\n\t\treturn this.certPath;\n\t}",
        "summary_tokens": [
            "the",
            "path",
            "to",
            "tls",
            "certificate",
            "and",
            "key",
            "files",
            "required",
            "for",
            "tls",
            "communication",
            "with",
            "the",
            "docker",
            "daemon"
        ]
    },
    {
        "id": 979,
        "code": "\tpublic boolean isBindHostToBuilder() {\n\t\treturn this.bindHostToBuilder;\n\t}",
        "summary_tokens": [
            "whether",
            "to",
            "use",
            "the",
            "configured",
            "docker",
            "host",
            "in",
            "the",
            "builder",
            "container"
        ]
    },
    {
        "id": 980,
        "code": "\tDockerRegistry getBuilderRegistry() {\n\t\treturn this.builderRegistry;\n\t}",
        "summary_tokens": [
            "configuration",
            "of",
            "the",
            "docker",
            "registry",
            "where",
            "builder",
            "and",
            "run",
            "images",
            "are",
            "stored"
        ]
    },
    {
        "id": 981,
        "code": "\tvoid setBuilderRegistry(DockerRegistry builderRegistry) {\n\t\tthis.builderRegistry = builderRegistry;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "docker",
            "registry",
            "that",
            "configures",
            "authentication",
            "to",
            "the",
            "builder",
            "registry"
        ]
    },
    {
        "id": 982,
        "code": "\tDockerRegistry getPublishRegistry() {\n\t\treturn this.publishRegistry;\n\t}",
        "summary_tokens": [
            "configuration",
            "of",
            "the",
            "docker",
            "registry",
            "where",
            "the",
            "generated",
            "image",
            "will",
            "be",
            "published"
        ]
    },
    {
        "id": 983,
        "code": "\tvoid setPublishRegistry(DockerRegistry builderRegistry) {\n\t\tthis.publishRegistry = builderRegistry;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "docker",
            "registry",
            "that",
            "configures",
            "authentication",
            "to",
            "the",
            "publishing",
            "registry"
        ]
    },
    {
        "id": 984,
        "code": "\tDockerConfiguration asDockerConfiguration() {\n\t\tDockerConfiguration dockerConfiguration = new DockerConfiguration();\n\t\tdockerConfiguration = customizeHost(dockerConfiguration);\n\t\tdockerConfiguration = dockerConfiguration.withBindHostToBuilder(this.bindHostToBuilder);\n\t\tdockerConfiguration = customizeBuilderAuthentication(dockerConfiguration);\n\t\tdockerConfiguration = customizePublishAuthentication(dockerConfiguration);\n\t\treturn dockerConfiguration;\n\t}",
        "summary_tokens": [
            "returns",
            "this",
            "configuration",
            "as",
            "a",
            "docker",
            "configuration",
            "instance"
        ]
    },
    {
        "id": 985,
        "code": "\tpublic String getName() {\n\t\treturn this.name;\n\t}",
        "summary_tokens": [
            "the",
            "name",
            "of",
            "the",
            "created",
            "image"
        ]
    },
    {
        "id": 986,
        "code": "\tpublic String getBuilder() {\n\t\treturn this.builder;\n\t}",
        "summary_tokens": [
            "the",
            "name",
            "of",
            "the",
            "builder",
            "image",
            "to",
            "use",
            "to",
            "create",
            "the",
            "image"
        ]
    },
    {
        "id": 987,
        "code": "\tpublic String getRunImage() {\n\t\treturn this.runImage;\n\t}",
        "summary_tokens": [
            "the",
            "name",
            "of",
            "the",
            "run",
            "image",
            "to",
            "use",
            "to",
            "create",
            "the",
            "image"
        ]
    },
    {
        "id": 988,
        "code": "\tpublic Map<String, String> getEnv() {\n\t\treturn this.env;\n\t}",
        "summary_tokens": [
            "environment",
            "properties",
            "that",
            "should",
            "be",
            "passed",
            "to",
            "the",
            "builder"
        ]
    },
    {
        "id": 989,
        "code": "\tpublic Boolean getCleanCache() {\n\t\treturn this.cleanCache;\n\t}",
        "summary_tokens": [
            "if",
            "the",
            "cache",
            "should",
            "be",
            "cleaned",
            "before",
            "building"
        ]
    },
    {
        "id": 990,
        "code": "\tpublic boolean isVerboseLogging() {\n\t\treturn this.verboseLogging;\n\t}",
        "summary_tokens": [
            "if",
            "verbose",
            "logging",
            "is",
            "required"
        ]
    },
    {
        "id": 991,
        "code": "\tpublic PullPolicy getPullPolicy() {\n\t\treturn this.pullPolicy;\n\t}",
        "summary_tokens": [
            "if",
            "images",
            "should",
            "be",
            "pulled",
            "from",
            "a",
            "remote",
            "repository",
            "during",
            "image",
            "build"
        ]
    },
    {
        "id": 992,
        "code": "\tpublic Boolean getPublish() {\n\t\treturn this.publish;\n\t}",
        "summary_tokens": [
            "if",
            "the",
            "built",
            "image",
            "should",
            "be",
            "pushed",
            "to",
            "a",
            "registry"
        ]
    },
    {
        "id": 993,
        "code": "\tpublic String getNetwork() {\n\t\treturn this.network;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "network",
            "the",
            "build",
            "container",
            "will",
            "connect",
            "to"
        ]
    },
    {
        "id": 994,
        "code": "\tpublic boolean isIncludeLayerTools() {\n\t\treturn this.includeLayerTools;\n\t}",
        "summary_tokens": [
            "whether",
            "to",
            "include",
            "the",
            "layer",
            "tools",
            "jar"
        ]
    },
    {
        "id": 995,
        "code": "\tpublic File getConfiguration() {\n\t\treturn this.configuration;\n\t}",
        "summary_tokens": [
            "the",
            "location",
            "of",
            "the",
            "layers",
            "configuration",
            "file"
        ]
    },
    {
        "id": 996,
        "code": "\tpublic Properties getData() {\n\t\treturn this.data;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "data",
            "the",
            "properties",
            "being",
            "merged"
        ]
    },
    {
        "id": 997,
        "code": "\tprotected LayoutType getLayout() {\n\t\treturn this.layout;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "type",
            "of",
            "archive",
            "that",
            "should",
            "be",
            "packaged",
            "by",
            "this",
            "mojo"
        ]
    },
    {
        "id": 998,
        "code": "\tprotected LayoutFactory getLayoutFactory() {\n\t\treturn this.layoutFactory;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "layout",
            "factory",
            "that",
            "will",
            "be",
            "used",
            "to",
            "determine",
            "the",
            "abstract",
            "packager",
            "mojo"
        ]
    },
    {
        "id": 999,
        "code": "\tboolean isReady() throws MojoExecutionException {\n\t\ttry {\n\t\t\treturn (Boolean) this.connection.getAttribute(this.objectName, \"Ready\");\n\t\t}\n\t\tcatch (InstanceNotFoundException ex) {\n\t\t\treturn false; \n\t\t}\n\t\tcatch (AttributeNotFoundException ex) {\n\t\t\tthrow new IllegalStateException(\"Unexpected: attribute 'Ready' not available\", ex);\n\t\t}\n\t\tcatch (ReflectionException ex) {\n\t\t\tthrow new MojoExecutionException(\"Failed to retrieve Ready attribute\", ex.getCause());\n\t\t}\n\t\tcatch (MBeanException | IOException ex) {\n\t\t\tthrow new MojoExecutionException(ex.getMessage(), ex);\n\t\t}\n\t}",
        "summary_tokens": [
            "check",
            "if",
            "the",
            "spring",
            "application",
            "managed",
            "by",
            "this",
            "instance",
            "is",
            "ready"
        ]
    },
    {
        "id": 1000,
        "code": "\tvoid stop() throws MojoExecutionException, IOException, InstanceNotFoundException {\n\t\ttry {\n\t\t\tthis.connection.invoke(this.objectName, \"shutdown\", null, null);\n\t\t}\n\t\tcatch (ReflectionException ex) {\n\t\t\tthrow new MojoExecutionException(\"Shutdown failed\", ex.getCause());\n\t\t}\n\t\tcatch (MBeanException ex) {\n\t\t\tthrow new MojoExecutionException(\"Could not invoke shutdown operation\", ex);\n\t\t}\n\t}",
        "summary_tokens": [
            "stop",
            "the",
            "application",
            "managed",
            "by",
            "this",
            "instance"
        ]
    },
    {
        "id": 1001,
        "code": "\tstatic JMXConnector connect(int port) throws IOException {\n\t\tString url = \"service:jmx:rmi:///jndi/rmi://127.0.0.1:\" + port + \"/jmxrmi\";\n\t\tJMXServiceURL serviceUrl = new JMXServiceURL(url);\n\t\treturn JMXConnectorFactory.connect(serviceUrl, null);\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "connector",
            "for",
            "an",
            "javax"
        ]
    },
    {
        "id": 1002,
        "code": "\tpublic <T> T execute(long wait, int maxAttempts, Callable<T> callback) throws Exception {\n\t\tgetLog().debug(\"Waiting for spring application to start...\");\n\t\tfor (int i = 0; i < maxAttempts; i++) {\n\t\t\tT result = callback.call();\n\t\t\tif (result != null) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tString message = \"Spring application is not ready yet, waiting \" + wait + \"ms (attempt \" + (i + 1) + \")\";\n\t\t\tgetLog().debug(message);\n\t\t\tsynchronized (this.lock) {\n\t\t\t\ttry {\n\t\t\t\t\tthis.lock.wait(wait);\n\t\t\t\t}\n\t\t\t\tcatch (InterruptedException ex) {\n\t\t\t\t\tThread.currentThread().interrupt();\n\t\t\t\t\tthrow new IllegalStateException(\"Interrupted while waiting for Spring Boot app to start.\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthrow new MojoExecutionException(\n\t\t\t\t\"Spring application did not start before the configured timeout (\" + (wait * maxAttempts) + \"ms\");\n\t}",
        "summary_tokens": [
            "execute",
            "a",
            "task",
            "retrying",
            "it",
            "on",
            "failure"
        ]
    },
    {
        "id": 1003,
        "code": "\tpublic File getTestClassesLocation() {\n\t\ttry {\n\t\t\tFile location = new File(this.testClass.getProtectionDomain().getCodeSource().getLocation().toURI());\n\t\t\tif (location.getPath().endsWith(path(\"bin\", \"test\")) || location.getPath().endsWith(path(\"bin\", \"intTest\"))\n\t\t\t\t\t|| location.getPath().endsWith(path(\"build\", \"classes\", \"java\", \"test\"))\n\t\t\t\t\t|| location.getPath().endsWith(path(\"build\", \"classes\", \"java\", \"intTest\"))) {\n\t\t\t\treturn location;\n\t\t\t}\n\t\t\tthrow new IllegalStateException(\"Unexpected test classes location '\" + location + \"'\");\n\t\t}\n\t\tcatch (URISyntaxException ex) {\n\t\t\tthrow new IllegalStateException(\"Invalid test class code source location\", ex);\n\t\t}\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "location",
            "into",
            "which",
            "test",
            "classes",
            "have",
            "been",
            "built"
        ]
    },
    {
        "id": 1004,
        "code": "\tpublic File getTestResourcesLocation() {\n\t\tFile testClassesLocation = getTestClassesLocation();\n\t\tif (testClassesLocation.getPath().endsWith(path(\"bin\", \"test\"))\n\t\t\t\t|| testClassesLocation.getPath().endsWith(path(\"bin\", \"intTest\"))) {\n\t\t\treturn testClassesLocation;\n\t\t}\n\t\tif (testClassesLocation.getPath().endsWith(path(\"build\", \"classes\", \"java\", \"test\"))) {\n\t\t\treturn new File(testClassesLocation.getParentFile().getParentFile().getParentFile(), \"resources/test\");\n\t\t}\n\t\tif (testClassesLocation.getPath().endsWith(path(\"build\", \"classes\", \"java\", \"intTest\"))) {\n\t\t\treturn new File(testClassesLocation.getParentFile().getParentFile().getParentFile(), \"resources/intTest\");\n\t\t}\n\t\tthrow new IllegalStateException(\n\t\t\t\t\"Cannot determine test resources location from classes location '\" + testClassesLocation + \"'\");\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "location",
            "into",
            "which",
            "test",
            "resources",
            "have",
            "been",
            "built"
        ]
    },
    {
        "id": 1005,
        "code": "\tpublic File getRootLocation() {\n\t\treturn new File(\"build\");\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "root",
            "location",
            "into",
            "which",
            "build",
            "output",
            "is",
            "written"
        ]
    },
    {
        "id": 1006,
        "code": "\tpublic static DockerImageName cassandra() {\n\t\treturn DockerImageName.parse(\"cassandra\").withTag(CASSANDRA_VERSION);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "docker",
            "image",
            "name",
            "suitable",
            "for",
            "running",
            "cassandra"
        ]
    },
    {
        "id": 1007,
        "code": "\tpublic static DockerImageName couchbase() {\n\t\treturn DockerImageName.parse(\"couchbase/server\").withTag(COUCHBASE_VERSION);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "docker",
            "image",
            "name",
            "suitable",
            "for",
            "running",
            "couchbase"
        ]
    },
    {
        "id": 1008,
        "code": "\tpublic static DockerImageName elasticsearch() {\n\t\treturn DockerImageName.parse(\"docker.elastic.co/elasticsearch/elasticsearch\").withTag(ELASTICSEARCH_VERSION);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "docker",
            "image",
            "name",
            "suitable",
            "for",
            "running",
            "elasticsearch"
        ]
    },
    {
        "id": 1009,
        "code": "\tpublic static DockerImageName mongo() {\n\t\treturn DockerImageName.parse(\"mongo\").withTag(MONGO_VERSION);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "docker",
            "image",
            "name",
            "suitable",
            "for",
            "running",
            "mongo"
        ]
    },
    {
        "id": 1010,
        "code": "\tpublic static DockerImageName neo4j() {\n\t\treturn DockerImageName.parse(\"neo4j\").withTag(NEO4J_VERSION);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "docker",
            "image",
            "name",
            "suitable",
            "for",
            "running",
            "neo",
            "0",
            "j"
        ]
    },
    {
        "id": 1011,
        "code": "\tpublic static DockerImageName postgresql() {\n\t\treturn DockerImageName.parse(\"postgres\").withTag(POSTGRESQL_VERSION);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "docker",
            "image",
            "name",
            "suitable",
            "for",
            "running",
            "postgre",
            "sql"
        ]
    },
    {
        "id": 1012,
        "code": "\tpublic static DockerImageName redis() {\n\t\treturn DockerImageName.parse(\"redis\").withTag(REDIS_VERSION);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "docker",
            "image",
            "name",
            "suitable",
            "for",
            "running",
            "redis"
        ]
    },
    {
        "id": 1013,
        "code": "\tpublic static DockerImageName registry() {\n\t\treturn DockerImageName.parse(\"registry\").withTag(REGISTRY_VERSION);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "docker",
            "image",
            "name",
            "suitable",
            "for",
            "running",
            "a",
            "docker",
            "registry"
        ]
    },
    {
        "id": 1014,
        "code": "\tstatic ApplicationContextFactory ofContextClass(Class<? extends ConfigurableApplicationContext> contextClass) {\n\t\treturn of(() -> BeanUtils.instantiateClass(contextClass));\n\t}",
        "summary_tokens": [
            "creates",
            "an",
            "application",
            "context",
            "factory",
            "that",
            "will",
            "create",
            "contexts",
            "by",
            "instantiating",
            "the",
            "given",
            "context",
            "class",
            "via",
            "its",
            "primary",
            "constructor"
        ]
    },
    {
        "id": 1015,
        "code": "\tstatic ApplicationContextFactory of(Supplier<ConfigurableApplicationContext> supplier) {\n\t\treturn (webApplicationType) -> supplier.get();\n\t}",
        "summary_tokens": [
            "creates",
            "an",
            "application",
            "context",
            "factory",
            "that",
            "will",
            "create",
            "contexts",
            "by",
            "calling",
            "the",
            "given",
            "supplier"
        ]
    },
    {
        "id": 1016,
        "code": "\tpublic BootstrapContext getBootstrapContext() {\n\t\treturn (BootstrapContext) this.source;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "bootstrap",
            "context",
            "that",
            "was",
            "closed"
        ]
    },
    {
        "id": 1017,
        "code": "\tpublic ConfigurableApplicationContext getApplicationContext() {\n\t\treturn this.applicationContext;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "prepared",
            "application",
            "context"
        ]
    },
    {
        "id": 1018,
        "code": "\tpublic void close(ConfigurableApplicationContext applicationContext) {\n\t\tthis.events.multicastEvent(new BootstrapContextClosedEvent(this, applicationContext));\n\t}",
        "summary_tokens": [
            "method",
            "to",
            "be",
            "called",
            "when",
            "bootstrap",
            "context",
            "is",
            "closed",
            "and",
            "the",
            "application",
            "context",
            "is",
            "prepared"
        ]
    },
    {
        "id": 1019,
        "code": "\tpublic static boolean hasMatchingName(PropertySource<?> propertySource) {\n\t\treturn (propertySource != null) && propertySource.getName().equals(NAME);\n\t}",
        "summary_tokens": [
            "return",
            "true",
            "if",
            "the",
            "given",
            "source",
            "is",
            "named",
            "default",
            "properties"
        ]
    },
    {
        "id": 1020,
        "code": "\tpublic static void ifNotEmpty(Map<String, Object> source, Consumer<DefaultPropertiesPropertySource> action) {\n\t\tif (!CollectionUtils.isEmpty(source) && action != null) {\n\t\t\taction.accept(new DefaultPropertiesPropertySource(source));\n\t\t}\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "new",
            "default",
            "properties",
            "property",
            "source",
            "instance",
            "if",
            "the",
            "provided",
            "source",
            "is",
            "not",
            "empty"
        ]
    },
    {
        "id": 1021,
        "code": "\tpublic static void addOrMerge(Map<String, Object> source, MutablePropertySources sources) {\n\t\tif (!CollectionUtils.isEmpty(source)) {\n\t\t\tMap<String, Object> resultingSource = new HashMap<>();\n\t\t\tDefaultPropertiesPropertySource propertySource = new DefaultPropertiesPropertySource(resultingSource);\n\t\t\tif (sources.contains(NAME)) {\n\t\t\t\tmergeIfPossible(source, sources, resultingSource);\n\t\t\t\tsources.replace(NAME, propertySource);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresultingSource.putAll(source);\n\t\t\t\tsources.addLast(propertySource);\n\t\t\t}\n\t\t}\n\t}",
        "summary_tokens": [
            "add",
            "a",
            "new",
            "default",
            "properties",
            "property",
            "source",
            "or",
            "merge",
            "with",
            "an",
            "existing",
            "one"
        ]
    },
    {
        "id": 1022,
        "code": "\tpublic static void moveToEnd(MutablePropertySources propertySources) {\n\t\tPropertySource<?> propertySource = propertySources.remove(NAME);\n\t\tif (propertySource != null) {\n\t\t\tpropertySources.addLast(propertySource);\n\t\t}\n\t}",
        "summary_tokens": [
            "move",
            "the",
            "default",
            "properties",
            "property",
            "source",
            "so",
            "that",
            "it",
            "s",
            "the",
            "last",
            "source",
            "in",
            "the",
            "given",
            "mutable",
            "property",
            "sources"
        ]
    },
    {
        "id": 1023,
        "code": "\tStandardEnvironment convertEnvironmentIfNecessary(ConfigurableEnvironment environment,\n\t\t\tClass<? extends StandardEnvironment> type) {\n\t\tif (type.equals(environment.getClass())) {\n\t\t\treturn (StandardEnvironment) environment;\n\t\t}\n\t\treturn convertEnvironment(environment, type);\n\t}",
        "summary_tokens": [
            "converts",
            "the",
            "given",
            "environment",
            "to",
            "the",
            "given",
            "standard",
            "environment",
            "type"
        ]
    },
    {
        "id": 1024,
        "code": "\tpublic int getExitCode() {\n\t\treturn this.exitCode;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "exit",
            "code",
            "that",
            "will",
            "be",
            "used",
            "to",
            "exit",
            "the",
            "jvm"
        ]
    },
    {
        "id": 1025,
        "code": "\tint getExitCode() {\n\t\tint exitCode = 0;\n\t\tfor (ExitCodeGenerator generator : this.generators) {\n\t\t\ttry {\n\t\t\t\tint value = generator.getExitCode();\n\t\t\t\tif (value != 0) {\n\t\t\t\t\texitCode = value;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\texitCode = 1;\n\t\t\t\tex.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn exitCode;\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "final",
            "exit",
            "code",
            "that",
            "should",
            "be",
            "returned"
        ]
    },
    {
        "id": 1026,
        "code": "\tstatic LazyInitializationExcludeFilter forBeanTypes(Class<?>... types) {\n\t\treturn (beanName, beanDefinition, beanType) -> {\n\t\t\tfor (Class<?> type : types) {\n\t\t\t\tif (type.isAssignableFrom(beanType)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "that",
            "creates",
            "a",
            "filter",
            "for",
            "the",
            "given",
            "bean",
            "types"
        ]
    },
    {
        "id": 1027,
        "code": "\tstatic void withHook(Hook hook, Runnable action) {\n\t\thooks.get().add(hook);\n\t\ttry {\n\t\t\taction.run();\n\t\t}\n\t\tfinally {\n\t\t\thooks.get().remove(hook);\n\t\t}\n\t}",
        "summary_tokens": [
            "runs",
            "the",
            "given",
            "action",
            "with",
            "the",
            "given",
            "hook",
            "attached"
        ]
    },
    {
        "id": 1028,
        "code": "\tdefault void starting(ConfigurableBootstrapContext bootstrapContext) {\n\t}",
        "summary_tokens": [
            "called",
            "immediately",
            "when",
            "the",
            "run",
            "method",
            "has",
            "first",
            "started"
        ]
    },
    {
        "id": 1029,
        "code": "\tdefault void environmentPrepared(ConfigurableBootstrapContext bootstrapContext,\n\t\t\tConfigurableEnvironment environment) {\n\t}",
        "summary_tokens": [
            "called",
            "once",
            "the",
            "environment",
            "has",
            "been",
            "prepared",
            "but",
            "before",
            "the",
            "application",
            "context",
            "has",
            "been",
            "created"
        ]
    },
    {
        "id": 1030,
        "code": "\tdefault void contextPrepared(ConfigurableApplicationContext context) {\n\t}",
        "summary_tokens": [
            "called",
            "once",
            "the",
            "application",
            "context",
            "has",
            "been",
            "created",
            "and",
            "prepared",
            "but",
            "before",
            "sources",
            "have",
            "been",
            "loaded"
        ]
    },
    {
        "id": 1031,
        "code": "\tdefault void contextLoaded(ConfigurableApplicationContext context) {\n\t}",
        "summary_tokens": [
            "called",
            "once",
            "the",
            "application",
            "context",
            "has",
            "been",
            "loaded",
            "but",
            "before",
            "it",
            "has",
            "been",
            "refreshed"
        ]
    },
    {
        "id": 1032,
        "code": "\tdefault void started(ConfigurableApplicationContext context, Duration timeTaken) {\n\t}",
        "summary_tokens": [
            "the",
            "context",
            "has",
            "been",
            "refreshed",
            "and",
            "the",
            "application",
            "has",
            "started",
            "but",
            "command",
            "line",
            "runner",
            "command",
            "line",
            "runners",
            "and",
            "application",
            "runner",
            "application",
            "runners",
            "have",
            "not",
            "been",
            "called"
        ]
    },
    {
        "id": 1033,
        "code": "\tdefault void ready(ConfigurableApplicationContext context, Duration timeTaken) {\n\t}",
        "summary_tokens": [
            "called",
            "immediately",
            "before",
            "the",
            "run",
            "method",
            "finishes",
            "when",
            "the",
            "application",
            "context",
            "has",
            "been",
            "refreshed",
            "and",
            "all",
            "command",
            "line",
            "runner",
            "command",
            "line",
            "runners",
            "and",
            "application",
            "runner",
            "application",
            "runners",
            "have",
            "been",
            "called"
        ]
    },
    {
        "id": 1034,
        "code": "\tdefault void failed(ConfigurableApplicationContext context, Throwable exception) {\n\t}",
        "summary_tokens": [
            "called",
            "when",
            "a",
            "failure",
            "occurs",
            "when",
            "running",
            "the",
            "application"
        ]
    },
    {
        "id": 1035,
        "code": "\tprivate void closeAndWait(ConfigurableApplicationContext context) {\n\t\tif (!context.isActive()) {\n\t\t\treturn;\n\t\t}\n\t\tcontext.close();\n\t\ttry {\n\t\t\tint waited = 0;\n\t\t\twhile (context.isActive()) {\n\t\t\t\tif (waited > TIMEOUT) {\n\t\t\t\t\tthrow new TimeoutException();\n\t\t\t\t}\n\t\t\t\tThread.sleep(SLEEP);\n\t\t\t\twaited += SLEEP;\n\t\t\t}\n\t\t}\n\t\tcatch (InterruptedException ex) {\n\t\t\tThread.currentThread().interrupt();\n\t\t\tlogger.warn(\"Interrupted waiting for application context \" + context + \" to become inactive\");\n\t\t}\n\t\tcatch (TimeoutException ex) {\n\t\t\tlogger.warn(\"Timed out waiting for application context \" + context + \" to become inactive\", ex);\n\t\t}\n\t}",
        "summary_tokens": [
            "call",
            "configurable",
            "application",
            "context",
            "close",
            "and",
            "wait",
            "until",
            "the",
            "context",
            "becomes",
            "inactive"
        ]
    },
    {
        "id": 1036,
        "code": "\tprivate boolean isLogConfigurationMessage(Throwable ex) {\n\t\tif (ex instanceof InvocationTargetException) {\n\t\t\treturn isLogConfigurationMessage(ex.getCause());\n\t\t}\n\t\tString message = ex.getMessage();\n\t\tif (message != null) {\n\t\t\tfor (String candidate : LOG_CONFIGURATION_MESSAGES) {\n\t\t\t\tif (message.contains(candidate)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}",
        "summary_tokens": [
            "check",
            "if",
            "the",
            "exception",
            "is",
            "a",
            "log",
            "configuration",
            "message",
            "i"
        ]
    },
    {
        "id": 1037,
        "code": "\tpublic static Ansi8BitColor foreground(int code) {\n\t\treturn new Ansi8BitColor(\"38;5;\", code);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "foreground",
            "ansi",
            "color",
            "code",
            "instance",
            "for",
            "the",
            "given",
            "code"
        ]
    },
    {
        "id": 1038,
        "code": "\tpublic static Ansi8BitColor background(int code) {\n\t\treturn new Ansi8BitColor(\"48;5;\", code);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "background",
            "ansi",
            "color",
            "code",
            "instance",
            "for",
            "the",
            "given",
            "code"
        ]
    },
    {
        "id": 1039,
        "code": "\tpublic static void setEnabled(Enabled enabled) {\n\t\tAssert.notNull(enabled, \"Enabled must not be null\");\n\t\tAnsiOutput.enabled = enabled;\n\t}",
        "summary_tokens": [
            "sets",
            "if",
            "ansi",
            "output",
            "is",
            "enabled"
        ]
    },
    {
        "id": 1040,
        "code": "\tpublic static Enabled getEnabled() {\n\t\treturn AnsiOutput.enabled;\n\t}",
        "summary_tokens": [
            "returns",
            "if",
            "ansi",
            "output",
            "is",
            "enabled",
            "if",
            "ansi",
            "enabled",
            "disabled",
            "or",
            "detected"
        ]
    },
    {
        "id": 1041,
        "code": "\tpublic static void setConsoleAvailable(Boolean consoleAvailable) {\n\t\tAnsiOutput.consoleAvailable = consoleAvailable;\n\t}",
        "summary_tokens": [
            "sets",
            "if",
            "the",
            "system"
        ]
    },
    {
        "id": 1042,
        "code": "\tpublic static String encode(AnsiElement element) {\n\t\tif (isEnabled()) {\n\t\t\treturn ENCODE_START + element + ENCODE_END;\n\t\t}\n\t\treturn \"\";\n\t}",
        "summary_tokens": [
            "encode",
            "a",
            "single",
            "ansi",
            "element",
            "if",
            "output",
            "is",
            "enabled"
        ]
    },
    {
        "id": 1043,
        "code": "\tpublic static String toString(Object... elements) {\n\t\tStringBuilder sb = new StringBuilder();\n\t\tif (isEnabled()) {\n\t\t\tbuildEnabled(sb, elements);\n\t\t}\n\t\telse {\n\t\t\tbuildDisabled(sb, elements);\n\t\t}\n\t\treturn sb.toString();\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "new",
            "ansi",
            "string",
            "from",
            "the",
            "specified",
            "elements"
        ]
    },
    {
        "id": 1044,
        "code": "\tdefault LivenessState getLivenessState() {\n\t\treturn getState(LivenessState.class, LivenessState.BROKEN);\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "liveness",
            "state",
            "of",
            "the",
            "application"
        ]
    },
    {
        "id": 1045,
        "code": "\tdefault ReadinessState getReadinessState() {\n\t\treturn getState(ReadinessState.class, ReadinessState.REFUSING_TRAFFIC);\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "readiness",
            "state",
            "of",
            "the",
            "application"
        ]
    },
    {
        "id": 1046,
        "code": "\tpublic S getState() {\n\t\treturn getPayload();\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "changed",
            "availability",
            "state"
        ]
    },
    {
        "id": 1047,
        "code": "\tpublic static <S extends AvailabilityState> void publish(ApplicationEventPublisher publisher, Object source,\n\t\t\tS state) {\n\t\tAssert.notNull(publisher, \"Publisher must not be null\");\n\t\tpublisher.publishEvent(new AvailabilityChangeEvent<>(source, state));\n\t}",
        "summary_tokens": [
            "convenience",
            "method",
            "that",
            "can",
            "be",
            "used",
            "to",
            "publish",
            "an",
            "availability",
            "change",
            "event",
            "to",
            "the",
            "given",
            "application",
            "context"
        ]
    },
    {
        "id": 1048,
        "code": "\tprotected SpringApplication createSpringApplication(ResourceLoader resourceLoader, Class<?>... sources) {\n\t\treturn new SpringApplication(resourceLoader, sources);\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "new",
            "spring",
            "application",
            "instance",
            "from",
            "the",
            "given",
            "sources",
            "using",
            "the",
            "given",
            "resource",
            "loader"
        ]
    },
    {
        "id": 1049,
        "code": "\tpublic ConfigurableApplicationContext context() {\n\t\treturn this.context;\n\t}",
        "summary_tokens": [
            "accessor",
            "for",
            "the",
            "current",
            "application",
            "context"
        ]
    },
    {
        "id": 1050,
        "code": "\tpublic SpringApplication application() {\n\t\treturn this.application;\n\t}",
        "summary_tokens": [
            "accessor",
            "for",
            "the",
            "current",
            "application"
        ]
    },
    {
        "id": 1051,
        "code": "\tpublic ConfigurableApplicationContext run(String... args) {\n\t\tif (this.running.get()) {\n\t\t\t\n\t\t\treturn this.context;\n\t\t}\n\t\tconfigureAsChildIfNecessary(args);\n\t\tif (this.running.compareAndSet(false, true)) {\n\t\t\tsynchronized (this.running) {\n\t\t\t\t\n\t\t\t\tthis.context = build().run(args);\n\t\t\t}\n\t\t}\n\t\treturn this.context;\n\t}",
        "summary_tokens": [
            "create",
            "an",
            "application",
            "context",
            "and",
            "its",
            "parent",
            "if",
            "specified",
            "with",
            "the",
            "command",
            "line",
            "args",
            "provided"
        ]
    },
    {
        "id": 1052,
        "code": "\tpublic SpringApplication build(String... args) {\n\t\tconfigureAsChildIfNecessary(args);\n\t\tthis.application.addPrimarySources(this.sources);\n\t\treturn this.application;\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "fully",
            "configured",
            "spring",
            "application",
            "that",
            "is",
            "ready",
            "to",
            "run"
        ]
    },
    {
        "id": 1053,
        "code": "\tpublic SpringApplicationBuilder child(Class<?>... sources) {\n\t\tSpringApplicationBuilder child = new SpringApplicationBuilder();\n\t\tchild.sources(sources);\n\n\t\t\n\t\tchild.properties(this.defaultProperties).environment(this.environment)\n\t\t\t\t.additionalProfiles(this.additionalProfiles);\n\t\tchild.parent = this;\n\n\t\t\n\t\t\n\t\t\n\t\tweb(WebApplicationType.NONE);\n\n\t\t\n\t\tbannerMode(Banner.Mode.OFF);\n\n\t\t\n\t\tthis.application.addPrimarySources(this.sources);\n\n\t\treturn child;\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "child",
            "application",
            "with",
            "the",
            "provided",
            "sources"
        ]
    },
    {
        "id": 1054,
        "code": "\tpublic SpringApplicationBuilder parent(ConfigurableApplicationContext parent) {\n\t\tthis.parent = new SpringApplicationBuilder();\n\t\tthis.parent.context = parent;\n\t\tthis.parent.running.set(true);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "add",
            "an",
            "already",
            "running",
            "parent",
            "context",
            "to",
            "an",
            "existing",
            "application"
        ]
    },
    {
        "id": 1055,
        "code": "\tpublic SpringApplicationBuilder sibling(Class<?>[] sources, String... args) {\n\t\treturn runAndExtractParent(args).child(sources);\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "sibling",
            "application",
            "one",
            "with",
            "the",
            "same",
            "parent"
        ]
    },
    {
        "id": 1056,
        "code": "\tpublic SpringApplicationBuilder contextFactory(ApplicationContextFactory factory) {\n\t\tthis.application.setApplicationContextFactory(factory);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "explicitly",
            "set",
            "the",
            "factory",
            "used",
            "to",
            "create",
            "the",
            "application",
            "context"
        ]
    },
    {
        "id": 1057,
        "code": "\tpublic SpringApplicationBuilder sources(Class<?>... sources) {\n\t\tthis.sources.addAll(new LinkedHashSet<>(Arrays.asList(sources)));\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "add",
            "more",
            "sources",
            "configuration",
            "classes",
            "and",
            "components",
            "to",
            "this",
            "application"
        ]
    },
    {
        "id": 1058,
        "code": "\tpublic SpringApplicationBuilder web(WebApplicationType webApplicationType) {\n\t\tthis.application.setWebApplicationType(webApplicationType);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "flag",
            "to",
            "explicitly",
            "request",
            "a",
            "specific",
            "type",
            "of",
            "web",
            "application"
        ]
    },
    {
        "id": 1059,
        "code": "\tpublic SpringApplicationBuilder logStartupInfo(boolean logStartupInfo) {\n\t\tthis.application.setLogStartupInfo(logStartupInfo);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "flag",
            "to",
            "indicate",
            "the",
            "startup",
            "information",
            "should",
            "be",
            "logged"
        ]
    },
    {
        "id": 1060,
        "code": "\tpublic SpringApplicationBuilder banner(Banner banner) {\n\t\tthis.application.setBanner(banner);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "banner",
            "instance",
            "which",
            "will",
            "be",
            "used",
            "to",
            "print",
            "the",
            "banner",
            "when",
            "no",
            "static",
            "banner",
            "file",
            "is",
            "provided"
        ]
    },
    {
        "id": 1061,
        "code": "\tpublic SpringApplicationBuilder headless(boolean headless) {\n\t\tthis.application.setHeadless(headless);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "sets",
            "if",
            "the",
            "application",
            "is",
            "headless",
            "and",
            "should",
            "not",
            "instantiate",
            "awt"
        ]
    },
    {
        "id": 1062,
        "code": "\tpublic SpringApplicationBuilder registerShutdownHook(boolean registerShutdownHook) {\n\t\tthis.registerShutdownHookApplied = true;\n\t\tthis.application.setRegisterShutdownHook(registerShutdownHook);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "sets",
            "if",
            "the",
            "created",
            "application",
            "context",
            "should",
            "have",
            "a",
            "shutdown",
            "hook",
            "registered"
        ]
    },
    {
        "id": 1063,
        "code": "\tpublic SpringApplicationBuilder main(Class<?> mainApplicationClass) {\n\t\tthis.application.setMainApplicationClass(mainApplicationClass);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "fixes",
            "the",
            "main",
            "application",
            "class",
            "that",
            "is",
            "used",
            "to",
            "anchor",
            "the",
            "startup",
            "messages"
        ]
    },
    {
        "id": 1064,
        "code": "\tpublic SpringApplicationBuilder addCommandLineProperties(boolean addCommandLineProperties) {\n\t\tthis.application.setAddCommandLineProperties(addCommandLineProperties);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "flag",
            "to",
            "indicate",
            "that",
            "command",
            "line",
            "arguments",
            "should",
            "be",
            "added",
            "to",
            "the",
            "environment"
        ]
    },
    {
        "id": 1065,
        "code": "\tpublic SpringApplicationBuilder setAddConversionService(boolean addConversionService) {\n\t\tthis.application.setAddConversionService(addConversionService);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "flag",
            "to",
            "indicate",
            "if",
            "the",
            "application",
            "conversion",
            "service",
            "should",
            "be",
            "added",
            "to",
            "the",
            "application",
            "context",
            "s",
            "environment"
        ]
    },
    {
        "id": 1066,
        "code": "\tpublic SpringApplicationBuilder addBootstrapRegistryInitializer(\n\t\t\tBootstrapRegistryInitializer bootstrapRegistryInitializer) {\n\t\tthis.application.addBootstrapRegistryInitializer(bootstrapRegistryInitializer);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "adds",
            "bootstrap",
            "registry",
            "initializer",
            "instances",
            "that",
            "can",
            "be",
            "used",
            "to",
            "initialize",
            "the",
            "bootstrap",
            "registry"
        ]
    },
    {
        "id": 1067,
        "code": "\tpublic SpringApplicationBuilder lazyInitialization(boolean lazyInitialization) {\n\t\tthis.application.setLazyInitialization(lazyInitialization);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "flag",
            "to",
            "control",
            "whether",
            "the",
            "application",
            "should",
            "be",
            "initialized",
            "lazily"
        ]
    },
    {
        "id": 1068,
        "code": "\tpublic SpringApplicationBuilder properties(Map<String, Object> defaults) {\n\t\tthis.defaultProperties.putAll(defaults);\n\t\tthis.application.setDefaultProperties(this.defaultProperties);\n\t\tif (this.parent != null) {\n\t\t\tthis.parent.properties(this.defaultProperties);\n\t\t\tthis.parent.environment(this.environment);\n\t\t}\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "default",
            "properties",
            "for",
            "the",
            "environment"
        ]
    },
    {
        "id": 1069,
        "code": "\tpublic SpringApplicationBuilder profiles(String... profiles) {\n\t\tthis.additionalProfiles.addAll(Arrays.asList(profiles));\n\t\tthis.application.setAdditionalProfiles(StringUtils.toStringArray(this.additionalProfiles));\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "add",
            "to",
            "the",
            "active",
            "spring",
            "profiles",
            "for",
            "this",
            "app",
            "and",
            "its",
            "parent",
            "and",
            "children"
        ]
    },
    {
        "id": 1070,
        "code": "\tpublic SpringApplicationBuilder beanNameGenerator(BeanNameGenerator beanNameGenerator) {\n\t\tthis.application.setBeanNameGenerator(beanNameGenerator);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "bean",
            "name",
            "generator",
            "for",
            "automatically",
            "generated",
            "bean",
            "names",
            "in",
            "the",
            "application",
            "context"
        ]
    },
    {
        "id": 1071,
        "code": "\tpublic SpringApplicationBuilder environment(ConfigurableEnvironment environment) {\n\t\tthis.application.setEnvironment(environment);\n\t\tthis.environment = environment;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "environment",
            "for",
            "the",
            "application",
            "context"
        ]
    },
    {
        "id": 1072,
        "code": "\tpublic SpringApplicationBuilder environmentPrefix(String environmentPrefix) {\n\t\tthis.application.setEnvironmentPrefix(environmentPrefix);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "prefix",
            "that",
            "should",
            "be",
            "applied",
            "when",
            "obtaining",
            "configuration",
            "properties",
            "from",
            "the",
            "system",
            "environment"
        ]
    },
    {
        "id": 1073,
        "code": "\tpublic SpringApplicationBuilder resourceLoader(ResourceLoader resourceLoader) {\n\t\tthis.application.setResourceLoader(resourceLoader);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "resource",
            "loader",
            "for",
            "the",
            "application",
            "context"
        ]
    },
    {
        "id": 1074,
        "code": "\tpublic SpringApplicationBuilder initializers(ApplicationContextInitializer<?>... initializers) {\n\t\tthis.application.addInitializers(initializers);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "add",
            "some",
            "initializers",
            "to",
            "the",
            "application",
            "applied",
            "to",
            "the",
            "application",
            "context",
            "before",
            "any",
            "bean",
            "definitions",
            "are",
            "loaded"
        ]
    },
    {
        "id": 1075,
        "code": "\tpublic SpringApplicationBuilder listeners(ApplicationListener<?>... listeners) {\n\t\tthis.application.addListeners(listeners);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "add",
            "some",
            "listeners",
            "to",
            "the",
            "application",
            "listening",
            "for",
            "spring",
            "application",
            "events",
            "as",
            "well",
            "as",
            "regular",
            "spring",
            "events",
            "once",
            "the",
            "context",
            "is",
            "running"
        ]
    },
    {
        "id": 1076,
        "code": "\tpublic SpringApplicationBuilder applicationStartup(ApplicationStartup applicationStartup) {\n\t\tthis.application.setApplicationStartup(applicationStartup);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "configure",
            "the",
            "application",
            "startup",
            "to",
            "be",
            "used",
            "with",
            "the",
            "application",
            "context",
            "for",
            "collecting",
            "startup",
            "metrics"
        ]
    },
    {
        "id": 1077,
        "code": "\tpublic SpringApplicationBuilder allowCircularReferences(boolean allowCircularReferences) {\n\t\tthis.application.setAllowCircularReferences(allowCircularReferences);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "whether",
            "to",
            "allow",
            "circular",
            "references",
            "between",
            "beans",
            "and",
            "automatically",
            "try",
            "to",
            "resolve",
            "them"
        ]
    },
    {
        "id": 1078,
        "code": "\tprotected Collection<Class<?>> sort(Collection<Class<?>> classes) {\n\t\treturn classes;\n\t}",
        "summary_tokens": [
            "sort",
            "configuration",
            "classes",
            "into",
            "the",
            "order",
            "that",
            "they",
            "should",
            "be",
            "applied"
        ]
    },
    {
        "id": 1079,
        "code": "\tprotected Configurations merge(Configurations other) {\n\t\tSet<Class<?>> mergedClasses = new LinkedHashSet<>(getClasses());\n\t\tmergedClasses.addAll(other.getClasses());\n\t\treturn merge(mergedClasses);\n\t}",
        "summary_tokens": [
            "merge",
            "configurations",
            "from",
            "another",
            "source",
            "of",
            "the",
            "same",
            "type"
        ]
    },
    {
        "id": 1080,
        "code": "\tpublic static Class<?>[] getClasses(Collection<Configurations> configurations) {\n\t\tList<Configurations> ordered = new ArrayList<>(configurations);\n\t\tordered.sort(COMPARATOR);\n\t\tList<Configurations> collated = collate(ordered);\n\t\tLinkedHashSet<Class<?>> classes = collated.stream().flatMap(Configurations::streamClasses)\n\t\t\t\t.collect(Collectors.toCollection(LinkedHashSet::new));\n\t\treturn ClassUtils.toClassArray(classes);\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "classes",
            "from",
            "all",
            "the",
            "specified",
            "configurations",
            "in",
            "the",
            "order",
            "that",
            "they",
            "would",
            "be",
            "registered"
        ]
    },
    {
        "id": 1081,
        "code": "\tpublic static ImportCandidates load(Class<?> annotation, ClassLoader classLoader) {\n\t\tAssert.notNull(annotation, \"'annotation' must not be null\");\n\t\tClassLoader classLoaderToUse = decideClassloader(classLoader);\n\t\tString location = String.format(LOCATION, annotation.getName());\n\t\tEnumeration<URL> urls = findUrlsInClasspath(classLoaderToUse, location);\n\t\tList<String> autoConfigurations = new ArrayList<>();\n\t\twhile (urls.hasMoreElements()) {\n\t\t\tURL url = urls.nextElement();\n\t\t\tautoConfigurations.addAll(readAutoConfigurations(url));\n\t\t}\n\t\treturn new ImportCandidates(autoConfigurations);\n\t}",
        "summary_tokens": [
            "loads",
            "the",
            "names",
            "of",
            "import",
            "candidates",
            "from",
            "the",
            "classpath"
        ]
    },
    {
        "id": 1082,
        "code": "\tpublic List<PropertySource<?>> getPropertySources() {\n\t\treturn this.propertySources;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "configuration",
            "data",
            "property",
            "sources",
            "in",
            "ascending",
            "priority",
            "order"
        ]
    },
    {
        "id": 1083,
        "code": "\tpublic Options getOptions(PropertySource<?> propertySource) {\n\t\tOptions options = this.propertySourceOptions.get(propertySource);\n\t\treturn (options != null) ? options : Options.NONE;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "options",
            "config",
            "data",
            "options",
            "that",
            "apply",
            "to",
            "the",
            "given",
            "source"
        ]
    },
    {
        "id": 1084,
        "code": "\tConfigDataActivationContext withProfiles(Profiles profiles) {\n\t\treturn new ConfigDataActivationContext(this.cloudPlatform, profiles);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "new",
            "config",
            "data",
            "activation",
            "context",
            "with",
            "specific",
            "profiles"
        ]
    },
    {
        "id": 1085,
        "code": "\tCloudPlatform getCloudPlatform() {\n\t\treturn this.cloudPlatform;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "active",
            "cloud",
            "platform",
            "or",
            "null"
        ]
    },
    {
        "id": 1086,
        "code": "\tProfiles getProfiles() {\n\t\treturn this.profiles;\n\t}",
        "summary_tokens": [
            "return",
            "profile",
            "information",
            "if",
            "it",
            "is",
            "available"
        ]
    },
    {
        "id": 1087,
        "code": "\tKind getKind() {\n\t\treturn this.kind;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "contributor",
            "kind"
        ]
    },
    {
        "id": 1088,
        "code": "\tboolean isActive(ConfigDataActivationContext activationContext) {\n\t\tif (this.kind == Kind.UNBOUND_IMPORT) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.properties == null || this.properties.isActive(activationContext);\n\t}",
        "summary_tokens": [
            "return",
            "if",
            "this",
            "contributor",
            "is",
            "currently",
            "active"
        ]
    },
    {
        "id": 1089,
        "code": "\tConfigDataResource getResource() {\n\t\treturn this.resource;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "resource",
            "that",
            "contributed",
            "this",
            "instance"
        ]
    },
    {
        "id": 1090,
        "code": "\tboolean isFromProfileSpecificImport() {\n\t\treturn this.fromProfileSpecificImport;\n\t}",
        "summary_tokens": [
            "return",
            "if",
            "the",
            "contributor",
            "is",
            "from",
            "a",
            "profile",
            "specific",
            "import"
        ]
    },
    {
        "id": 1091,
        "code": "\tPropertySource<?> getPropertySource() {\n\t\treturn this.propertySource;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "property",
            "source",
            "for",
            "this",
            "contributor"
        ]
    },
    {
        "id": 1092,
        "code": "\tConfigurationPropertySource getConfigurationPropertySource() {\n\t\treturn this.configurationPropertySource;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "configuration",
            "property",
            "source",
            "for",
            "this",
            "contributor"
        ]
    },
    {
        "id": 1093,
        "code": "\tboolean hasConfigDataOption(ConfigData.Option option) {\n\t\treturn this.configDataOptions.contains(option);\n\t}",
        "summary_tokens": [
            "return",
            "if",
            "the",
            "contributor",
            "has",
            "a",
            "specific",
            "config",
            "data",
            "option"
        ]
    },
    {
        "id": 1094,
        "code": "\tList<ConfigDataLocation> getImports() {\n\t\treturn (this.properties != null) ? this.properties.getImports() : Collections.emptyList();\n\t}",
        "summary_tokens": [
            "return",
            "any",
            "imports",
            "requested",
            "by",
            "this",
            "contributor"
        ]
    },
    {
        "id": 1095,
        "code": "\tboolean hasUnprocessedImports(ImportPhase importPhase) {\n\t\tif (getImports().isEmpty()) {\n\t\t\treturn false;\n\t\t}\n\t\treturn !this.children.containsKey(importPhase);\n\t}",
        "summary_tokens": [
            "return",
            "true",
            "if",
            "this",
            "contributor",
            "has",
            "imports",
            "that",
            "have",
            "not",
            "yet",
            "been",
            "processed",
            "in",
            "the",
            "given",
            "phase"
        ]
    },
    {
        "id": 1096,
        "code": "\tList<ConfigDataEnvironmentContributor> getChildren(ImportPhase importPhase) {\n\t\treturn this.children.getOrDefault(importPhase, Collections.emptyList());\n\t}",
        "summary_tokens": [
            "return",
            "children",
            "of",
            "this",
            "contributor",
            "for",
            "the",
            "given",
            "phase"
        ]
    },
    {
        "id": 1097,
        "code": "\tStream<ConfigDataEnvironmentContributor> stream() {\n\t\treturn StreamSupport.stream(spliterator(), false);\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "stream",
            "that",
            "traverses",
            "this",
            "contributor",
            "and",
            "all",
            "its",
            "children",
            "in",
            "priority",
            "order"
        ]
    },
    {
        "id": 1098,
        "code": "\tpublic Iterator<ConfigDataEnvironmentContributor> iterator() {\n\t\treturn new ContributorIterator();\n\t}",
        "summary_tokens": [
            "returns",
            "an",
            "iterator",
            "that",
            "traverses",
            "this",
            "contributor",
            "and",
            "all",
            "its",
            "children",
            "in",
            "priority",
            "order"
        ]
    },
    {
        "id": 1099,
        "code": "\tConfigDataEnvironmentContributor withBoundProperties(Iterable<ConfigDataEnvironmentContributor> contributors,\n\t\t\tConfigDataActivationContext activationContext) {\n\t\tIterable<ConfigurationPropertySource> sources = Collections.singleton(getConfigurationPropertySource());\n\t\tPlaceholdersResolver placeholdersResolver = new ConfigDataEnvironmentContributorPlaceholdersResolver(\n\t\t\t\tcontributors, activationContext, this, true);\n\t\tBinder binder = new Binder(sources, placeholdersResolver, null, null, null);\n\t\tConfigDataProperties properties = ConfigDataProperties.get(binder);\n\t\tif (properties != null && this.configDataOptions.contains(ConfigData.Option.IGNORE_IMPORTS)) {\n\t\t\tproperties = properties.withoutImports();\n\t\t}\n\t\treturn new ConfigDataEnvironmentContributor(Kind.BOUND_IMPORT, this.location, this.resource,\n\t\t\t\tthis.fromProfileSpecificImport, this.propertySource, this.configurationPropertySource, properties,\n\t\t\t\tthis.configDataOptions, null);\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "new",
            "config",
            "data",
            "environment",
            "contributor",
            "with",
            "bound",
            "config",
            "data",
            "properties"
        ]
    },
    {
        "id": 1100,
        "code": "\tConfigDataEnvironmentContributor withChildren(ImportPhase importPhase,\n\t\t\tList<ConfigDataEnvironmentContributor> children) {\n\t\tMap<ImportPhase, List<ConfigDataEnvironmentContributor>> updatedChildren = new LinkedHashMap<>(this.children);\n\t\tupdatedChildren.put(importPhase, children);\n\t\tif (importPhase == ImportPhase.AFTER_PROFILE_ACTIVATION) {\n\t\t\tmoveProfileSpecific(updatedChildren);\n\t\t}\n\t\treturn new ConfigDataEnvironmentContributor(this.kind, this.location, this.resource,\n\t\t\t\tthis.fromProfileSpecificImport, this.propertySource, this.configurationPropertySource, this.properties,\n\t\t\t\tthis.configDataOptions, updatedChildren);\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "new",
            "config",
            "data",
            "environment",
            "contributor",
            "instance",
            "with",
            "a",
            "new",
            "set",
            "of",
            "children",
            "for",
            "the",
            "given",
            "phase"
        ]
    },
    {
        "id": 1101,
        "code": "\tConfigDataEnvironmentContributor withReplacement(ConfigDataEnvironmentContributor existing,\n\t\t\tConfigDataEnvironmentContributor replacement) {\n\t\tif (this == existing) {\n\t\t\treturn replacement;\n\t\t}\n\t\tMap<ImportPhase, List<ConfigDataEnvironmentContributor>> updatedChildren = new LinkedHashMap<>(\n\t\t\t\tthis.children.size());\n\t\tthis.children.forEach((importPhase, contributors) -> {\n\t\t\tList<ConfigDataEnvironmentContributor> updatedContributors = new ArrayList<>(contributors.size());\n\t\t\tfor (ConfigDataEnvironmentContributor contributor : contributors) {\n\t\t\t\tupdatedContributors.add(contributor.withReplacement(existing, replacement));\n\t\t\t}\n\t\t\tupdatedChildren.put(importPhase, Collections.unmodifiableList(updatedContributors));\n\t\t});\n\t\treturn new ConfigDataEnvironmentContributor(this.kind, this.location, this.resource,\n\t\t\t\tthis.fromProfileSpecificImport, this.propertySource, this.configurationPropertySource, this.properties,\n\t\t\t\tthis.configDataOptions, updatedChildren);\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "new",
            "config",
            "data",
            "environment",
            "contributor",
            "instance",
            "where",
            "an",
            "existing",
            "child",
            "is",
            "replaced"
        ]
    },
    {
        "id": 1102,
        "code": "\tstatic ConfigDataEnvironmentContributor of(List<ConfigDataEnvironmentContributor> contributors) {\n\t\tMap<ImportPhase, List<ConfigDataEnvironmentContributor>> children = new LinkedHashMap<>();\n\t\tchildren.put(ImportPhase.BEFORE_PROFILE_ACTIVATION, Collections.unmodifiableList(contributors));\n\t\treturn new ConfigDataEnvironmentContributor(Kind.ROOT, null, null, false, null, null, null, null, children);\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "create",
            "a",
            "kind",
            "root",
            "root",
            "contributor"
        ]
    },
    {
        "id": 1103,
        "code": "\tstatic ConfigDataEnvironmentContributor ofInitialImport(ConfigDataLocation initialImport) {\n\t\tList<ConfigDataLocation> imports = Collections.singletonList(initialImport);\n\t\tConfigDataProperties properties = new ConfigDataProperties(imports, null);\n\t\treturn new ConfigDataEnvironmentContributor(Kind.INITIAL_IMPORT, null, null, false, null, null, properties,\n\t\t\t\tnull, null);\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "create",
            "a",
            "kind",
            "initial",
            "import",
            "initial",
            "import",
            "contributor"
        ]
    },
    {
        "id": 1104,
        "code": "\tstatic ConfigDataEnvironmentContributor ofExisting(PropertySource<?> propertySource) {\n\t\treturn new ConfigDataEnvironmentContributor(Kind.EXISTING, null, null, false, propertySource,\n\t\t\t\tConfigurationPropertySource.from(propertySource), null, null, null);\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "create",
            "a",
            "contributor",
            "that",
            "wraps",
            "an",
            "kind",
            "existing",
            "existing",
            "property",
            "source"
        ]
    },
    {
        "id": 1105,
        "code": "\tstatic ConfigDataEnvironmentContributor ofUnboundImport(ConfigDataLocation location, ConfigDataResource resource,\n\t\t\tboolean profileSpecific, ConfigData configData, int propertySourceIndex) {\n\t\tPropertySource<?> propertySource = configData.getPropertySources().get(propertySourceIndex);\n\t\tConfigData.Options options = configData.getOptions(propertySource);\n\t\tConfigurationPropertySource configurationPropertySource = ConfigurationPropertySource.from(propertySource);\n\t\treturn new ConfigDataEnvironmentContributor(Kind.UNBOUND_IMPORT, location, resource, profileSpecific,\n\t\t\t\tpropertySource, configurationPropertySource, null, options, null);\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "create",
            "an",
            "kind",
            "unbound",
            "import",
            "unbound",
            "import",
            "contributor"
        ]
    },
    {
        "id": 1106,
        "code": "\tstatic ConfigDataEnvironmentContributor ofEmptyLocation(ConfigDataLocation location, boolean profileSpecific) {\n\t\treturn new ConfigDataEnvironmentContributor(Kind.EMPTY_LOCATION, location, null, profileSpecific, null, null,\n\t\t\t\tnull, EMPTY_LOCATION_OPTIONS, null);\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "create",
            "an",
            "kind",
            "empty",
            "location",
            "empty",
            "location",
            "contributor"
        ]
    },
    {
        "id": 1107,
        "code": "\tConfigDataEnvironmentContributors withProcessedImports(ConfigDataImporter importer,\n\t\t\tConfigDataActivationContext activationContext) {\n\t\tImportPhase importPhase = ImportPhase.get(activationContext);\n\t\tthis.logger.trace(LogMessage.format(\"Processing imports for phase %s. %s\", importPhase,\n\t\t\t\t(activationContext != null) ? activationContext : \"no activation context\"));\n\t\tConfigDataEnvironmentContributors result = this;\n\t\tint processed = 0;\n\t\twhile (true) {\n\t\t\tConfigDataEnvironmentContributor contributor = getNextToProcess(result, activationContext, importPhase);\n\t\t\tif (contributor == null) {\n\t\t\t\tthis.logger.trace(LogMessage.format(\"Processed imports for of %d contributors\", processed));\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tif (contributor.getKind() == Kind.UNBOUND_IMPORT) {\n\t\t\t\tConfigDataEnvironmentContributor bound = contributor.withBoundProperties(result, activationContext);\n\t\t\t\tresult = new ConfigDataEnvironmentContributors(this.logger, this.bootstrapContext,\n\t\t\t\t\t\tresult.getRoot().withReplacement(contributor, bound));\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tConfigDataLocationResolverContext locationResolverContext = new ContributorConfigDataLocationResolverContext(\n\t\t\t\t\tresult, contributor, activationContext);\n\t\t\tConfigDataLoaderContext loaderContext = new ContributorDataLoaderContext(this);\n\t\t\tList<ConfigDataLocation> imports = contributor.getImports();\n\t\t\tthis.logger.trace(LogMessage.format(\"Processing imports %s\", imports));\n\t\t\tMap<ConfigDataResolutionResult, ConfigData> imported = importer.resolveAndLoad(activationContext,\n\t\t\t\t\tlocationResolverContext, loaderContext, imports);\n\t\t\tthis.logger.trace(LogMessage.of(() -> getImportedMessage(imported.keySet())));\n\t\t\tConfigDataEnvironmentContributor contributorAndChildren = contributor.withChildren(importPhase,\n\t\t\t\t\tasContributors(imported));\n\t\t\tresult = new ConfigDataEnvironmentContributors(this.logger, this.bootstrapContext,\n\t\t\t\t\tresult.getRoot().withReplacement(contributor, contributorAndChildren));\n\t\t\tprocessed++;\n\t\t}\n\t}",
        "summary_tokens": [
            "processes",
            "imports",
            "from",
            "all",
            "active",
            "contributors",
            "and",
            "return",
            "a",
            "new",
            "config",
            "data",
            "environment",
            "contributors",
            "instance"
        ]
    },
    {
        "id": 1108,
        "code": "\tConfigDataEnvironmentContributor getRoot() {\n\t\treturn this.root;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "root",
            "contributor"
        ]
    },
    {
        "id": 1109,
        "code": "\tBinder getBinder(ConfigDataActivationContext activationContext, Predicate<ConfigDataEnvironmentContributor> filter,\n\t\t\tBinderOption... options) {\n\t\treturn getBinder(activationContext, filter, asBinderOptionsSet(options));\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "binder",
            "backed",
            "by",
            "the",
            "contributors"
        ]
    },
    {
        "id": 1110,
        "code": "\tpublic static void applyTo(ConfigurableEnvironment environment, ResourceLoader resourceLoader,\n\t\t\tConfigurableBootstrapContext bootstrapContext, Collection<String> additionalProfiles,\n\t\t\tConfigDataEnvironmentUpdateListener environmentUpdateListener) {\n\t\tDeferredLogFactory logFactory = Supplier::get;\n\t\tbootstrapContext = (bootstrapContext != null) ? bootstrapContext : new DefaultBootstrapContext();\n\t\tConfigDataEnvironmentPostProcessor postProcessor = new ConfigDataEnvironmentPostProcessor(logFactory,\n\t\t\t\tbootstrapContext, environmentUpdateListener);\n\t\tpostProcessor.postProcessEnvironment(environment, resourceLoader, additionalProfiles);\n\t}",
        "summary_tokens": [
            "apply",
            "config",
            "data",
            "post",
            "processing",
            "to",
            "an",
            "existing",
            "environment"
        ]
    },
    {
        "id": 1111,
        "code": "\tdefault void onPropertySourceAdded(PropertySource<?> propertySource, ConfigDataLocation location,\n\t\t\tConfigDataResource resource) {\n\t}",
        "summary_tokens": [
            "called",
            "when",
            "a",
            "new",
            "property",
            "source",
            "is",
            "added",
            "to",
            "the",
            "environment"
        ]
    },
    {
        "id": 1112,
        "code": "\tdefault void onSetProfiles(Profiles profiles) {\n\t}",
        "summary_tokens": [
            "called",
            "when",
            "environment",
            "profiles",
            "are",
            "set"
        ]
    },
    {
        "id": 1113,
        "code": "\tdefault boolean isLoadable(ConfigDataLoaderContext context, R resource) {\n\t\treturn true;\n\t}",
        "summary_tokens": [
            "returns",
            "if",
            "the",
            "specified",
            "resource",
            "can",
            "be",
            "loaded",
            "by",
            "this",
            "instance"
        ]
    },
    {
        "id": 1114,
        "code": "\t<R extends ConfigDataResource> ConfigData load(ConfigDataLoaderContext context, R resource) throws IOException {\n\t\tConfigDataLoader<R> loader = getLoader(context, resource);\n\t\tthis.logger.trace(LogMessage.of(() -> \"Loading \" + resource + \" using loader \" + loader.getClass().getName()));\n\t\treturn loader.load(context, resource);\n\t}",
        "summary_tokens": [
            "load",
            "config",
            "data",
            "using",
            "the",
            "first",
            "appropriate",
            "config",
            "data",
            "loader"
        ]
    },
    {
        "id": 1115,
        "code": "\tpublic boolean isOptional() {\n\t\treturn this.optional;\n\t}",
        "summary_tokens": [
            "return",
            "if",
            "the",
            "location",
            "is",
            "optional",
            "and",
            "should",
            "ignore",
            "config",
            "data",
            "not",
            "found",
            "exception"
        ]
    },
    {
        "id": 1116,
        "code": "\tpublic String getValue() {\n\t\treturn this.value;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "value",
            "of",
            "the",
            "location",
            "always",
            "excluding",
            "any",
            "user",
            "specified",
            "optional",
            "prefix"
        ]
    },
    {
        "id": 1117,
        "code": "\tpublic boolean hasPrefix(String prefix) {\n\t\treturn this.value.startsWith(prefix);\n\t}",
        "summary_tokens": [
            "return",
            "if",
            "get",
            "value",
            "has",
            "the",
            "specified",
            "prefix"
        ]
    },
    {
        "id": 1118,
        "code": "\tpublic String getNonPrefixedValue(String prefix) {\n\t\tif (hasPrefix(prefix)) {\n\t\t\treturn this.value.substring(prefix.length());\n\t\t}\n\t\treturn this.value;\n\t}",
        "summary_tokens": [
            "return",
            "get",
            "value",
            "with",
            "the",
            "specified",
            "prefix",
            "removed"
        ]
    },
    {
        "id": 1119,
        "code": "\tpublic ConfigDataLocation[] split(String delimiter) {\n\t\tString[] values = StringUtils.delimitedListToStringArray(toString(), delimiter);\n\t\tConfigDataLocation[] result = new ConfigDataLocation[values.length];\n\t\tfor (int i = 0; i < values.length; i++) {\n\t\t\tresult[i] = of(values[i]).withOrigin(getOrigin());\n\t\t}\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "return",
            "an",
            "array",
            "of",
            "config",
            "data",
            "location",
            "elements",
            "built",
            "by",
            "splitting",
            "this",
            "config",
            "data",
            "location",
            "around",
            "the",
            "specified",
            "delimiter"
        ]
    },
    {
        "id": 1120,
        "code": "\tConfigDataLocation withOrigin(Origin origin) {\n\t\treturn new ConfigDataLocation(this.optional, this.value, origin);\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "new",
            "config",
            "data",
            "location",
            "with",
            "a",
            "specific",
            "origin"
        ]
    },
    {
        "id": 1121,
        "code": "\tpublic static ConfigDataLocation of(String location) {\n\t\tboolean optional = location != null && location.startsWith(OPTIONAL_PREFIX);\n\t\tString value = (!optional) ? location : location.substring(OPTIONAL_PREFIX.length());\n\t\tif (!StringUtils.hasText(value)) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new ConfigDataLocation(optional, value, null);\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "create",
            "a",
            "new",
            "config",
            "data",
            "location",
            "from",
            "a",
            "string"
        ]
    },
    {
        "id": 1122,
        "code": "\tpublic ConfigDataLocation getLocation() {\n\t\treturn this.location;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "location",
            "that",
            "could",
            "not",
            "be",
            "found"
        ]
    },
    {
        "id": 1123,
        "code": "\tdefault List<R> resolveProfileSpecific(ConfigDataLocationResolverContext context, ConfigDataLocation location,\n\t\t\tProfiles profiles) throws ConfigDataLocationNotFoundException {\n\t\treturn Collections.emptyList();\n\t}",
        "summary_tokens": [
            "resolve",
            "a",
            "config",
            "data",
            "location",
            "into",
            "one",
            "or",
            "more",
            "config",
            "data",
            "resource",
            "instances",
            "based",
            "on",
            "available",
            "profiles"
        ]
    },
    {
        "id": 1124,
        "code": "\tprotected List<String> getFileNames(ClassLoader classLoader) {\n\t\treturn Arrays.asList(StandardConfigDataLocationResolver.DEFAULT_CONFIG_NAMES);\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "application",
            "file",
            "names",
            "to",
            "consider"
        ]
    },
    {
        "id": 1125,
        "code": "\tprotected List<String> getLocations(ClassLoader classLoader) {\n\t\tList<String> classpathLocations = new ArrayList<>();\n\t\tfor (ConfigDataLocation candidate : ConfigDataEnvironment.DEFAULT_SEARCH_LOCATIONS) {\n\t\t\tfor (ConfigDataLocation configDataLocation : candidate.split()) {\n\t\t\t\tString location = configDataLocation.getValue();\n\t\t\t\tif (location.startsWith(ResourceUtils.CLASSPATH_URL_PREFIX)) {\n\t\t\t\t\tclasspathLocations.add(location);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn classpathLocations;\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "locations",
            "to",
            "consider"
        ]
    },
    {
        "id": 1126,
        "code": "\tprotected List<String> getExtensions(ClassLoader classLoader) {\n\t\tList<String> extensions = new ArrayList<>();\n\t\tList<PropertySourceLoader> propertySourceLoaders = getSpringFactoriesLoader(classLoader)\n\t\t\t\t.load(PropertySourceLoader.class);\n\t\tfor (PropertySourceLoader propertySourceLoader : propertySourceLoaders) {\n\t\t\tfor (String fileExtension : propertySourceLoader.getFileExtensions()) {\n\t\t\t\tString candidate = \".\" + fileExtension;\n\t\t\t\tif (!extensions.contains(candidate)) {\n\t\t\t\t\textensions.add(candidate);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn extensions;\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "application",
            "file",
            "extensions",
            "to",
            "consider"
        ]
    },
    {
        "id": 1127,
        "code": "\tList<ConfigDataLocation> getImports() {\n\t\treturn this.imports;\n\t}",
        "summary_tokens": [
            "return",
            "any",
            "additional",
            "imports",
            "requested"
        ]
    },
    {
        "id": 1128,
        "code": "\tboolean isActive(ConfigDataActivationContext activationContext) {\n\t\treturn this.activate == null || this.activate.isActive(activationContext);\n\t}",
        "summary_tokens": [
            "return",
            "true",
            "if",
            "the",
            "properties",
            "indicate",
            "that",
            "the",
            "config",
            "data",
            "property",
            "source",
            "is",
            "active",
            "for",
            "the",
            "given",
            "activation",
            "context"
        ]
    },
    {
        "id": 1129,
        "code": "\tConfigDataProperties withoutImports() {\n\t\treturn new ConfigDataProperties(null, this.activate);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "new",
            "variant",
            "of",
            "these",
            "properties",
            "without",
            "any",
            "imports"
        ]
    },
    {
        "id": 1130,
        "code": "\tstatic ConfigDataProperties get(Binder binder) {\n\t\treturn binder.bind(NAME, BINDABLE_PROPERTIES, new ConfigDataLocationBindHandler()).orElse(null);\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "used",
            "to",
            "create",
            "config",
            "data",
            "properties",
            "from",
            "the",
            "given",
            "binder"
        ]
    },
    {
        "id": 1131,
        "code": "\tpublic ConfigDataResource getResource() {\n\t\treturn this.resource;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "resource",
            "that",
            "could",
            "not",
            "be",
            "found"
        ]
    },
    {
        "id": 1132,
        "code": "\tpublic ConfigDataLocation getLocation() {\n\t\treturn this.location;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "original",
            "location",
            "that",
            "was",
            "resolved",
            "to",
            "determine",
            "the",
            "resource"
        ]
    },
    {
        "id": 1133,
        "code": "\tConfigDataResourceNotFoundException withLocation(ConfigDataLocation location) {\n\t\treturn new ConfigDataResourceNotFoundException(this.resource, location, getCause());\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "new",
            "config",
            "data",
            "resource",
            "not",
            "found",
            "exception",
            "instance",
            "with",
            "a",
            "location"
        ]
    },
    {
        "id": 1134,
        "code": "\tpublic static void throwIfDoesNotExist(ConfigDataResource resource, Resource resourceToCheck) {\n\t\tthrowIfDoesNotExist(resource, resourceToCheck.exists());\n\t}",
        "summary_tokens": [
            "throw",
            "a",
            "config",
            "data",
            "not",
            "found",
            "exception",
            "if",
            "the",
            "specified",
            "resource",
            "does",
            "not",
            "exist"
        ]
    },
    {
        "id": 1135,
        "code": "\tpublic PropertySource<?> getPropertySource() {\n\t\treturn this.propertySource;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "inactive",
            "property",
            "source",
            "that",
            "contained",
            "the",
            "property"
        ]
    },
    {
        "id": 1136,
        "code": "\tpublic ConfigDataResource getLocation() {\n\t\treturn this.location;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "config",
            "data",
            "resource",
            "of",
            "the",
            "property",
            "source",
            "or",
            "null",
            "if",
            "the",
            "source",
            "was",
            "not",
            "loaded",
            "from",
            "config",
            "data"
        ]
    },
    {
        "id": 1137,
        "code": "\tpublic String getPropertyName() {\n\t\treturn this.propertyName;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "name",
            "of",
            "the",
            "property"
        ]
    },
    {
        "id": 1138,
        "code": "\tpublic Origin getOrigin() {\n\t\treturn this.origin;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "origin",
            "or",
            "the",
            "property",
            "or",
            "null"
        ]
    },
    {
        "id": 1139,
        "code": "\tstatic void throwIfPropertyFound(ConfigDataEnvironmentContributor contributor, ConfigurationPropertyName name) {\n\t\tConfigurationPropertySource source = contributor.getConfigurationPropertySource();\n\t\tConfigurationProperty property = (source != null) ? source.getConfigurationProperty(name) : null;\n\t\tif (property != null) {\n\t\t\tPropertySource<?> propertySource = contributor.getPropertySource();\n\t\t\tConfigDataResource location = contributor.getResource();\n\t\t\tthrow new InactiveConfigDataAccessException(propertySource, location, name.toString(),\n\t\t\t\t\tproperty.getOrigin());\n\t\t}\n\t}",
        "summary_tokens": [
            "throw",
            "an",
            "inactive",
            "config",
            "data",
            "access",
            "exception",
            "if",
            "the",
            "given",
            "config",
            "data",
            "environment",
            "contributor",
            "contains",
            "the",
            "property"
        ]
    },
    {
        "id": 1140,
        "code": "\tpublic ConfigurationProperty getProperty() {\n\t\treturn this.property;\n\t}",
        "summary_tokens": [
            "return",
            "source",
            "property",
            "that",
            "caused",
            "the",
            "exception"
        ]
    },
    {
        "id": 1141,
        "code": "\tpublic ConfigDataResource getLocation() {\n\t\treturn this.location;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "config",
            "data",
            "resource",
            "of",
            "the",
            "invalid",
            "property",
            "or",
            "null",
            "if",
            "the",
            "source",
            "was",
            "not",
            "loaded",
            "from",
            "config",
            "data"
        ]
    },
    {
        "id": 1142,
        "code": "\tpublic ConfigurationPropertyName getReplacement() {\n\t\treturn this.replacement;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "replacement",
            "property",
            "that",
            "should",
            "be",
            "used",
            "instead",
            "or",
            "null",
            "if",
            "not",
            "replacement",
            "is",
            "available"
        ]
    },
    {
        "id": 1143,
        "code": "\tstatic void throwIfPropertyFound(ConfigDataEnvironmentContributor contributor) {\n\t\tConfigurationPropertySource propertySource = contributor.getConfigurationPropertySource();\n\t\tif (propertySource != null) {\n\t\t\tERRORS.forEach((name, replacement) -> {\n\t\t\t\tConfigurationProperty property = propertySource.getConfigurationProperty(name);\n\t\t\t\tif (property != null) {\n\t\t\t\t\tthrow new InvalidConfigDataPropertyException(property, false, replacement,\n\t\t\t\t\t\t\tcontributor.getResource());\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (contributor.isFromProfileSpecificImport()\n\t\t\t\t\t&& !contributor.hasConfigDataOption(ConfigData.Option.IGNORE_PROFILES)) {\n\t\t\t\tPROFILE_SPECIFIC_ERRORS.forEach((name) -> {\n\t\t\t\t\tConfigurationProperty property = propertySource.getConfigurationProperty(name);\n\t\t\t\t\tif (property != null) {\n\t\t\t\t\t\tthrow new InvalidConfigDataPropertyException(property, true, null, contributor.getResource());\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}",
        "summary_tokens": [
            "throw",
            "an",
            "invalid",
            "config",
            "data",
            "property",
            "exception",
            "if",
            "the",
            "given",
            "config",
            "data",
            "environment",
            "contributor",
            "contains",
            "any",
            "invalid",
            "property"
        ]
    },
    {
        "id": 1144,
        "code": "\tpublic Iterator<String> iterator() {\n\t\treturn getAccepted().iterator();\n\t}",
        "summary_tokens": [
            "return",
            "an",
            "iterator",
            "for",
            "all",
            "get",
            "accepted",
            "accepted",
            "profiles"
        ]
    },
    {
        "id": 1145,
        "code": "\tpublic List<String> getActive() {\n\t\treturn this.activeProfiles;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "active",
            "profiles"
        ]
    },
    {
        "id": 1146,
        "code": "\tpublic List<String> getDefault() {\n\t\treturn this.defaultProfiles;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "default",
            "profiles"
        ]
    },
    {
        "id": 1147,
        "code": "\tpublic List<String> getAccepted() {\n\t\treturn (!this.activeProfiles.isEmpty()) ? this.activeProfiles : this.defaultProfiles;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "accepted",
            "profiles"
        ]
    },
    {
        "id": 1148,
        "code": "\tpublic boolean isAccepted(String profile) {\n\t\treturn getAccepted().contains(profile);\n\t}",
        "summary_tokens": [
            "return",
            "if",
            "the",
            "given",
            "profile",
            "is",
            "active"
        ]
    },
    {
        "id": 1149,
        "code": "\tpublic Resource getResource() {\n\t\treturn this.resource;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "underlying",
            "spring",
            "resource",
            "being",
            "loaded"
        ]
    },
    {
        "id": 1150,
        "code": "\tpublic String getProfile() {\n\t\treturn this.reference.getProfile();\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "profile",
            "or",
            "null",
            "if",
            "the",
            "resource",
            "is",
            "not",
            "profile",
            "specific"
        ]
    },
    {
        "id": 1151,
        "code": "\tpublic ConfigDataLocation getLocation() {\n\t\treturn this.location;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "unsupported",
            "location",
            "reference"
        ]
    },
    {
        "id": 1152,
        "code": "\tpublic ConfigurableApplicationContext getApplicationContext() {\n\t\treturn this.context;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "application",
            "context"
        ]
    },
    {
        "id": 1153,
        "code": "\tpublic ConfigurableBootstrapContext getBootstrapContext() {\n\t\treturn this.bootstrapContext;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "bootstrap",
            "context"
        ]
    },
    {
        "id": 1154,
        "code": "\tpublic ConfigurableApplicationContext getApplicationContext() {\n\t\treturn this.context;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "application",
            "context"
        ]
    },
    {
        "id": 1155,
        "code": "\tpublic Throwable getException() {\n\t\treturn this.exception;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "exception",
            "that",
            "caused",
            "the",
            "failure"
        ]
    },
    {
        "id": 1156,
        "code": "\tpublic ConfigurableApplicationContext getApplicationContext() {\n\t\treturn this.context;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "application",
            "context"
        ]
    },
    {
        "id": 1157,
        "code": "\tpublic ConfigurableApplicationContext getApplicationContext() {\n\t\treturn this.context;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "application",
            "context"
        ]
    },
    {
        "id": 1158,
        "code": "\tpublic Duration getTimeTaken() {\n\t\treturn this.timeTaken;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "time",
            "taken",
            "for",
            "the",
            "application",
            "to",
            "be",
            "ready",
            "to",
            "service",
            "requests",
            "or",
            "null",
            "if",
            "unknown"
        ]
    },
    {
        "id": 1159,
        "code": "\tpublic ConfigurableApplicationContext getApplicationContext() {\n\t\treturn this.context;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "application",
            "context"
        ]
    },
    {
        "id": 1160,
        "code": "\tpublic Duration getTimeTaken() {\n\t\treturn this.timeTaken;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "time",
            "taken",
            "to",
            "start",
            "the",
            "application",
            "or",
            "null",
            "if",
            "unknown"
        ]
    },
    {
        "id": 1161,
        "code": "\tpublic ConfigurableBootstrapContext getBootstrapContext() {\n\t\treturn this.bootstrapContext;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "bootstrap",
            "context"
        ]
    },
    {
        "id": 1162,
        "code": "\tpublic void startRecording() {\n\t\tAssert.state(this.events.isEmpty(), \"Cannot restart recording once steps have been buffered.\");\n\t\tthis.startTime = this.clock.instant();\n\t}",
        "summary_tokens": [
            "start",
            "the",
            "recording",
            "of",
            "steps",
            "and",
            "mark",
            "the",
            "beginning",
            "of",
            "the",
            "startup",
            "timeline"
        ]
    },
    {
        "id": 1163,
        "code": "\tpublic void addFilter(Predicate<StartupStep> filter) {\n\t\tthis.filter = this.filter.and(filter);\n\t}",
        "summary_tokens": [
            "add",
            "a",
            "predicate",
            "filter",
            "to",
            "the",
            "list",
            "of",
            "existing",
            "ones"
        ]
    },
    {
        "id": 1164,
        "code": "\tpublic StartupTimeline getBufferedTimeline() {\n\t\treturn new StartupTimeline(this.startTime, new ArrayList<>(this.events));\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "startup",
            "timeline",
            "timeline",
            "as",
            "a",
            "snapshot",
            "of",
            "currently",
            "buffered",
            "steps"
        ]
    },
    {
        "id": 1165,
        "code": "\tpublic StartupTimeline drainBufferedTimeline() {\n\t\tList<TimelineEvent> events = new ArrayList<>();\n\t\tIterator<TimelineEvent> iterator = this.events.iterator();\n\t\twhile (iterator.hasNext()) {\n\t\t\tevents.add(iterator.next());\n\t\t\titerator.remove();\n\t\t}\n\t\tthis.estimatedSize.set(0);\n\t\treturn new StartupTimeline(this.startTime, events);\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "startup",
            "timeline",
            "timeline",
            "by",
            "pulling",
            "steps",
            "from",
            "the",
            "buffer"
        ]
    },
    {
        "id": 1166,
        "code": "\tpublic Instant getStartTime() {\n\t\treturn this.startTime;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "start",
            "time",
            "of",
            "this",
            "timeline"
        ]
    },
    {
        "id": 1167,
        "code": "\tpublic List<TimelineEvent> getEvents() {\n\t\treturn this.events;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "recorded",
            "events"
        ]
    },
    {
        "id": 1168,
        "code": "\tpublic static BoundConfigurationProperties get(ApplicationContext context) {\n\t\tif (!context.containsBeanDefinition(BEAN_NAME)) {\n\t\t\treturn null;\n\t\t}\n\t\treturn context.getBean(BEAN_NAME, BoundConfigurationProperties.class);\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "bound",
            "configuration",
            "properties",
            "from",
            "the",
            "given",
            "application",
            "context",
            "if",
            "it",
            "is",
            "available"
        ]
    },
    {
        "id": 1169,
        "code": "\tpublic Map<ConfigurationPropertyName, ConfigurationProperty> getAll() {\n\t\treturn Collections.unmodifiableMap(this.properties);\n\t}",
        "summary_tokens": [
            "get",
            "all",
            "bound",
            "properties"
        ]
    },
    {
        "id": 1170,
        "code": "\tpublic Class<?> getBeanType() {\n\t\treturn this.bean.getType();\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "bean",
            "type",
            "that",
            "was",
            "being",
            "bound"
        ]
    },
    {
        "id": 1171,
        "code": "\tpublic ConfigurationProperties getAnnotation() {\n\t\treturn this.bean.getAnnotation();\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "configuration",
            "properties",
            "annotation",
            "that",
            "triggered",
            "the",
            "binding"
        ]
    },
    {
        "id": 1172,
        "code": "\tpublic static void register(BeanDefinitionRegistry registry) {\n\t\tAssert.notNull(registry, \"Registry must not be null\");\n\t\tif (!registry.containsBeanDefinition(BEAN_NAME)) {\n\t\t\tBeanDefinition definition = BeanDefinitionBuilder\n\t\t\t\t\t.rootBeanDefinition(ConfigurationPropertiesBindingPostProcessor.class).getBeanDefinition();\n\t\t\tdefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n\t\t\tregistry.registerBeanDefinition(BEAN_NAME, definition);\n\t\t}\n\t\tConfigurationPropertiesBinder.register(registry);\n\t}",
        "summary_tokens": [
            "register",
            "a",
            "configuration",
            "properties",
            "binding",
            "post",
            "processor",
            "bean",
            "if",
            "one",
            "is",
            "not",
            "already",
            "registered"
        ]
    },
    {
        "id": 1173,
        "code": "\tpublic static void processConfigurationProperties(Class<?> type, ReflectionHints reflectionHints) {\n\t\tnew ConfigurationPropertiesReflectionHintsProcessor(type, getBindConstructor(type, false), new HashSet<>())\n\t\t\t\t.process(reflectionHints);\n\t}",
        "summary_tokens": [
            "registers",
            "a",
            "given",
            "type",
            "on",
            "reflection",
            "hints",
            "for",
            "binding",
            "purposes",
            "discovering",
            "any",
            "nested",
            "type",
            "it",
            "may",
            "expose",
            "via",
            "a",
            "property"
        ]
    },
    {
        "id": 1174,
        "code": "\tprivate boolean isNestedType(String propertyName, Class<?> propertyType) {\n\t\tif (this.type.equals(propertyType.getDeclaringClass())) {\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\tField field = ReflectionUtils.findField(this.type, propertyName);\n\t\t\treturn field != null && MergedAnnotations.from(field).isPresent(NestedConfigurationProperty.class);\n\t\t}\n\t}",
        "summary_tokens": [
            "specify",
            "whether",
            "the",
            "specified",
            "property",
            "refer",
            "to",
            "a",
            "nested",
            "type"
        ]
    },
    {
        "id": 1175,
        "code": "\tpublic static Object from(BeanFactory beanFactory, String beanName, Class<?> beanType) {\n\t\tConfigurationPropertiesBean bean = ConfigurationPropertiesBean.forValueObject(beanType, beanName);\n\t\tConfigurationPropertiesBinder binder = ConfigurationPropertiesBinder.get(beanFactory);\n\t\ttry {\n\t\t\treturn binder.bindOrCreate(bean);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tthrow new ConfigurationPropertiesBindException(bean, ex);\n\t\t}\n\t}",
        "summary_tokens": [
            "create",
            "an",
            "immutable",
            "configuration",
            "properties",
            "instance",
            "for",
            "the",
            "specified",
            "bean",
            "name",
            "and",
            "bean",
            "type",
            "using",
            "the",
            "specified",
            "bean",
            "factory"
        ]
    },
    {
        "id": 1176,
        "code": "\tpublic PropertyMapper alwaysApplyingWhenNonNull() {\n\t\treturn alwaysApplying(this::whenNonNull);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "new",
            "property",
            "mapper",
            "instance",
            "that",
            "applies",
            "source",
            "when",
            "non",
            "null",
            "when",
            "non",
            "null",
            "to",
            "every",
            "source"
        ]
    },
    {
        "id": 1177,
        "code": "\tpublic PropertyMapper alwaysApplying(SourceOperator operator) {\n\t\tAssert.notNull(operator, \"Operator must not be null\");\n\t\treturn new PropertyMapper(this, operator);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "new",
            "property",
            "mapper",
            "instance",
            "that",
            "applies",
            "the",
            "given",
            "source",
            "operator",
            "to",
            "every",
            "source"
        ]
    },
    {
        "id": 1178,
        "code": "\tpublic <T> Source<T> from(T value) {\n\t\treturn from(() -> value);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "new",
            "source",
            "from",
            "the",
            "specified",
            "value",
            "that",
            "can",
            "be",
            "used",
            "to",
            "perform",
            "the",
            "mapping"
        ]
    },
    {
        "id": 1179,
        "code": "\tpublic static PropertyMapper get() {\n\t\treturn INSTANCE;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "property",
            "mapper"
        ]
    },
    {
        "id": 1180,
        "code": "\tfinal Object bind(ConfigurationPropertyName name, Bindable<?> target, AggregateElementBinder elementBinder) {\n\t\tObject result = bindAggregate(name, target, elementBinder);\n\t\tSupplier<?> value = target.getValue();\n\t\tif (result == null || value == null) {\n\t\t\treturn result;\n\t\t}\n\t\treturn merge((Supplier<T>) value, (T) result);\n\t}",
        "summary_tokens": [
            "perform",
            "binding",
            "for",
            "the",
            "aggregate"
        ]
    },
    {
        "id": 1181,
        "code": "\tprotected final Context getContext() {\n\t\treturn this.context;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "context",
            "being",
            "used",
            "by",
            "this",
            "binder"
        ]
    },
    {
        "id": 1182,
        "code": "\tdefault Object bind(ConfigurationPropertyName name, Bindable<?> target) {\n\t\treturn bind(name, target, null);\n\t}",
        "summary_tokens": [
            "bind",
            "the",
            "given",
            "name",
            "to",
            "a",
            "target",
            "bindable"
        ]
    },
    {
        "id": 1183,
        "code": "\tpublic ConfigurationPropertyName getName() {\n\t\treturn this.name;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "name",
            "of",
            "the",
            "configuration",
            "property",
            "being",
            "bound"
        ]
    },
    {
        "id": 1184,
        "code": "\tpublic Bindable<?> getTarget() {\n\t\treturn this.target;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "target",
            "being",
            "bound"
        ]
    },
    {
        "id": 1185,
        "code": "\tpublic ConfigurationProperty getProperty() {\n\t\treturn this.property;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "configuration",
            "property",
            "name",
            "of",
            "the",
            "item",
            "that",
            "was",
            "being",
            "bound"
        ]
    },
    {
        "id": 1186,
        "code": "\tdefault <T> Bindable<T> onStart(ConfigurationPropertyName name, Bindable<T> target, BindContext context) {\n\t\treturn target;\n\t}",
        "summary_tokens": [
            "called",
            "when",
            "binding",
            "of",
            "an",
            "element",
            "starts",
            "but",
            "before",
            "any",
            "result",
            "has",
            "been",
            "determined"
        ]
    },
    {
        "id": 1187,
        "code": "\tdefault Object onSuccess(ConfigurationPropertyName name, Bindable<?> target, BindContext context, Object result) {\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "called",
            "when",
            "binding",
            "of",
            "an",
            "element",
            "ends",
            "with",
            "a",
            "successful",
            "result"
        ]
    },
    {
        "id": 1188,
        "code": "\tdefault Object onCreate(ConfigurationPropertyName name, Bindable<?> target, BindContext context, Object result) {\n\t\treturn result;\n\t}",
        "summary_tokens": [
            "called",
            "when",
            "binding",
            "of",
            "an",
            "element",
            "ends",
            "with",
            "an",
            "unbound",
            "result",
            "and",
            "a",
            "newly",
            "created",
            "instance",
            "is",
            "about",
            "to",
            "be",
            "returned"
        ]
    },
    {
        "id": 1189,
        "code": "\tdefault Object onFailure(ConfigurationPropertyName name, Bindable<?> target, BindContext context, Exception error)\n\t\t\tthrows Exception {\n\t\tthrow error;\n\t}",
        "summary_tokens": [
            "called",
            "when",
            "binding",
            "fails",
            "for",
            "any",
            "reason",
            "including",
            "failures",
            "from",
            "on",
            "success",
            "or",
            "on",
            "create",
            "calls"
        ]
    },
    {
        "id": 1190,
        "code": "\tdefault void onFinish(ConfigurationPropertyName name, Bindable<?> target, BindContext context, Object result)",
        "summary_tokens": [
            "called",
            "when",
            "binding",
            "finishes",
            "with",
            "either",
            "bound",
            "or",
            "unbound",
            "result"
        ]
    },
    {
        "id": 1191,
        "code": "\tpublic T get() throws NoSuchElementException {\n\t\tif (this.value == null) {\n\t\t\tthrow new NoSuchElementException(\"No value bound\");\n\t\t}\n\t\treturn this.value;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "object",
            "that",
            "was",
            "bound",
            "or",
            "throw",
            "a",
            "no",
            "such",
            "element",
            "exception",
            "if",
            "no",
            "value",
            "was",
            "bound"
        ]
    },
    {
        "id": 1192,
        "code": "\tpublic boolean isBound() {\n\t\treturn (this.value != null);\n\t}",
        "summary_tokens": [
            "returns",
            "true",
            "if",
            "a",
            "result",
            "was",
            "bound"
        ]
    },
    {
        "id": 1193,
        "code": "\tpublic void ifBound(Consumer<? super T> consumer) {\n\t\tAssert.notNull(consumer, \"Consumer must not be null\");\n\t\tif (this.value != null) {\n\t\t\tconsumer.accept(this.value);\n\t\t}\n\t}",
        "summary_tokens": [
            "invoke",
            "the",
            "specified",
            "consumer",
            "with",
            "the",
            "bound",
            "value",
            "or",
            "do",
            "nothing",
            "if",
            "no",
            "value",
            "has",
            "been",
            "bound"
        ]
    },
    {
        "id": 1194,
        "code": "\tpublic <U> BindResult<U> map(Function<? super T, ? extends U> mapper) {\n\t\tAssert.notNull(mapper, \"Mapper must not be null\");\n\t\treturn of((this.value != null) ? mapper.apply(this.value) : null);\n\t}",
        "summary_tokens": [
            "apply",
            "the",
            "provided",
            "mapping",
            "function",
            "to",
            "the",
            "bound",
            "value",
            "or",
            "return",
            "an",
            "updated",
            "unbound",
            "result",
            "if",
            "no",
            "value",
            "has",
            "been",
            "bound"
        ]
    },
    {
        "id": 1195,
        "code": "\tpublic T orElse(T other) {\n\t\treturn (this.value != null) ? this.value : other;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "object",
            "that",
            "was",
            "bound",
            "or",
            "other",
            "if",
            "no",
            "value",
            "has",
            "been",
            "bound"
        ]
    },
    {
        "id": 1196,
        "code": "\tpublic T orElseGet(Supplier<? extends T> other) {\n\t\treturn (this.value != null) ? this.value : other.get();\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "object",
            "that",
            "was",
            "bound",
            "or",
            "the",
            "result",
            "of",
            "invoking",
            "other",
            "if",
            "no",
            "value",
            "has",
            "been",
            "bound"
        ]
    },
    {
        "id": 1197,
        "code": "\tpublic <X extends Throwable> T orElseThrow(Supplier<? extends X> exceptionSupplier) throws X {\n\t\tif (this.value == null) {\n\t\t\tthrow exceptionSupplier.get();\n\t\t}\n\t\treturn this.value;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "object",
            "that",
            "was",
            "bound",
            "or",
            "throw",
            "an",
            "exception",
            "to",
            "be",
            "created",
            "by",
            "the",
            "provided",
            "supplier",
            "if",
            "no",
            "value",
            "has",
            "been",
            "bound"
        ]
    },
    {
        "id": 1198,
        "code": "\tpublic ResolvableType getType() {\n\t\treturn this.type;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "type",
            "of",
            "the",
            "item",
            "to",
            "bind"
        ]
    },
    {
        "id": 1199,
        "code": "\tpublic ResolvableType getBoxedType() {\n\t\treturn this.boxedType;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "boxed",
            "type",
            "of",
            "the",
            "item",
            "to",
            "bind"
        ]
    },
    {
        "id": 1200,
        "code": "\tpublic Supplier<T> getValue() {\n\t\treturn this.value;\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "supplier",
            "that",
            "provides",
            "the",
            "object",
            "value",
            "or",
            "null"
        ]
    },
    {
        "id": 1201,
        "code": "\tpublic Annotation[] getAnnotations() {\n\t\treturn this.annotations;\n\t}",
        "summary_tokens": [
            "return",
            "any",
            "associated",
            "annotations",
            "that",
            "could",
            "affect",
            "binding"
        ]
    },
    {
        "id": 1202,
        "code": "\tpublic <A extends Annotation> A getAnnotation(Class<A> type) {\n\t\tfor (Annotation annotation : this.annotations) {\n\t\t\tif (type.isInstance(annotation)) {\n\t\t\t\treturn (A) annotation;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "single",
            "associated",
            "annotations",
            "that",
            "could",
            "affect",
            "binding"
        ]
    },
    {
        "id": 1203,
        "code": "\tpublic boolean hasBindRestriction(BindRestriction bindRestriction) {\n\t\treturn this.bindRestrictions.contains(bindRestriction);\n\t}",
        "summary_tokens": [
            "returns",
            "true",
            "if",
            "the",
            "specified",
            "bind",
            "restriction",
            "has",
            "been",
            "added"
        ]
    },
    {
        "id": 1204,
        "code": "\tpublic Bindable<T> withAnnotations(Annotation... annotations) {\n\t\treturn new Bindable<>(this.type, this.boxedType, this.value,\n\t\t\t\t(annotations != null) ? annotations : NO_ANNOTATIONS, NO_BIND_RESTRICTIONS);\n\t}",
        "summary_tokens": [
            "create",
            "an",
            "updated",
            "bindable",
            "instance",
            "with",
            "the",
            "specified",
            "annotations"
        ]
    },
    {
        "id": 1205,
        "code": "\tpublic Bindable<T> withExistingValue(T existingValue) {\n\t\tAssert.isTrue(\n\t\t\t\texistingValue == null || this.type.isArray() || this.boxedType.resolve().isInstance(existingValue),\n\t\t\t\t() -> \"ExistingValue must be an instance of \" + this.type);\n\t\tSupplier<T> value = (existingValue != null) ? () -> existingValue : null;\n\t\treturn new Bindable<>(this.type, this.boxedType, value, this.annotations, this.bindRestrictions);\n\t}",
        "summary_tokens": [
            "create",
            "an",
            "updated",
            "bindable",
            "instance",
            "with",
            "an",
            "existing",
            "value"
        ]
    },
    {
        "id": 1206,
        "code": "\tpublic Bindable<T> withSuppliedValue(Supplier<T> suppliedValue) {\n\t\treturn new Bindable<>(this.type, this.boxedType, suppliedValue, this.annotations, this.bindRestrictions);\n\t}",
        "summary_tokens": [
            "create",
            "an",
            "updated",
            "bindable",
            "instance",
            "with",
            "a",
            "value",
            "supplier"
        ]
    },
    {
        "id": 1207,
        "code": "\tpublic Bindable<T> withBindRestrictions(BindRestriction... additionalRestrictions) {\n\t\tEnumSet<BindRestriction> bindRestrictions = EnumSet.copyOf(this.bindRestrictions);\n\t\tbindRestrictions.addAll(Arrays.asList(additionalRestrictions));\n\t\treturn new Bindable<>(this.type, this.boxedType, this.value, this.annotations, bindRestrictions);\n\t}",
        "summary_tokens": [
            "create",
            "an",
            "updated",
            "bindable",
            "instance",
            "with",
            "additional",
            "bind",
            "restrictions"
        ]
    },
    {
        "id": 1208,
        "code": "\tpublic static <T> Bindable<T> ofInstance(T instance) {\n\t\tAssert.notNull(instance, \"Instance must not be null\");\n\t\tClass<T> type = (Class<T>) instance.getClass();\n\t\treturn of(type).withExistingValue(instance);\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "new",
            "bindable",
            "of",
            "the",
            "type",
            "of",
            "the",
            "specified",
            "instance",
            "with",
            "an",
            "existing",
            "value",
            "equal",
            "to",
            "the",
            "instance"
        ]
    },
    {
        "id": 1209,
        "code": "\tpublic static <T> Bindable<T> of(ResolvableType type) {\n\t\tAssert.notNull(type, \"Type must not be null\");\n\t\tResolvableType boxedType = box(type);\n\t\treturn new Bindable<>(type, boxedType, null, NO_ANNOTATIONS, NO_BIND_RESTRICTIONS);\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "new",
            "bindable",
            "of",
            "the",
            "specified",
            "type"
        ]
    },
    {
        "id": 1210,
        "code": "\tpublic static <E> Bindable<List<E>> listOf(Class<E> elementType) {\n\t\treturn of(ResolvableType.forClassWithGenerics(List.class, elementType));\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "new",
            "bindable",
            "list",
            "of",
            "the",
            "specified",
            "element",
            "type"
        ]
    },
    {
        "id": 1211,
        "code": "\tpublic static <E> Bindable<Set<E>> setOf(Class<E> elementType) {\n\t\treturn of(ResolvableType.forClassWithGenerics(Set.class, elementType));\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "new",
            "bindable",
            "set",
            "of",
            "the",
            "specified",
            "element",
            "type"
        ]
    },
    {
        "id": 1212,
        "code": "\tpublic static <K, V> Bindable<Map<K, V>> mapOf(Class<K> keyType, Class<V> valueType) {\n\t\treturn of(ResolvableType.forClassWithGenerics(Map.class, keyType, valueType));\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "new",
            "bindable",
            "map",
            "of",
            "the",
            "specified",
            "key",
            "and",
            "value",
            "type"
        ]
    },
    {
        "id": 1213,
        "code": "\tpublic static String toDashedForm(String name) {\n\t\tStringBuilder result = new StringBuilder(name.length());\n\t\tboolean inIndex = false;\n\t\tfor (int i = 0; i < name.length(); i++) {\n\t\t\tchar ch = name.charAt(i);\n\t\t\tif (inIndex) {\n\t\t\t\tresult.append(ch);\n\t\t\t\tif (ch == ']') {\n\t\t\t\t\tinIndex = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (ch == '[') {\n\t\t\t\t\tinIndex = true;\n\t\t\t\t\tresult.append(ch);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tch = (ch != '_') ? ch : '-';\n\t\t\t\t\tif (Character.isUpperCase(ch) && result.length() > 0 && result.charAt(result.length() - 1) != '-') {\n\t\t\t\t\t\tresult.append('-');\n\t\t\t\t\t}\n\t\t\t\t\tresult.append(Character.toLowerCase(ch));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result.toString();\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "specified",
            "java",
            "bean",
            "property",
            "name",
            "in",
            "dashed",
            "form"
        ]
    },
    {
        "id": 1214,
        "code": "\tpublic ValidationErrors getValidationErrors() {\n\t\treturn this.validationErrors;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "validation",
            "errors",
            "that",
            "caused",
            "the",
            "exception"
        ]
    },
    {
        "id": 1215,
        "code": "\tpublic ConfigurationPropertySource getSource() {\n\t\treturn this.source;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "configuration",
            "property",
            "source",
            "that",
            "provided",
            "the",
            "property",
            "or",
            "null",
            "if",
            "the",
            "source",
            "is",
            "unknown"
        ]
    },
    {
        "id": 1216,
        "code": "\tpublic ConfigurationPropertyName getName() {\n\t\treturn this.name;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "name",
            "of",
            "the",
            "configuration",
            "property"
        ]
    },
    {
        "id": 1217,
        "code": "\tpublic Object getValue() {\n\t\treturn this.value;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "value",
            "of",
            "the",
            "configuration",
            "property"
        ]
    },
    {
        "id": 1218,
        "code": "\tstatic ConfigurationPropertyCaching get(Iterable<ConfigurationPropertySource> sources, Object underlyingSource) {\n\t\tAssert.notNull(sources, \"Sources must not be null\");\n\t\tif (underlyingSource == null) {\n\t\t\treturn new ConfigurationPropertySourcesCaching(sources);\n\t\t}\n\t\tfor (ConfigurationPropertySource source : sources) {\n\t\t\tif (source.getUnderlyingSource() == underlyingSource) {\n\t\t\t\tConfigurationPropertyCaching caching = CachingConfigurationPropertySource.find(source);\n\t\t\t\tif (caching != null) {\n\t\t\t\t\treturn caching;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthrow new IllegalStateException(\"Unable to find cache from configuration property sources\");\n\t}",
        "summary_tokens": [
            "get",
            "for",
            "a",
            "specific",
            "configuration",
            "property",
            "source",
            "in",
            "the",
            "specified",
            "configuration",
            "property",
            "sources"
        ]
    },
    {
        "id": 1219,
        "code": "\tpublic boolean isEmpty() {\n\t\treturn this.elements.getSize() == 0;\n\t}",
        "summary_tokens": [
            "returns",
            "true",
            "if",
            "this",
            "configuration",
            "property",
            "name",
            "is",
            "empty"
        ]
    },
    {
        "id": 1220,
        "code": "\tpublic boolean isLastElementIndexed() {\n\t\tint size = getNumberOfElements();\n\t\treturn (size > 0 && isIndexed(size - 1));\n\t}",
        "summary_tokens": [
            "return",
            "if",
            "the",
            "last",
            "element",
            "in",
            "the",
            "name",
            "is",
            "indexed"
        ]
    },
    {
        "id": 1221,
        "code": "\tpublic boolean hasIndexedElement() {\n\t\tfor (int i = 0; i < getNumberOfElements(); i++) {\n\t\t\tif (isIndexed(i)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}",
        "summary_tokens": [
            "return",
            "true",
            "if",
            "any",
            "element",
            "in",
            "the",
            "name",
            "is",
            "indexed"
        ]
    },
    {
        "id": 1222,
        "code": "\tboolean isIndexed(int elementIndex) {\n\t\treturn this.elements.getType(elementIndex).isIndexed();\n\t}",
        "summary_tokens": [
            "return",
            "if",
            "the",
            "element",
            "in",
            "the",
            "name",
            "is",
            "indexed"
        ]
    },
    {
        "id": 1223,
        "code": "\tpublic boolean isNumericIndex(int elementIndex) {\n\t\treturn this.elements.getType(elementIndex) == ElementType.NUMERICALLY_INDEXED;\n\t}",
        "summary_tokens": [
            "return",
            "if",
            "the",
            "element",
            "in",
            "the",
            "name",
            "is",
            "indexed",
            "and",
            "numeric"
        ]
    },
    {
        "id": 1224,
        "code": "\tpublic String getLastElement(Form form) {\n\t\tint size = getNumberOfElements();\n\t\treturn (size != 0) ? getElement(size - 1, form) : EMPTY_STRING;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "last",
            "element",
            "in",
            "the",
            "name",
            "in",
            "the",
            "given",
            "form"
        ]
    },
    {
        "id": 1225,
        "code": "\tpublic String getElement(int elementIndex, Form form) {\n\t\tCharSequence element = this.elements.get(elementIndex);\n\t\tElementType type = this.elements.getType(elementIndex);\n\t\tif (type.isIndexed()) {\n\t\t\treturn element.toString();\n\t\t}\n\t\tif (form == Form.ORIGINAL) {\n\t\t\tif (type != ElementType.NON_UNIFORM) {\n\t\t\t\treturn element.toString();\n\t\t\t}\n\t\t\treturn convertToOriginalForm(element).toString();\n\t\t}\n\t\tif (form == Form.DASHED) {\n\t\t\tif (type == ElementType.UNIFORM || type == ElementType.DASHED) {\n\t\t\t\treturn element.toString();\n\t\t\t}\n\t\t\treturn convertToDashedElement(element).toString();\n\t\t}\n\t\tCharSequence uniformElement = this.uniformElements[elementIndex];\n\t\tif (uniformElement == null) {\n\t\t\tuniformElement = (type != ElementType.UNIFORM) ? convertToUniformElement(element) : element;\n\t\t\tthis.uniformElements[elementIndex] = uniformElement.toString();\n\t\t}\n\t\treturn uniformElement.toString();\n\t}",
        "summary_tokens": [
            "return",
            "an",
            "element",
            "in",
            "the",
            "name",
            "in",
            "the",
            "given",
            "form"
        ]
    },
    {
        "id": 1226,
        "code": "\tpublic int getNumberOfElements() {\n\t\treturn this.elements.getSize();\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "total",
            "number",
            "of",
            "elements",
            "in",
            "the",
            "name"
        ]
    },
    {
        "id": 1227,
        "code": "\tpublic ConfigurationPropertyName append(ConfigurationPropertyName suffix) {\n\t\tif (suffix == null) {\n\t\t\treturn this;\n\t\t}\n\t\treturn new ConfigurationPropertyName(this.elements.append(suffix.elements));\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "new",
            "configuration",
            "property",
            "name",
            "by",
            "appending",
            "the",
            "given",
            "suffix"
        ]
    },
    {
        "id": 1228,
        "code": "\tpublic ConfigurationPropertyName getParent() {\n\t\tint numberOfElements = getNumberOfElements();\n\t\treturn (numberOfElements <= 1) ? EMPTY : chop(numberOfElements - 1);\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "parent",
            "of",
            "this",
            "configuration",
            "property",
            "name",
            "or",
            "configuration",
            "property",
            "name",
            "empty",
            "if",
            "there",
            "is",
            "no",
            "parent"
        ]
    },
    {
        "id": 1229,
        "code": "\tpublic ConfigurationPropertyName chop(int size) {\n\t\tif (size >= getNumberOfElements()) {\n\t\t\treturn this;\n\t\t}\n\t\treturn new ConfigurationPropertyName(this.elements.chop(size));\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "new",
            "configuration",
            "property",
            "name",
            "by",
            "chopping",
            "this",
            "name",
            "to",
            "the",
            "given",
            "size"
        ]
    },
    {
        "id": 1230,
        "code": "\tpublic ConfigurationPropertyName subName(int offset) {\n\t\tif (offset == 0) {\n\t\t\treturn this;\n\t\t}\n\t\tif (offset == getNumberOfElements()) {\n\t\t\treturn EMPTY;\n\t\t}\n\t\tif (offset < 0 || offset > getNumberOfElements()) {\n\t\t\tthrow new IndexOutOfBoundsException(\"Offset: \" + offset + \", NumberOfElements: \" + getNumberOfElements());\n\t\t}\n\t\treturn new ConfigurationPropertyName(this.elements.subElements(offset));\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "new",
            "configuration",
            "property",
            "name",
            "by",
            "based",
            "on",
            "this",
            "name",
            "offset",
            "by",
            "specific",
            "element",
            "index"
        ]
    },
    {
        "id": 1231,
        "code": "\tpublic boolean isParentOf(ConfigurationPropertyName name) {\n\t\tAssert.notNull(name, \"Name must not be null\");\n\t\tif (getNumberOfElements() != name.getNumberOfElements() - 1) {\n\t\t\treturn false;\n\t\t}\n\t\treturn isAncestorOf(name);\n\t}",
        "summary_tokens": [
            "returns",
            "true",
            "if",
            "this",
            "element",
            "is",
            "an",
            "immediate",
            "parent",
            "of",
            "the",
            "specified",
            "name"
        ]
    },
    {
        "id": 1232,
        "code": "\tpublic boolean isAncestorOf(ConfigurationPropertyName name) {\n\t\tAssert.notNull(name, \"Name must not be null\");\n\t\tif (getNumberOfElements() >= name.getNumberOfElements()) {\n\t\t\treturn false;\n\t\t}\n\t\treturn elementsEqual(name);\n\t}",
        "summary_tokens": [
            "returns",
            "true",
            "if",
            "this",
            "element",
            "is",
            "an",
            "ancestor",
            "immediate",
            "or",
            "nested",
            "parent",
            "of",
            "the",
            "specified",
            "name"
        ]
    },
    {
        "id": 1233,
        "code": "\tpublic static boolean isValid(CharSequence name) {\n\t\treturn of(name, true) != null;\n\t}",
        "summary_tokens": [
            "returns",
            "if",
            "the",
            "given",
            "name",
            "is",
            "valid"
        ]
    },
    {
        "id": 1234,
        "code": "\tstatic ConfigurationPropertyName of(CharSequence name, boolean returnNullIfInvalid) {\n\t\tElements elements = elementsOf(name, returnNullIfInvalid);\n\t\treturn (elements != null) ? new ConfigurationPropertyName(elements) : null;\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "configuration",
            "property",
            "name",
            "for",
            "the",
            "specified",
            "string"
        ]
    },
    {
        "id": 1235,
        "code": "\tpublic static ConfigurationPropertyName ofIfValid(CharSequence name) {\n\t\treturn of(name, true);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "configuration",
            "property",
            "name",
            "for",
            "the",
            "specified",
            "string",
            "or",
            "null",
            "if",
            "the",
            "name",
            "is",
            "not",
            "valid"
        ]
    },
    {
        "id": 1236,
        "code": "\tstatic ConfigurationPropertyName adapt(CharSequence name, char separator,\n\t\t\tFunction<CharSequence, CharSequence> elementValueProcessor) {\n\t\tAssert.notNull(name, \"Name must not be null\");\n\t\tif (name.length() == 0) {\n\t\t\treturn EMPTY;\n\t\t}\n\t\tElements elements = new ElementsParser(name, separator).parse(elementValueProcessor);\n\t\tif (elements.getSize() == 0) {\n\t\t\treturn EMPTY;\n\t\t}\n\t\treturn new ConfigurationPropertyName(elements);\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "configuration",
            "property",
            "name",
            "by",
            "adapting",
            "the",
            "given",
            "source"
        ]
    },
    {
        "id": 1237,
        "code": "\tdefault ConfigurationPropertyState containsDescendantOf(ConfigurationPropertyName name) {\n\t\treturn ConfigurationPropertyState.UNKNOWN;\n\t}",
        "summary_tokens": [
            "returns",
            "if",
            "the",
            "source",
            "contains",
            "any",
            "descendants",
            "of",
            "the",
            "specified",
            "name"
        ]
    },
    {
        "id": 1238,
        "code": "\tdefault ConfigurationPropertySource filter(Predicate<ConfigurationPropertyName> filter) {\n\t\treturn new FilteredConfigurationPropertiesSource(this, filter);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "filtered",
            "variant",
            "of",
            "this",
            "source",
            "containing",
            "only",
            "names",
            "that",
            "match",
            "the",
            "given",
            "predicate"
        ]
    },
    {
        "id": 1239,
        "code": "\tdefault ConfigurationPropertySource withAliases(ConfigurationPropertyNameAliases aliases) {\n\t\treturn new AliasedConfigurationPropertySource(this, aliases);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "variant",
            "of",
            "this",
            "source",
            "that",
            "supports",
            "name",
            "aliases"
        ]
    },
    {
        "id": 1240,
        "code": "\tdefault ConfigurationPropertySource withPrefix(String prefix) {\n\t\treturn (StringUtils.hasText(prefix)) ? new PrefixedConfigurationPropertySource(this, prefix) : this;\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "variant",
            "of",
            "this",
            "source",
            "that",
            "supports",
            "a",
            "prefix"
        ]
    },
    {
        "id": 1241,
        "code": "\tdefault Object getUnderlyingSource() {\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "underlying",
            "source",
            "that",
            "is",
            "actually",
            "providing",
            "the",
            "properties"
        ]
    },
    {
        "id": 1242,
        "code": "\tstatic ConfigurationPropertySource from(PropertySource<?> source) {\n\t\tif (source instanceof ConfigurationPropertySourcesPropertySource) {\n\t\t\treturn null;\n\t\t}\n\t\treturn SpringConfigurationPropertySource.from(source);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "single",
            "new",
            "configuration",
            "property",
            "source",
            "adapted",
            "from",
            "the",
            "given",
            "spring",
            "property",
            "source",
            "or",
            "null",
            "if",
            "the",
            "source",
            "cannot",
            "be",
            "adapted"
        ]
    },
    {
        "id": 1243,
        "code": "\tpublic String getName() {\n\t\treturn this.name;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "name",
            "of",
            "the",
            "property"
        ]
    },
    {
        "id": 1244,
        "code": "\tpublic Object getValue() {\n\t\treturn this.value;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "invalid",
            "value",
            "can",
            "be",
            "null"
        ]
    },
    {
        "id": 1245,
        "code": "\tpublic String getReason() {\n\t\treturn this.reason;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "reason",
            "why",
            "the",
            "value",
            "is",
            "invalid"
        ]
    },
    {
        "id": 1246,
        "code": "\tdefault Iterator<ConfigurationPropertyName> iterator() {\n\t\treturn stream().iterator();\n\t}",
        "summary_tokens": [
            "return",
            "an",
            "iterator",
            "for",
            "the",
            "configuration",
            "property",
            "name",
            "names",
            "managed",
            "by",
            "this",
            "source"
        ]
    },
    {
        "id": 1247,
        "code": "\tpublic void putAll(Map<?, ?> map) {\n\t\tAssert.notNull(map, \"Map must not be null\");\n\t\tassertNotReadOnlySystemAttributesMap(map);\n\t\tmap.forEach(this::put);\n\t}",
        "summary_tokens": [
            "add",
            "all",
            "entries",
            "from",
            "the",
            "specified",
            "map"
        ]
    },
    {
        "id": 1248,
        "code": "\tpublic void put(Object name, Object value) {\n\t\tthis.source.put((name != null) ? name.toString() : null, value);\n\t}",
        "summary_tokens": [
            "add",
            "an",
            "individual",
            "entry"
        ]
    },
    {
        "id": 1249,
        "code": "\tpublic Set<String> getConfiguredNames() {\n\t\treturn this.configuredNames;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "names",
            "of",
            "the",
            "properties",
            "that",
            "have",
            "been",
            "configured"
        ]
    },
    {
        "id": 1250,
        "code": "\tpublic Set<String> getMutuallyExclusiveNames() {\n\t\treturn this.mutuallyExclusiveNames;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "names",
            "of",
            "the",
            "properties",
            "that",
            "are",
            "mutually",
            "exclusive"
        ]
    },
    {
        "id": 1251,
        "code": "\tpublic static void throwIfMultipleNonNullValuesIn(Consumer<Map<String, Object>> entries) {\n\t\tMap<String, Object> map = new LinkedHashMap<>();\n\t\tentries.accept(map);\n\t\tSet<String> configuredNames = map.entrySet().stream().filter((entry) -> entry.getValue() != null)\n\t\t\t\t.map(Map.Entry::getKey).collect(Collectors.toCollection(LinkedHashSet::new));\n\t\tif (configuredNames.size() > 1) {\n\t\t\tthrow new MutuallyExclusiveConfigurationPropertiesException(configuredNames, map.keySet());\n\t\t}\n\t}",
        "summary_tokens": [
            "throw",
            "a",
            "new",
            "mutually",
            "exclusive",
            "configuration",
            "properties",
            "exception",
            "if",
            "multiple",
            "non",
            "null",
            "values",
            "are",
            "defined",
            "in",
            "a",
            "set",
            "of",
            "entries"
        ]
    },
    {
        "id": 1252,
        "code": "\tdefault BiPredicate<ConfigurationPropertyName, ConfigurationPropertyName> getAncestorOfCheck() {\n\t\treturn DEFAULT_ANCESTOR_OF_CHECK;\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "bi",
            "predicate",
            "that",
            "can",
            "be",
            "used",
            "to",
            "check",
            "if",
            "one",
            "name",
            "is",
            "an",
            "ancestor",
            "of",
            "another",
            "when",
            "considering",
            "the",
            "mapping",
            "rules"
        ]
    },
    {
        "id": 1253,
        "code": "\tT get(Supplier<T> factory, UnaryOperator<T> refreshAction) {\n\t\tT value = getValue();\n\t\tif (value == null) {\n\t\t\tvalue = refreshAction.apply(factory.get());\n\t\t\tsetValue(value);\n\t\t}\n\t\telse if (hasExpired()) {\n\t\t\tvalue = refreshAction.apply(value);\n\t\t\tsetValue(value);\n\t\t}\n\t\tif (!this.neverExpire) {\n\t\t\tthis.lastAccessed = now();\n\t\t}\n\t\treturn value;\n\t}",
        "summary_tokens": [
            "get",
            "a",
            "value",
            "from",
            "the",
            "cache",
            "creating",
            "it",
            "if",
            "necessary"
        ]
    },
    {
        "id": 1254,
        "code": "\tprotected Class<? extends T> getCauseType() {\n\t\treturn (Class<? extends T>) ResolvableType.forClass(AbstractFailureAnalyzer.class, getClass()).resolveGeneric();\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "cause",
            "type",
            "being",
            "handled",
            "by",
            "the",
            "analyzer"
        ]
    },
    {
        "id": 1255,
        "code": "\tpublic String getDescription() {\n\t\treturn this.description;\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "description",
            "of",
            "the",
            "failure"
        ]
    },
    {
        "id": 1256,
        "code": "\tpublic String getAction() {\n\t\treturn this.action;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "action",
            "if",
            "any",
            "to",
            "be",
            "taken",
            "to",
            "address",
            "the",
            "failure"
        ]
    },
    {
        "id": 1257,
        "code": "\tpublic Throwable getCause() {\n\t\treturn this.cause;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "cause",
            "of",
            "the",
            "failure"
        ]
    },
    {
        "id": 1258,
        "code": "\tstatic EnvironmentPostProcessorsFactory fromSpringFactories(ClassLoader classLoader) {\n\t\treturn new SpringFactoriesEnvironmentPostProcessorsFactory(\n\t\t\t\tSpringFactoriesLoader.forDefaultResourceLocation(classLoader));\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "environment",
            "post",
            "processors",
            "factory",
            "backed",
            "by",
            "spring"
        ]
    },
    {
        "id": 1259,
        "code": "\tstatic EnvironmentPostProcessorsFactory of(ClassLoader classLoader, String... classNames) {\n\t\treturn new ReflectionEnvironmentPostProcessorsFactory(classLoader, classNames);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "environment",
            "post",
            "processors",
            "factory",
            "that",
            "reflectively",
            "creates",
            "post",
            "processors",
            "from",
            "the",
            "given",
            "class",
            "names"
        ]
    },
    {
        "id": 1260,
        "code": "\tpublic String getGroup() {\n\t\treturn get(\"group\");\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "group",
            "id",
            "of",
            "the",
            "project",
            "or",
            "null"
        ]
    },
    {
        "id": 1261,
        "code": "\tpublic String getArtifact() {\n\t\treturn get(\"artifact\");\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "artifact",
            "id",
            "of",
            "the",
            "project",
            "or",
            "null"
        ]
    },
    {
        "id": 1262,
        "code": "\tpublic String getName() {\n\t\treturn get(\"name\");\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "name",
            "of",
            "the",
            "project",
            "or",
            "null"
        ]
    },
    {
        "id": 1263,
        "code": "\tpublic String getVersion() {\n\t\treturn get(\"version\");\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "version",
            "of",
            "the",
            "project",
            "or",
            "null"
        ]
    },
    {
        "id": 1264,
        "code": "\tpublic Instant getTime() {\n\t\treturn getInstant(\"time\");\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "timestamp",
            "of",
            "the",
            "build",
            "or",
            "null"
        ]
    },
    {
        "id": 1265,
        "code": "\tpublic String getBranch() {\n\t\treturn get(\"branch\");\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "name",
            "of",
            "the",
            "branch",
            "or",
            "null"
        ]
    },
    {
        "id": 1266,
        "code": "\tpublic String getCommitId() {\n\t\treturn get(\"commit.id\");\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "full",
            "id",
            "of",
            "the",
            "commit",
            "or",
            "null"
        ]
    },
    {
        "id": 1267,
        "code": "\tpublic String getShortCommitId() {\n\t\tString shortId = get(\"commit.id.abbrev\");\n\t\tif (shortId != null) {\n\t\t\treturn shortId;\n\t\t}\n\t\tString id = getCommitId();\n\t\tif (id == null) {\n\t\t\treturn null;\n\t\t}\n\t\treturn (id.length() > 7) ? id.substring(0, 7) : id;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "abbreviated",
            "id",
            "of",
            "the",
            "commit",
            "or",
            "null"
        ]
    },
    {
        "id": 1268,
        "code": "\tpublic Instant getCommitTime() {\n\t\treturn getInstant(\"commit.time\");\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "timestamp",
            "of",
            "the",
            "commit",
            "or",
            "null"
        ]
    },
    {
        "id": 1269,
        "code": "\tprivate static String coerceToEpoch(String s) {\n\t\tLong epoch = parseEpochSecond(s);\n\t\tif (epoch != null) {\n\t\t\treturn String.valueOf(epoch);\n\t\t}\n\t\tDateTimeFormatter format = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ssZ\");\n\t\ttry {\n\t\t\treturn String.valueOf(format.parse(s, Instant::from).toEpochMilli());\n\t\t}\n\t\tcatch (DateTimeParseException ex) {\n\t\t\treturn s;\n\t\t}\n\t}",
        "summary_tokens": [
            "attempt",
            "to",
            "convert",
            "the",
            "specified",
            "value",
            "to",
            "epoch",
            "time"
        ]
    },
    {
        "id": 1270,
        "code": "\tpublic String get(String key) {\n\t\treturn this.entries.getProperty(key);\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "value",
            "of",
            "the",
            "specified",
            "property",
            "or",
            "null"
        ]
    },
    {
        "id": 1271,
        "code": "\tpublic Instant getInstant(String key) {\n\t\tString s = get(key);\n\t\tif (s != null) {\n\t\t\ttry {\n\t\t\t\treturn Instant.ofEpochMilli(Long.parseLong(s));\n\t\t\t}\n\t\t\tcatch (NumberFormatException ex) {\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "value",
            "of",
            "the",
            "specified",
            "property",
            "as",
            "an",
            "instant",
            "or",
            "null",
            "if",
            "the",
            "value",
            "is",
            "not",
            "a",
            "valid",
            "long",
            "representation",
            "of",
            "an",
            "epoch",
            "time"
        ]
    },
    {
        "id": 1272,
        "code": "\tpublic PropertySource<?> toPropertySource() {\n\t\treturn new PropertiesPropertySource(getClass().getSimpleName(), copy(this.entries));\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "property",
            "source",
            "of",
            "this",
            "instance"
        ]
    },
    {
        "id": 1273,
        "code": "\tpublic <D extends DataSource> DataSourceBuilder<D> type(Class<D> type) {\n\t\tthis.type = (Class<T>) type;\n\t\treturn (DataSourceBuilder<D>) this;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "data",
            "source",
            "type",
            "that",
            "should",
            "be",
            "built"
        ]
    },
    {
        "id": 1274,
        "code": "\tpublic DataSourceBuilder<T> url(String url) {\n\t\tset(DataSourceProperty.URL, url);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "url",
            "that",
            "should",
            "be",
            "used",
            "when",
            "building",
            "the",
            "datasource"
        ]
    },
    {
        "id": 1275,
        "code": "\tpublic DataSourceBuilder<T> driverClassName(String driverClassName) {\n\t\tset(DataSourceProperty.DRIVER_CLASS_NAME, driverClassName);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "driver",
            "class",
            "name",
            "that",
            "should",
            "be",
            "used",
            "when",
            "building",
            "the",
            "datasource"
        ]
    },
    {
        "id": 1276,
        "code": "\tpublic DataSourceBuilder<T> username(String username) {\n\t\tset(DataSourceProperty.USERNAME, username);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "username",
            "that",
            "should",
            "be",
            "used",
            "when",
            "building",
            "the",
            "datasource"
        ]
    },
    {
        "id": 1277,
        "code": "\tpublic DataSourceBuilder<T> password(String password) {\n\t\tset(DataSourceProperty.PASSWORD, password);\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "password",
            "that",
            "should",
            "be",
            "used",
            "when",
            "building",
            "the",
            "datasource"
        ]
    },
    {
        "id": 1278,
        "code": "\tpublic T build() {\n\t\tDataSourceProperties<T> properties = DataSourceProperties.forType(this.classLoader, this.type);\n\t\tDataSourceProperties<DataSource> deriveFromProperties = getDeriveFromProperties();\n\t\tClass<? extends T> instanceType = (this.type != null) ? this.type : properties.getDataSourceInstanceType();\n\t\tT dataSource = BeanUtils.instantiateClass(instanceType);\n\t\tSet<DataSourceProperty> applied = new HashSet<>();\n\t\tfor (DataSourceProperty property : DataSourceProperty.values()) {\n\t\t\tString value = this.values.get(property);\n\t\t\tif (value == null && deriveFromProperties != null && properties.canSet(property)) {\n\t\t\t\tvalue = deriveFromProperties.get(this.deriveFrom, property);\n\t\t\t}\n\t\t\tif (value != null) {\n\t\t\t\tproperties.set(dataSource, property, value);\n\t\t\t\tapplied.add(property);\n\t\t\t}\n\t\t}\n\t\tif (!applied.contains(DataSourceProperty.DRIVER_CLASS_NAME)\n\t\t\t\t&& properties.canSet(DataSourceProperty.DRIVER_CLASS_NAME)\n\t\t\t\t&& this.values.containsKey(DataSourceProperty.URL)) {\n\t\t\tString url = this.values.get(DataSourceProperty.URL);\n\t\t\tDatabaseDriver driver = DatabaseDriver.fromJdbcUrl(url);\n\t\t\tproperties.set(dataSource, DataSourceProperty.DRIVER_CLASS_NAME, driver.getDriverClassName());\n\t\t}\n\t\treturn dataSource;\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "newly",
            "built",
            "data",
            "source",
            "instance"
        ]
    },
    {
        "id": 1279,
        "code": "\tpublic static DataSourceBuilder<?> create(ClassLoader classLoader) {\n\t\treturn new DataSourceBuilder<>(classLoader);\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "new",
            "data",
            "source",
            "builder",
            "instance"
        ]
    },
    {
        "id": 1280,
        "code": "\tpublic static DataSourceBuilder<?> derivedFrom(DataSource dataSource) {\n\t\tif (dataSource instanceof EmbeddedDatabase) {\n\t\t\ttry {\n\t\t\t\tdataSource = dataSource.unwrap(DataSource.class);\n\t\t\t}\n\t\t\tcatch (SQLException ex) {\n\t\t\t\tthrow new IllegalStateException(\"Unable to unwrap embedded database\", ex);\n\t\t\t}\n\t\t}\n\t\treturn new DataSourceBuilder<>(unwrap(dataSource));\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "new",
            "data",
            "source",
            "builder",
            "instance",
            "derived",
            "from",
            "the",
            "specified",
            "data",
            "source"
        ]
    },
    {
        "id": 1281,
        "code": "\tpublic static Class<? extends DataSource> findType(ClassLoader classLoader) {\n\t\tMappedDataSourceProperties<?> mappings = MappedDataSourceProperties.forType(classLoader, null);\n\t\treturn (mappings != null) ? mappings.getDataSourceInstanceType() : null;\n\t}",
        "summary_tokens": [
            "find",
            "the",
            "data",
            "source",
            "type",
            "preferred",
            "for",
            "the",
            "given",
            "classloader"
        ]
    },
    {
        "id": 1282,
        "code": "\tprotected final DataSource getDataSource() {\n\t\treturn this.dataSource;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "data",
            "source",
            "that",
            "will",
            "be",
            "initialized"
        ]
    },
    {
        "id": 1283,
        "code": "\tprotected void customize(ResourceDatabasePopulator populator) {\n\n\t}",
        "summary_tokens": [
            "customize",
            "the",
            "resource",
            "database",
            "populator"
        ]
    },
    {
        "id": 1284,
        "code": "\tpublic PlatformPlaceholderDatabaseDriverResolver withDriverPlatform(DatabaseDriver driver, String platform) {\n\t\tMap<DatabaseDriver, String> driverMappings = new LinkedHashMap<>(this.driverMappings);\n\t\tdriverMappings.put(driver, platform);\n\t\treturn new PlatformPlaceholderDatabaseDriverResolver(this.placeholder, driverMappings);\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "new",
            "platform",
            "placeholder",
            "database",
            "driver",
            "resolver",
            "that",
            "will",
            "map",
            "the",
            "given",
            "driver",
            "to",
            "the",
            "given",
            "platform"
        ]
    },
    {
        "id": 1285,
        "code": "\tpublic List<String> resolveAll(String platform, String... values) {\n\t\tAssert.notNull(platform, \"Platform must not be null\");\n\t\treturn resolveAll(() -> platform, values);\n\t}",
        "summary_tokens": [
            "resolves",
            "the",
            "placeholders",
            "in",
            "the",
            "given",
            "values",
            "replacing",
            "them",
            "with",
            "the",
            "given",
            "platform"
        ]
    },
    {
        "id": 1286,
        "code": "\tdefault Integer getIdle() {\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "number",
            "of",
            "established",
            "but",
            "idle",
            "connections"
        ]
    },
    {
        "id": 1287,
        "code": "\tpublic static JsonParser getJsonParser() {\n\t\tif (ClassUtils.isPresent(\"com.fasterxml.jackson.databind.ObjectMapper\", null)) {\n\t\t\treturn new JacksonJsonParser();\n\t\t}\n\t\tif (ClassUtils.isPresent(\"com.google.gson.Gson\", null)) {\n\t\t\treturn new GsonJsonParser();\n\t\t}\n\t\treturn new BasicJsonParser();\n\t}",
        "summary_tokens": [
            "static",
            "factory",
            "for",
            "the",
            "best",
            "json",
            "parser",
            "available",
            "on",
            "the",
            "classpath"
        ]
    },
    {
        "id": 1288,
        "code": "\tprotected String getSelfInitializationConfig() {\n\t\treturn findConfig(getStandardConfigLocations());\n\t}",
        "summary_tokens": [
            "return",
            "any",
            "self",
            "initialization",
            "config",
            "that",
            "has",
            "been",
            "applied"
        ]
    },
    {
        "id": 1289,
        "code": "\tprotected String getSpringInitializationConfig() {\n\t\treturn findConfig(getSpringConfigLocations());\n\t}",
        "summary_tokens": [
            "return",
            "any",
            "spring",
            "specific",
            "initialization",
            "config",
            "that",
            "should",
            "be",
            "applied"
        ]
    },
    {
        "id": 1290,
        "code": "\tprotected String[] getSpringConfigLocations() {\n\t\tString[] locations = getStandardConfigLocations();\n\t\tfor (int i = 0; i < locations.length; i++) {\n\t\t\tString extension = StringUtils.getFilenameExtension(locations[i]);\n\t\t\tlocations[i] = locations[i].substring(0, locations[i].length() - extension.length() - 1) + \"-spring.\"\n\t\t\t\t\t+ extension;\n\t\t}\n\t\treturn locations;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "spring",
            "config",
            "locations",
            "for",
            "this",
            "system"
        ]
    },
    {
        "id": 1291,
        "code": "\tprotected void reinitialize(LoggingInitializationContext initializationContext) {\n\t}",
        "summary_tokens": [
            "reinitialize",
            "the",
            "logging",
            "system",
            "if",
            "required"
        ]
    },
    {
        "id": 1292,
        "code": "\tdefault Log getLog(Log destination) {\n\t\treturn getLog(() -> destination);\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "new",
            "deferred",
            "log",
            "for",
            "the",
            "given",
            "destination"
        ]
    },
    {
        "id": 1293,
        "code": "\tpublic Log getLog(Supplier<Log> destination) {\n\t\tsynchronized (this.lines) {\n\t\t\tDeferredLog logger = new DeferredLog(destination, this.lines);\n\t\t\tthis.loggers.add(logger);\n\t\t\treturn logger;\n\t\t}\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "new",
            "deferred",
            "log",
            "for",
            "the",
            "given",
            "destination"
        ]
    },
    {
        "id": 1294,
        "code": "\tpublic void switchOverAll() {\n\t\tsynchronized (this.lines) {\n\t\t\tfor (Line line : this.lines) {\n\t\t\t\tDeferredLog.logTo(line.getDestination(), line.getLevel(), line.getMessage(), line.getThrowable());\n\t\t\t}\n\t\t\tfor (DeferredLog logger : this.loggers) {\n\t\t\t\tlogger.switchOver();\n\t\t\t}\n\t\t\tthis.lines.clear();\n\t\t}\n\n\t}",
        "summary_tokens": [
            "switch",
            "over",
            "all",
            "deferred",
            "logs",
            "to",
            "their",
            "supplied",
            "destination"
        ]
    },
    {
        "id": 1295,
        "code": "\tpublic void applyToSystemProperties() {\n\t\tapplyTo(System.getProperties());\n\t}",
        "summary_tokens": [
            "apply",
            "log",
            "file",
            "details",
            "to",
            "log",
            "path",
            "and",
            "log",
            "file",
            "system",
            "properties"
        ]
    },
    {
        "id": 1296,
        "code": "\tpublic void applyTo(Properties properties) {\n\t\tput(properties, LoggingSystemProperties.LOG_PATH, this.path);\n\t\tput(properties, LoggingSystemProperties.LOG_FILE, toString());\n\t}",
        "summary_tokens": [
            "apply",
            "log",
            "file",
            "details",
            "to",
            "log",
            "path",
            "and",
            "log",
            "file",
            "map",
            "entries"
        ]
    },
    {
        "id": 1297,
        "code": "\tpublic static LogFile get(PropertyResolver propertyResolver) {\n\t\tString file = propertyResolver.getProperty(FILE_NAME_PROPERTY);\n\t\tString path = propertyResolver.getProperty(FILE_PATH_PROPERTY);\n\t\tif (StringUtils.hasLength(file) || StringUtils.hasLength(path)) {\n\t\t\treturn new LogFile(file, path);\n\t\t}\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "get",
            "a",
            "log",
            "file",
            "from",
            "the",
            "given",
            "spring",
            "environment"
        ]
    },
    {
        "id": 1298,
        "code": "\tpublic Environment getEnvironment() {\n\t\treturn this.environment;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "spring",
            "environment",
            "if",
            "available"
        ]
    },
    {
        "id": 1299,
        "code": "\tpublic LoggingSystemProperties getSystemProperties(ConfigurableEnvironment environment) {\n\t\treturn new LoggingSystemProperties(environment);\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "logging",
            "system",
            "properties",
            "that",
            "should",
            "be",
            "applied"
        ]
    },
    {
        "id": 1300,
        "code": "\tpublic void initialize(LoggingInitializationContext initializationContext, String configLocation, LogFile logFile) {\n\t}",
        "summary_tokens": [
            "fully",
            "initialize",
            "the",
            "logging",
            "system"
        ]
    },
    {
        "id": 1301,
        "code": "\tpublic void cleanUp() {\n\t}",
        "summary_tokens": [
            "clean",
            "up",
            "the",
            "logging",
            "system"
        ]
    },
    {
        "id": 1302,
        "code": "\tpublic Runnable getShutdownHandler() {\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "runnable",
            "that",
            "can",
            "handle",
            "shutdown",
            "of",
            "this",
            "logging",
            "system",
            "when",
            "the",
            "jvm",
            "exits"
        ]
    },
    {
        "id": 1303,
        "code": "\tpublic Set<LogLevel> getSupportedLogLevels() {\n\t\treturn EnumSet.allOf(LogLevel.class);\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "set",
            "of",
            "the",
            "log",
            "level",
            "log",
            "levels",
            "that",
            "are",
            "actually",
            "supported",
            "by",
            "the",
            "logging",
            "system"
        ]
    },
    {
        "id": 1304,
        "code": "\tpublic void setLogLevel(String loggerName, LogLevel level) {\n\t\tthrow new UnsupportedOperationException(\"Unable to set log level\");\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "logging",
            "level",
            "for",
            "a",
            "given",
            "logger"
        ]
    },
    {
        "id": 1305,
        "code": "\tpublic List<LoggerConfiguration> getLoggerConfigurations() {\n\t\tthrow new UnsupportedOperationException(\"Unable to get logger configurations\");\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "collection",
            "of",
            "the",
            "current",
            "configuration",
            "for",
            "all",
            "a",
            "logging",
            "system",
            "s",
            "loggers"
        ]
    },
    {
        "id": 1306,
        "code": "\tpublic LoggerConfiguration getLoggerConfiguration(String loggerName) {\n\t\tthrow new UnsupportedOperationException(\"Unable to get logger configuration\");\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "current",
            "configuration",
            "for",
            "a",
            "logging",
            "system",
            "s",
            "logger"
        ]
    },
    {
        "id": 1307,
        "code": "\tpublic static LoggingSystem get(ClassLoader classLoader) {\n\t\tString loggingSystemClassName = System.getProperty(SYSTEM_PROPERTY);\n\t\tif (StringUtils.hasLength(loggingSystemClassName)) {\n\t\t\tif (NONE.equals(loggingSystemClassName)) {\n\t\t\t\treturn new NoOpLoggingSystem();\n\t\t\t}\n\t\t\treturn get(classLoader, loggingSystemClassName);\n\t\t}\n\t\tLoggingSystem loggingSystem = SYSTEM_FACTORY.getLoggingSystem(classLoader);\n\t\tAssert.state(loggingSystem != null, \"No suitable logging system located\");\n\t\treturn loggingSystem;\n\t}",
        "summary_tokens": [
            "detect",
            "and",
            "return",
            "the",
            "logging",
            "system",
            "in",
            "use"
        ]
    },
    {
        "id": 1308,
        "code": "\tstatic LoggingSystemFactory fromSpringFactories() {\n\t\treturn new DelegatingLoggingSystemFactory(\n\t\t\t\t(classLoader) -> SpringFactoriesLoader.loadFactories(LoggingSystemFactory.class, classLoader));\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "logging",
            "system",
            "factory",
            "backed",
            "by",
            "spring"
        ]
    },
    {
        "id": 1309,
        "code": "\tpublic static ColorConverter newInstance(Configuration config, String[] options) {\n\t\tif (options.length < 1) {\n\t\t\tLOGGER.error(\"Incorrect number of options on style. Expected at least 1, received {}\", options.length);\n\t\t\treturn null;\n\t\t}\n\t\tif (options[0] == null) {\n\t\t\tLOGGER.error(\"No pattern supplied on style\");\n\t\t\treturn null;\n\t\t}\n\t\tPatternParser parser = PatternLayout.createPatternParser(config);\n\t\tList<PatternFormatter> formatters = parser.parse(options[0]);\n\t\tAnsiElement element = (options.length != 1) ? ELEMENTS.get(options[1]) : null;\n\t\treturn new ColorConverter(formatters, element);\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "new",
            "instance",
            "of",
            "the",
            "class"
        ]
    },
    {
        "id": 1310,
        "code": "\tpublic static ExtendedWhitespaceThrowablePatternConverter newInstance(Configuration configuration,\n\t\t\tString[] options) {\n\t\treturn new ExtendedWhitespaceThrowablePatternConverter(configuration, options);\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "new",
            "instance",
            "of",
            "the",
            "class"
        ]
    },
    {
        "id": 1311,
        "code": "\tpublic static WhitespaceThrowablePatternConverter newInstance(Configuration configuration, String[] options) {\n\t\treturn new WhitespaceThrowablePatternConverter(configuration, options);\n\t}",
        "summary_tokens": [
            "creates",
            "a",
            "new",
            "instance",
            "of",
            "the",
            "class"
        ]
    },
    {
        "id": 1312,
        "code": "\tdefault boolean isImmutable() {\n\t\treturn false;\n\t}",
        "summary_tokens": [
            "return",
            "true",
            "if",
            "this",
            "lookup",
            "is",
            "immutable",
            "and",
            "has",
            "contents",
            "that",
            "will",
            "never",
            "change"
        ]
    },
    {
        "id": 1313,
        "code": "\tdefault String getPrefix() {\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "implicit",
            "prefix",
            "that",
            "is",
            "applied",
            "when",
            "performing",
            "a",
            "lookup",
            "or",
            "null",
            "if",
            "no",
            "prefix",
            "is",
            "used"
        ]
    },
    {
        "id": 1314,
        "code": "\tstatic <K> Origin getOrigin(Object source, K key) {\n\t\tif (!(source instanceof OriginLookup)) {\n\t\t\treturn null;\n\t\t}\n\t\ttry {\n\t\t\treturn ((OriginLookup<K>) source).getOrigin(key);\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\treturn null;\n\t\t}\n\t}",
        "summary_tokens": [
            "attempt",
            "to",
            "look",
            "up",
            "the",
            "origin",
            "from",
            "the",
            "given",
            "source"
        ]
    },
    {
        "id": 1315,
        "code": "\tpublic PropertySource<?> getPropertySource() {\n\t\treturn this.propertySource;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "origin",
            "property",
            "source"
        ]
    },
    {
        "id": 1316,
        "code": "\tpublic String getPropertyName() {\n\t\treturn this.propertyName;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "property",
            "name",
            "that",
            "was",
            "used",
            "when",
            "obtaining",
            "the",
            "original",
            "value",
            "from",
            "the",
            "get",
            "property",
            "source",
            "property",
            "source"
        ]
    },
    {
        "id": 1317,
        "code": "\tpublic static Origin get(PropertySource<?> propertySource, String name) {\n\t\tOrigin origin = OriginLookup.getOrigin(propertySource, name);\n\t\treturn (origin != null) ? origin : new PropertySourceOrigin(propertySource, name);\n\t}",
        "summary_tokens": [
            "get",
            "an",
            "origin",
            "for",
            "the",
            "given",
            "property",
            "source",
            "and",
            "property",
            "name"
        ]
    },
    {
        "id": 1318,
        "code": "\tpublic void setBootstrapExecutor(AsyncTaskExecutor bootstrapExecutor) {\n\t\tthis.bootstrapExecutor = bootstrapExecutor;\n\t}",
        "summary_tokens": [
            "configure",
            "the",
            "bootstrap",
            "executor",
            "to",
            "be",
            "used",
            "by",
            "the",
            "local",
            "container",
            "entity",
            "manager",
            "factory",
            "bean"
        ]
    },
    {
        "id": 1319,
        "code": "\tpublic void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... persistenceUnitPostProcessors) {\n\t\tthis.persistenceUnitPostProcessors = persistenceUnitPostProcessors;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "persistence",
            "unit",
            "post",
            "processor",
            "persistence",
            "unit",
            "post",
            "processors",
            "to",
            "be",
            "applied",
            "to",
            "the",
            "persistence",
            "unit",
            "info",
            "used",
            "for",
            "creating",
            "the",
            "local",
            "container",
            "entity",
            "manager",
            "factory",
            "bean"
        ]
    },
    {
        "id": 1320,
        "code": "\tpublic static OptionsCapableConnectionFactory unwrapFrom(ConnectionFactory connectionFactory) {\n\t\tif (connectionFactory instanceof OptionsCapableConnectionFactory) {\n\t\t\treturn (OptionsCapableConnectionFactory) connectionFactory;\n\t\t}\n\t\tif (connectionFactory instanceof Wrapped) {\n\t\t\tObject unwrapped = ((Wrapped<?>) connectionFactory).unwrap();\n\t\t\tif (unwrapped instanceof ConnectionFactory) {\n\t\t\t\treturn unwrapFrom((ConnectionFactory) unwrapped);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\n\t}",
        "summary_tokens": [
            "returns",
            "if",
            "possible",
            "an",
            "options",
            "capable",
            "connection",
            "factory",
            "by",
            "unwrapping",
            "the",
            "given",
            "connection",
            "factory",
            "as",
            "necessary"
        ]
    },
    {
        "id": 1321,
        "code": "\tpublic RSocketServer getServer() {\n\t\treturn getSource();\n\t}",
        "summary_tokens": [
            "access",
            "the",
            "rsocket",
            "server"
        ]
    },
    {
        "id": 1322,
        "code": "\tpublic RSocketServer getSource() {\n\t\treturn (RSocketServer) super.getSource();\n\t}",
        "summary_tokens": [
            "access",
            "the",
            "source",
            "of",
            "the",
            "event",
            "an",
            "rsocket",
            "server"
        ]
    },
    {
        "id": 1323,
        "code": "\tpublic void setResourceFactory(ReactorResourceFactory resourceFactory) {\n\t\tthis.resourceFactory = resourceFactory;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "reactor",
            "resource",
            "factory",
            "to",
            "get",
            "the",
            "shared",
            "resources",
            "from"
        ]
    },
    {
        "id": 1324,
        "code": "\tpublic void setRSocketServerCustomizers(Collection<? extends RSocketServerCustomizer> rSocketServerCustomizers) {\n\t\tAssert.notNull(rSocketServerCustomizers, \"RSocketServerCustomizers must not be null\");\n\t\tthis.rSocketServerCustomizers = new ArrayList<>(rSocketServerCustomizers);\n\t}",
        "summary_tokens": [
            "set",
            "rsocket",
            "server",
            "customizer",
            "s",
            "that",
            "should",
            "be",
            "called",
            "to",
            "configure",
            "the",
            "io"
        ]
    },
    {
        "id": 1325,
        "code": "\tpublic void addRSocketServerCustomizers(RSocketServerCustomizer... rSocketServerCustomizers) {\n\t\tAssert.notNull(rSocketServerCustomizers, \"RSocketServerCustomizers must not be null\");\n\t\tthis.rSocketServerCustomizers.addAll(Arrays.asList(rSocketServerCustomizers));\n\t}",
        "summary_tokens": [
            "add",
            "rsocket",
            "server",
            "customizer",
            "s",
            "that",
            "should",
            "be",
            "called",
            "to",
            "configure",
            "the",
            "io"
        ]
    },
    {
        "id": 1326,
        "code": "\tpublic void setLifecycleTimeout(Duration lifecycleTimeout) {\n\t\tthis.lifecycleTimeout = lifecycleTimeout;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "maximum",
            "amount",
            "of",
            "time",
            "that",
            "should",
            "be",
            "waited",
            "when",
            "starting",
            "or",
            "stopping",
            "the",
            "server"
        ]
    },
    {
        "id": 1327,
        "code": "\tprotected boolean ignoreApplicationContext(ApplicationContext applicationContext) {\n\t\treturn false;\n\t}",
        "summary_tokens": [
            "returns",
            "if",
            "the",
            "application",
            "context",
            "should",
            "be",
            "ignored",
            "and",
            "not",
            "used",
            "for",
            "matching"
        ]
    },
    {
        "id": 1328,
        "code": "\tprotected void initialized(Supplier<C> context) {\n\t}",
        "summary_tokens": [
            "called",
            "once",
            "the",
            "context",
            "has",
            "been",
            "initialized"
        ]
    },
    {
        "id": 1329,
        "code": "\tprotected boolean ignoreApplicationContext(WebApplicationContext webApplicationContext) {\n\t\treturn false;\n\t}",
        "summary_tokens": [
            "returns",
            "if",
            "the",
            "web",
            "application",
            "context",
            "should",
            "be",
            "ignored",
            "and",
            "not",
            "used",
            "for",
            "matching"
        ]
    },
    {
        "id": 1330,
        "code": "\tprotected void initialized(Supplier<C> context) {\n\t}",
        "summary_tokens": [
            "method",
            "that",
            "can",
            "be",
            "implemented",
            "by",
            "subclasses",
            "that",
            "wish",
            "to",
            "initialize",
            "items",
            "the",
            "first",
            "time",
            "that",
            "the",
            "matcher",
            "is",
            "called"
        ]
    },
    {
        "id": 1331,
        "code": "\tpublic boolean initializeDatabase() {\n\t\tScriptLocationResolver locationResolver = new ScriptLocationResolver(this.resourceLoader);\n\t\tboolean initialized = applySchemaScripts(locationResolver);\n\t\treturn applyDataScripts(locationResolver) || initialized;\n\t}",
        "summary_tokens": [
            "initializes",
            "the",
            "database",
            "by",
            "applying",
            "schema",
            "and",
            "data",
            "scripts"
        ]
    },
    {
        "id": 1332,
        "code": "\tprotected boolean isEmbeddedDatabase() {\n\t\tthrow new IllegalStateException(\n\t\t\t\t\"Database initialization mode is '\" + this.settings.getMode() + \"' and database type is unknown\");\n\t}",
        "summary_tokens": [
            "returns",
            "whether",
            "the",
            "database",
            "that",
            "is",
            "to",
            "be",
            "initialized",
            "is",
            "embedded"
        ]
    },
    {
        "id": 1333,
        "code": "\tpublic List<String> getSchemaLocations() {\n\t\treturn this.schemaLocations;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "locations",
            "of",
            "the",
            "schema",
            "ddl",
            "scripts",
            "to",
            "apply",
            "to",
            "the",
            "database"
        ]
    },
    {
        "id": 1334,
        "code": "\tpublic void setSchemaLocations(List<String> schemaLocations) {\n\t\tthis.schemaLocations = schemaLocations;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "locations",
            "of",
            "schema",
            "ddl",
            "scripts",
            "to",
            "apply",
            "to",
            "the",
            "database"
        ]
    },
    {
        "id": 1335,
        "code": "\tpublic List<String> getDataLocations() {\n\t\treturn this.dataLocations;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "locations",
            "of",
            "data",
            "dml",
            "scripts",
            "to",
            "apply",
            "to",
            "the",
            "database"
        ]
    },
    {
        "id": 1336,
        "code": "\tpublic void setDataLocations(List<String> dataLocations) {\n\t\tthis.dataLocations = dataLocations;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "locations",
            "of",
            "data",
            "dml",
            "scripts",
            "to",
            "apply",
            "to",
            "the",
            "database"
        ]
    },
    {
        "id": 1337,
        "code": "\tpublic boolean isContinueOnError() {\n\t\treturn this.continueOnError;\n\t}",
        "summary_tokens": [
            "returns",
            "whether",
            "to",
            "continue",
            "when",
            "an",
            "error",
            "occurs",
            "while",
            "applying",
            "a",
            "schema",
            "or",
            "data",
            "script"
        ]
    },
    {
        "id": 1338,
        "code": "\tpublic void setContinueOnError(boolean continueOnError) {\n\t\tthis.continueOnError = continueOnError;\n\t}",
        "summary_tokens": [
            "sets",
            "whether",
            "initialization",
            "should",
            "continue",
            "when",
            "an",
            "error",
            "occurs",
            "when",
            "applying",
            "a",
            "schema",
            "or",
            "data",
            "script"
        ]
    },
    {
        "id": 1339,
        "code": "\tpublic String getSeparator() {\n\t\treturn this.separator;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "statement",
            "separator",
            "used",
            "in",
            "the",
            "schema",
            "and",
            "data",
            "scripts"
        ]
    },
    {
        "id": 1340,
        "code": "\tpublic void setSeparator(String separator) {\n\t\tthis.separator = separator;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "statement",
            "separator",
            "to",
            "use",
            "when",
            "reading",
            "the",
            "schema",
            "and",
            "data",
            "scripts"
        ]
    },
    {
        "id": 1341,
        "code": "\tpublic Charset getEncoding() {\n\t\treturn this.encoding;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "encoding",
            "to",
            "use",
            "when",
            "reading",
            "the",
            "schema",
            "and",
            "data",
            "scripts"
        ]
    },
    {
        "id": 1342,
        "code": "\tpublic void setEncoding(Charset encoding) {\n\t\tthis.encoding = encoding;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "encoding",
            "to",
            "use",
            "when",
            "reading",
            "the",
            "schema",
            "and",
            "data",
            "scripts"
        ]
    },
    {
        "id": 1343,
        "code": "\tpublic DatabaseInitializationMode getMode() {\n\t\treturn this.mode;\n\t}",
        "summary_tokens": [
            "gets",
            "the",
            "mode",
            "to",
            "use",
            "when",
            "determining",
            "whether",
            "database",
            "initialization",
            "should",
            "be",
            "performed"
        ]
    },
    {
        "id": 1344,
        "code": "\tpublic void setMode(DatabaseInitializationMode mode) {\n\t\tthis.mode = mode;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "mode",
            "the",
            "use",
            "when",
            "determining",
            "whether",
            "database",
            "initialization",
            "should",
            "be",
            "performed"
        ]
    },
    {
        "id": 1345,
        "code": "\tdefault void detectionComplete(ConfigurableListableBeanFactory beanFactory,\n\t\t\tSet<String> dataSourceInitializerNames) {\n\t}",
        "summary_tokens": [
            "callback",
            "indicating",
            "that",
            "all",
            "known",
            "data",
            "source",
            "initializer",
            "detectors",
            "have",
            "been",
            "called",
            "and",
            "detection",
            "of",
            "beans",
            "that",
            "initialize",
            "a",
            "data",
            "source",
            "is",
            "complete"
        ]
    },
    {
        "id": 1346,
        "code": "\tpublic TaskExecutorBuilder queueCapacity(int queueCapacity) {\n\t\treturn new TaskExecutorBuilder(queueCapacity, this.corePoolSize, this.maxPoolSize, this.allowCoreThreadTimeOut,\n\t\t\t\tthis.keepAlive, this.awaitTermination, this.awaitTerminationPeriod, this.threadNamePrefix,\n\t\t\t\tthis.taskDecorator, this.customizers);\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "capacity",
            "of",
            "the",
            "queue"
        ]
    },
    {
        "id": 1347,
        "code": "\tpublic TaskExecutorBuilder corePoolSize(int corePoolSize) {\n\t\treturn new TaskExecutorBuilder(this.queueCapacity, corePoolSize, this.maxPoolSize, this.allowCoreThreadTimeOut,\n\t\t\t\tthis.keepAlive, this.awaitTermination, this.awaitTerminationPeriod, this.threadNamePrefix,\n\t\t\t\tthis.taskDecorator, this.customizers);\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "core",
            "number",
            "of",
            "threads"
        ]
    },
    {
        "id": 1348,
        "code": "\tpublic TaskExecutorBuilder maxPoolSize(int maxPoolSize) {\n\t\treturn new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize, maxPoolSize, this.allowCoreThreadTimeOut,\n\t\t\t\tthis.keepAlive, this.awaitTermination, this.awaitTerminationPeriod, this.threadNamePrefix,\n\t\t\t\tthis.taskDecorator, this.customizers);\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "maximum",
            "allowed",
            "number",
            "of",
            "threads"
        ]
    },
    {
        "id": 1349,
        "code": "\tpublic TaskExecutorBuilder allowCoreThreadTimeOut(boolean allowCoreThreadTimeOut) {\n\t\treturn new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize, this.maxPoolSize, allowCoreThreadTimeOut,\n\t\t\t\tthis.keepAlive, this.awaitTermination, this.awaitTerminationPeriod, this.threadNamePrefix,\n\t\t\t\tthis.taskDecorator, this.customizers);\n\t}",
        "summary_tokens": [
            "set",
            "whether",
            "core",
            "threads",
            "are",
            "allowed",
            "to",
            "time",
            "out"
        ]
    },
    {
        "id": 1350,
        "code": "\tpublic TaskExecutorBuilder keepAlive(Duration keepAlive) {\n\t\treturn new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize, this.maxPoolSize,\n\t\t\t\tthis.allowCoreThreadTimeOut, keepAlive, this.awaitTermination, this.awaitTerminationPeriod,\n\t\t\t\tthis.threadNamePrefix, this.taskDecorator, this.customizers);\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "time",
            "limit",
            "for",
            "which",
            "threads",
            "may",
            "remain",
            "idle",
            "before",
            "being",
            "terminated"
        ]
    },
    {
        "id": 1351,
        "code": "\tpublic TaskExecutorBuilder awaitTermination(boolean awaitTermination) {\n\t\treturn new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize, this.maxPoolSize,\n\t\t\t\tthis.allowCoreThreadTimeOut, this.keepAlive, awaitTermination, this.awaitTerminationPeriod,\n\t\t\t\tthis.threadNamePrefix, this.taskDecorator, this.customizers);\n\t}",
        "summary_tokens": [
            "set",
            "whether",
            "the",
            "executor",
            "should",
            "wait",
            "for",
            "scheduled",
            "tasks",
            "to",
            "complete",
            "on",
            "shutdown",
            "not",
            "interrupting",
            "running",
            "tasks",
            "and",
            "executing",
            "all",
            "tasks",
            "in",
            "the",
            "queue"
        ]
    },
    {
        "id": 1352,
        "code": "\tpublic TaskExecutorBuilder awaitTerminationPeriod(Duration awaitTerminationPeriod) {\n\t\treturn new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize, this.maxPoolSize,\n\t\t\t\tthis.allowCoreThreadTimeOut, this.keepAlive, this.awaitTermination, awaitTerminationPeriod,\n\t\t\t\tthis.threadNamePrefix, this.taskDecorator, this.customizers);\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "maximum",
            "time",
            "the",
            "executor",
            "is",
            "supposed",
            "to",
            "block",
            "on",
            "shutdown"
        ]
    },
    {
        "id": 1353,
        "code": "\tpublic TaskExecutorBuilder threadNamePrefix(String threadNamePrefix) {\n\t\treturn new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize, this.maxPoolSize,\n\t\t\t\tthis.allowCoreThreadTimeOut, this.keepAlive, this.awaitTermination, this.awaitTerminationPeriod,\n\t\t\t\tthreadNamePrefix, this.taskDecorator, this.customizers);\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "prefix",
            "to",
            "use",
            "for",
            "the",
            "names",
            "of",
            "newly",
            "created",
            "threads"
        ]
    },
    {
        "id": 1354,
        "code": "\tpublic TaskExecutorBuilder taskDecorator(TaskDecorator taskDecorator) {\n\t\treturn new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize, this.maxPoolSize,\n\t\t\t\tthis.allowCoreThreadTimeOut, this.keepAlive, this.awaitTermination, this.awaitTerminationPeriod,\n\t\t\t\tthis.threadNamePrefix, taskDecorator, this.customizers);\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "task",
            "decorator",
            "to",
            "use",
            "or",
            "null",
            "to",
            "not",
            "use",
            "any"
        ]
    },
    {
        "id": 1355,
        "code": "\tpublic TaskExecutorBuilder customizers(Iterable<TaskExecutorCustomizer> customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\treturn new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize, this.maxPoolSize,\n\t\t\t\tthis.allowCoreThreadTimeOut, this.keepAlive, this.awaitTermination, this.awaitTerminationPeriod,\n\t\t\t\tthis.threadNamePrefix, this.taskDecorator, append(null, customizers));\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "task",
            "executor",
            "customizer",
            "task",
            "executor",
            "customizers",
            "that",
            "should",
            "be",
            "applied",
            "to",
            "the",
            "thread",
            "pool",
            "task",
            "executor"
        ]
    },
    {
        "id": 1356,
        "code": "\tpublic TaskExecutorBuilder additionalCustomizers(Iterable<TaskExecutorCustomizer> customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\treturn new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize, this.maxPoolSize,\n\t\t\t\tthis.allowCoreThreadTimeOut, this.keepAlive, this.awaitTermination, this.awaitTerminationPeriod,\n\t\t\t\tthis.threadNamePrefix, this.taskDecorator, append(this.customizers, customizers));\n\t}",
        "summary_tokens": [
            "add",
            "task",
            "executor",
            "customizer",
            "task",
            "executor",
            "customizers",
            "that",
            "should",
            "be",
            "applied",
            "to",
            "the",
            "thread",
            "pool",
            "task",
            "executor"
        ]
    },
    {
        "id": 1357,
        "code": "\tpublic <T extends ThreadPoolTaskExecutor> T build(Class<T> taskExecutorClass) {\n\t\treturn configure(BeanUtils.instantiateClass(taskExecutorClass));\n\t}",
        "summary_tokens": [
            "build",
            "a",
            "new",
            "thread",
            "pool",
            "task",
            "executor",
            "instance",
            "of",
            "the",
            "specified",
            "type",
            "and",
            "configure",
            "it",
            "using",
            "this",
            "builder"
        ]
    },
    {
        "id": 1358,
        "code": "\tpublic <T extends ThreadPoolTaskExecutor> T configure(T taskExecutor) {\n\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n\t\tmap.from(this.queueCapacity).to(taskExecutor::setQueueCapacity);\n\t\tmap.from(this.corePoolSize).to(taskExecutor::setCorePoolSize);\n\t\tmap.from(this.maxPoolSize).to(taskExecutor::setMaxPoolSize);\n\t\tmap.from(this.keepAlive).asInt(Duration::getSeconds).to(taskExecutor::setKeepAliveSeconds);\n\t\tmap.from(this.allowCoreThreadTimeOut).to(taskExecutor::setAllowCoreThreadTimeOut);\n\t\tmap.from(this.awaitTermination).to(taskExecutor::setWaitForTasksToCompleteOnShutdown);\n\t\tmap.from(this.awaitTerminationPeriod).as(Duration::toMillis).to(taskExecutor::setAwaitTerminationMillis);\n\t\tmap.from(this.threadNamePrefix).whenHasText().to(taskExecutor::setThreadNamePrefix);\n\t\tmap.from(this.taskDecorator).to(taskExecutor::setTaskDecorator);\n\t\tif (!CollectionUtils.isEmpty(this.customizers)) {\n\t\t\tthis.customizers.forEach((customizer) -> customizer.customize(taskExecutor));\n\t\t}\n\t\treturn taskExecutor;\n\t}",
        "summary_tokens": [
            "configure",
            "the",
            "provided",
            "thread",
            "pool",
            "task",
            "executor",
            "instance",
            "using",
            "this",
            "builder"
        ]
    },
    {
        "id": 1359,
        "code": "\tpublic TaskSchedulerBuilder poolSize(int poolSize) {\n\t\treturn new TaskSchedulerBuilder(poolSize, this.awaitTermination, this.awaitTerminationPeriod,\n\t\t\t\tthis.threadNamePrefix, this.customizers);\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "maximum",
            "allowed",
            "number",
            "of",
            "threads"
        ]
    },
    {
        "id": 1360,
        "code": "\tpublic TaskSchedulerBuilder awaitTermination(boolean awaitTermination) {\n\t\treturn new TaskSchedulerBuilder(this.poolSize, awaitTermination, this.awaitTerminationPeriod,\n\t\t\t\tthis.threadNamePrefix, this.customizers);\n\t}",
        "summary_tokens": [
            "set",
            "whether",
            "the",
            "executor",
            "should",
            "wait",
            "for",
            "scheduled",
            "tasks",
            "to",
            "complete",
            "on",
            "shutdown",
            "not",
            "interrupting",
            "running",
            "tasks",
            "and",
            "executing",
            "all",
            "tasks",
            "in",
            "the",
            "queue"
        ]
    },
    {
        "id": 1361,
        "code": "\tpublic TaskSchedulerBuilder awaitTerminationPeriod(Duration awaitTerminationPeriod) {\n\t\treturn new TaskSchedulerBuilder(this.poolSize, this.awaitTermination, awaitTerminationPeriod,\n\t\t\t\tthis.threadNamePrefix, this.customizers);\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "maximum",
            "time",
            "the",
            "executor",
            "is",
            "supposed",
            "to",
            "block",
            "on",
            "shutdown"
        ]
    },
    {
        "id": 1362,
        "code": "\tpublic TaskSchedulerBuilder threadNamePrefix(String threadNamePrefix) {\n\t\treturn new TaskSchedulerBuilder(this.poolSize, this.awaitTermination, this.awaitTerminationPeriod,\n\t\t\t\tthreadNamePrefix, this.customizers);\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "prefix",
            "to",
            "use",
            "for",
            "the",
            "names",
            "of",
            "newly",
            "created",
            "threads"
        ]
    },
    {
        "id": 1363,
        "code": "\tpublic TaskSchedulerBuilder customizers(Iterable<TaskSchedulerCustomizer> customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\treturn new TaskSchedulerBuilder(this.poolSize, this.awaitTermination, this.awaitTerminationPeriod,\n\t\t\t\tthis.threadNamePrefix, append(null, customizers));\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "task",
            "scheduler",
            "customizer",
            "task",
            "scheduler",
            "customizers",
            "that",
            "should",
            "be",
            "applied",
            "to",
            "the",
            "thread",
            "pool",
            "task",
            "scheduler"
        ]
    },
    {
        "id": 1364,
        "code": "\tpublic TaskSchedulerBuilder additionalCustomizers(Iterable<TaskSchedulerCustomizer> customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\treturn new TaskSchedulerBuilder(this.poolSize, this.awaitTermination, this.awaitTerminationPeriod,\n\t\t\t\tthis.threadNamePrefix, append(this.customizers, customizers));\n\t}",
        "summary_tokens": [
            "add",
            "task",
            "scheduler",
            "customizer",
            "task",
            "scheduler",
            "customizers",
            "that",
            "should",
            "be",
            "applied",
            "to",
            "the",
            "thread",
            "pool",
            "task",
            "scheduler"
        ]
    },
    {
        "id": 1365,
        "code": "\tpublic ThreadPoolTaskScheduler build() {\n\t\treturn configure(new ThreadPoolTaskScheduler());\n\t}",
        "summary_tokens": [
            "build",
            "a",
            "new",
            "thread",
            "pool",
            "task",
            "scheduler",
            "instance",
            "and",
            "configure",
            "it",
            "using",
            "this",
            "builder"
        ]
    },
    {
        "id": 1366,
        "code": "\tpublic <T extends ThreadPoolTaskScheduler> T configure(T taskScheduler) {\n\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n\t\tmap.from(this.poolSize).to(taskScheduler::setPoolSize);\n\t\tmap.from(this.awaitTermination).to(taskScheduler::setWaitForTasksToCompleteOnShutdown);\n\t\tmap.from(this.awaitTerminationPeriod).asInt(Duration::getSeconds).to(taskScheduler::setAwaitTerminationSeconds);\n\t\tmap.from(this.threadNamePrefix).to(taskScheduler::setThreadNamePrefix);\n\t\tif (!CollectionUtils.isEmpty(this.customizers)) {\n\t\t\tthis.customizers.forEach((customizer) -> customizer.customize(taskScheduler));\n\t\t}\n\t\treturn taskScheduler;\n\t}",
        "summary_tokens": [
            "configure",
            "the",
            "provided",
            "thread",
            "pool",
            "task",
            "scheduler",
            "instance",
            "using",
            "this",
            "builder"
        ]
    },
    {
        "id": 1367,
        "code": "\tprotected MetadataReader createMetadataReader(Resource resource) throws IOException {\n\t\treturn super.getMetadataReader(resource);\n\t}",
        "summary_tokens": [
            "create",
            "the",
            "meta",
            "data",
            "reader"
        ]
    },
    {
        "id": 1368,
        "code": "\tpublic void clearCache() {\n\t\tthis.cache.clear();\n\t}",
        "summary_tokens": [
            "clear",
            "the",
            "entire",
            "metadata",
            "reader",
            "cache",
            "removing",
            "all",
            "cached",
            "class",
            "metadata"
        ]
    },
    {
        "id": 1369,
        "code": "\tpublic List<T> instantiate(ClassLoader classLoader, Collection<String> names) {\n\t\tAssert.notNull(names, \"Names must not be null\");\n\t\treturn instantiate(names.stream().map((name) -> TypeSupplier.forName(classLoader, name)));\n\t}",
        "summary_tokens": [
            "instantiate",
            "the",
            "given",
            "set",
            "of",
            "class",
            "name",
            "injecting",
            "constructor",
            "arguments",
            "as",
            "necessary"
        ]
    },
    {
        "id": 1370,
        "code": "\tpublic List<T> instantiateTypes(Collection<Class<?>> types) {\n\t\tAssert.notNull(types, \"Types must not be null\");\n\t\treturn instantiate(types.stream().map(TypeSupplier::forType));\n\t}",
        "summary_tokens": [
            "instantiate",
            "the",
            "given",
            "set",
            "of",
            "classes",
            "injecting",
            "constructor",
            "arguments",
            "as",
            "necessary"
        ]
    },
    {
        "id": 1371,
        "code": "\tpublic static <C, A> Callback<C, A> callback(Class<C> callbackType, C callbackInstance, A argument,\n\t\t\tObject... additionalArguments) {\n\t\tAssert.notNull(callbackType, \"CallbackType must not be null\");\n\t\tAssert.notNull(callbackInstance, \"CallbackInstance must not be null\");\n\t\treturn new Callback<>(callbackType, callbackInstance, argument, additionalArguments);\n\t}",
        "summary_tokens": [
            "start",
            "a",
            "call",
            "to",
            "a",
            "single",
            "callback",
            "instance",
            "dealing",
            "with",
            "common",
            "generic",
            "type",
            "concerns",
            "and",
            "exceptions"
        ]
    },
    {
        "id": 1372,
        "code": "\tpublic static <C, A> Callbacks<C, A> callbacks(Class<C> callbackType, Collection<? extends C> callbackInstances,\n\t\t\tA argument, Object... additionalArguments) {\n\t\tAssert.notNull(callbackType, \"CallbackType must not be null\");\n\t\tAssert.notNull(callbackInstances, \"CallbackInstances must not be null\");\n\t\treturn new Callbacks<>(callbackType, callbackInstances, argument, additionalArguments);\n\t}",
        "summary_tokens": [
            "start",
            "a",
            "call",
            "to",
            "callback",
            "instances",
            "dealing",
            "with",
            "common",
            "generic",
            "type",
            "concerns",
            "and",
            "exceptions"
        ]
    },
    {
        "id": 1373,
        "code": "\tprivate String replaceParameters(String message, Locale locale) {\n\t\treturn replaceParameters(message, locale, new LinkedHashSet<>(4));\n\t}",
        "summary_tokens": [
            "recursively",
            "replaces",
            "all",
            "message",
            "parameters"
        ]
    },
    {
        "id": 1374,
        "code": "\tstatic MethodValidationExcludeFilter byAnnotation(Class<? extends Annotation> annotationType,\n\t\t\tSearchStrategy searchStrategy) {\n\t\treturn (type) -> MergedAnnotations.from(type, searchStrategy).isPresent(annotationType);\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "to",
            "create",
            "a",
            "method",
            "validation",
            "exclude",
            "filter",
            "that",
            "excludes",
            "classes",
            "by",
            "annotation",
            "found",
            "using",
            "the",
            "given",
            "search",
            "strategy"
        ]
    },
    {
        "id": 1375,
        "code": "\tpublic RestTemplateBuilder detectRequestFactory(boolean detectRequestFactory) {\n\t\treturn new RestTemplateBuilder(this.requestFactoryCustomizer, detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, this.interceptors, this.requestFactory, this.uriTemplateHandler,\n\t\t\t\tthis.errorHandler, this.basicAuthentication, this.defaultHeaders, this.customizers,\n\t\t\t\tthis.requestCustomizers);\n\t}",
        "summary_tokens": [
            "set",
            "if",
            "the",
            "client",
            "http",
            "request",
            "factory",
            "should",
            "be",
            "detected",
            "based",
            "on",
            "the",
            "classpath"
        ]
    },
    {
        "id": 1376,
        "code": "\tpublic RestTemplateBuilder rootUri(String rootUri) {\n\t\treturn new RestTemplateBuilder(this.requestFactoryCustomizer, this.detectRequestFactory, rootUri,\n\t\t\t\tthis.messageConverters, this.interceptors, this.requestFactory, this.uriTemplateHandler,\n\t\t\t\tthis.errorHandler, this.basicAuthentication, this.defaultHeaders, this.customizers,\n\t\t\t\tthis.requestCustomizers);\n\t}",
        "summary_tokens": [
            "set",
            "a",
            "root",
            "url",
            "that",
            "should",
            "be",
            "applied",
            "to",
            "each",
            "request",
            "that",
            "starts",
            "with"
        ]
    },
    {
        "id": 1377,
        "code": "\tpublic RestTemplateBuilder messageConverters(Collection<? extends HttpMessageConverter<?>> messageConverters) {\n\t\tAssert.notNull(messageConverters, \"MessageConverters must not be null\");\n\t\treturn new RestTemplateBuilder(this.requestFactoryCustomizer, this.detectRequestFactory, this.rootUri,\n\t\t\t\tcopiedSetOf(messageConverters), this.interceptors, this.requestFactory, this.uriTemplateHandler,\n\t\t\t\tthis.errorHandler, this.basicAuthentication, this.defaultHeaders, this.customizers,\n\t\t\t\tthis.requestCustomizers);\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "http",
            "message",
            "converter",
            "http",
            "message",
            "converters",
            "that",
            "should",
            "be",
            "used",
            "with",
            "the",
            "rest",
            "template"
        ]
    },
    {
        "id": 1378,
        "code": "\tpublic RestTemplateBuilder additionalMessageConverters(\n\t\t\tCollection<? extends HttpMessageConverter<?>> messageConverters) {\n\t\tAssert.notNull(messageConverters, \"MessageConverters must not be null\");\n\t\treturn new RestTemplateBuilder(this.requestFactoryCustomizer, this.detectRequestFactory, this.rootUri,\n\t\t\t\tappend(this.messageConverters, messageConverters), this.interceptors, this.requestFactory,\n\t\t\t\tthis.uriTemplateHandler, this.errorHandler, this.basicAuthentication, this.defaultHeaders,\n\t\t\t\tthis.customizers, this.requestCustomizers);\n\t}",
        "summary_tokens": [
            "add",
            "additional",
            "http",
            "message",
            "converter",
            "http",
            "message",
            "converters",
            "that",
            "should",
            "be",
            "used",
            "with",
            "the",
            "rest",
            "template"
        ]
    },
    {
        "id": 1379,
        "code": "\tpublic RestTemplateBuilder defaultMessageConverters() {\n\t\treturn new RestTemplateBuilder(this.requestFactoryCustomizer, this.detectRequestFactory, this.rootUri,\n\t\t\t\tcopiedSetOf(new RestTemplate().getMessageConverters()), this.interceptors, this.requestFactory,\n\t\t\t\tthis.uriTemplateHandler, this.errorHandler, this.basicAuthentication, this.defaultHeaders,\n\t\t\t\tthis.customizers, this.requestCustomizers);\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "http",
            "message",
            "converter",
            "http",
            "message",
            "converters",
            "that",
            "should",
            "be",
            "used",
            "with",
            "the",
            "rest",
            "template",
            "to",
            "the",
            "default",
            "set"
        ]
    },
    {
        "id": 1380,
        "code": "\tpublic RestTemplateBuilder interceptors(Collection<ClientHttpRequestInterceptor> interceptors) {\n\t\tAssert.notNull(interceptors, \"interceptors must not be null\");\n\t\treturn new RestTemplateBuilder(this.requestFactoryCustomizer, this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, copiedSetOf(interceptors), this.requestFactory, this.uriTemplateHandler,\n\t\t\t\tthis.errorHandler, this.basicAuthentication, this.defaultHeaders, this.customizers,\n\t\t\t\tthis.requestCustomizers);\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "client",
            "http",
            "request",
            "interceptor",
            "client",
            "http",
            "request",
            "interceptors",
            "that",
            "should",
            "be",
            "used",
            "with",
            "the",
            "rest",
            "template"
        ]
    },
    {
        "id": 1381,
        "code": "\tpublic RestTemplateBuilder additionalInterceptors(Collection<? extends ClientHttpRequestInterceptor> interceptors) {\n\t\tAssert.notNull(interceptors, \"interceptors must not be null\");\n\t\treturn new RestTemplateBuilder(this.requestFactoryCustomizer, this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, append(this.interceptors, interceptors), this.requestFactory,\n\t\t\t\tthis.uriTemplateHandler, this.errorHandler, this.basicAuthentication, this.defaultHeaders,\n\t\t\t\tthis.customizers, this.requestCustomizers);\n\t}",
        "summary_tokens": [
            "add",
            "additional",
            "client",
            "http",
            "request",
            "interceptor",
            "client",
            "http",
            "request",
            "interceptors",
            "that",
            "should",
            "be",
            "used",
            "with",
            "the",
            "rest",
            "template"
        ]
    },
    {
        "id": 1382,
        "code": "\tpublic RestTemplateBuilder requestFactory(Supplier<ClientHttpRequestFactory> requestFactory) {\n\t\tAssert.notNull(requestFactory, \"RequestFactory Supplier must not be null\");\n\t\treturn new RestTemplateBuilder(this.requestFactoryCustomizer, this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, this.interceptors, requestFactory, this.uriTemplateHandler, this.errorHandler,\n\t\t\t\tthis.basicAuthentication, this.defaultHeaders, this.customizers, this.requestCustomizers);\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "supplier",
            "of",
            "client",
            "http",
            "request",
            "factory",
            "that",
            "should",
            "be",
            "called",
            "each",
            "time",
            "we",
            "build",
            "a",
            "new",
            "rest",
            "template",
            "instance"
        ]
    },
    {
        "id": 1383,
        "code": "\tpublic RestTemplateBuilder uriTemplateHandler(UriTemplateHandler uriTemplateHandler) {\n\t\tAssert.notNull(uriTemplateHandler, \"UriTemplateHandler must not be null\");\n\t\treturn new RestTemplateBuilder(this.requestFactoryCustomizer, this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, this.interceptors, this.requestFactory, uriTemplateHandler, this.errorHandler,\n\t\t\t\tthis.basicAuthentication, this.defaultHeaders, this.customizers, this.requestCustomizers);\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "uri",
            "template",
            "handler",
            "that",
            "should",
            "be",
            "used",
            "with",
            "the",
            "rest",
            "template"
        ]
    },
    {
        "id": 1384,
        "code": "\tpublic RestTemplateBuilder errorHandler(ResponseErrorHandler errorHandler) {\n\t\tAssert.notNull(errorHandler, \"ErrorHandler must not be null\");\n\t\treturn new RestTemplateBuilder(this.requestFactoryCustomizer, this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, this.interceptors, this.requestFactory, this.uriTemplateHandler, errorHandler,\n\t\t\t\tthis.basicAuthentication, this.defaultHeaders, this.customizers, this.requestCustomizers);\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "response",
            "error",
            "handler",
            "that",
            "should",
            "be",
            "used",
            "with",
            "the",
            "rest",
            "template"
        ]
    },
    {
        "id": 1385,
        "code": "\tpublic RestTemplateBuilder basicAuthentication(String username, String password, Charset charset) {\n\t\treturn new RestTemplateBuilder(this.requestFactoryCustomizer, this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, this.interceptors, this.requestFactory, this.uriTemplateHandler,\n\t\t\t\tthis.errorHandler, new BasicAuthentication(username, password, charset), this.defaultHeaders,\n\t\t\t\tthis.customizers, this.requestCustomizers);\n\t}",
        "summary_tokens": [
            "add",
            "http",
            "basic",
            "authentication",
            "to",
            "requests",
            "with",
            "the",
            "given",
            "username",
            "password",
            "pair",
            "unless",
            "a",
            "custom",
            "authorization",
            "header",
            "has",
            "been",
            "set",
            "before"
        ]
    },
    {
        "id": 1386,
        "code": "\tpublic RestTemplateBuilder defaultHeader(String name, String... values) {\n\t\tAssert.notNull(name, \"Name must not be null\");\n\t\tAssert.notNull(values, \"Values must not be null\");\n\t\treturn new RestTemplateBuilder(this.requestFactoryCustomizer, this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, this.interceptors, this.requestFactory, this.uriTemplateHandler,\n\t\t\t\tthis.errorHandler, this.basicAuthentication, append(this.defaultHeaders, name, values),\n\t\t\t\tthis.customizers, this.requestCustomizers);\n\t}",
        "summary_tokens": [
            "add",
            "a",
            "default",
            "header",
            "that",
            "will",
            "be",
            "set",
            "if",
            "not",
            "already",
            "present",
            "on",
            "the",
            "outgoing",
            "http",
            "client",
            "request"
        ]
    },
    {
        "id": 1387,
        "code": "\tpublic RestTemplateBuilder setConnectTimeout(Duration connectTimeout) {\n\t\treturn new RestTemplateBuilder(this.requestFactoryCustomizer.connectTimeout(connectTimeout),\n\t\t\t\tthis.detectRequestFactory, this.rootUri, this.messageConverters, this.interceptors, this.requestFactory,\n\t\t\t\tthis.uriTemplateHandler, this.errorHandler, this.basicAuthentication, this.defaultHeaders,\n\t\t\t\tthis.customizers, this.requestCustomizers);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "connection",
            "timeout",
            "on",
            "the",
            "underlying",
            "client",
            "http",
            "request",
            "factory"
        ]
    },
    {
        "id": 1388,
        "code": "\tpublic RestTemplateBuilder setReadTimeout(Duration readTimeout) {\n\t\treturn new RestTemplateBuilder(this.requestFactoryCustomizer.readTimeout(readTimeout),\n\t\t\t\tthis.detectRequestFactory, this.rootUri, this.messageConverters, this.interceptors, this.requestFactory,\n\t\t\t\tthis.uriTemplateHandler, this.errorHandler, this.basicAuthentication, this.defaultHeaders,\n\t\t\t\tthis.customizers, this.requestCustomizers);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "read",
            "timeout",
            "on",
            "the",
            "underlying",
            "client",
            "http",
            "request",
            "factory"
        ]
    },
    {
        "id": 1389,
        "code": "\tpublic RestTemplateBuilder setBufferRequestBody(boolean bufferRequestBody) {\n\t\treturn new RestTemplateBuilder(this.requestFactoryCustomizer.bufferRequestBody(bufferRequestBody),\n\t\t\t\tthis.detectRequestFactory, this.rootUri, this.messageConverters, this.interceptors, this.requestFactory,\n\t\t\t\tthis.uriTemplateHandler, this.errorHandler, this.basicAuthentication, this.defaultHeaders,\n\t\t\t\tthis.customizers, this.requestCustomizers);\n\t}",
        "summary_tokens": [
            "sets",
            "if",
            "the",
            "underlying",
            "client",
            "http",
            "request",
            "factory",
            "should",
            "buffer",
            "the",
            "client",
            "http",
            "request",
            "get",
            "body",
            "request",
            "body",
            "internally"
        ]
    },
    {
        "id": 1390,
        "code": "\tpublic RestTemplateBuilder customizers(Collection<? extends RestTemplateCustomizer> customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\treturn new RestTemplateBuilder(this.requestFactoryCustomizer, this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, this.interceptors, this.requestFactory, this.uriTemplateHandler,\n\t\t\t\tthis.errorHandler, this.basicAuthentication, this.defaultHeaders, copiedSetOf(customizers),\n\t\t\t\tthis.requestCustomizers);\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "rest",
            "template",
            "customizer",
            "rest",
            "template",
            "customizers",
            "that",
            "should",
            "be",
            "applied",
            "to",
            "the",
            "rest",
            "template"
        ]
    },
    {
        "id": 1391,
        "code": "\tpublic RestTemplateBuilder additionalCustomizers(Collection<? extends RestTemplateCustomizer> customizers) {\n\t\tAssert.notNull(customizers, \"RestTemplateCustomizers must not be null\");\n\t\treturn new RestTemplateBuilder(this.requestFactoryCustomizer, this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, this.interceptors, this.requestFactory, this.uriTemplateHandler,\n\t\t\t\tthis.errorHandler, this.basicAuthentication, this.defaultHeaders, append(this.customizers, customizers),\n\t\t\t\tthis.requestCustomizers);\n\t}",
        "summary_tokens": [
            "add",
            "rest",
            "template",
            "customizer",
            "rest",
            "template",
            "customizers",
            "that",
            "should",
            "be",
            "applied",
            "to",
            "the",
            "rest",
            "template"
        ]
    },
    {
        "id": 1392,
        "code": "\tpublic RestTemplateBuilder requestCustomizers(\n\t\t\tCollection<? extends RestTemplateRequestCustomizer<?>> requestCustomizers) {\n\t\tAssert.notNull(requestCustomizers, \"RequestCustomizers must not be null\");\n\t\treturn new RestTemplateBuilder(this.requestFactoryCustomizer, this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, this.interceptors, this.requestFactory, this.uriTemplateHandler,\n\t\t\t\tthis.errorHandler, this.basicAuthentication, this.defaultHeaders, this.customizers,\n\t\t\t\tcopiedSetOf(requestCustomizers));\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "rest",
            "template",
            "request",
            "customizer",
            "rest",
            "template",
            "request",
            "customizers",
            "that",
            "should",
            "be",
            "applied",
            "to",
            "the",
            "client",
            "http",
            "request"
        ]
    },
    {
        "id": 1393,
        "code": "\tpublic RestTemplateBuilder additionalRequestCustomizers(\n\t\t\tCollection<? extends RestTemplateRequestCustomizer<?>> requestCustomizers) {\n\t\tAssert.notNull(requestCustomizers, \"RequestCustomizers must not be null\");\n\t\treturn new RestTemplateBuilder(this.requestFactoryCustomizer, this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, this.interceptors, this.requestFactory, this.uriTemplateHandler,\n\t\t\t\tthis.errorHandler, this.basicAuthentication, this.defaultHeaders, this.customizers,\n\t\t\t\tappend(this.requestCustomizers, requestCustomizers));\n\t}",
        "summary_tokens": [
            "add",
            "the",
            "rest",
            "template",
            "request",
            "customizer",
            "rest",
            "template",
            "request",
            "customizers",
            "that",
            "should",
            "be",
            "applied",
            "to",
            "the",
            "client",
            "http",
            "request"
        ]
    },
    {
        "id": 1394,
        "code": "\tpublic <T extends RestTemplate> T build(Class<T> restTemplateClass) {\n\t\treturn configure(BeanUtils.instantiateClass(restTemplateClass));\n\t}",
        "summary_tokens": [
            "build",
            "a",
            "new",
            "rest",
            "template",
            "instance",
            "of",
            "the",
            "specified",
            "type",
            "and",
            "configure",
            "it",
            "using",
            "this",
            "builder"
        ]
    },
    {
        "id": 1395,
        "code": "\tpublic <T extends RestTemplate> T configure(T restTemplate) {\n\t\tClientHttpRequestFactory requestFactory = buildRequestFactory();\n\t\tif (requestFactory != null) {\n\t\t\trestTemplate.setRequestFactory(requestFactory);\n\t\t}\n\t\taddClientHttpRequestInitializer(restTemplate);\n\t\tif (!CollectionUtils.isEmpty(this.messageConverters)) {\n\t\t\trestTemplate.setMessageConverters(new ArrayList<>(this.messageConverters));\n\t\t}\n\t\tif (this.uriTemplateHandler != null) {\n\t\t\trestTemplate.setUriTemplateHandler(this.uriTemplateHandler);\n\t\t}\n\t\tif (this.errorHandler != null) {\n\t\t\trestTemplate.setErrorHandler(this.errorHandler);\n\t\t}\n\t\tif (this.rootUri != null) {\n\t\t\tRootUriTemplateHandler.addTo(restTemplate, this.rootUri);\n\t\t}\n\t\trestTemplate.getInterceptors().addAll(this.interceptors);\n\t\tif (!CollectionUtils.isEmpty(this.customizers)) {\n\t\t\tfor (RestTemplateCustomizer customizer : this.customizers) {\n\t\t\t\tcustomizer.customize(restTemplate);\n\t\t\t}\n\t\t}\n\t\treturn restTemplate;\n\t}",
        "summary_tokens": [
            "configure",
            "the",
            "provided",
            "rest",
            "template",
            "instance",
            "using",
            "this",
            "builder"
        ]
    },
    {
        "id": 1396,
        "code": "\tpublic ClientHttpRequestFactory buildRequestFactory() {\n\t\tClientHttpRequestFactory requestFactory = null;\n\t\tif (this.requestFactory != null) {\n\t\t\trequestFactory = this.requestFactory.get();\n\t\t}\n\t\telse if (this.detectRequestFactory) {\n\t\t\trequestFactory = new ClientHttpRequestFactorySupplier().get();\n\t\t}\n\t\tif (requestFactory != null) {\n\t\t\tif (this.requestFactoryCustomizer != null) {\n\t\t\t\tthis.requestFactoryCustomizer.accept(requestFactory);\n\t\t\t}\n\t\t}\n\t\treturn requestFactory;\n\t}",
        "summary_tokens": [
            "build",
            "a",
            "new",
            "client",
            "http",
            "request",
            "factory",
            "instance",
            "using",
            "the",
            "settings",
            "of",
            "this",
            "builder"
        ]
    },
    {
        "id": 1397,
        "code": "\tpublic RootUriTemplateHandler withHandlerWrapper(Function<UriTemplateHandler, UriTemplateHandler> wrapper) {\n\t\treturn new RootUriTemplateHandler(getRootUri(), wrapper.apply(this.handler));\n\t}",
        "summary_tokens": [
            "derives",
            "a",
            "new",
            "root",
            "uri",
            "template",
            "handler",
            "from",
            "this",
            "one",
            "wrapping",
            "its",
            "delegate",
            "uri",
            "template",
            "handler",
            "by",
            "applying",
            "the",
            "given",
            "wrapper"
        ]
    },
    {
        "id": 1398,
        "code": "\tpublic static RootUriTemplateHandler addTo(RestTemplate restTemplate, String rootUri) {\n\t\tAssert.notNull(restTemplate, \"RestTemplate must not be null\");\n\t\tRootUriTemplateHandler handler = new RootUriTemplateHandler(rootUri, restTemplate.getUriTemplateHandler());\n\t\trestTemplate.setUriTemplateHandler(handler);\n\t\treturn handler;\n\t}",
        "summary_tokens": [
            "add",
            "a",
            "root",
            "uri",
            "template",
            "handler",
            "instance",
            "to",
            "the",
            "given",
            "rest",
            "template"
        ]
    },
    {
        "id": 1399,
        "code": "\tpublic WebApplicationType getWebApplicationType() {\n\t\treturn this.webApplicationType;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "type",
            "of",
            "web",
            "application",
            "for",
            "which",
            "a",
            "web",
            "server",
            "factory",
            "bean",
            "was",
            "missing"
        ]
    },
    {
        "id": 1400,
        "code": "\tpublic WebServer getWebServer() {\n\t\treturn getSource();\n\t}",
        "summary_tokens": [
            "access",
            "the",
            "web",
            "server"
        ]
    },
    {
        "id": 1401,
        "code": "\tpublic WebServer getSource() {\n\t\treturn (WebServer) super.getSource();\n\t}",
        "summary_tokens": [
            "access",
            "the",
            "source",
            "of",
            "the",
            "event",
            "an",
            "web",
            "server"
        ]
    },
    {
        "id": 1402,
        "code": "\tpublic void setServerCustomizers(Collection<? extends JettyServerCustomizer> customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\tthis.jettyServerCustomizers = new LinkedHashSet<>(customizers);\n\t}",
        "summary_tokens": [
            "sets",
            "jetty",
            "server",
            "customizer",
            "s",
            "that",
            "will",
            "be",
            "applied",
            "to",
            "the",
            "server",
            "before",
            "it",
            "is",
            "started"
        ]
    },
    {
        "id": 1403,
        "code": "\tpublic Collection<JettyServerCustomizer> getServerCustomizers() {\n\t\treturn this.jettyServerCustomizers;\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "mutable",
            "collection",
            "of",
            "jetty",
            "jetty",
            "server",
            "customizer",
            "s",
            "that",
            "will",
            "be",
            "applied",
            "to",
            "the",
            "server",
            "before",
            "it",
            "is",
            "created"
        ]
    },
    {
        "id": 1404,
        "code": "\tpublic ThreadPool getThreadPool() {\n\t\treturn this.threadPool;\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "jetty",
            "thread",
            "pool",
            "that",
            "should",
            "be",
            "used",
            "by",
            "the",
            "server"
        ]
    },
    {
        "id": 1405,
        "code": "\tpublic void setResourceFactory(JettyResourceFactory resourceFactory) {\n\t\tthis.resourceFactory = resourceFactory;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "jetty",
            "resource",
            "factory",
            "to",
            "get",
            "the",
            "shared",
            "resources",
            "from"
        ]
    },
    {
        "id": 1406,
        "code": "\tprotected void configureSsl(SslContextFactory.Server factory, Ssl ssl, SslStoreProvider sslStoreProvider) {\n\t\tfactory.setProtocol(ssl.getProtocol());\n\t\tconfigureSslClientAuth(factory, ssl);\n\t\tconfigureSslPasswords(factory, ssl);\n\t\tfactory.setCertAlias(ssl.getKeyAlias());\n\t\tif (!ObjectUtils.isEmpty(ssl.getCiphers())) {\n\t\t\tfactory.setIncludeCipherSuites(ssl.getCiphers());\n\t\t\tfactory.setExcludeCipherSuites();\n\t\t}\n\t\tif (ssl.getEnabledProtocols() != null) {\n\t\t\tfactory.setIncludeProtocols(ssl.getEnabledProtocols());\n\t\t}\n\t\tif (sslStoreProvider != null) {\n\t\t\ttry {\n\t\t\t\tString keyPassword = sslStoreProvider.getKeyPassword();\n\t\t\t\tif (keyPassword != null) {\n\t\t\t\t\tfactory.setKeyManagerPassword(keyPassword);\n\t\t\t\t}\n\t\t\t\tfactory.setKeyStore(sslStoreProvider.getKeyStore());\n\t\t\t\tfactory.setTrustStore(sslStoreProvider.getTrustStore());\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tthrow new IllegalStateException(\"Unable to set SSL store\", ex);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tconfigureSslKeyStore(factory, ssl);\n\t\t\tconfigureSslTrustStore(factory, ssl);\n\t\t}\n\t}",
        "summary_tokens": [
            "configure",
            "the",
            "ssl",
            "connection"
        ]
    },
    {
        "id": 1407,
        "code": "\tpublic Collection<NettyServerCustomizer> getServerCustomizers() {\n\t\treturn this.serverCustomizers;\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "mutable",
            "collection",
            "of",
            "the",
            "netty",
            "server",
            "customizer",
            "s",
            "that",
            "will",
            "be",
            "applied",
            "to",
            "the",
            "netty",
            "server",
            "builder"
        ]
    },
    {
        "id": 1408,
        "code": "\tpublic void setServerCustomizers(Collection<? extends NettyServerCustomizer> serverCustomizers) {\n\t\tAssert.notNull(serverCustomizers, \"ServerCustomizers must not be null\");\n\t\tthis.serverCustomizers = new LinkedHashSet<>(serverCustomizers);\n\t}",
        "summary_tokens": [
            "set",
            "netty",
            "server",
            "customizer",
            "s",
            "that",
            "should",
            "be",
            "applied",
            "to",
            "the",
            "netty",
            "server",
            "builder"
        ]
    },
    {
        "id": 1409,
        "code": "\tpublic void addServerCustomizers(NettyServerCustomizer... serverCustomizers) {\n\t\tAssert.notNull(serverCustomizers, \"ServerCustomizer must not be null\");\n\t\tthis.serverCustomizers.addAll(Arrays.asList(serverCustomizers));\n\t}",
        "summary_tokens": [
            "add",
            "netty",
            "server",
            "customizer",
            "s",
            "that",
            "should",
            "be",
            "applied",
            "while",
            "building",
            "the",
            "server"
        ]
    },
    {
        "id": 1410,
        "code": "\tpublic void addRouteProviders(NettyRouteProvider... routeProviders) {\n\t\tAssert.notNull(routeProviders, \"NettyRouteProvider must not be null\");\n\t\tthis.routeProviders.addAll(Arrays.asList(routeProviders));\n\t}",
        "summary_tokens": [
            "add",
            "netty",
            "route",
            "provider",
            "s",
            "that",
            "should",
            "be",
            "applied",
            "in",
            "order",
            "before",
            "the",
            "handler",
            "for",
            "the",
            "spring",
            "application"
        ]
    },
    {
        "id": 1411,
        "code": "\tpublic void setLifecycleTimeout(Duration lifecycleTimeout) {\n\t\tthis.lifecycleTimeout = lifecycleTimeout;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "maximum",
            "amount",
            "of",
            "time",
            "that",
            "should",
            "be",
            "waited",
            "when",
            "starting",
            "or",
            "stopping",
            "the",
            "server"
        ]
    },
    {
        "id": 1412,
        "code": "\tpublic void setUseForwardHeaders(boolean useForwardHeaders) {\n\t\tthis.useForwardHeaders = useForwardHeaders;\n\t}",
        "summary_tokens": [
            "set",
            "if",
            "x",
            "forward",
            "headers",
            "should",
            "be",
            "processed"
        ]
    },
    {
        "id": 1413,
        "code": "\tpublic void setResourceFactory(ReactorResourceFactory resourceFactory) {\n\t\tthis.resourceFactory = resourceFactory;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "reactor",
            "resource",
            "factory",
            "to",
            "get",
            "the",
            "shared",
            "resources",
            "from"
        ]
    },
    {
        "id": 1414,
        "code": "\tprotected void configureSsl(AbstractHttp11JsseProtocol<?> protocol, Ssl ssl, SslStoreProvider sslStoreProvider) {\n\t\tprotocol.setSSLEnabled(true);\n\t\tSSLHostConfig sslHostConfig = new SSLHostConfig();\n\t\tsslHostConfig.setHostName(protocol.getDefaultSSLHostConfigName());\n\t\tsslHostConfig.setSslProtocol(ssl.getProtocol());\n\t\tprotocol.addSslHostConfig(sslHostConfig);\n\t\tconfigureSslClientAuth(sslHostConfig, ssl);\n\t\tSSLHostConfigCertificate certificate = new SSLHostConfigCertificate(sslHostConfig, Type.UNDEFINED);\n\t\tif (ssl.getKeyStorePassword() != null) {\n\t\t\tcertificate.setCertificateKeystorePassword(ssl.getKeyStorePassword());\n\t\t}\n\t\tif (ssl.getKeyPassword() != null) {\n\t\t\tcertificate.setCertificateKeyPassword(ssl.getKeyPassword());\n\t\t}\n\t\tif (ssl.getKeyAlias() != null) {\n\t\t\tcertificate.setCertificateKeyAlias(ssl.getKeyAlias());\n\t\t}\n\t\tsslHostConfig.addCertificate(certificate);\n\t\tString ciphers = StringUtils.arrayToCommaDelimitedString(ssl.getCiphers());\n\t\tif (StringUtils.hasText(ciphers)) {\n\t\t\tsslHostConfig.setCiphers(ciphers);\n\t\t}\n\t\tconfigureEnabledProtocols(protocol, ssl);\n\t\tif (sslStoreProvider != null) {\n\t\t\tconfigureSslStoreProvider(protocol, sslHostConfig, certificate, sslStoreProvider);\n\t\t\tString keyPassword = sslStoreProvider.getKeyPassword();\n\t\t\tif (keyPassword != null) {\n\t\t\t\tcertificate.setCertificateKeyPassword(keyPassword);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tconfigureSslKeyStore(certificate, ssl);\n\t\t\tconfigureSslTrustStore(sslHostConfig, ssl);\n\t\t}\n\t}",
        "summary_tokens": [
            "configure",
            "tomcat",
            "s",
            "abstract",
            "http",
            "0",
            "jsse",
            "protocol",
            "for",
            "ssl"
        ]
    },
    {
        "id": 1415,
        "code": "\tprotected void configureContext(Context context) {\n\t\tthis.contextLifecycleListeners.forEach(context::addLifecycleListener);\n\t\tnew DisableReferenceClearingContextCustomizer().customize(context);\n\t\tthis.tomcatContextCustomizers.forEach((customizer) -> customizer.customize(context));\n\t}",
        "summary_tokens": [
            "configure",
            "the",
            "tomcat",
            "context"
        ]
    },
    {
        "id": 1416,
        "code": "\tpublic void setTomcatContextCustomizers(Collection<? extends TomcatContextCustomizer> tomcatContextCustomizers) {\n\t\tAssert.notNull(tomcatContextCustomizers, \"TomcatContextCustomizers must not be null\");\n\t\tthis.tomcatContextCustomizers = new LinkedHashSet<>(tomcatContextCustomizers);\n\t}",
        "summary_tokens": [
            "set",
            "tomcat",
            "context",
            "customizer",
            "s",
            "that",
            "should",
            "be",
            "applied",
            "to",
            "the",
            "tomcat",
            "context"
        ]
    },
    {
        "id": 1417,
        "code": "\tpublic Collection<TomcatContextCustomizer> getTomcatContextCustomizers() {\n\t\treturn this.tomcatContextCustomizers;\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "mutable",
            "collection",
            "of",
            "the",
            "tomcat",
            "context",
            "customizer",
            "s",
            "that",
            "will",
            "be",
            "applied",
            "to",
            "the",
            "tomcat",
            "context"
        ]
    },
    {
        "id": 1418,
        "code": "\tpublic void addContextCustomizers(TomcatContextCustomizer... tomcatContextCustomizers) {\n\t\tAssert.notNull(tomcatContextCustomizers, \"TomcatContextCustomizers must not be null\");\n\t\tthis.tomcatContextCustomizers.addAll(Arrays.asList(tomcatContextCustomizers));\n\t}",
        "summary_tokens": [
            "add",
            "tomcat",
            "context",
            "customizer",
            "s",
            "that",
            "should",
            "be",
            "added",
            "to",
            "the",
            "tomcat",
            "context"
        ]
    },
    {
        "id": 1419,
        "code": "\tpublic void setTomcatConnectorCustomizers(\n\t\t\tCollection<? extends TomcatConnectorCustomizer> tomcatConnectorCustomizers) {\n\t\tAssert.notNull(tomcatConnectorCustomizers, \"TomcatConnectorCustomizers must not be null\");\n\t\tthis.tomcatConnectorCustomizers = new LinkedHashSet<>(tomcatConnectorCustomizers);\n\t}",
        "summary_tokens": [
            "set",
            "tomcat",
            "connector",
            "customizer",
            "s",
            "that",
            "should",
            "be",
            "applied",
            "to",
            "the",
            "tomcat",
            "connector"
        ]
    },
    {
        "id": 1420,
        "code": "\tpublic void addConnectorCustomizers(TomcatConnectorCustomizer... tomcatConnectorCustomizers) {\n\t\tAssert.notNull(tomcatConnectorCustomizers, \"TomcatConnectorCustomizers must not be null\");\n\t\tthis.tomcatConnectorCustomizers.addAll(Arrays.asList(tomcatConnectorCustomizers));\n\t}",
        "summary_tokens": [
            "add",
            "tomcat",
            "connector",
            "customizer",
            "s",
            "that",
            "should",
            "be",
            "added",
            "to",
            "the",
            "tomcat",
            "connector"
        ]
    },
    {
        "id": 1421,
        "code": "\tpublic Collection<TomcatConnectorCustomizer> getTomcatConnectorCustomizers() {\n\t\treturn this.tomcatConnectorCustomizers;\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "mutable",
            "collection",
            "of",
            "the",
            "tomcat",
            "connector",
            "customizer",
            "s",
            "that",
            "will",
            "be",
            "applied",
            "to",
            "the",
            "tomcat",
            "connector"
        ]
    },
    {
        "id": 1422,
        "code": "\tpublic void setTomcatProtocolHandlerCustomizers(\n\t\t\tCollection<? extends TomcatProtocolHandlerCustomizer<?>> tomcatProtocolHandlerCustomizers) {\n\t\tAssert.notNull(tomcatProtocolHandlerCustomizers, \"TomcatProtocolHandlerCustomizers must not be null\");\n\t\tthis.tomcatProtocolHandlerCustomizers = new LinkedHashSet<>(tomcatProtocolHandlerCustomizers);\n\t}",
        "summary_tokens": [
            "set",
            "tomcat",
            "protocol",
            "handler",
            "customizer",
            "s",
            "that",
            "should",
            "be",
            "applied",
            "to",
            "the",
            "tomcat",
            "connector"
        ]
    },
    {
        "id": 1423,
        "code": "\tpublic void addProtocolHandlerCustomizers(TomcatProtocolHandlerCustomizer<?>... tomcatProtocolHandlerCustomizers) {\n\t\tAssert.notNull(tomcatProtocolHandlerCustomizers, \"TomcatProtocolHandlerCustomizers must not be null\");\n\t\tthis.tomcatProtocolHandlerCustomizers.addAll(Arrays.asList(tomcatProtocolHandlerCustomizers));\n\t}",
        "summary_tokens": [
            "add",
            "tomcat",
            "protocol",
            "handler",
            "customizer",
            "s",
            "that",
            "should",
            "be",
            "added",
            "to",
            "the",
            "tomcat",
            "connector"
        ]
    },
    {
        "id": 1424,
        "code": "\tpublic Collection<TomcatProtocolHandlerCustomizer<?>> getTomcatProtocolHandlerCustomizers() {\n\t\treturn this.tomcatProtocolHandlerCustomizers;\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "mutable",
            "collection",
            "of",
            "the",
            "tomcat",
            "protocol",
            "handler",
            "customizer",
            "s",
            "that",
            "will",
            "be",
            "applied",
            "to",
            "the",
            "tomcat",
            "connector"
        ]
    },
    {
        "id": 1425,
        "code": "\tpublic void addAdditionalTomcatConnectors(Connector... connectors) {\n\t\tAssert.notNull(connectors, \"Connectors must not be null\");\n\t\tthis.additionalTomcatConnectors.addAll(Arrays.asList(connectors));\n\t}",
        "summary_tokens": [
            "add",
            "connector",
            "s",
            "in",
            "addition",
            "to",
            "the",
            "default",
            "connector",
            "e"
        ]
    },
    {
        "id": 1426,
        "code": "\tpublic List<Connector> getAdditionalTomcatConnectors() {\n\t\treturn this.additionalTomcatConnectors;\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "mutable",
            "collection",
            "of",
            "the",
            "connector",
            "s",
            "that",
            "will",
            "be",
            "added",
            "to",
            "the",
            "tomcat"
        ]
    },
    {
        "id": 1427,
        "code": "\tpublic List<Valve> getEngineValves() {\n\t\treturn this.engineValves;\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "mutable",
            "collection",
            "of",
            "the",
            "valve",
            "s",
            "that",
            "will",
            "be",
            "applied",
            "to",
            "the",
            "tomcat",
            "engine"
        ]
    },
    {
        "id": 1428,
        "code": "\tpublic void setUriEncoding(Charset uriEncoding) {\n\t\tthis.uriEncoding = uriEncoding;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "character",
            "encoding",
            "to",
            "use",
            "for",
            "url",
            "decoding"
        ]
    },
    {
        "id": 1429,
        "code": "\tpublic Charset getUriEncoding() {\n\t\treturn this.uriEncoding;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "character",
            "encoding",
            "to",
            "use",
            "for",
            "url",
            "decoding"
        ]
    },
    {
        "id": 1430,
        "code": "\tpublic void setContextLifecycleListeners(Collection<? extends LifecycleListener> contextLifecycleListeners) {\n\t\tAssert.notNull(contextLifecycleListeners, \"ContextLifecycleListeners must not be null\");\n\t\tthis.contextLifecycleListeners = new ArrayList<>(contextLifecycleListeners);\n\t}",
        "summary_tokens": [
            "set",
            "lifecycle",
            "listener",
            "s",
            "that",
            "should",
            "be",
            "applied",
            "to",
            "the",
            "tomcat",
            "context"
        ]
    },
    {
        "id": 1431,
        "code": "\tpublic Collection<LifecycleListener> getContextLifecycleListeners() {\n\t\treturn this.contextLifecycleListeners;\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "mutable",
            "collection",
            "of",
            "the",
            "lifecycle",
            "listener",
            "s",
            "that",
            "will",
            "be",
            "applied",
            "to",
            "the",
            "tomcat",
            "context"
        ]
    },
    {
        "id": 1432,
        "code": "\tpublic void addContextLifecycleListeners(LifecycleListener... contextLifecycleListeners) {\n\t\tAssert.notNull(contextLifecycleListeners, \"ContextLifecycleListeners must not be null\");\n\t\tthis.contextLifecycleListeners.addAll(Arrays.asList(contextLifecycleListeners));\n\t}",
        "summary_tokens": [
            "add",
            "lifecycle",
            "listener",
            "s",
            "that",
            "should",
            "be",
            "added",
            "to",
            "the",
            "tomcat",
            "context"
        ]
    },
    {
        "id": 1433,
        "code": "\tprotected TomcatWebServer getTomcatWebServer(Tomcat tomcat) {\n\t\treturn new TomcatWebServer(tomcat, getPort() >= 0, getShutdown());\n\t}",
        "summary_tokens": [
            "factory",
            "method",
            "called",
            "to",
            "create",
            "the",
            "tomcat",
            "web",
            "server"
        ]
    },
    {
        "id": 1434,
        "code": "\tpublic void setProtocol(String protocol) {\n\t\tAssert.hasLength(protocol, \"Protocol must not be empty\");\n\t\tthis.protocol = protocol;\n\t}",
        "summary_tokens": [
            "the",
            "tomcat",
            "protocol",
            "to",
            "use",
            "when",
            "create",
            "the",
            "connector"
        ]
    },
    {
        "id": 1435,
        "code": "\tpublic void setDisableMBeanRegistry(boolean disableMBeanRegistry) {\n\t\tthis.disableMBeanRegistry = disableMBeanRegistry;\n\t}",
        "summary_tokens": [
            "set",
            "whether",
            "the",
            "factory",
            "should",
            "disable",
            "tomcat",
            "s",
            "mbean",
            "registry",
            "prior",
            "to",
            "creating",
            "the",
            "server"
        ]
    },
    {
        "id": 1436,
        "code": "\tpublic Collection<UndertowBuilderCustomizer> getBuilderCustomizers() {\n\t\treturn this.delegate.getBuilderCustomizers();\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "mutable",
            "collection",
            "of",
            "the",
            "undertow",
            "builder",
            "customizer",
            "s",
            "that",
            "will",
            "be",
            "applied",
            "to",
            "the",
            "undertow",
            "io"
        ]
    },
    {
        "id": 1437,
        "code": "\tpublic boolean isIncluded(Include include) {\n\t\treturn this.includes.contains(include);\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "option",
            "for",
            "including",
            "the",
            "specified",
            "attribute",
            "in",
            "the",
            "error",
            "response"
        ]
    },
    {
        "id": 1438,
        "code": "\tpublic Set<Include> getIncludes() {\n\t\treturn this.includes;\n\t}",
        "summary_tokens": [
            "get",
            "all",
            "options",
            "for",
            "including",
            "attributes",
            "in",
            "the",
            "error",
            "response"
        ]
    },
    {
        "id": 1439,
        "code": "\tpublic ErrorAttributeOptions including(Include... includes) {\n\t\tEnumSet<Include> updated = copyIncludes();\n\t\tupdated.addAll(Arrays.asList(includes));\n\t\treturn new ErrorAttributeOptions(Collections.unmodifiableSet(updated));\n\t}",
        "summary_tokens": [
            "return",
            "an",
            "error",
            "attribute",
            "options",
            "that",
            "includes",
            "the",
            "specified",
            "attribute",
            "include",
            "options"
        ]
    },
    {
        "id": 1440,
        "code": "\tpublic ErrorAttributeOptions excluding(Include... excludes) {\n\t\tEnumSet<Include> updated = copyIncludes();\n\t\tupdated.removeAll(Arrays.asList(excludes));\n\t\treturn new ErrorAttributeOptions(Collections.unmodifiableSet(updated));\n\t}",
        "summary_tokens": [
            "return",
            "an",
            "error",
            "attribute",
            "options",
            "that",
            "excludes",
            "the",
            "specified",
            "attribute",
            "include",
            "options"
        ]
    },
    {
        "id": 1441,
        "code": "\tpublic static ErrorAttributeOptions defaults() {\n\t\treturn of();\n\t}",
        "summary_tokens": [
            "create",
            "an",
            "error",
            "attribute",
            "options",
            "with",
            "defaults"
        ]
    },
    {
        "id": 1442,
        "code": "\tpublic static ErrorAttributeOptions of(Collection<Include> includes) {\n\t\treturn new ErrorAttributeOptions(\n\t\t\t\t(includes.isEmpty()) ? Collections.emptySet() : Collections.unmodifiableSet(EnumSet.copyOf(includes)));\n\t}",
        "summary_tokens": [
            "create",
            "an",
            "error",
            "attribute",
            "options",
            "that",
            "includes",
            "the",
            "specified",
            "attribute",
            "include",
            "options"
        ]
    },
    {
        "id": 1443,
        "code": "\tpublic void setEnvironment(ConfigurableEnvironment environment) {\n\t\tsuper.setEnvironment(environment);\n\t\tthis.reader.setEnvironment(environment);\n\t\tthis.scanner.setEnvironment(environment);\n\t}",
        "summary_tokens": [
            "p",
            "delegates",
            "given",
            "environment",
            "to",
            "underlying",
            "annotated",
            "bean",
            "definition",
            "reader",
            "and",
            "class",
            "path",
            "bean",
            "definition",
            "scanner",
            "members"
        ]
    },
    {
        "id": 1444,
        "code": "\tpublic void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {\n\t\tthis.reader.setBeanNameGenerator(beanNameGenerator);\n\t\tthis.scanner.setBeanNameGenerator(beanNameGenerator);\n\t\tgetBeanFactory().registerSingleton(AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR, beanNameGenerator);\n\t}",
        "summary_tokens": [
            "provide",
            "a",
            "custom",
            "bean",
            "name",
            "generator",
            "for",
            "use",
            "with",
            "annotated",
            "bean",
            "definition",
            "reader",
            "and",
            "or",
            "class",
            "path",
            "bean",
            "definition",
            "scanner",
            "if",
            "any"
        ]
    },
    {
        "id": 1445,
        "code": "\tpublic void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver) {\n\t\tthis.reader.setScopeMetadataResolver(scopeMetadataResolver);\n\t\tthis.scanner.setScopeMetadataResolver(scopeMetadataResolver);\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "scope",
            "metadata",
            "resolver",
            "to",
            "use",
            "for",
            "detected",
            "bean",
            "classes"
        ]
    },
    {
        "id": 1446,
        "code": "\tpublic final void register(Class<?>... annotatedClasses) {\n\t\tAssert.notEmpty(annotatedClasses, \"At least one annotated class must be specified\");\n\t\tthis.annotatedClasses.addAll(Arrays.asList(annotatedClasses));\n\t}",
        "summary_tokens": [
            "register",
            "one",
            "or",
            "more",
            "annotated",
            "classes",
            "to",
            "be",
            "processed"
        ]
    },
    {
        "id": 1447,
        "code": "\tpublic final void scan(String... basePackages) {\n\t\tAssert.notEmpty(basePackages, \"At least one base package must be specified\");\n\t\tthis.basePackages = basePackages;\n\t}",
        "summary_tokens": [
            "perform",
            "a",
            "scan",
            "within",
            "the",
            "specified",
            "base",
            "packages"
        ]
    },
    {
        "id": 1448,
        "code": "\tprotected HttpHandler getHttpHandler() {\n\t\t\n\t\tString[] beanNames = getBeanFactory().getBeanNamesForType(HttpHandler.class);\n\t\tif (beanNames.length == 0) {\n\t\t\tthrow new ApplicationContextException(\n\t\t\t\t\t\"Unable to start ReactiveWebApplicationContext due to missing HttpHandler bean.\");\n\t\t}\n\t\tif (beanNames.length > 1) {\n\t\t\tthrow new ApplicationContextException(\n\t\t\t\t\t\"Unable to start ReactiveWebApplicationContext due to multiple HttpHandler beans : \"\n\t\t\t\t\t\t\t+ StringUtils.arrayToCommaDelimitedString(beanNames));\n\t\t}\n\t\treturn getBeanFactory().getBean(beanNames[0], HttpHandler.class);\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "http",
            "handler",
            "that",
            "should",
            "be",
            "used",
            "to",
            "process",
            "the",
            "reactive",
            "web",
            "server"
        ]
    },
    {
        "id": 1449,
        "code": "\tpublic WebServer getWebServer() {\n\t\tWebServerManager serverManager = this.serverManager;\n\t\treturn (serverManager != null) ? serverManager.getWebServer() : null;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "web",
            "server",
            "that",
            "was",
            "created",
            "by",
            "the",
            "context",
            "or",
            "null",
            "if",
            "the",
            "server",
            "has",
            "not",
            "yet",
            "been",
            "created"
        ]
    },
    {
        "id": 1450,
        "code": "\tdefault Map<String, Object> getErrorAttributes(ServerRequest request, ErrorAttributeOptions options) {\n\t\treturn Collections.emptyMap();\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "map",
            "of",
            "the",
            "error",
            "attributes"
        ]
    },
    {
        "id": 1451,
        "code": "\tpublic void setOrder(int order) {\n\t\tthis.order = order;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "order",
            "for",
            "this",
            "filter"
        ]
    },
    {
        "id": 1452,
        "code": "\tpublic void setCompiler(Compiler compiler) {\n\t\tthis.compiler = compiler;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "jmustache",
            "compiler",
            "to",
            "be",
            "used",
            "by",
            "this",
            "view"
        ]
    },
    {
        "id": 1453,
        "code": "\tpublic void setCharset(String charset) {\n\t\tthis.charset = charset;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "charset",
            "used",
            "for",
            "reading",
            "mustache",
            "template",
            "files"
        ]
    },
    {
        "id": 1454,
        "code": "\tpublic int getPort() {\n\t\treturn this.port;\n\t}",
        "summary_tokens": [
            "the",
            "port",
            "that",
            "the",
            "web",
            "server",
            "listens",
            "on"
        ]
    },
    {
        "id": 1455,
        "code": "\tpublic InetAddress getAddress() {\n\t\treturn this.address;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "address",
            "that",
            "the",
            "web",
            "server",
            "binds",
            "to"
        ]
    },
    {
        "id": 1456,
        "code": "\tpublic Set<ErrorPage> getErrorPages() {\n\t\treturn this.errorPages;\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "mutable",
            "set",
            "of",
            "error",
            "page",
            "error",
            "pages",
            "that",
            "will",
            "be",
            "used",
            "when",
            "handling",
            "exceptions"
        ]
    },
    {
        "id": 1457,
        "code": "\tpublic Shutdown getShutdown() {\n\t\treturn this.shutdown;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "shutdown",
            "configuration",
            "that",
            "will",
            "be",
            "applied",
            "to",
            "the",
            "server"
        ]
    },
    {
        "id": 1458,
        "code": "\tpublic final SslStoreProvider getOrCreateSslStoreProvider() {\n\t\tif (this.sslStoreProvider != null) {\n\t\t\treturn this.sslStoreProvider;\n\t\t}\n\t\treturn CertificateFileSslStoreProvider.from(this.ssl);\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "provided",
            "ssl",
            "store",
            "provider",
            "or",
            "create",
            "one",
            "using",
            "ssl",
            "properties"
        ]
    },
    {
        "id": 1459,
        "code": "\tprotected final File createTempDir(String prefix) {\n\t\ttry {\n\t\t\tFile tempDir = Files.createTempDirectory(prefix + \".\" + getPort() + \".\").toFile();\n\t\t\ttempDir.deleteOnExit();\n\t\t\treturn tempDir;\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tthrow new WebServerException(\n\t\t\t\t\t\"Unable to create tempDir. java.io.tmpdir is set to \" + System.getProperty(\"java.io.tmpdir\"), ex);\n\t\t}\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "absolute",
            "temp",
            "dir",
            "for",
            "given",
            "web",
            "server"
        ]
    },
    {
        "id": 1460,
        "code": "\tprivate KeyStore createKeyStore(String certPath, String keyPath, String storeType, String keyAlias) {\n\t\ttry {\n\t\t\tKeyStore keyStore = KeyStore.getInstance((storeType != null) ? storeType : KeyStore.getDefaultType());\n\t\t\tkeyStore.load(null);\n\t\t\tX509Certificate[] certificates = CertificateParser.parse(certPath);\n\t\t\tPrivateKey privateKey = (keyPath != null) ? PrivateKeyParser.parse(keyPath) : null;\n\t\t\ttry {\n\t\t\t\taddCertificates(keyStore, certificates, privateKey, keyAlias);\n\t\t\t}\n\t\t\tcatch (KeyStoreException ex) {\n\t\t\t\tthrow new IllegalStateException(\"Error adding certificates to KeyStore: \" + ex.getMessage(), ex);\n\t\t\t}\n\t\t\treturn keyStore;\n\t\t}\n\t\tcatch (GeneralSecurityException | IOException ex) {\n\t\t\tthrow new IllegalStateException(\"Error creating KeyStore: \" + ex.getMessage(), ex);\n\t\t}\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "new",
            "key",
            "store",
            "populated",
            "with",
            "the",
            "certificate",
            "stored",
            "at",
            "the",
            "specified",
            "file",
            "path",
            "and",
            "an",
            "optional",
            "private",
            "key"
        ]
    },
    {
        "id": 1461,
        "code": "\tpublic static SslStoreProvider from(Ssl ssl) {\n\t\tif (ssl != null && ssl.isEnabled()) {\n\t\t\tif (ssl.getCertificate() != null && ssl.getCertificatePrivateKey() != null) {\n\t\t\t\treturn new CertificateFileSslStoreProvider(ssl);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "create",
            "an",
            "ssl",
            "store",
            "provider",
            "if",
            "the",
            "appropriate",
            "ssl",
            "properties",
            "are",
            "configured"
        ]
    },
    {
        "id": 1462,
        "code": "\tstatic X509Certificate[] parse(String path) {\n\t\tCertificateFactory factory = getCertificateFactory();\n\t\tList<X509Certificate> certificates = new ArrayList<>();\n\t\treadCertificates(path, factory, certificates::add);\n\t\treturn certificates.toArray(new X509Certificate[0]);\n\t}",
        "summary_tokens": [
            "load",
            "certificates",
            "from",
            "the",
            "specified",
            "resource"
        ]
    },
    {
        "id": 1463,
        "code": "\tpublic boolean getEnabled() {\n\t\treturn this.enabled;\n\t}",
        "summary_tokens": [
            "return",
            "whether",
            "response",
            "compression",
            "is",
            "enabled"
        ]
    },
    {
        "id": 1464,
        "code": "\tpublic String[] getMimeTypes() {\n\t\treturn this.mimeTypes;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "mime",
            "types",
            "that",
            "should",
            "be",
            "compressed"
        ]
    },
    {
        "id": 1465,
        "code": "\tpublic DataSize getMinResponseSize() {\n\t\treturn this.minResponseSize;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "minimum",
            "content",
            "length",
            "value",
            "that",
            "is",
            "required",
            "for",
            "compression",
            "to",
            "be",
            "performed"
        ]
    },
    {
        "id": 1466,
        "code": "\tdefault void setShutdown(Shutdown shutdown) {\n\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "shutdown",
            "configuration",
            "that",
            "will",
            "be",
            "applied",
            "to",
            "the",
            "server"
        ]
    },
    {
        "id": 1467,
        "code": "\tpublic boolean isEnabled() {\n\t\treturn this.enabled;\n\t}",
        "summary_tokens": [
            "return",
            "whether",
            "to",
            "enable",
            "http",
            "0",
            "support",
            "if",
            "the",
            "current",
            "environment",
            "supports",
            "it"
        ]
    },
    {
        "id": 1468,
        "code": "\tpublic int getPort() {\n\t\treturn this.port;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "port",
            "that",
            "was",
            "in",
            "use"
        ]
    },
    {
        "id": 1469,
        "code": "\tpublic static void throwIfPortBindingException(Exception ex, IntSupplier port) {\n\t\tifPortBindingException(ex, (bindException) -> {\n\t\t\tthrow new PortInUseException(port.getAsInt(), ex);\n\t\t});\n\t}",
        "summary_tokens": [
            "throw",
            "a",
            "port",
            "in",
            "use",
            "exception",
            "if",
            "the",
            "given",
            "exception",
            "was",
            "caused",
            "by",
            "a",
            "port",
            "in",
            "use",
            "bind",
            "exception"
        ]
    },
    {
        "id": 1470,
        "code": "\tpublic static void ifPortBindingException(Exception ex, Consumer<BindException> action) {\n\t\tifCausedBy(ex, BindException.class, (bindException) -> {\n\t\t\t\n\t\t\tif (bindException.getMessage().toLowerCase().contains(\"in use\")) {\n\t\t\t\taction.accept(bindException);\n\t\t\t}\n\t\t});\n\t}",
        "summary_tokens": [
            "perform",
            "an",
            "action",
            "if",
            "the",
            "given",
            "exception",
            "was",
            "caused",
            "by",
            "a",
            "port",
            "in",
            "use",
            "bind",
            "exception"
        ]
    },
    {
        "id": 1471,
        "code": "\tpublic static <E extends Exception> void ifCausedBy(Exception ex, Class<E> causedBy, Consumer<E> action) {\n\t\tThrowable candidate = ex;\n\t\twhile (candidate != null) {\n\t\t\tif (causedBy.isInstance(candidate)) {\n\t\t\t\taction.accept((E) candidate);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcandidate = candidate.getCause();\n\t\t}\n\t}",
        "summary_tokens": [
            "perform",
            "an",
            "action",
            "if",
            "the",
            "given",
            "exception",
            "was",
            "caused",
            "by",
            "a",
            "specific",
            "exception",
            "type"
        ]
    },
    {
        "id": 1472,
        "code": "\tstatic PrivateKey parse(String resource) {\n\t\ttry {\n\t\t\tString text = readText(resource);\n\t\t\tMatcher matcher = PKCS1_PATTERN.matcher(text);\n\t\t\tif (matcher.find()) {\n\t\t\t\treturn parsePkcs1(decodeBase64(matcher.group(1)));\n\t\t\t}\n\t\t\tmatcher = PKCS8_KEY_PATTERN.matcher(text);\n\t\t\tif (matcher.find()) {\n\t\t\t\treturn parsePkcs8(decodeBase64(matcher.group(1)));\n\t\t\t}\n\t\t\tthrow new IllegalStateException(\"Unrecognized private key format in \" + resource);\n\t\t}\n\t\tcatch (GeneralSecurityException | IOException ex) {\n\t\t\tthrow new IllegalStateException(\"Error loading private key file \" + resource, ex);\n\t\t}\n\t}",
        "summary_tokens": [
            "load",
            "a",
            "private",
            "key",
            "from",
            "the",
            "specified",
            "resource"
        ]
    },
    {
        "id": 1473,
        "code": "\tpublic boolean isEnabled() {\n\t\treturn this.enabled;\n\t}",
        "summary_tokens": [
            "return",
            "whether",
            "to",
            "enable",
            "ssl",
            "support"
        ]
    },
    {
        "id": 1474,
        "code": "\tpublic ClientAuth getClientAuth() {\n\t\treturn this.clientAuth;\n\t}",
        "summary_tokens": [
            "return",
            "whether",
            "client",
            "authentication",
            "is",
            "not",
            "wanted",
            "none",
            "wanted",
            "want",
            "or",
            "needed",
            "need"
        ]
    },
    {
        "id": 1475,
        "code": "\tpublic String[] getCiphers() {\n\t\treturn this.ciphers;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "supported",
            "ssl",
            "ciphers"
        ]
    },
    {
        "id": 1476,
        "code": "\tpublic String[] getEnabledProtocols() {\n\t\treturn this.enabledProtocols;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "enabled",
            "ssl",
            "protocols"
        ]
    },
    {
        "id": 1477,
        "code": "\tpublic String getKeyAlias() {\n\t\treturn this.keyAlias;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "alias",
            "that",
            "identifies",
            "the",
            "key",
            "in",
            "the",
            "key",
            "store"
        ]
    },
    {
        "id": 1478,
        "code": "\tpublic String getKeyPassword() {\n\t\treturn this.keyPassword;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "password",
            "used",
            "to",
            "access",
            "the",
            "key",
            "in",
            "the",
            "key",
            "store"
        ]
    },
    {
        "id": 1479,
        "code": "\tpublic String getKeyStore() {\n\t\treturn this.keyStore;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "path",
            "to",
            "the",
            "key",
            "store",
            "that",
            "holds",
            "the",
            "ssl",
            "certificate",
            "typically",
            "a",
            "jks",
            "file"
        ]
    },
    {
        "id": 1480,
        "code": "\tpublic String getKeyStorePassword() {\n\t\treturn this.keyStorePassword;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "password",
            "used",
            "to",
            "access",
            "the",
            "key",
            "store"
        ]
    },
    {
        "id": 1481,
        "code": "\tpublic String getKeyStoreType() {\n\t\treturn this.keyStoreType;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "type",
            "of",
            "the",
            "key",
            "store"
        ]
    },
    {
        "id": 1482,
        "code": "\tpublic String getKeyStoreProvider() {\n\t\treturn this.keyStoreProvider;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "provider",
            "for",
            "the",
            "key",
            "store"
        ]
    },
    {
        "id": 1483,
        "code": "\tpublic String getTrustStore() {\n\t\treturn this.trustStore;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "trust",
            "store",
            "that",
            "holds",
            "ssl",
            "certificates"
        ]
    },
    {
        "id": 1484,
        "code": "\tpublic String getTrustStorePassword() {\n\t\treturn this.trustStorePassword;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "password",
            "used",
            "to",
            "access",
            "the",
            "trust",
            "store"
        ]
    },
    {
        "id": 1485,
        "code": "\tpublic String getTrustStoreType() {\n\t\treturn this.trustStoreType;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "type",
            "of",
            "the",
            "trust",
            "store"
        ]
    },
    {
        "id": 1486,
        "code": "\tpublic String getTrustStoreProvider() {\n\t\treturn this.trustStoreProvider;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "provider",
            "for",
            "the",
            "trust",
            "store"
        ]
    },
    {
        "id": 1487,
        "code": "\tpublic String getCertificate() {\n\t\treturn this.certificate;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "location",
            "of",
            "the",
            "certificate",
            "in",
            "pem",
            "format"
        ]
    },
    {
        "id": 1488,
        "code": "\tpublic String getCertificatePrivateKey() {\n\t\treturn this.certificatePrivateKey;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "location",
            "of",
            "the",
            "private",
            "key",
            "for",
            "the",
            "certificate",
            "in",
            "pem",
            "format"
        ]
    },
    {
        "id": 1489,
        "code": "\tpublic String getTrustCertificate() {\n\t\treturn this.trustCertificate;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "location",
            "of",
            "the",
            "trust",
            "certificate",
            "authority",
            "chain",
            "in",
            "pem",
            "format"
        ]
    },
    {
        "id": 1490,
        "code": "\tpublic String getTrustCertificatePrivateKey() {\n\t\treturn this.trustCertificatePrivateKey;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "location",
            "of",
            "the",
            "private",
            "key",
            "for",
            "the",
            "trust",
            "certificate",
            "in",
            "pem",
            "format"
        ]
    },
    {
        "id": 1491,
        "code": "\tpublic String getProtocol() {\n\t\treturn this.protocol;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "ssl",
            "protocol",
            "to",
            "use"
        ]
    },
    {
        "id": 1492,
        "code": "\tdefault String getKeyPassword() {\n\t\treturn null;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "password",
            "of",
            "the",
            "private",
            "key",
            "in",
            "the",
            "key",
            "store"
        ]
    },
    {
        "id": 1493,
        "code": "\tdefault void shutDownGracefully(GracefulShutdownCallback callback) {\n\t\tcallback.shutdownComplete(GracefulShutdownResult.IMMEDIATE);\n\t}",
        "summary_tokens": [
            "initiates",
            "a",
            "graceful",
            "shutdown",
            "of",
            "the",
            "web",
            "server"
        ]
    },
    {
        "id": 1494,
        "code": "\tpublic void setServletRegistrationBeans(Collection<? extends ServletRegistrationBean<?>> servletRegistrationBeans) {\n\t\tAssert.notNull(servletRegistrationBeans, \"ServletRegistrationBeans must not be null\");\n\t\tthis.servletRegistrationBeans = new LinkedHashSet<>(servletRegistrationBeans);\n\t}",
        "summary_tokens": [
            "set",
            "servlet",
            "registration",
            "bean",
            "s",
            "that",
            "the",
            "filter",
            "will",
            "be",
            "registered",
            "against"
        ]
    },
    {
        "id": 1495,
        "code": "\tpublic Collection<ServletRegistrationBean<?>> getServletRegistrationBeans() {\n\t\treturn this.servletRegistrationBeans;\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "mutable",
            "collection",
            "of",
            "the",
            "servlet",
            "registration",
            "bean",
            "that",
            "the",
            "filter",
            "will",
            "be",
            "registered",
            "against"
        ]
    },
    {
        "id": 1496,
        "code": "\tpublic void addServletRegistrationBeans(ServletRegistrationBean<?>... servletRegistrationBeans) {\n\t\tAssert.notNull(servletRegistrationBeans, \"ServletRegistrationBeans must not be null\");\n\t\tCollections.addAll(this.servletRegistrationBeans, servletRegistrationBeans);\n\t}",
        "summary_tokens": [
            "add",
            "servlet",
            "registration",
            "bean",
            "s",
            "for",
            "the",
            "filter"
        ]
    },
    {
        "id": 1497,
        "code": "\tpublic void setServletNames(Collection<String> servletNames) {\n\t\tAssert.notNull(servletNames, \"ServletNames must not be null\");\n\t\tthis.servletNames = new LinkedHashSet<>(servletNames);\n\t}",
        "summary_tokens": [
            "set",
            "servlet",
            "names",
            "that",
            "the",
            "filter",
            "will",
            "be",
            "registered",
            "against"
        ]
    },
    {
        "id": 1498,
        "code": "\tpublic Collection<String> getServletNames() {\n\t\treturn this.servletNames;\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "mutable",
            "collection",
            "of",
            "servlet",
            "names",
            "that",
            "the",
            "filter",
            "will",
            "be",
            "registered",
            "against"
        ]
    },
    {
        "id": 1499,
        "code": "\tpublic void addServletNames(String... servletNames) {\n\t\tAssert.notNull(servletNames, \"ServletNames must not be null\");\n\t\tthis.servletNames.addAll(Arrays.asList(servletNames));\n\t}",
        "summary_tokens": [
            "add",
            "servlet",
            "names",
            "for",
            "the",
            "filter"
        ]
    },
    {
        "id": 1500,
        "code": "\tpublic void setUrlPatterns(Collection<String> urlPatterns) {\n\t\tAssert.notNull(urlPatterns, \"UrlPatterns must not be null\");\n\t\tthis.urlPatterns = new LinkedHashSet<>(urlPatterns);\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "url",
            "patterns",
            "that",
            "the",
            "filter",
            "will",
            "be",
            "registered",
            "against"
        ]
    },
    {
        "id": 1501,
        "code": "\tpublic Collection<String> getUrlPatterns() {\n\t\treturn this.urlPatterns;\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "mutable",
            "collection",
            "of",
            "url",
            "patterns",
            "as",
            "defined",
            "in",
            "the",
            "servlet",
            "specification",
            "that",
            "the",
            "filter",
            "will",
            "be",
            "registered",
            "against"
        ]
    },
    {
        "id": 1502,
        "code": "\tpublic void addUrlPatterns(String... urlPatterns) {\n\t\tAssert.notNull(urlPatterns, \"UrlPatterns must not be null\");\n\t\tCollections.addAll(this.urlPatterns, urlPatterns);\n\t}",
        "summary_tokens": [
            "add",
            "url",
            "patterns",
            "as",
            "defined",
            "in",
            "the",
            "servlet",
            "specification",
            "that",
            "the",
            "filter",
            "will",
            "be",
            "registered",
            "against"
        ]
    },
    {
        "id": 1503,
        "code": "\tpublic void setDispatcherTypes(EnumSet<DispatcherType> dispatcherTypes) {\n\t\tthis.dispatcherTypes = dispatcherTypes;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "dispatcher",
            "types",
            "that",
            "should",
            "be",
            "used",
            "with",
            "the",
            "registration"
        ]
    },
    {
        "id": 1504,
        "code": "\tpublic void setMatchAfter(boolean matchAfter) {\n\t\tthis.matchAfter = matchAfter;\n\t}",
        "summary_tokens": [
            "set",
            "if",
            "the",
            "filter",
            "mappings",
            "should",
            "be",
            "matched",
            "after",
            "any",
            "declared",
            "filter",
            "mappings",
            "of",
            "the",
            "servlet",
            "context"
        ]
    },
    {
        "id": 1505,
        "code": "\tpublic boolean isMatchAfter() {\n\t\treturn this.matchAfter;\n\t}",
        "summary_tokens": [
            "return",
            "if",
            "filter",
            "mappings",
            "should",
            "be",
            "matched",
            "after",
            "any",
            "declared",
            "filter",
            "mappings",
            "of",
            "the",
            "servlet",
            "context"
        ]
    },
    {
        "id": 1506,
        "code": "\tpublic void setName(String name) {\n\t\tAssert.hasLength(name, \"Name must not be empty\");\n\t\tthis.name = name;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "name",
            "of",
            "this",
            "registration"
        ]
    },
    {
        "id": 1507,
        "code": "\tpublic void setAsyncSupported(boolean asyncSupported) {\n\t\tthis.asyncSupported = asyncSupported;\n\t}",
        "summary_tokens": [
            "sets",
            "if",
            "asynchronous",
            "operations",
            "are",
            "supported",
            "for",
            "this",
            "registration"
        ]
    },
    {
        "id": 1508,
        "code": "\tpublic boolean isAsyncSupported() {\n\t\treturn this.asyncSupported;\n\t}",
        "summary_tokens": [
            "returns",
            "if",
            "asynchronous",
            "operations",
            "are",
            "supported",
            "for",
            "this",
            "registration"
        ]
    },
    {
        "id": 1509,
        "code": "\tpublic void setInitParameters(Map<String, String> initParameters) {\n\t\tAssert.notNull(initParameters, \"InitParameters must not be null\");\n\t\tthis.initParameters = new LinkedHashMap<>(initParameters);\n\t}",
        "summary_tokens": [
            "set",
            "init",
            "parameters",
            "for",
            "this",
            "registration"
        ]
    },
    {
        "id": 1510,
        "code": "\tpublic Map<String, String> getInitParameters() {\n\t\treturn this.initParameters;\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "mutable",
            "map",
            "of",
            "the",
            "registration",
            "init",
            "parameters"
        ]
    },
    {
        "id": 1511,
        "code": "\tpublic void addInitParameter(String name, String value) {\n\t\tAssert.notNull(name, \"Name must not be null\");\n\t\tthis.initParameters.put(name, value);\n\t}",
        "summary_tokens": [
            "add",
            "a",
            "single",
            "init",
            "parameter",
            "replacing",
            "any",
            "existing",
            "parameter",
            "with",
            "the",
            "same",
            "name"
        ]
    },
    {
        "id": 1512,
        "code": "\tprotected final String getOrDeduceName(Object value) {\n\t\treturn (this.name != null) ? this.name : Conventions.getVariableName(value);\n\t}",
        "summary_tokens": [
            "deduces",
            "the",
            "name",
            "for",
            "this",
            "registration"
        ]
    },
    {
        "id": 1513,
        "code": "\tpublic void setFilter(T filter) {\n\t\tAssert.notNull(filter, \"Filter must not be null\");\n\t\tthis.filter = filter;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "filter",
            "to",
            "be",
            "registered"
        ]
    },
    {
        "id": 1514,
        "code": "\tpublic void setLocation(String location) {\n\t\tthis.location = location;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "directory",
            "location",
            "where",
            "files",
            "will",
            "be",
            "stored"
        ]
    },
    {
        "id": 1515,
        "code": "\tpublic void setMaxFileSize(DataSize maxFileSize) {\n\t\tthis.maxFileSize = maxFileSize;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "maximum",
            "data",
            "size",
            "size",
            "allowed",
            "for",
            "uploaded",
            "files"
        ]
    },
    {
        "id": 1516,
        "code": "\tpublic void setMaxRequestSize(DataSize maxRequestSize) {\n\t\tthis.maxRequestSize = maxRequestSize;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "maximum",
            "data",
            "size",
            "allowed",
            "for",
            "multipart",
            "form",
            "data",
            "requests"
        ]
    },
    {
        "id": 1517,
        "code": "\tpublic void setFileSizeThreshold(DataSize fileSizeThreshold) {\n\t\tthis.fileSizeThreshold = fileSizeThreshold;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "data",
            "size",
            "size",
            "threshold",
            "after",
            "which",
            "files",
            "will",
            "be",
            "written",
            "to",
            "disk"
        ]
    },
    {
        "id": 1518,
        "code": "\tpublic MultipartConfigElement createMultipartConfig() {\n\t\tlong maxFileSizeBytes = convertToBytes(this.maxFileSize, -1);\n\t\tlong maxRequestSizeBytes = convertToBytes(this.maxRequestSize, -1);\n\t\tlong fileSizeThresholdBytes = convertToBytes(this.fileSizeThreshold, 0);\n\t\treturn new MultipartConfigElement(this.location, maxFileSizeBytes, maxRequestSizeBytes,\n\t\t\t\t(int) fileSizeThresholdBytes);\n\t}",
        "summary_tokens": [
            "create",
            "a",
            "new",
            "multipart",
            "config",
            "element",
            "instance"
        ]
    },
    {
        "id": 1519,
        "code": "\tprivate long convertToBytes(DataSize size, int defaultValue) {\n\t\tif (size != null && !size.isNegative()) {\n\t\t\treturn size.toBytes();\n\t\t}\n\t\treturn defaultValue;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "amount",
            "of",
            "bytes",
            "from",
            "the",
            "specified",
            "data",
            "size",
            "size"
        ]
    },
    {
        "id": 1520,
        "code": "\tpublic void setEnabled(boolean enabled) {\n\t\tthis.enabled = enabled;\n\t}",
        "summary_tokens": [
            "flag",
            "to",
            "indicate",
            "that",
            "the",
            "registration",
            "is",
            "enabled"
        ]
    },
    {
        "id": 1521,
        "code": "\tpublic boolean isEnabled() {\n\t\treturn this.enabled;\n\t}",
        "summary_tokens": [
            "return",
            "if",
            "the",
            "registration",
            "is",
            "enabled"
        ]
    },
    {
        "id": 1522,
        "code": "\tpublic void setOrder(int order) {\n\t\tthis.order = order;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "order",
            "of",
            "the",
            "registration",
            "bean"
        ]
    },
    {
        "id": 1523,
        "code": "\tpublic int getOrder() {\n\t\treturn this.order;\n\t}",
        "summary_tokens": [
            "get",
            "the",
            "order",
            "of",
            "the",
            "registration",
            "bean"
        ]
    },
    {
        "id": 1524,
        "code": "\tpublic void setListener(T listener) {\n\t\tAssert.notNull(listener, \"Listener must not be null\");\n\t\tAssert.isTrue(isSupportedType(listener), \"Listener is not of a supported type\");\n\t\tthis.listener = listener;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "listener",
            "that",
            "will",
            "be",
            "registered"
        ]
    },
    {
        "id": 1525,
        "code": "\tpublic T getListener() {\n\t\treturn this.listener;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "listener",
            "to",
            "be",
            "registered"
        ]
    },
    {
        "id": 1526,
        "code": "\tpublic static boolean isSupportedType(EventListener listener) {\n\t\tfor (Class<?> type : SUPPORTED_TYPES) {\n\t\t\tif (ClassUtils.isAssignableValue(type, listener)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}",
        "summary_tokens": [
            "returns",
            "true",
            "if",
            "the",
            "specified",
            "listener",
            "is",
            "one",
            "of",
            "the",
            "supported",
            "types"
        ]
    },
    {
        "id": 1527,
        "code": "\tpublic static Set<Class<?>> getSupportedTypes() {\n\t\treturn SUPPORTED_TYPES;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "supported",
            "types",
            "for",
            "this",
            "registration"
        ]
    },
    {
        "id": 1528,
        "code": "\tpublic void setServlet(T servlet) {\n\t\tAssert.notNull(servlet, \"Servlet must not be null\");\n\t\tthis.servlet = servlet;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "servlet",
            "to",
            "be",
            "registered"
        ]
    },
    {
        "id": 1529,
        "code": "\tpublic T getServlet() {\n\t\treturn this.servlet;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "servlet",
            "being",
            "registered"
        ]
    },
    {
        "id": 1530,
        "code": "\tpublic void setUrlMappings(Collection<String> urlMappings) {\n\t\tAssert.notNull(urlMappings, \"UrlMappings must not be null\");\n\t\tthis.urlMappings = new LinkedHashSet<>(urlMappings);\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "url",
            "mappings",
            "for",
            "the",
            "servlet"
        ]
    },
    {
        "id": 1531,
        "code": "\tpublic Collection<String> getUrlMappings() {\n\t\treturn this.urlMappings;\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "mutable",
            "collection",
            "of",
            "the",
            "url",
            "mappings",
            "as",
            "defined",
            "in",
            "the",
            "servlet",
            "specification",
            "for",
            "the",
            "servlet"
        ]
    },
    {
        "id": 1532,
        "code": "\tpublic void addUrlMappings(String... urlMappings) {\n\t\tAssert.notNull(urlMappings, \"UrlMappings must not be null\");\n\t\tthis.urlMappings.addAll(Arrays.asList(urlMappings));\n\t}",
        "summary_tokens": [
            "add",
            "url",
            "mappings",
            "as",
            "defined",
            "in",
            "the",
            "servlet",
            "specification",
            "for",
            "the",
            "servlet"
        ]
    },
    {
        "id": 1533,
        "code": "\tpublic void setLoadOnStartup(int loadOnStartup) {\n\t\tthis.loadOnStartup = loadOnStartup;\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "load",
            "on",
            "startup",
            "priority"
        ]
    },
    {
        "id": 1534,
        "code": "\tpublic void setMultipartConfig(MultipartConfigElement multipartConfig) {\n\t\tthis.multipartConfig = multipartConfig;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "multipart",
            "config",
            "element",
            "multi",
            "part",
            "configuration"
        ]
    },
    {
        "id": 1535,
        "code": "\tpublic MultipartConfigElement getMultipartConfig() {\n\t\treturn this.multipartConfig;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "multipart",
            "config",
            "element",
            "multi",
            "part",
            "configuration",
            "to",
            "be",
            "applied",
            "or",
            "null"
        ]
    },
    {
        "id": 1536,
        "code": "\tpublic String getServletName() {\n\t\treturn getOrDeduceName(this.servlet);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "servlet",
            "name",
            "that",
            "will",
            "be",
            "registered"
        ]
    },
    {
        "id": 1537,
        "code": "\tpublic void setEnvironment(ConfigurableEnvironment environment) {\n\t\tsuper.setEnvironment(environment);\n\t\tthis.reader.setEnvironment(environment);\n\t\tthis.scanner.setEnvironment(environment);\n\t}",
        "summary_tokens": [
            "p",
            "delegates",
            "given",
            "environment",
            "to",
            "underlying",
            "annotated",
            "bean",
            "definition",
            "reader",
            "and",
            "class",
            "path",
            "bean",
            "definition",
            "scanner",
            "members"
        ]
    },
    {
        "id": 1538,
        "code": "\tpublic void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {\n\t\tthis.reader.setBeanNameGenerator(beanNameGenerator);\n\t\tthis.scanner.setBeanNameGenerator(beanNameGenerator);\n\t\tgetBeanFactory().registerSingleton(AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR, beanNameGenerator);\n\t}",
        "summary_tokens": [
            "provide",
            "a",
            "custom",
            "bean",
            "name",
            "generator",
            "for",
            "use",
            "with",
            "annotated",
            "bean",
            "definition",
            "reader",
            "and",
            "or",
            "class",
            "path",
            "bean",
            "definition",
            "scanner",
            "if",
            "any"
        ]
    },
    {
        "id": 1539,
        "code": "\tpublic void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver) {\n\t\tthis.reader.setScopeMetadataResolver(scopeMetadataResolver);\n\t\tthis.scanner.setScopeMetadataResolver(scopeMetadataResolver);\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "scope",
            "metadata",
            "resolver",
            "to",
            "use",
            "for",
            "detected",
            "bean",
            "classes"
        ]
    },
    {
        "id": 1540,
        "code": "\tpublic final void register(Class<?>... annotatedClasses) {\n\t\tAssert.notEmpty(annotatedClasses, \"At least one annotated class must be specified\");\n\t\tthis.annotatedClasses.addAll(Arrays.asList(annotatedClasses));\n\t}",
        "summary_tokens": [
            "register",
            "one",
            "or",
            "more",
            "annotated",
            "classes",
            "to",
            "be",
            "processed"
        ]
    },
    {
        "id": 1541,
        "code": "\tpublic final void scan(String... basePackages) {\n\t\tAssert.notEmpty(basePackages, \"At least one base package must be specified\");\n\t\tthis.basePackages = basePackages;\n\t}",
        "summary_tokens": [
            "perform",
            "a",
            "scan",
            "within",
            "the",
            "specified",
            "base",
            "packages"
        ]
    },
    {
        "id": 1542,
        "code": "\tpublic void setEnvironment(ConfigurableEnvironment environment) {\n\t\tsuper.setEnvironment(environment);\n\t\tthis.reader.setEnvironment(environment);\n\t\tthis.scanner.setEnvironment(environment);\n\t}",
        "summary_tokens": [
            "p",
            "delegates",
            "given",
            "environment",
            "to",
            "underlying",
            "annotated",
            "bean",
            "definition",
            "reader",
            "and",
            "class",
            "path",
            "bean",
            "definition",
            "scanner",
            "members"
        ]
    },
    {
        "id": 1543,
        "code": "\tpublic void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {\n\t\tthis.reader.setBeanNameGenerator(beanNameGenerator);\n\t\tthis.scanner.setBeanNameGenerator(beanNameGenerator);\n\t\tgetBeanFactory().registerSingleton(AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR, beanNameGenerator);\n\t}",
        "summary_tokens": [
            "provide",
            "a",
            "custom",
            "bean",
            "name",
            "generator",
            "for",
            "use",
            "with",
            "annotated",
            "bean",
            "definition",
            "reader",
            "and",
            "or",
            "class",
            "path",
            "bean",
            "definition",
            "scanner",
            "if",
            "any"
        ]
    },
    {
        "id": 1544,
        "code": "\tpublic void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver) {\n\t\tthis.reader.setScopeMetadataResolver(scopeMetadataResolver);\n\t\tthis.scanner.setScopeMetadataResolver(scopeMetadataResolver);\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "scope",
            "metadata",
            "resolver",
            "to",
            "use",
            "for",
            "detected",
            "bean",
            "classes"
        ]
    },
    {
        "id": 1545,
        "code": "\tpublic final void register(Class<?>... annotatedClasses) {\n\t\tAssert.notEmpty(annotatedClasses, \"At least one annotated class must be specified\");\n\t\tthis.annotatedClasses.addAll(Arrays.asList(annotatedClasses));\n\t}",
        "summary_tokens": [
            "register",
            "one",
            "or",
            "more",
            "annotated",
            "classes",
            "to",
            "be",
            "processed"
        ]
    },
    {
        "id": 1546,
        "code": "\tpublic final void scan(String... basePackages) {\n\t\tAssert.notEmpty(basePackages, \"At least one base package must be specified\");\n\t\tthis.basePackages = basePackages;\n\t}",
        "summary_tokens": [
            "perform",
            "a",
            "scan",
            "within",
            "the",
            "specified",
            "base",
            "packages"
        ]
    },
    {
        "id": 1547,
        "code": "\tprotected void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {\n\t\tbeanFactory.addBeanPostProcessor(new WebApplicationContextServletContextAwareProcessor(this));\n\t\tbeanFactory.ignoreDependencyInterface(ServletContextAware.class);\n\t\tregisterWebApplicationScopes();\n\t}",
        "summary_tokens": [
            "register",
            "servlet",
            "context",
            "aware",
            "processor"
        ]
    },
    {
        "id": 1548,
        "code": "\tprotected ServletWebServerFactory getWebServerFactory() {\n\t\t\n\t\tString[] beanNames = getBeanFactory().getBeanNamesForType(ServletWebServerFactory.class);\n\t\tif (beanNames.length == 0) {\n\t\t\tthrow new MissingWebServerFactoryBeanException(getClass(), ServletWebServerFactory.class,\n\t\t\t\t\tWebApplicationType.SERVLET);\n\t\t}\n\t\tif (beanNames.length > 1) {\n\t\t\tthrow new ApplicationContextException(\"Unable to start ServletWebServerApplicationContext due to multiple \"\n\t\t\t\t\t+ \"ServletWebServerFactory beans : \" + StringUtils.arrayToCommaDelimitedString(beanNames));\n\t\t}\n\t\treturn getBeanFactory().getBean(beanNames[0], ServletWebServerFactory.class);\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "servlet",
            "web",
            "server",
            "factory",
            "that",
            "should",
            "be",
            "used",
            "to",
            "create",
            "the",
            "embedded",
            "web",
            "server"
        ]
    },
    {
        "id": 1549,
        "code": "\tprivate org.springframework.boot.web.servlet.ServletContextInitializer getSelfInitializer() {\n\t\treturn this::selfInitialize;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "servlet",
            "context",
            "initializer",
            "that",
            "will",
            "be",
            "used",
            "to",
            "complete",
            "the",
            "setup",
            "of",
            "this",
            "web",
            "application",
            "context"
        ]
    },
    {
        "id": 1550,
        "code": "\tprotected Collection<ServletContextInitializer> getServletContextInitializerBeans() {\n\t\treturn new ServletContextInitializerBeans(getBeanFactory());\n\t}",
        "summary_tokens": [
            "returns",
            "servlet",
            "context",
            "initializer",
            "s",
            "that",
            "should",
            "be",
            "used",
            "with",
            "the",
            "embedded",
            "web",
            "server"
        ]
    },
    {
        "id": 1551,
        "code": "\tprotected void prepareWebApplicationContext(ServletContext servletContext) {\n\t\tObject rootContext = servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE);\n\t\tif (rootContext != null) {\n\t\t\tif (rootContext == this) {\n\t\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\t\"Cannot initialize context because there is already a root application context present - \"\n\t\t\t\t\t\t\t\t+ \"check whether you have multiple ServletContextInitializers!\");\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tservletContext.log(\"Initializing Spring embedded WebApplicationContext\");\n\t\ttry {\n\t\t\tservletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this);\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Published root WebApplicationContext as ServletContext attribute with name [\"\n\t\t\t\t\t\t+ WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + \"]\");\n\t\t\t}\n\t\t\tsetServletContext(servletContext);\n\t\t\tif (logger.isInfoEnabled()) {\n\t\t\t\tlong elapsedTime = System.currentTimeMillis() - getStartupDate();\n\t\t\t\tlogger.info(\"Root WebApplicationContext: initialization completed in \" + elapsedTime + \" ms\");\n\t\t\t}\n\t\t}\n\t\tcatch (RuntimeException | Error ex) {\n\t\t\tlogger.error(\"Context initialization failed\", ex);\n\t\t\tservletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex);\n\t\t\tthrow ex;\n\t\t}\n\t}",
        "summary_tokens": [
            "prepare",
            "the",
            "web",
            "application",
            "context",
            "with",
            "the",
            "given",
            "fully",
            "loaded",
            "servlet",
            "context"
        ]
    },
    {
        "id": 1552,
        "code": "\tpublic WebServer getWebServer() {\n\t\treturn this.webServer;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "web",
            "server",
            "that",
            "was",
            "created",
            "by",
            "the",
            "context",
            "or",
            "null",
            "if",
            "the",
            "server",
            "has",
            "not",
            "yet",
            "been",
            "created"
        ]
    },
    {
        "id": 1553,
        "code": "\tpublic ServletWebServerApplicationContext getApplicationContext() {\n\t\treturn this.applicationContext;\n\t}",
        "summary_tokens": [
            "access",
            "the",
            "application",
            "context",
            "that",
            "the",
            "server",
            "was",
            "created",
            "in"
        ]
    },
    {
        "id": 1554,
        "code": "\tpublic void setValidating(boolean validating) {\n\t\tthis.reader.setValidating(validating);\n\t}",
        "summary_tokens": [
            "set",
            "whether",
            "to",
            "use",
            "xml",
            "validation"
        ]
    },
    {
        "id": 1555,
        "code": "\tpublic void setEnvironment(ConfigurableEnvironment environment) {\n\t\tsuper.setEnvironment(environment);\n\t\tthis.reader.setEnvironment(getEnvironment());\n\t}",
        "summary_tokens": [
            "p",
            "delegates",
            "the",
            "given",
            "environment",
            "to",
            "underlying",
            "xml",
            "bean",
            "definition",
            "reader"
        ]
    },
    {
        "id": 1556,
        "code": "\tpublic final void load(Class<?> relativeClass, String... resourceNames) {\n\t\tResource[] resources = new Resource[resourceNames.length];\n\t\tfor (int i = 0; i < resourceNames.length; i++) {\n\t\t\tresources[i] = new ClassPathResource(resourceNames[i], relativeClass);\n\t\t}\n\t\tthis.reader.loadBeanDefinitions(resources);\n\t}",
        "summary_tokens": [
            "load",
            "bean",
            "definitions",
            "from",
            "the",
            "given",
            "xml",
            "resources"
        ]
    },
    {
        "id": 1557,
        "code": "\tdefault Map<String, Object> getErrorAttributes(WebRequest webRequest, ErrorAttributeOptions options) {\n\t\treturn Collections.emptyMap();\n\t}",
        "summary_tokens": [
            "returns",
            "a",
            "map",
            "of",
            "the",
            "error",
            "attributes"
        ]
    },
    {
        "id": 1558,
        "code": "\tpublic void setOrder(int order) {\n\t\tthis.order = order;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "order",
            "for",
            "this",
            "filter"
        ]
    },
    {
        "id": 1559,
        "code": "\tpublic void setOrder(int order) {\n\t\tthis.order = order;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "order",
            "for",
            "this",
            "filter"
        ]
    },
    {
        "id": 1560,
        "code": "\tpublic void setOrder(int order) {\n\t\tthis.order = order;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "order",
            "for",
            "this",
            "filter"
        ]
    },
    {
        "id": 1561,
        "code": "\tpublic void setOrder(int order) {\n\t\tthis.order = order;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "order",
            "for",
            "this",
            "filter"
        ]
    },
    {
        "id": 1562,
        "code": "\tpublic String getContextPath() {\n\t\treturn this.contextPath;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "context",
            "path",
            "for",
            "the",
            "web",
            "server"
        ]
    },
    {
        "id": 1563,
        "code": "\tpublic boolean isRegisterDefaultServlet() {\n\t\treturn this.registerDefaultServlet;\n\t}",
        "summary_tokens": [
            "flag",
            "to",
            "indicate",
            "that",
            "the",
            "default",
            "servlet",
            "should",
            "be",
            "registered"
        ]
    },
    {
        "id": 1564,
        "code": "\tpublic MimeMappings getMimeMappings() {\n\t\treturn this.mimeMappings;\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "mime",
            "type",
            "mappings"
        ]
    },
    {
        "id": 1565,
        "code": "\tpublic File getDocumentRoot() {\n\t\treturn this.documentRoot.getDirectory();\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "document",
            "root",
            "which",
            "will",
            "be",
            "used",
            "by",
            "the",
            "web",
            "context",
            "to",
            "serve",
            "static",
            "files"
        ]
    },
    {
        "id": 1566,
        "code": "\tpublic Map<Locale, Charset> getLocaleCharsetMappings() {\n\t\treturn this.localeCharsetMappings;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "locale",
            "to",
            "charset",
            "mappings"
        ]
    },
    {
        "id": 1567,
        "code": "\tprotected final ServletContextInitializer[] mergeInitializers(ServletContextInitializer... initializers) {\n\t\tList<ServletContextInitializer> mergedInitializers = new ArrayList<>();\n\t\tmergedInitializers.add((servletContext) -> this.initParameters.forEach(servletContext::setInitParameter));\n\t\tmergedInitializers.add(new SessionConfiguringInitializer(this.session));\n\t\tmergedInitializers.addAll(Arrays.asList(initializers));\n\t\tmergedInitializers.addAll(this.initializers);\n\t\treturn mergedInitializers.toArray(new ServletContextInitializer[0]);\n\t}",
        "summary_tokens": [
            "utility",
            "method",
            "that",
            "can",
            "be",
            "used",
            "by",
            "subclasses",
            "wishing",
            "to",
            "combine",
            "the",
            "specified",
            "servlet",
            "context",
            "initializer",
            "parameters",
            "with",
            "those",
            "defined",
            "in",
            "this",
            "instance"
        ]
    },
    {
        "id": 1568,
        "code": "\tprotected boolean shouldRegisterJspServlet() {\n\t\treturn this.jsp != null && this.jsp.getRegistered()\n\t\t\t\t&& ClassUtils.isPresent(this.jsp.getClassName(), getClass().getClassLoader());\n\t}",
        "summary_tokens": [
            "returns",
            "whether",
            "the",
            "jsp",
            "servlet",
            "should",
            "be",
            "registered",
            "with",
            "the",
            "web",
            "server"
        ]
    },
    {
        "id": 1569,
        "code": "\tprotected final File getValidDocumentRoot() {\n\t\treturn this.documentRoot.getValidDirectory();\n\t}",
        "summary_tokens": [
            "returns",
            "the",
            "absolute",
            "document",
            "root",
            "when",
            "it",
            "points",
            "to",
            "a",
            "valid",
            "directory",
            "logging",
            "a",
            "warning",
            "and",
            "returning",
            "null",
            "otherwise"
        ]
    },
    {
        "id": 1570,
        "code": "\tdefault CookieSameSiteSupplier whenHasName(Supplier<String> nameSupplier) {\n\t\tAssert.notNull(nameSupplier, \"NameSupplier must not be empty\");\n\t\treturn when((cookie) -> ObjectUtils.nullSafeEquals(cookie.getName(), nameSupplier.get()));\n\t}",
        "summary_tokens": [
            "limit",
            "this",
            "supplier",
            "so",
            "that",
            "it",
            "s",
            "only",
            "called",
            "if",
            "the",
            "cookie",
            "has",
            "the",
            "given",
            "name"
        ]
    },
    {
        "id": 1571,
        "code": "\tdefault CookieSameSiteSupplier whenHasNameMatching(Pattern pattern) {\n\t\tAssert.notNull(pattern, \"Pattern must not be null\");\n\t\treturn when((cookie) -> pattern.matcher(cookie.getName()).matches());\n\t}",
        "summary_tokens": [
            "limit",
            "this",
            "supplier",
            "so",
            "that",
            "it",
            "s",
            "only",
            "called",
            "if",
            "the",
            "cookie",
            "name",
            "matches",
            "the",
            "given",
            "pattern"
        ]
    },
    {
        "id": 1572,
        "code": "\tdefault CookieSameSiteSupplier when(Predicate<Cookie> predicate) {\n\t\tAssert.notNull(predicate, \"Predicate must not be null\");\n\t\treturn (cookie) -> predicate.test(cookie) ? getSameSite(cookie) : null;\n\t}",
        "summary_tokens": [
            "limit",
            "this",
            "supplier",
            "so",
            "that",
            "it",
            "s",
            "only",
            "called",
            "if",
            "the",
            "predicate",
            "accepts",
            "the",
            "cookie"
        ]
    },
    {
        "id": 1573,
        "code": "\tstatic CookieSameSiteSupplier ofNone() {\n\t\treturn of(SameSite.NONE);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "new",
            "cookie",
            "same",
            "site",
            "supplier",
            "that",
            "always",
            "returns",
            "same",
            "site",
            "none"
        ]
    },
    {
        "id": 1574,
        "code": "\tstatic CookieSameSiteSupplier ofLax() {\n\t\treturn of(SameSite.LAX);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "new",
            "cookie",
            "same",
            "site",
            "supplier",
            "that",
            "always",
            "returns",
            "same",
            "site",
            "lax"
        ]
    },
    {
        "id": 1575,
        "code": "\tstatic CookieSameSiteSupplier ofStrict() {\n\t\treturn of(SameSite.STRICT);\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "new",
            "cookie",
            "same",
            "site",
            "supplier",
            "that",
            "always",
            "returns",
            "same",
            "site",
            "strict"
        ]
    },
    {
        "id": 1576,
        "code": "\tstatic CookieSameSiteSupplier of(SameSite sameSite) {\n\t\tAssert.notNull(sameSite, \"SameSite must not be null\");\n\t\treturn (cookie) -> sameSite;\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "new",
            "cookie",
            "same",
            "site",
            "supplier",
            "that",
            "always",
            "returns",
            "the",
            "given",
            "same",
            "site",
            "value"
        ]
    },
    {
        "id": 1577,
        "code": "\tpublic String getClassName() {\n\t\treturn this.className;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "class",
            "name",
            "of",
            "the",
            "servlet",
            "to",
            "use",
            "for",
            "jsps"
        ]
    },
    {
        "id": 1578,
        "code": "\tpublic Map<String, String> getInitParameters() {\n\t\treturn this.initParameters;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "init",
            "parameters",
            "used",
            "to",
            "configure",
            "the",
            "jsp",
            "servlet"
        ]
    },
    {
        "id": 1579,
        "code": "\tpublic boolean getRegistered() {\n\t\treturn this.registered;\n\t}",
        "summary_tokens": [
            "return",
            "whether",
            "the",
            "jsp",
            "servlet",
            "is",
            "registered"
        ]
    },
    {
        "id": 1580,
        "code": "\tpublic Set<Session.SessionTrackingMode> getTrackingModes() {\n\t\treturn this.trackingModes;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "session",
            "tracking",
            "mode",
            "session",
            "tracking",
            "modes"
        ]
    },
    {
        "id": 1581,
        "code": "\tpublic boolean isPersistent() {\n\t\treturn this.persistent;\n\t}",
        "summary_tokens": [
            "return",
            "whether",
            "to",
            "persist",
            "session",
            "data",
            "between",
            "restarts"
        ]
    },
    {
        "id": 1582,
        "code": "\tpublic File getStoreDir() {\n\t\treturn this.storeDir;\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "directory",
            "used",
            "to",
            "store",
            "session",
            "data"
        ]
    },
    {
        "id": 1583,
        "code": "\tpublic void setCompiler(Compiler compiler) {\n\t\tthis.compiler = compiler;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "mustache",
            "compiler",
            "to",
            "be",
            "used",
            "by",
            "this",
            "view"
        ]
    },
    {
        "id": 1584,
        "code": "\tpublic void setCharset(String charset) {\n\t\tthis.charset = charset;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "charset",
            "used",
            "for",
            "reading",
            "mustache",
            "template",
            "files"
        ]
    },
    {
        "id": 1585,
        "code": "\tpublic HttpWebServiceMessageSenderBuilder setConnectTimeout(Duration connectTimeout) {\n\t\tthis.connectTimeout = connectTimeout;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "connection",
            "timeout"
        ]
    },
    {
        "id": 1586,
        "code": "\tpublic HttpWebServiceMessageSenderBuilder setReadTimeout(Duration readTimeout) {\n\t\tthis.readTimeout = readTimeout;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "read",
            "timeout"
        ]
    },
    {
        "id": 1587,
        "code": "\tpublic HttpWebServiceMessageSenderBuilder requestFactory(\n\t\t\tSupplier<ClientHttpRequestFactory> requestFactorySupplier) {\n\t\tAssert.notNull(requestFactorySupplier, \"RequestFactory Supplier must not be null\");\n\t\tthis.requestFactorySupplier = requestFactorySupplier;\n\t\treturn this;\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "supplier",
            "of",
            "client",
            "http",
            "request",
            "factory",
            "that",
            "should",
            "be",
            "called",
            "to",
            "create",
            "the",
            "http",
            "based",
            "web",
            "service",
            "message",
            "sender"
        ]
    },
    {
        "id": 1588,
        "code": "\tpublic WebServiceTemplateBuilder detectHttpMessageSender(boolean detectHttpMessageSender) {\n\t\treturn new WebServiceTemplateBuilder(detectHttpMessageSender, this.interceptors, this.internalCustomizers,\n\t\t\t\tthis.customizers, this.messageSenders, this.marshaller, this.unmarshaller, this.destinationProvider,\n\t\t\t\tthis.transformerFactoryClass, this.messageFactory);\n\t}",
        "summary_tokens": [
            "set",
            "if",
            "a",
            "suitable",
            "http",
            "based",
            "web",
            "service",
            "message",
            "sender",
            "should",
            "be",
            "detected",
            "based",
            "on",
            "the",
            "classpath"
        ]
    },
    {
        "id": 1589,
        "code": "\tpublic WebServiceTemplateBuilder messageSenders(Collection<? extends WebServiceMessageSender> messageSenders) {\n\t\tAssert.notNull(messageSenders, \"MessageSenders must not be null\");\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender, this.interceptors, this.internalCustomizers,\n\t\t\t\tthis.customizers, this.messageSenders.set(messageSenders), this.marshaller, this.unmarshaller,\n\t\t\t\tthis.destinationProvider, this.transformerFactoryClass, this.messageFactory);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "web",
            "service",
            "message",
            "sender",
            "web",
            "service",
            "message",
            "senders",
            "that",
            "should",
            "be",
            "used",
            "with",
            "the",
            "web",
            "service",
            "template"
        ]
    },
    {
        "id": 1590,
        "code": "\tpublic WebServiceTemplateBuilder additionalMessageSenders(\n\t\t\tCollection<? extends WebServiceMessageSender> messageSenders) {\n\t\tAssert.notNull(messageSenders, \"MessageSenders must not be null\");\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender, this.interceptors, this.internalCustomizers,\n\t\t\t\tthis.customizers, this.messageSenders.add(messageSenders), this.marshaller, this.unmarshaller,\n\t\t\t\tthis.destinationProvider, this.transformerFactoryClass, this.messageFactory);\n\t}",
        "summary_tokens": [
            "add",
            "additional",
            "web",
            "service",
            "message",
            "sender",
            "web",
            "service",
            "message",
            "senders",
            "that",
            "should",
            "be",
            "used",
            "with",
            "the",
            "web",
            "service",
            "template"
        ]
    },
    {
        "id": 1591,
        "code": "\tpublic WebServiceTemplateBuilder interceptors(Collection<? extends ClientInterceptor> interceptors) {\n\t\tAssert.notNull(interceptors, \"Interceptors must not be null\");\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender,\n\t\t\t\tappend(Collections.<ClientInterceptor>emptySet(), interceptors), this.internalCustomizers,\n\t\t\t\tthis.customizers, this.messageSenders, this.marshaller, this.unmarshaller, this.destinationProvider,\n\t\t\t\tthis.transformerFactoryClass, this.messageFactory);\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "client",
            "interceptor",
            "client",
            "interceptors",
            "that",
            "should",
            "be",
            "used",
            "with",
            "the",
            "web",
            "service",
            "template"
        ]
    },
    {
        "id": 1592,
        "code": "\tpublic WebServiceTemplateBuilder additionalInterceptors(Collection<? extends ClientInterceptor> interceptors) {\n\t\tAssert.notNull(interceptors, \"Interceptors must not be null\");\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender, append(this.interceptors, interceptors),\n\t\t\t\tthis.internalCustomizers, this.customizers, this.messageSenders, this.marshaller, this.unmarshaller,\n\t\t\t\tthis.destinationProvider, this.transformerFactoryClass, this.messageFactory);\n\t}",
        "summary_tokens": [
            "add",
            "additional",
            "client",
            "interceptor",
            "client",
            "interceptors",
            "that",
            "should",
            "be",
            "used",
            "with",
            "the",
            "web",
            "service",
            "template"
        ]
    },
    {
        "id": 1593,
        "code": "\tpublic WebServiceTemplateBuilder customizers(Collection<? extends WebServiceTemplateCustomizer> customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender, this.interceptors, this.internalCustomizers,\n\t\t\t\tappend(Collections.<WebServiceTemplateCustomizer>emptySet(), customizers), this.messageSenders,\n\t\t\t\tthis.marshaller, this.unmarshaller, this.destinationProvider, this.transformerFactoryClass,\n\t\t\t\tthis.messageFactory);\n\t}",
        "summary_tokens": [
            "set",
            "web",
            "service",
            "template",
            "customizer",
            "web",
            "service",
            "template",
            "customizers",
            "that",
            "should",
            "be",
            "applied",
            "to",
            "the",
            "web",
            "service",
            "template"
        ]
    },
    {
        "id": 1594,
        "code": "\tpublic WebServiceTemplateBuilder additionalCustomizers(\n\t\t\tCollection<? extends WebServiceTemplateCustomizer> customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender, this.interceptors, this.internalCustomizers,\n\t\t\t\tappend(this.customizers, customizers), this.messageSenders, this.marshaller, this.unmarshaller,\n\t\t\t\tthis.destinationProvider, this.transformerFactoryClass, this.messageFactory);\n\t}",
        "summary_tokens": [
            "add",
            "additional",
            "web",
            "service",
            "template",
            "customizer",
            "web",
            "service",
            "template",
            "customizers",
            "that",
            "should",
            "be",
            "applied",
            "to",
            "the",
            "web",
            "service",
            "template"
        ]
    },
    {
        "id": 1595,
        "code": "\tpublic WebServiceTemplateBuilder setCheckConnectionForFault(boolean checkConnectionForFault) {\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender, this.interceptors,\n\t\t\t\tappend(this.internalCustomizers, new CheckConnectionFaultCustomizer(checkConnectionForFault)),\n\t\t\t\tthis.customizers, this.messageSenders, this.marshaller, this.unmarshaller, this.destinationProvider,\n\t\t\t\tthis.transformerFactoryClass, this.messageFactory);\n\t}",
        "summary_tokens": [
            "indicates",
            "whether",
            "the",
            "connection",
            "should",
            "be",
            "checked",
            "for",
            "fault",
            "indicators",
            "true",
            "or",
            "whether",
            "we",
            "should",
            "rely",
            "on",
            "the",
            "message",
            "only",
            "false"
        ]
    },
    {
        "id": 1596,
        "code": "\tpublic WebServiceTemplateBuilder setCheckConnectionForError(boolean checkConnectionForError) {\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender, this.interceptors,\n\t\t\t\tappend(this.internalCustomizers, new CheckConnectionForErrorCustomizer(checkConnectionForError)),\n\t\t\t\tthis.customizers, this.messageSenders, this.marshaller, this.unmarshaller, this.destinationProvider,\n\t\t\t\tthis.transformerFactoryClass, this.messageFactory);\n\t}",
        "summary_tokens": [
            "indicates",
            "whether",
            "the",
            "connection",
            "should",
            "be",
            "checked",
            "for",
            "error",
            "indicators",
            "true",
            "or",
            "whether",
            "these",
            "should",
            "be",
            "ignored",
            "false"
        ]
    },
    {
        "id": 1597,
        "code": "\tpublic WebServiceTemplateBuilder setWebServiceMessageFactory(WebServiceMessageFactory messageFactory) {\n\t\tAssert.notNull(messageFactory, \"MessageFactory must not be null\");\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender, this.interceptors, this.internalCustomizers,\n\t\t\t\tthis.customizers, this.messageSenders, this.marshaller, this.unmarshaller, this.destinationProvider,\n\t\t\t\tthis.transformerFactoryClass, messageFactory);\n\t}",
        "summary_tokens": [
            "sets",
            "the",
            "web",
            "service",
            "message",
            "factory",
            "to",
            "use",
            "for",
            "creating",
            "messages"
        ]
    },
    {
        "id": 1598,
        "code": "\tpublic WebServiceTemplateBuilder setUnmarshaller(Unmarshaller unmarshaller) {\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender, this.interceptors, this.internalCustomizers,\n\t\t\t\tthis.customizers, this.messageSenders, this.marshaller, unmarshaller, this.destinationProvider,\n\t\t\t\tthis.transformerFactoryClass, this.messageFactory);\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "unmarshaller",
            "to",
            "use",
            "to",
            "deserialize",
            "messages"
        ]
    },
    {
        "id": 1599,
        "code": "\tpublic WebServiceTemplateBuilder setMarshaller(Marshaller marshaller) {\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender, this.interceptors, this.internalCustomizers,\n\t\t\t\tthis.customizers, this.messageSenders, marshaller, this.unmarshaller, this.destinationProvider,\n\t\t\t\tthis.transformerFactoryClass, this.messageFactory);\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "marshaller",
            "to",
            "use",
            "to",
            "serialize",
            "messages"
        ]
    },
    {
        "id": 1600,
        "code": "\tpublic WebServiceTemplateBuilder setFaultMessageResolver(FaultMessageResolver faultMessageResolver) {\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender, this.interceptors,\n\t\t\t\tappend(this.internalCustomizers, new FaultMessageResolverCustomizer(faultMessageResolver)),\n\t\t\t\tthis.customizers, this.messageSenders, this.marshaller, this.unmarshaller, this.destinationProvider,\n\t\t\t\tthis.transformerFactoryClass, this.messageFactory);\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "fault",
            "message",
            "resolver",
            "to",
            "use"
        ]
    },
    {
        "id": 1601,
        "code": "\tpublic WebServiceTemplateBuilder setTransformerFactoryClass(\n\t\t\tClass<? extends TransformerFactory> transformerFactoryClass) {\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender, this.interceptors, this.internalCustomizers,\n\t\t\t\tthis.customizers, this.messageSenders, this.marshaller, this.unmarshaller, this.destinationProvider,\n\t\t\t\ttransformerFactoryClass, this.messageFactory);\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "transformer",
            "factory",
            "implementation",
            "to",
            "use"
        ]
    },
    {
        "id": 1602,
        "code": "\tpublic WebServiceTemplateBuilder setDefaultUri(String defaultUri) {\n\t\tAssert.hasText(defaultUri, \"DefaultUri must not be empty\");\n\t\treturn setDestinationProvider(() -> URI.create(defaultUri));\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "default",
            "uri",
            "to",
            "be",
            "used",
            "on",
            "operations",
            "that",
            "do",
            "not",
            "have",
            "a",
            "uri",
            "parameter"
        ]
    },
    {
        "id": 1603,
        "code": "\tpublic WebServiceTemplateBuilder setDestinationProvider(DestinationProvider destinationProvider) {\n\t\tAssert.notNull(destinationProvider, \"DestinationProvider must not be null\");\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender, this.interceptors, this.internalCustomizers,\n\t\t\t\tthis.customizers, this.messageSenders, this.marshaller, this.unmarshaller, destinationProvider,\n\t\t\t\tthis.transformerFactoryClass, this.messageFactory);\n\t}",
        "summary_tokens": [
            "set",
            "the",
            "destination",
            "provider",
            "to",
            "use"
        ]
    },
    {
        "id": 1604,
        "code": "\tpublic <T extends WebServiceTemplate> T build(Class<T> webServiceTemplateClass) {\n\t\tAssert.notNull(webServiceTemplateClass, \"WebServiceTemplateClass must not be null\");\n\t\treturn configure(BeanUtils.instantiateClass(webServiceTemplateClass));\n\t}",
        "summary_tokens": [
            "build",
            "a",
            "new",
            "web",
            "service",
            "template",
            "instance",
            "of",
            "the",
            "specified",
            "type",
            "and",
            "configure",
            "it",
            "using",
            "this",
            "builder"
        ]
    },
    {
        "id": 1605,
        "code": "\tpublic <T extends WebServiceTemplate> T configure(T webServiceTemplate) {\n\t\tAssert.notNull(webServiceTemplate, \"WebServiceTemplate must not be null\");\n\t\tconfigureMessageSenders(webServiceTemplate);\n\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n\t\tapplyCustomizers(webServiceTemplate, this.internalCustomizers);\n\t\tmap.from(this.marshaller).to(webServiceTemplate::setMarshaller);\n\t\tmap.from(this.unmarshaller).to(webServiceTemplate::setUnmarshaller);\n\t\tmap.from(this.destinationProvider).to(webServiceTemplate::setDestinationProvider);\n\t\tmap.from(this.transformerFactoryClass).to(webServiceTemplate::setTransformerFactoryClass);\n\t\tmap.from(this.messageFactory).to(webServiceTemplate::setMessageFactory);\n\t\tif (!CollectionUtils.isEmpty(this.interceptors)) {\n\t\t\tSet<ClientInterceptor> merged = new LinkedHashSet<>(this.interceptors);\n\t\t\tif (webServiceTemplate.getInterceptors() != null) {\n\t\t\t\tmerged.addAll(Arrays.asList(webServiceTemplate.getInterceptors()));\n\t\t\t}\n\t\t\twebServiceTemplate.setInterceptors(merged.toArray(new ClientInterceptor[0]));\n\t\t}\n\t\tapplyCustomizers(webServiceTemplate, this.customizers);\n\t\treturn webServiceTemplate;\n\t}",
        "summary_tokens": [
            "configure",
            "the",
            "provided",
            "web",
            "service",
            "template",
            "instance",
            "using",
            "this",
            "builder"
        ]
    },
    {
        "id": 1606,
        "code": "\tpublic static String getVersion() {\n\t\treturn \"${springBootVersion}\";\n\t}",
        "summary_tokens": [
            "return",
            "the",
            "full",
            "version",
            "string",
            "of",
            "the",
            "present",
            "spring",
            "boot",
            "codebase"
        ]
    },
    {
        "id": 1607,
        "code": "\tprivate void removeSystemProperties() {\n\t\tMutablePropertySources sources = this.context.getEnvironment().getPropertySources();\n\t\tsources.remove(\"systemProperties\");\n\t\tsources.remove(\"systemEnvironment\");\n\t}",
        "summary_tokens": [
            "strict",
            "tests",
            "need",
            "a",
            "known",
            "set",
            "of",
            "properties",
            "so",
            "we",
            "remove",
            "system",
            "items",
            "which",
            "may",
            "be",
            "environment",
            "specific"
        ]
    },
    {
        "id": 1608,
        "code": "\tpublic static BootstrapRegistryInitializer withCustomClient(\n\t\t\tFunction<SubversionServerCertificate, SubversionClient> clientFactory) {\n\t\treturn (registry) -> registry.register(SubversionClient.class,\n\t\t\t\t(bootstrapContext) -> createSubversionClient(bootstrapContext, clientFactory));\n\t}",
        "summary_tokens": [
            "return",
            "a",
            "bootstrap",
            "registry",
            "initializer",
            "for",
            "the",
            "given",
            "client",
            "factory"
        ]
    }
]